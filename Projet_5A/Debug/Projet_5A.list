
Projet_5A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004064  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c8  080041ec  080041ec  000141ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000006c  08004bb4  08004bb4  00014bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000100  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d20  08004d20  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000001c  08004d20  08004d20  00014d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d3c  08004d3c  00014d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08004d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200000bc  08004dfc  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08004dfc  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a841  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000194a  00000000  00000000  0002a92d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  0002c278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0002cb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000365d  00000000  00000000  0002d2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008bec  00000000  00000000  0003092d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecd39  00000000  00000000  00039519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126252  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c354  00000000  00000000  001262a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000bc 	.word	0x200000bc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080041d4 	.word	0x080041d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000c0 	.word	0x200000c0
 80001c4:	080041d4 	.word	0x080041d4

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <selfrel_offset31>:
 80001ec:	6803      	ldr	r3, [r0, #0]
 80001ee:	005a      	lsls	r2, r3, #1
 80001f0:	bf4c      	ite	mi
 80001f2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80001f6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80001fa:	4418      	add	r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop

08000200 <search_EIT_table>:
 8000200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000204:	b329      	cbz	r1, 8000252 <search_EIT_table+0x52>
 8000206:	1e4f      	subs	r7, r1, #1
 8000208:	4604      	mov	r4, r0
 800020a:	4615      	mov	r5, r2
 800020c:	463e      	mov	r6, r7
 800020e:	f04f 0800 	mov.w	r8, #0
 8000212:	eb08 0106 	add.w	r1, r8, r6
 8000216:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800021a:	1049      	asrs	r1, r1, #1
 800021c:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000220:	4648      	mov	r0, r9
 8000222:	f7ff ffe3 	bl	80001ec <selfrel_offset31>
 8000226:	4603      	mov	r3, r0
 8000228:	00c8      	lsls	r0, r1, #3
 800022a:	3008      	adds	r0, #8
 800022c:	428f      	cmp	r7, r1
 800022e:	4420      	add	r0, r4
 8000230:	d009      	beq.n	8000246 <search_EIT_table+0x46>
 8000232:	42ab      	cmp	r3, r5
 8000234:	d809      	bhi.n	800024a <search_EIT_table+0x4a>
 8000236:	f7ff ffd9 	bl	80001ec <selfrel_offset31>
 800023a:	3801      	subs	r0, #1
 800023c:	42a8      	cmp	r0, r5
 800023e:	d20a      	bcs.n	8000256 <search_EIT_table+0x56>
 8000240:	f101 0801 	add.w	r8, r1, #1
 8000244:	e7e5      	b.n	8000212 <search_EIT_table+0x12>
 8000246:	42ab      	cmp	r3, r5
 8000248:	d905      	bls.n	8000256 <search_EIT_table+0x56>
 800024a:	4588      	cmp	r8, r1
 800024c:	d001      	beq.n	8000252 <search_EIT_table+0x52>
 800024e:	1e4e      	subs	r6, r1, #1
 8000250:	e7df      	b.n	8000212 <search_EIT_table+0x12>
 8000252:	f04f 0900 	mov.w	r9, #0
 8000256:	4648      	mov	r0, r9
 8000258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800025c <__gnu_unwind_get_pr_addr>:
 800025c:	2801      	cmp	r0, #1
 800025e:	d007      	beq.n	8000270 <__gnu_unwind_get_pr_addr+0x14>
 8000260:	2802      	cmp	r0, #2
 8000262:	d007      	beq.n	8000274 <__gnu_unwind_get_pr_addr+0x18>
 8000264:	4b04      	ldr	r3, [pc, #16]	; (8000278 <__gnu_unwind_get_pr_addr+0x1c>)
 8000266:	2800      	cmp	r0, #0
 8000268:	bf0c      	ite	eq
 800026a:	4618      	moveq	r0, r3
 800026c:	2000      	movne	r0, #0
 800026e:	4770      	bx	lr
 8000270:	4802      	ldr	r0, [pc, #8]	; (800027c <__gnu_unwind_get_pr_addr+0x20>)
 8000272:	4770      	bx	lr
 8000274:	4802      	ldr	r0, [pc, #8]	; (8000280 <__gnu_unwind_get_pr_addr+0x24>)
 8000276:	4770      	bx	lr
 8000278:	08000921 	.word	0x08000921
 800027c:	08000925 	.word	0x08000925
 8000280:	08000929 	.word	0x08000929

08000284 <get_eit_entry>:
 8000284:	b530      	push	{r4, r5, lr}
 8000286:	4b23      	ldr	r3, [pc, #140]	; (8000314 <get_eit_entry+0x90>)
 8000288:	b083      	sub	sp, #12
 800028a:	4604      	mov	r4, r0
 800028c:	1e8d      	subs	r5, r1, #2
 800028e:	b33b      	cbz	r3, 80002e0 <get_eit_entry+0x5c>
 8000290:	a901      	add	r1, sp, #4
 8000292:	4628      	mov	r0, r5
 8000294:	f3af 8000 	nop.w
 8000298:	b1e8      	cbz	r0, 80002d6 <get_eit_entry+0x52>
 800029a:	9901      	ldr	r1, [sp, #4]
 800029c:	462a      	mov	r2, r5
 800029e:	f7ff ffaf 	bl	8000200 <search_EIT_table>
 80002a2:	4601      	mov	r1, r0
 80002a4:	b1b8      	cbz	r0, 80002d6 <get_eit_entry+0x52>
 80002a6:	f7ff ffa1 	bl	80001ec <selfrel_offset31>
 80002aa:	684b      	ldr	r3, [r1, #4]
 80002ac:	64a0      	str	r0, [r4, #72]	; 0x48
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d02b      	beq.n	800030a <get_eit_entry+0x86>
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	f101 0004 	add.w	r0, r1, #4
 80002b8:	db23      	blt.n	8000302 <get_eit_entry+0x7e>
 80002ba:	f7ff ff97 	bl	80001ec <selfrel_offset31>
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80002c4:	6803      	ldr	r3, [r0, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	db10      	blt.n	80002ec <get_eit_entry+0x68>
 80002ca:	f7ff ff8f 	bl	80001ec <selfrel_offset31>
 80002ce:	6120      	str	r0, [r4, #16]
 80002d0:	2000      	movs	r0, #0
 80002d2:	b003      	add	sp, #12
 80002d4:	bd30      	pop	{r4, r5, pc}
 80002d6:	2300      	movs	r3, #0
 80002d8:	2009      	movs	r0, #9
 80002da:	6123      	str	r3, [r4, #16]
 80002dc:	b003      	add	sp, #12
 80002de:	bd30      	pop	{r4, r5, pc}
 80002e0:	490d      	ldr	r1, [pc, #52]	; (8000318 <get_eit_entry+0x94>)
 80002e2:	480e      	ldr	r0, [pc, #56]	; (800031c <get_eit_entry+0x98>)
 80002e4:	1a09      	subs	r1, r1, r0
 80002e6:	10c9      	asrs	r1, r1, #3
 80002e8:	9101      	str	r1, [sp, #4]
 80002ea:	e7d7      	b.n	800029c <get_eit_entry+0x18>
 80002ec:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80002f0:	f7ff ffb4 	bl	800025c <__gnu_unwind_get_pr_addr>
 80002f4:	2800      	cmp	r0, #0
 80002f6:	6120      	str	r0, [r4, #16]
 80002f8:	bf14      	ite	ne
 80002fa:	2000      	movne	r0, #0
 80002fc:	2009      	moveq	r0, #9
 80002fe:	b003      	add	sp, #12
 8000300:	bd30      	pop	{r4, r5, pc}
 8000302:	2301      	movs	r3, #1
 8000304:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000308:	e7dc      	b.n	80002c4 <get_eit_entry+0x40>
 800030a:	2300      	movs	r3, #0
 800030c:	6123      	str	r3, [r4, #16]
 800030e:	2005      	movs	r0, #5
 8000310:	e7df      	b.n	80002d2 <get_eit_entry+0x4e>
 8000312:	bf00      	nop
 8000314:	00000000 	.word	0x00000000
 8000318:	08004d20 	.word	0x08004d20
 800031c:	08004c20 	.word	0x08004c20

08000320 <restore_non_core_regs>:
 8000320:	6803      	ldr	r3, [r0, #0]
 8000322:	07da      	lsls	r2, r3, #31
 8000324:	b510      	push	{r4, lr}
 8000326:	4604      	mov	r4, r0
 8000328:	d406      	bmi.n	8000338 <restore_non_core_regs+0x18>
 800032a:	079b      	lsls	r3, r3, #30
 800032c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000330:	d509      	bpl.n	8000346 <restore_non_core_regs+0x26>
 8000332:	f000 fc4b 	bl	8000bcc <__gnu_Unwind_Restore_VFP_D>
 8000336:	6823      	ldr	r3, [r4, #0]
 8000338:	0759      	lsls	r1, r3, #29
 800033a:	d509      	bpl.n	8000350 <restore_non_core_regs+0x30>
 800033c:	071a      	lsls	r2, r3, #28
 800033e:	d50e      	bpl.n	800035e <restore_non_core_regs+0x3e>
 8000340:	06db      	lsls	r3, r3, #27
 8000342:	d513      	bpl.n	800036c <restore_non_core_regs+0x4c>
 8000344:	bd10      	pop	{r4, pc}
 8000346:	f000 fc39 	bl	8000bbc <__gnu_Unwind_Restore_VFP>
 800034a:	6823      	ldr	r3, [r4, #0]
 800034c:	0759      	lsls	r1, r3, #29
 800034e:	d4f5      	bmi.n	800033c <restore_non_core_regs+0x1c>
 8000350:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000354:	f000 fc42 	bl	8000bdc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000358:	6823      	ldr	r3, [r4, #0]
 800035a:	071a      	lsls	r2, r3, #28
 800035c:	d4f0      	bmi.n	8000340 <restore_non_core_regs+0x20>
 800035e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000362:	f000 fc43 	bl	8000bec <__gnu_Unwind_Restore_WMMXD>
 8000366:	6823      	ldr	r3, [r4, #0]
 8000368:	06db      	lsls	r3, r3, #27
 800036a:	d4eb      	bmi.n	8000344 <restore_non_core_regs+0x24>
 800036c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000374:	f000 bc7e 	b.w	8000c74 <__gnu_Unwind_Restore_WMMXC>

08000378 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000378:	4603      	mov	r3, r0
 800037a:	6800      	ldr	r0, [r0, #0]
 800037c:	b100      	cbz	r0, 8000380 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 800037e:	4418      	add	r0, r3
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop

08000384 <__gnu_unwind_24bit.isra.0>:
 8000384:	2009      	movs	r0, #9
 8000386:	4770      	bx	lr

08000388 <_Unwind_DebugHook>:
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop

0800038c <unwind_phase2>:
 800038c:	b570      	push	{r4, r5, r6, lr}
 800038e:	4604      	mov	r4, r0
 8000390:	460e      	mov	r6, r1
 8000392:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000394:	4620      	mov	r0, r4
 8000396:	f7ff ff75 	bl	8000284 <get_eit_entry>
 800039a:	4605      	mov	r5, r0
 800039c:	b988      	cbnz	r0, 80003c2 <unwind_phase2+0x36>
 800039e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80003a0:	6163      	str	r3, [r4, #20]
 80003a2:	4632      	mov	r2, r6
 80003a4:	6923      	ldr	r3, [r4, #16]
 80003a6:	4621      	mov	r1, r4
 80003a8:	2001      	movs	r0, #1
 80003aa:	4798      	blx	r3
 80003ac:	2808      	cmp	r0, #8
 80003ae:	d0f0      	beq.n	8000392 <unwind_phase2+0x6>
 80003b0:	2807      	cmp	r0, #7
 80003b2:	d106      	bne.n	80003c2 <unwind_phase2+0x36>
 80003b4:	4628      	mov	r0, r5
 80003b6:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80003b8:	f7ff ffe6 	bl	8000388 <_Unwind_DebugHook>
 80003bc:	1d30      	adds	r0, r6, #4
 80003be:	f000 fbf1 	bl	8000ba4 <__restore_core_regs>
 80003c2:	f003 fba4 	bl	8003b0e <abort>
 80003c6:	bf00      	nop

080003c8 <unwind_phase2_forced>:
 80003c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003cc:	1d0d      	adds	r5, r1, #4
 80003ce:	4606      	mov	r6, r0
 80003d0:	4614      	mov	r4, r2
 80003d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003d4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80003d8:	f10d 0c0c 	add.w	ip, sp, #12
 80003dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80003f0:	ad02      	add	r5, sp, #8
 80003f2:	68f7      	ldr	r7, [r6, #12]
 80003f4:	f8d6 8018 	ldr.w	r8, [r6, #24]
 80003f8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80003fc:	2300      	movs	r3, #0
 80003fe:	602b      	str	r3, [r5, #0]
 8000400:	e021      	b.n	8000446 <unwind_phase2_forced+0x7e>
 8000402:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000404:	6173      	str	r3, [r6, #20]
 8000406:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800040a:	4629      	mov	r1, r5
 800040c:	a87a      	add	r0, sp, #488	; 0x1e8
 800040e:	f003 fbcf 	bl	8003bb0 <memcpy>
 8000412:	6933      	ldr	r3, [r6, #16]
 8000414:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000416:	4631      	mov	r1, r6
 8000418:	4650      	mov	r0, sl
 800041a:	4798      	blx	r3
 800041c:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800041e:	e9cd 5800 	strd	r5, r8, [sp]
 8000422:	4621      	mov	r1, r4
 8000424:	646b      	str	r3, [r5, #68]	; 0x44
 8000426:	4681      	mov	r9, r0
 8000428:	4633      	mov	r3, r6
 800042a:	4632      	mov	r2, r6
 800042c:	2001      	movs	r0, #1
 800042e:	47b8      	blx	r7
 8000430:	4604      	mov	r4, r0
 8000432:	b9e8      	cbnz	r0, 8000470 <unwind_phase2_forced+0xa8>
 8000434:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000438:	a97a      	add	r1, sp, #488	; 0x1e8
 800043a:	4628      	mov	r0, r5
 800043c:	f003 fbb8 	bl	8003bb0 <memcpy>
 8000440:	f1b9 0f08 	cmp.w	r9, #8
 8000444:	d11b      	bne.n	800047e <unwind_phase2_forced+0xb6>
 8000446:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000448:	4630      	mov	r0, r6
 800044a:	f7ff ff1b 	bl	8000284 <get_eit_entry>
 800044e:	3409      	adds	r4, #9
 8000450:	fa5f fa84 	uxtb.w	sl, r4
 8000454:	4681      	mov	r9, r0
 8000456:	2800      	cmp	r0, #0
 8000458:	d0d3      	beq.n	8000402 <unwind_phase2_forced+0x3a>
 800045a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800045c:	f04a 0110 	orr.w	r1, sl, #16
 8000460:	e9cd 5800 	strd	r5, r8, [sp]
 8000464:	4632      	mov	r2, r6
 8000466:	646b      	str	r3, [r5, #68]	; 0x44
 8000468:	2001      	movs	r0, #1
 800046a:	4633      	mov	r3, r6
 800046c:	47b8      	blx	r7
 800046e:	b108      	cbz	r0, 8000474 <unwind_phase2_forced+0xac>
 8000470:	f04f 0909 	mov.w	r9, #9
 8000474:	4648      	mov	r0, r9
 8000476:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	f1b9 0f07 	cmp.w	r9, #7
 8000482:	d1f5      	bne.n	8000470 <unwind_phase2_forced+0xa8>
 8000484:	4620      	mov	r0, r4
 8000486:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000488:	f7ff ff7e 	bl	8000388 <_Unwind_DebugHook>
 800048c:	a803      	add	r0, sp, #12
 800048e:	f000 fb89 	bl	8000ba4 <__restore_core_regs>
 8000492:	bf00      	nop

08000494 <_Unwind_GetCFA>:
 8000494:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000496:	4770      	bx	lr

08000498 <__gnu_Unwind_RaiseException>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800049c:	640b      	str	r3, [r1, #64]	; 0x40
 800049e:	1d0e      	adds	r6, r1, #4
 80004a0:	460f      	mov	r7, r1
 80004a2:	4605      	mov	r5, r0
 80004a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80004a6:	b0f9      	sub	sp, #484	; 0x1e4
 80004a8:	ac01      	add	r4, sp, #4
 80004aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80004ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80004b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004b4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80004b8:	f04f 36ff 	mov.w	r6, #4294967295
 80004bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80004c0:	9600      	str	r6, [sp, #0]
 80004c2:	e006      	b.n	80004d2 <__gnu_Unwind_RaiseException+0x3a>
 80004c4:	692b      	ldr	r3, [r5, #16]
 80004c6:	466a      	mov	r2, sp
 80004c8:	4629      	mov	r1, r5
 80004ca:	4798      	blx	r3
 80004cc:	2808      	cmp	r0, #8
 80004ce:	4604      	mov	r4, r0
 80004d0:	d108      	bne.n	80004e4 <__gnu_Unwind_RaiseException+0x4c>
 80004d2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80004d4:	4628      	mov	r0, r5
 80004d6:	f7ff fed5 	bl	8000284 <get_eit_entry>
 80004da:	2800      	cmp	r0, #0
 80004dc:	d0f2      	beq.n	80004c4 <__gnu_Unwind_RaiseException+0x2c>
 80004de:	2009      	movs	r0, #9
 80004e0:	b079      	add	sp, #484	; 0x1e4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4668      	mov	r0, sp
 80004e6:	f7ff ff1b 	bl	8000320 <restore_non_core_regs>
 80004ea:	2c06      	cmp	r4, #6
 80004ec:	d1f7      	bne.n	80004de <__gnu_Unwind_RaiseException+0x46>
 80004ee:	4639      	mov	r1, r7
 80004f0:	4628      	mov	r0, r5
 80004f2:	f7ff ff4b 	bl	800038c <unwind_phase2>
 80004f6:	bf00      	nop

080004f8 <__gnu_Unwind_ForcedUnwind>:
 80004f8:	b430      	push	{r4, r5}
 80004fa:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80004fc:	60c1      	str	r1, [r0, #12]
 80004fe:	6182      	str	r2, [r0, #24]
 8000500:	4619      	mov	r1, r3
 8000502:	641d      	str	r5, [r3, #64]	; 0x40
 8000504:	2200      	movs	r2, #0
 8000506:	bc30      	pop	{r4, r5}
 8000508:	e75e      	b.n	80003c8 <unwind_phase2_forced>
 800050a:	bf00      	nop

0800050c <__gnu_Unwind_Resume>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	68c6      	ldr	r6, [r0, #12]
 8000510:	6943      	ldr	r3, [r0, #20]
 8000512:	640b      	str	r3, [r1, #64]	; 0x40
 8000514:	b9ae      	cbnz	r6, 8000542 <__gnu_Unwind_Resume+0x36>
 8000516:	6903      	ldr	r3, [r0, #16]
 8000518:	460a      	mov	r2, r1
 800051a:	4604      	mov	r4, r0
 800051c:	460d      	mov	r5, r1
 800051e:	4601      	mov	r1, r0
 8000520:	2002      	movs	r0, #2
 8000522:	4798      	blx	r3
 8000524:	2807      	cmp	r0, #7
 8000526:	d005      	beq.n	8000534 <__gnu_Unwind_Resume+0x28>
 8000528:	2808      	cmp	r0, #8
 800052a:	d10f      	bne.n	800054c <__gnu_Unwind_Resume+0x40>
 800052c:	4629      	mov	r1, r5
 800052e:	4620      	mov	r0, r4
 8000530:	f7ff ff2c 	bl	800038c <unwind_phase2>
 8000534:	4630      	mov	r0, r6
 8000536:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000538:	f7ff ff26 	bl	8000388 <_Unwind_DebugHook>
 800053c:	1d28      	adds	r0, r5, #4
 800053e:	f000 fb31 	bl	8000ba4 <__restore_core_regs>
 8000542:	2201      	movs	r2, #1
 8000544:	f7ff ff40 	bl	80003c8 <unwind_phase2_forced>
 8000548:	f003 fae1 	bl	8003b0e <abort>
 800054c:	f003 fadf 	bl	8003b0e <abort>

08000550 <__gnu_Unwind_Resume_or_Rethrow>:
 8000550:	68c2      	ldr	r2, [r0, #12]
 8000552:	b11a      	cbz	r2, 800055c <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000554:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000556:	640a      	str	r2, [r1, #64]	; 0x40
 8000558:	2200      	movs	r2, #0
 800055a:	e735      	b.n	80003c8 <unwind_phase2_forced>
 800055c:	e79c      	b.n	8000498 <__gnu_Unwind_RaiseException>
 800055e:	bf00      	nop

08000560 <_Unwind_Complete>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <_Unwind_DeleteException>:
 8000564:	6883      	ldr	r3, [r0, #8]
 8000566:	4601      	mov	r1, r0
 8000568:	b10b      	cbz	r3, 800056e <_Unwind_DeleteException+0xa>
 800056a:	2001      	movs	r0, #1
 800056c:	4718      	bx	r3
 800056e:	4770      	bx	lr

08000570 <_Unwind_VRS_Get>:
 8000570:	2901      	cmp	r1, #1
 8000572:	d012      	beq.n	800059a <_Unwind_VRS_Get+0x2a>
 8000574:	d809      	bhi.n	800058a <_Unwind_VRS_Get+0x1a>
 8000576:	b973      	cbnz	r3, 8000596 <_Unwind_VRS_Get+0x26>
 8000578:	2a0f      	cmp	r2, #15
 800057a:	d80c      	bhi.n	8000596 <_Unwind_VRS_Get+0x26>
 800057c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000580:	4618      	mov	r0, r3
 8000582:	6853      	ldr	r3, [r2, #4]
 8000584:	9a00      	ldr	r2, [sp, #0]
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4770      	bx	lr
 800058a:	3903      	subs	r1, #3
 800058c:	2901      	cmp	r1, #1
 800058e:	bf94      	ite	ls
 8000590:	2001      	movls	r0, #1
 8000592:	2002      	movhi	r0, #2
 8000594:	4770      	bx	lr
 8000596:	2002      	movs	r0, #2
 8000598:	4770      	bx	lr
 800059a:	4608      	mov	r0, r1
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <_Unwind_GetGR>:
 80005a0:	b510      	push	{r4, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	2300      	movs	r3, #0
 80005a6:	ac03      	add	r4, sp, #12
 80005a8:	460a      	mov	r2, r1
 80005aa:	9400      	str	r4, [sp, #0]
 80005ac:	4619      	mov	r1, r3
 80005ae:	f7ff ffdf 	bl	8000570 <_Unwind_VRS_Get>
 80005b2:	9803      	ldr	r0, [sp, #12]
 80005b4:	b004      	add	sp, #16
 80005b6:	bd10      	pop	{r4, pc}

080005b8 <_Unwind_VRS_Set>:
 80005b8:	2901      	cmp	r1, #1
 80005ba:	d012      	beq.n	80005e2 <_Unwind_VRS_Set+0x2a>
 80005bc:	d809      	bhi.n	80005d2 <_Unwind_VRS_Set+0x1a>
 80005be:	b973      	cbnz	r3, 80005de <_Unwind_VRS_Set+0x26>
 80005c0:	2a0f      	cmp	r2, #15
 80005c2:	d80c      	bhi.n	80005de <_Unwind_VRS_Set+0x26>
 80005c4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80005c8:	9a00      	ldr	r2, [sp, #0]
 80005ca:	6812      	ldr	r2, [r2, #0]
 80005cc:	6042      	str	r2, [r0, #4]
 80005ce:	4618      	mov	r0, r3
 80005d0:	4770      	bx	lr
 80005d2:	3903      	subs	r1, #3
 80005d4:	2901      	cmp	r1, #1
 80005d6:	bf94      	ite	ls
 80005d8:	2001      	movls	r0, #1
 80005da:	2002      	movhi	r0, #2
 80005dc:	4770      	bx	lr
 80005de:	2002      	movs	r0, #2
 80005e0:	4770      	bx	lr
 80005e2:	4608      	mov	r0, r1
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <_Unwind_SetGR>:
 80005e8:	b510      	push	{r4, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	2300      	movs	r3, #0
 80005ee:	ac03      	add	r4, sp, #12
 80005f0:	9203      	str	r2, [sp, #12]
 80005f2:	9400      	str	r4, [sp, #0]
 80005f4:	460a      	mov	r2, r1
 80005f6:	4619      	mov	r1, r3
 80005f8:	f7ff ffde 	bl	80005b8 <_Unwind_VRS_Set>
 80005fc:	b004      	add	sp, #16
 80005fe:	bd10      	pop	{r4, pc}

08000600 <__gnu_Unwind_Backtrace>:
 8000600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000602:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000604:	6413      	str	r3, [r2, #64]	; 0x40
 8000606:	1d15      	adds	r5, r2, #4
 8000608:	468c      	mov	ip, r1
 800060a:	4606      	mov	r6, r0
 800060c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060e:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000612:	ac17      	add	r4, sp, #92	; 0x5c
 8000614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000622:	f04f 37ff 	mov.w	r7, #4294967295
 8000626:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800062a:	4665      	mov	r5, ip
 800062c:	9716      	str	r7, [sp, #88]	; 0x58
 800062e:	e010      	b.n	8000652 <__gnu_Unwind_Backtrace+0x52>
 8000630:	f7ff ffda 	bl	80005e8 <_Unwind_SetGR>
 8000634:	4629      	mov	r1, r5
 8000636:	a816      	add	r0, sp, #88	; 0x58
 8000638:	47b0      	blx	r6
 800063a:	4603      	mov	r3, r0
 800063c:	aa16      	add	r2, sp, #88	; 0x58
 800063e:	4669      	mov	r1, sp
 8000640:	2008      	movs	r0, #8
 8000642:	b983      	cbnz	r3, 8000666 <__gnu_Unwind_Backtrace+0x66>
 8000644:	9b04      	ldr	r3, [sp, #16]
 8000646:	4798      	blx	r3
 8000648:	2805      	cmp	r0, #5
 800064a:	4604      	mov	r4, r0
 800064c:	d00c      	beq.n	8000668 <__gnu_Unwind_Backtrace+0x68>
 800064e:	2809      	cmp	r0, #9
 8000650:	d009      	beq.n	8000666 <__gnu_Unwind_Backtrace+0x66>
 8000652:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000654:	4668      	mov	r0, sp
 8000656:	f7ff fe15 	bl	8000284 <get_eit_entry>
 800065a:	4603      	mov	r3, r0
 800065c:	466a      	mov	r2, sp
 800065e:	210c      	movs	r1, #12
 8000660:	a816      	add	r0, sp, #88	; 0x58
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0e4      	beq.n	8000630 <__gnu_Unwind_Backtrace+0x30>
 8000666:	2409      	movs	r4, #9
 8000668:	a816      	add	r0, sp, #88	; 0x58
 800066a:	f7ff fe59 	bl	8000320 <restore_non_core_regs>
 800066e:	4620      	mov	r0, r4
 8000670:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000676:	bf00      	nop

08000678 <__gnu_unwind_pr_common>:
 8000678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800067c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800067e:	b089      	sub	sp, #36	; 0x24
 8000680:	460d      	mov	r5, r1
 8000682:	f854 1b04 	ldr.w	r1, [r4], #4
 8000686:	9406      	str	r4, [sp, #24]
 8000688:	4617      	mov	r7, r2
 800068a:	f000 0803 	and.w	r8, r0, #3
 800068e:	461e      	mov	r6, r3
 8000690:	2b00      	cmp	r3, #0
 8000692:	d079      	beq.n	8000788 <__gnu_unwind_pr_common+0x110>
 8000694:	0c0b      	lsrs	r3, r1, #16
 8000696:	b2da      	uxtb	r2, r3
 8000698:	0409      	lsls	r1, r1, #16
 800069a:	f88d 301d 	strb.w	r3, [sp, #29]
 800069e:	2302      	movs	r3, #2
 80006a0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80006a4:	9105      	str	r1, [sp, #20]
 80006a6:	f88d 301c 	strb.w	r3, [sp, #28]
 80006aa:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80006ac:	f1b8 0f02 	cmp.w	r8, #2
 80006b0:	bf08      	it	eq
 80006b2:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80006b4:	f013 0301 	ands.w	r3, r3, #1
 80006b8:	d00c      	beq.n	80006d4 <__gnu_unwind_pr_common+0x5c>
 80006ba:	4638      	mov	r0, r7
 80006bc:	a905      	add	r1, sp, #20
 80006be:	f000 fb73 	bl	8000da8 <__gnu_unwind_execute>
 80006c2:	b918      	cbnz	r0, 80006cc <__gnu_unwind_pr_common+0x54>
 80006c4:	2008      	movs	r0, #8
 80006c6:	b009      	add	sp, #36	; 0x24
 80006c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006cc:	2009      	movs	r0, #9
 80006ce:	b009      	add	sp, #36	; 0x24
 80006d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006d4:	f8d4 a000 	ldr.w	sl, [r4]
 80006d8:	f1ba 0f00 	cmp.w	sl, #0
 80006dc:	d0ed      	beq.n	80006ba <__gnu_unwind_pr_common+0x42>
 80006de:	9301      	str	r3, [sp, #4]
 80006e0:	f000 0308 	and.w	r3, r0, #8
 80006e4:	9302      	str	r3, [sp, #8]
 80006e6:	2e02      	cmp	r6, #2
 80006e8:	d04a      	beq.n	8000780 <__gnu_unwind_pr_common+0x108>
 80006ea:	f8b4 a000 	ldrh.w	sl, [r4]
 80006ee:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80006f2:	3404      	adds	r4, #4
 80006f4:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80006f6:	f029 0b01 	bic.w	fp, r9, #1
 80006fa:	210f      	movs	r1, #15
 80006fc:	4638      	mov	r0, r7
 80006fe:	4493      	add	fp, r2
 8000700:	f7ff ff4e 	bl	80005a0 <_Unwind_GetGR>
 8000704:	4583      	cmp	fp, r0
 8000706:	d839      	bhi.n	800077c <__gnu_unwind_pr_common+0x104>
 8000708:	f02a 0201 	bic.w	r2, sl, #1
 800070c:	445a      	add	r2, fp
 800070e:	4282      	cmp	r2, r0
 8000710:	bf94      	ite	ls
 8000712:	2000      	movls	r0, #0
 8000714:	2001      	movhi	r0, #1
 8000716:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	f00a 0a01 	and.w	sl, sl, #1
 8000722:	ea43 030a 	orr.w	r3, r3, sl
 8000726:	2b01      	cmp	r3, #1
 8000728:	d049      	beq.n	80007be <__gnu_unwind_pr_common+0x146>
 800072a:	2b02      	cmp	r3, #2
 800072c:	d032      	beq.n	8000794 <__gnu_unwind_pr_common+0x11c>
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1cc      	bne.n	80006cc <__gnu_unwind_pr_common+0x54>
 8000732:	f1b8 0f00 	cmp.w	r8, #0
 8000736:	d002      	beq.n	800073e <__gnu_unwind_pr_common+0xc6>
 8000738:	2800      	cmp	r0, #0
 800073a:	f040 80cd 	bne.w	80008d8 <__gnu_unwind_pr_common+0x260>
 800073e:	3404      	adds	r4, #4
 8000740:	f8d4 a000 	ldr.w	sl, [r4]
 8000744:	f1ba 0f00 	cmp.w	sl, #0
 8000748:	d1cd      	bne.n	80006e6 <__gnu_unwind_pr_common+0x6e>
 800074a:	a905      	add	r1, sp, #20
 800074c:	4638      	mov	r0, r7
 800074e:	f000 fb2b 	bl	8000da8 <__gnu_unwind_execute>
 8000752:	2800      	cmp	r0, #0
 8000754:	d1ba      	bne.n	80006cc <__gnu_unwind_pr_common+0x54>
 8000756:	9b01      	ldr	r3, [sp, #4]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d0b3      	beq.n	80006c4 <__gnu_unwind_pr_common+0x4c>
 800075c:	210f      	movs	r1, #15
 800075e:	4638      	mov	r0, r7
 8000760:	f7ff ff1e 	bl	80005a0 <_Unwind_GetGR>
 8000764:	210e      	movs	r1, #14
 8000766:	4602      	mov	r2, r0
 8000768:	4638      	mov	r0, r7
 800076a:	f7ff ff3d 	bl	80005e8 <_Unwind_SetGR>
 800076e:	4638      	mov	r0, r7
 8000770:	4a6a      	ldr	r2, [pc, #424]	; (800091c <__gnu_unwind_pr_common+0x2a4>)
 8000772:	210f      	movs	r1, #15
 8000774:	f7ff ff38 	bl	80005e8 <_Unwind_SetGR>
 8000778:	2007      	movs	r0, #7
 800077a:	e7a8      	b.n	80006ce <__gnu_unwind_pr_common+0x56>
 800077c:	2000      	movs	r0, #0
 800077e:	e7ca      	b.n	8000716 <__gnu_unwind_pr_common+0x9e>
 8000780:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000784:	3408      	adds	r4, #8
 8000786:	e7b5      	b.n	80006f4 <__gnu_unwind_pr_common+0x7c>
 8000788:	0209      	lsls	r1, r1, #8
 800078a:	2303      	movs	r3, #3
 800078c:	9105      	str	r1, [sp, #20]
 800078e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000792:	e78a      	b.n	80006aa <__gnu_unwind_pr_common+0x32>
 8000794:	6823      	ldr	r3, [r4, #0]
 8000796:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800079a:	f1b8 0f00 	cmp.w	r8, #0
 800079e:	d145      	bne.n	800082c <__gnu_unwind_pr_common+0x1b4>
 80007a0:	b128      	cbz	r0, 80007ae <__gnu_unwind_pr_common+0x136>
 80007a2:	9a02      	ldr	r2, [sp, #8]
 80007a4:	2a00      	cmp	r2, #0
 80007a6:	d05c      	beq.n	8000862 <__gnu_unwind_pr_common+0x1ea>
 80007a8:	f1bb 0f00 	cmp.w	fp, #0
 80007ac:	d074      	beq.n	8000898 <__gnu_unwind_pr_common+0x220>
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	da00      	bge.n	80007b4 <__gnu_unwind_pr_common+0x13c>
 80007b2:	3404      	adds	r4, #4
 80007b4:	f10b 0b01 	add.w	fp, fp, #1
 80007b8:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 80007bc:	e7c0      	b.n	8000740 <__gnu_unwind_pr_common+0xc8>
 80007be:	f1b8 0f00 	cmp.w	r8, #0
 80007c2:	d119      	bne.n	80007f8 <__gnu_unwind_pr_common+0x180>
 80007c4:	b1b0      	cbz	r0, 80007f4 <__gnu_unwind_pr_common+0x17c>
 80007c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80007ca:	1c99      	adds	r1, r3, #2
 80007cc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80007d0:	f43f af7c 	beq.w	80006cc <__gnu_unwind_pr_common+0x54>
 80007d4:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80007d8:	3301      	adds	r3, #1
 80007da:	9104      	str	r1, [sp, #16]
 80007dc:	f000 8090 	beq.w	8000900 <__gnu_unwind_pr_common+0x288>
 80007e0:	1d20      	adds	r0, r4, #4
 80007e2:	f7ff fdc9 	bl	8000378 <_Unwind_decode_typeinfo_ptr.isra.0>
 80007e6:	ab04      	add	r3, sp, #16
 80007e8:	4601      	mov	r1, r0
 80007ea:	4628      	mov	r0, r5
 80007ec:	f002 fcca 	bl	8003184 <__cxa_type_match>
 80007f0:	2800      	cmp	r0, #0
 80007f2:	d15b      	bne.n	80008ac <__gnu_unwind_pr_common+0x234>
 80007f4:	3408      	adds	r4, #8
 80007f6:	e7a3      	b.n	8000740 <__gnu_unwind_pr_common+0xc8>
 80007f8:	210d      	movs	r1, #13
 80007fa:	4638      	mov	r0, r7
 80007fc:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000800:	f7ff fece 	bl	80005a0 <_Unwind_GetGR>
 8000804:	4581      	cmp	r9, r0
 8000806:	d1f5      	bne.n	80007f4 <__gnu_unwind_pr_common+0x17c>
 8000808:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800080a:	429c      	cmp	r4, r3
 800080c:	d1f2      	bne.n	80007f4 <__gnu_unwind_pr_common+0x17c>
 800080e:	4620      	mov	r0, r4
 8000810:	f7ff fcec 	bl	80001ec <selfrel_offset31>
 8000814:	210f      	movs	r1, #15
 8000816:	4602      	mov	r2, r0
 8000818:	4638      	mov	r0, r7
 800081a:	f7ff fee5 	bl	80005e8 <_Unwind_SetGR>
 800081e:	4638      	mov	r0, r7
 8000820:	462a      	mov	r2, r5
 8000822:	2100      	movs	r1, #0
 8000824:	f7ff fee0 	bl	80005e8 <_Unwind_SetGR>
 8000828:	2007      	movs	r0, #7
 800082a:	e750      	b.n	80006ce <__gnu_unwind_pr_common+0x56>
 800082c:	210d      	movs	r1, #13
 800082e:	4638      	mov	r0, r7
 8000830:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000834:	f7ff feb4 	bl	80005a0 <_Unwind_GetGR>
 8000838:	4581      	cmp	r9, r0
 800083a:	d001      	beq.n	8000840 <__gnu_unwind_pr_common+0x1c8>
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	e7b6      	b.n	80007ae <__gnu_unwind_pr_common+0x136>
 8000840:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000842:	429c      	cmp	r4, r3
 8000844:	d1fa      	bne.n	800083c <__gnu_unwind_pr_common+0x1c4>
 8000846:	2204      	movs	r2, #4
 8000848:	2100      	movs	r1, #0
 800084a:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
 800084e:	18a3      	adds	r3, r4, r2
 8000850:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000854:	636b      	str	r3, [r5, #52]	; 0x34
 8000856:	6823      	ldr	r3, [r4, #0]
 8000858:	428b      	cmp	r3, r1
 800085a:	db59      	blt.n	8000910 <__gnu_unwind_pr_common+0x298>
 800085c:	2301      	movs	r3, #1
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	e7a8      	b.n	80007b4 <__gnu_unwind_pr_common+0x13c>
 8000862:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000866:	f8cd 800c 	str.w	r8, [sp, #12]
 800086a:	f104 0a04 	add.w	sl, r4, #4
 800086e:	46b0      	mov	r8, r6
 8000870:	4691      	mov	r9, r2
 8000872:	461e      	mov	r6, r3
 8000874:	e00d      	b.n	8000892 <__gnu_unwind_pr_common+0x21a>
 8000876:	9604      	str	r6, [sp, #16]
 8000878:	f7ff fd7e 	bl	8000378 <_Unwind_decode_typeinfo_ptr.isra.0>
 800087c:	ab04      	add	r3, sp, #16
 800087e:	4601      	mov	r1, r0
 8000880:	2200      	movs	r2, #0
 8000882:	4628      	mov	r0, r5
 8000884:	f002 fc7e 	bl	8003184 <__cxa_type_match>
 8000888:	f109 0901 	add.w	r9, r9, #1
 800088c:	f10a 0a04 	add.w	sl, sl, #4
 8000890:	b9e8      	cbnz	r0, 80008ce <__gnu_unwind_pr_common+0x256>
 8000892:	45d9      	cmp	r9, fp
 8000894:	4650      	mov	r0, sl
 8000896:	d1ee      	bne.n	8000876 <__gnu_unwind_pr_common+0x1fe>
 8000898:	4638      	mov	r0, r7
 800089a:	210d      	movs	r1, #13
 800089c:	f7ff fe80 	bl	80005a0 <_Unwind_GetGR>
 80008a0:	9b04      	ldr	r3, [sp, #16]
 80008a2:	6228      	str	r0, [r5, #32]
 80008a4:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 80008a8:	2006      	movs	r0, #6
 80008aa:	e710      	b.n	80006ce <__gnu_unwind_pr_common+0x56>
 80008ac:	4681      	mov	r9, r0
 80008ae:	210d      	movs	r1, #13
 80008b0:	4638      	mov	r0, r7
 80008b2:	f7ff fe75 	bl	80005a0 <_Unwind_GetGR>
 80008b6:	f1b9 0f02 	cmp.w	r9, #2
 80008ba:	6228      	str	r0, [r5, #32]
 80008bc:	d125      	bne.n	800090a <__gnu_unwind_pr_common+0x292>
 80008be:	462b      	mov	r3, r5
 80008c0:	9a04      	ldr	r2, [sp, #16]
 80008c2:	f843 2f2c 	str.w	r2, [r3, #44]!
 80008c6:	626b      	str	r3, [r5, #36]	; 0x24
 80008c8:	62ac      	str	r4, [r5, #40]	; 0x28
 80008ca:	2006      	movs	r0, #6
 80008cc:	e6ff      	b.n	80006ce <__gnu_unwind_pr_common+0x56>
 80008ce:	4646      	mov	r6, r8
 80008d0:	6823      	ldr	r3, [r4, #0]
 80008d2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80008d6:	e76a      	b.n	80007ae <__gnu_unwind_pr_common+0x136>
 80008d8:	4620      	mov	r0, r4
 80008da:	f7ff fc87 	bl	80001ec <selfrel_offset31>
 80008de:	3404      	adds	r4, #4
 80008e0:	4602      	mov	r2, r0
 80008e2:	63ac      	str	r4, [r5, #56]	; 0x38
 80008e4:	4628      	mov	r0, r5
 80008e6:	4614      	mov	r4, r2
 80008e8:	f002 fcaa 	bl	8003240 <__cxa_begin_cleanup>
 80008ec:	2800      	cmp	r0, #0
 80008ee:	f43f aeed 	beq.w	80006cc <__gnu_unwind_pr_common+0x54>
 80008f2:	4638      	mov	r0, r7
 80008f4:	4622      	mov	r2, r4
 80008f6:	210f      	movs	r1, #15
 80008f8:	f7ff fe76 	bl	80005e8 <_Unwind_SetGR>
 80008fc:	2007      	movs	r0, #7
 80008fe:	e6e6      	b.n	80006ce <__gnu_unwind_pr_common+0x56>
 8000900:	4638      	mov	r0, r7
 8000902:	210d      	movs	r1, #13
 8000904:	f7ff fe4c 	bl	80005a0 <_Unwind_GetGR>
 8000908:	6228      	str	r0, [r5, #32]
 800090a:	9b04      	ldr	r3, [sp, #16]
 800090c:	626b      	str	r3, [r5, #36]	; 0x24
 800090e:	e7db      	b.n	80008c8 <__gnu_unwind_pr_common+0x250>
 8000910:	f10b 0001 	add.w	r0, fp, #1
 8000914:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000918:	e77a      	b.n	8000810 <__gnu_unwind_pr_common+0x198>
 800091a:	bf00      	nop
 800091c:	0800394f 	.word	0x0800394f

08000920 <__aeabi_unwind_cpp_pr0>:
 8000920:	2300      	movs	r3, #0
 8000922:	e6a9      	b.n	8000678 <__gnu_unwind_pr_common>

08000924 <__aeabi_unwind_cpp_pr1>:
 8000924:	2301      	movs	r3, #1
 8000926:	e6a7      	b.n	8000678 <__gnu_unwind_pr_common>

08000928 <__aeabi_unwind_cpp_pr2>:
 8000928:	2302      	movs	r3, #2
 800092a:	e6a5      	b.n	8000678 <__gnu_unwind_pr_common>

0800092c <_Unwind_VRS_Pop>:
 800092c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000930:	4606      	mov	r6, r0
 8000932:	b0c3      	sub	sp, #268	; 0x10c
 8000934:	4615      	mov	r5, r2
 8000936:	461c      	mov	r4, r3
 8000938:	2904      	cmp	r1, #4
 800093a:	f200 80b9 	bhi.w	8000ab0 <_Unwind_VRS_Pop+0x184>
 800093e:	e8df f001 	tbb	[pc, r1]
 8000942:	539a      	.short	0x539a
 8000944:	29b7      	.short	0x29b7
 8000946:	03          	.byte	0x03
 8000947:	00          	.byte	0x00
 8000948:	2c00      	cmp	r4, #0
 800094a:	f040 80b1 	bne.w	8000ab0 <_Unwind_VRS_Pop+0x184>
 800094e:	2a10      	cmp	r2, #16
 8000950:	f200 80ae 	bhi.w	8000ab0 <_Unwind_VRS_Pop+0x184>
 8000954:	6803      	ldr	r3, [r0, #0]
 8000956:	06d8      	lsls	r0, r3, #27
 8000958:	f100 80f3 	bmi.w	8000b42 <_Unwind_VRS_Pop+0x216>
 800095c:	af20      	add	r7, sp, #128	; 0x80
 800095e:	4638      	mov	r0, r7
 8000960:	f000 f992 	bl	8000c88 <__gnu_Unwind_Save_WMMXC>
 8000964:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8000966:	2300      	movs	r3, #0
 8000968:	2401      	movs	r4, #1
 800096a:	fa04 f203 	lsl.w	r2, r4, r3
 800096e:	422a      	tst	r2, r5
 8000970:	4601      	mov	r1, r0
 8000972:	d004      	beq.n	800097e <_Unwind_VRS_Pop+0x52>
 8000974:	f851 2b04 	ldr.w	r2, [r1], #4
 8000978:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 800097c:	4608      	mov	r0, r1
 800097e:	3301      	adds	r3, #1
 8000980:	2b04      	cmp	r3, #4
 8000982:	d1f2      	bne.n	800096a <_Unwind_VRS_Pop+0x3e>
 8000984:	63b0      	str	r0, [r6, #56]	; 0x38
 8000986:	4638      	mov	r0, r7
 8000988:	f000 f974 	bl	8000c74 <__gnu_Unwind_Restore_WMMXC>
 800098c:	2000      	movs	r0, #0
 800098e:	b043      	add	sp, #268	; 0x10c
 8000990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000994:	2c03      	cmp	r4, #3
 8000996:	f040 808b 	bne.w	8000ab0 <_Unwind_VRS_Pop+0x184>
 800099a:	b294      	uxth	r4, r2
 800099c:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 80009a0:	2b10      	cmp	r3, #16
 80009a2:	ea4f 4512 	mov.w	r5, r2, lsr #16
 80009a6:	f200 8083 	bhi.w	8000ab0 <_Unwind_VRS_Pop+0x184>
 80009aa:	6803      	ldr	r3, [r0, #0]
 80009ac:	071f      	lsls	r7, r3, #28
 80009ae:	f100 80d0 	bmi.w	8000b52 <_Unwind_VRS_Pop+0x226>
 80009b2:	af20      	add	r7, sp, #128	; 0x80
 80009b4:	4638      	mov	r0, r7
 80009b6:	f000 f93b 	bl	8000c30 <__gnu_Unwind_Save_WMMXD>
 80009ba:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 80009be:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 80009c0:	b154      	cbz	r4, 80009d8 <_Unwind_VRS_Pop+0xac>
 80009c2:	460b      	mov	r3, r1
 80009c4:	1ae8      	subs	r0, r5, r3
 80009c6:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80009ca:	00e4      	lsls	r4, r4, #3
 80009cc:	581a      	ldr	r2, [r3, r0]
 80009ce:	f843 2b04 	str.w	r2, [r3], #4
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d1fa      	bne.n	80009cc <_Unwind_VRS_Pop+0xa0>
 80009d6:	4425      	add	r5, r4
 80009d8:	4638      	mov	r0, r7
 80009da:	63b5      	str	r5, [r6, #56]	; 0x38
 80009dc:	f000 f906 	bl	8000bec <__gnu_Unwind_Restore_WMMXD>
 80009e0:	2000      	movs	r0, #0
 80009e2:	b043      	add	sp, #268	; 0x10c
 80009e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009e8:	2c01      	cmp	r4, #1
 80009ea:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80009ee:	b295      	uxth	r5, r2
 80009f0:	d05a      	beq.n	8000aa8 <_Unwind_VRS_Pop+0x17c>
 80009f2:	2c05      	cmp	r4, #5
 80009f4:	d15c      	bne.n	8000ab0 <_Unwind_VRS_Pop+0x184>
 80009f6:	eb08 0905 	add.w	r9, r8, r5
 80009fa:	f1b9 0f20 	cmp.w	r9, #32
 80009fe:	d857      	bhi.n	8000ab0 <_Unwind_VRS_Pop+0x184>
 8000a00:	f1b8 0f0f 	cmp.w	r8, #15
 8000a04:	d977      	bls.n	8000af6 <_Unwind_VRS_Pop+0x1ca>
 8000a06:	46a9      	mov	r9, r5
 8000a08:	2d00      	cmp	r5, #0
 8000a0a:	f040 8088 	bne.w	8000b1e <_Unwind_VRS_Pop+0x1f2>
 8000a0e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000a10:	b36d      	cbz	r5, 8000a6e <_Unwind_VRS_Pop+0x142>
 8000a12:	af20      	add	r7, sp, #128	; 0x80
 8000a14:	f04f 0900 	mov.w	r9, #0
 8000a18:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000a1c:	3f04      	subs	r7, #4
 8000a1e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000a22:	f853 1b04 	ldr.w	r1, [r3], #4
 8000a26:	f847 1f04 	str.w	r1, [r7, #4]!
 8000a2a:	42ab      	cmp	r3, r5
 8000a2c:	d1f9      	bne.n	8000a22 <_Unwind_VRS_Pop+0xf6>
 8000a2e:	f1b9 0f00 	cmp.w	r9, #0
 8000a32:	d00f      	beq.n	8000a54 <_Unwind_VRS_Pop+0x128>
 8000a34:	466f      	mov	r7, sp
 8000a36:	4641      	mov	r1, r8
 8000a38:	2910      	cmp	r1, #16
 8000a3a:	bf38      	it	cc
 8000a3c:	2110      	movcc	r1, #16
 8000a3e:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000a42:	3984      	subs	r1, #132	; 0x84
 8000a44:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000a48:	f853 0b04 	ldr.w	r0, [r3], #4
 8000a4c:	f841 0f04 	str.w	r0, [r1, #4]!
 8000a50:	42ab      	cmp	r3, r5
 8000a52:	d1f9      	bne.n	8000a48 <_Unwind_VRS_Pop+0x11c>
 8000a54:	2c01      	cmp	r4, #1
 8000a56:	f000 8084 	beq.w	8000b62 <_Unwind_VRS_Pop+0x236>
 8000a5a:	f1b8 0f0f 	cmp.w	r8, #15
 8000a5e:	63b5      	str	r5, [r6, #56]	; 0x38
 8000a60:	d945      	bls.n	8000aee <_Unwind_VRS_Pop+0x1c2>
 8000a62:	f1b9 0f00 	cmp.w	r9, #0
 8000a66:	d002      	beq.n	8000a6e <_Unwind_VRS_Pop+0x142>
 8000a68:	4668      	mov	r0, sp
 8000a6a:	f000 f8b7 	bl	8000bdc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000a6e:	2000      	movs	r0, #0
 8000a70:	b043      	add	sp, #268	; 0x10c
 8000a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a76:	b9dc      	cbnz	r4, 8000ab0 <_Unwind_VRS_Pop+0x184>
 8000a78:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8000a7a:	4623      	mov	r3, r4
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	b294      	uxth	r4, r2
 8000a80:	f106 0c04 	add.w	ip, r6, #4
 8000a84:	fa00 f203 	lsl.w	r2, r0, r3
 8000a88:	4222      	tst	r2, r4
 8000a8a:	4639      	mov	r1, r7
 8000a8c:	d004      	beq.n	8000a98 <_Unwind_VRS_Pop+0x16c>
 8000a8e:	f851 2b04 	ldr.w	r2, [r1], #4
 8000a92:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
 8000a96:	460f      	mov	r7, r1
 8000a98:	3301      	adds	r3, #1
 8000a9a:	2b10      	cmp	r3, #16
 8000a9c:	d1f2      	bne.n	8000a84 <_Unwind_VRS_Pop+0x158>
 8000a9e:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000aa2:	d1e4      	bne.n	8000a6e <_Unwind_VRS_Pop+0x142>
 8000aa4:	63b7      	str	r7, [r6, #56]	; 0x38
 8000aa6:	e004      	b.n	8000ab2 <_Unwind_VRS_Pop+0x186>
 8000aa8:	eb08 0305 	add.w	r3, r8, r5
 8000aac:	2b10      	cmp	r3, #16
 8000aae:	d903      	bls.n	8000ab8 <_Unwind_VRS_Pop+0x18c>
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	b043      	add	sp, #268	; 0x10c
 8000ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ab8:	f1b8 0f0f 	cmp.w	r8, #15
 8000abc:	d8f8      	bhi.n	8000ab0 <_Unwind_VRS_Pop+0x184>
 8000abe:	6833      	ldr	r3, [r6, #0]
 8000ac0:	07da      	lsls	r2, r3, #31
 8000ac2:	d506      	bpl.n	8000ad2 <_Unwind_VRS_Pop+0x1a6>
 8000ac4:	4630      	mov	r0, r6
 8000ac6:	f023 0303 	bic.w	r3, r3, #3
 8000aca:	f840 3b48 	str.w	r3, [r0], #72
 8000ace:	f000 f879 	bl	8000bc4 <__gnu_Unwind_Save_VFP>
 8000ad2:	af20      	add	r7, sp, #128	; 0x80
 8000ad4:	4638      	mov	r0, r7
 8000ad6:	f000 f875 	bl	8000bc4 <__gnu_Unwind_Save_VFP>
 8000ada:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000adc:	2d00      	cmp	r5, #0
 8000ade:	d199      	bne.n	8000a14 <_Unwind_VRS_Pop+0xe8>
 8000ae0:	461d      	mov	r5, r3
 8000ae2:	3504      	adds	r5, #4
 8000ae4:	63b5      	str	r5, [r6, #56]	; 0x38
 8000ae6:	4638      	mov	r0, r7
 8000ae8:	f000 f868 	bl	8000bbc <__gnu_Unwind_Restore_VFP>
 8000aec:	e7bf      	b.n	8000a6e <_Unwind_VRS_Pop+0x142>
 8000aee:	a820      	add	r0, sp, #128	; 0x80
 8000af0:	f000 f86c 	bl	8000bcc <__gnu_Unwind_Restore_VFP_D>
 8000af4:	e7b5      	b.n	8000a62 <_Unwind_VRS_Pop+0x136>
 8000af6:	f1b9 0f10 	cmp.w	r9, #16
 8000afa:	d940      	bls.n	8000b7e <_Unwind_VRS_Pop+0x252>
 8000afc:	f1a9 0910 	sub.w	r9, r9, #16
 8000b00:	6833      	ldr	r3, [r6, #0]
 8000b02:	07d9      	lsls	r1, r3, #31
 8000b04:	d508      	bpl.n	8000b18 <_Unwind_VRS_Pop+0x1ec>
 8000b06:	f023 0301 	bic.w	r3, r3, #1
 8000b0a:	4630      	mov	r0, r6
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	f840 3b48 	str.w	r3, [r0], #72
 8000b14:	f000 f85e 	bl	8000bd4 <__gnu_Unwind_Save_VFP_D>
 8000b18:	f1b9 0f00 	cmp.w	r9, #0
 8000b1c:	d032      	beq.n	8000b84 <_Unwind_VRS_Pop+0x258>
 8000b1e:	6833      	ldr	r3, [r6, #0]
 8000b20:	075a      	lsls	r2, r3, #29
 8000b22:	d420      	bmi.n	8000b66 <_Unwind_VRS_Pop+0x23a>
 8000b24:	f1b8 0f0f 	cmp.w	r8, #15
 8000b28:	d925      	bls.n	8000b76 <_Unwind_VRS_Pop+0x24a>
 8000b2a:	466f      	mov	r7, sp
 8000b2c:	4638      	mov	r0, r7
 8000b2e:	f1c8 0510 	rsb	r5, r8, #16
 8000b32:	f000 f857 	bl	8000be4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b3a:	f77f af7c 	ble.w	8000a36 <_Unwind_VRS_Pop+0x10a>
 8000b3e:	af20      	add	r7, sp, #128	; 0x80
 8000b40:	e76a      	b.n	8000a18 <_Unwind_VRS_Pop+0xec>
 8000b42:	f023 0310 	bic.w	r3, r3, #16
 8000b46:	6033      	str	r3, [r6, #0]
 8000b48:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000b4c:	f000 f89c 	bl	8000c88 <__gnu_Unwind_Save_WMMXC>
 8000b50:	e704      	b.n	800095c <_Unwind_VRS_Pop+0x30>
 8000b52:	f023 0308 	bic.w	r3, r3, #8
 8000b56:	6003      	str	r3, [r0, #0]
 8000b58:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000b5c:	f000 f868 	bl	8000c30 <__gnu_Unwind_Save_WMMXD>
 8000b60:	e727      	b.n	80009b2 <_Unwind_VRS_Pop+0x86>
 8000b62:	af20      	add	r7, sp, #128	; 0x80
 8000b64:	e7bd      	b.n	8000ae2 <_Unwind_VRS_Pop+0x1b6>
 8000b66:	4630      	mov	r0, r6
 8000b68:	f023 0304 	bic.w	r3, r3, #4
 8000b6c:	f840 3bd0 	str.w	r3, [r0], #208
 8000b70:	f000 f838 	bl	8000be4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b74:	e7d6      	b.n	8000b24 <_Unwind_VRS_Pop+0x1f8>
 8000b76:	a820      	add	r0, sp, #128	; 0x80
 8000b78:	f000 f82c 	bl	8000bd4 <__gnu_Unwind_Save_VFP_D>
 8000b7c:	e7d5      	b.n	8000b2a <_Unwind_VRS_Pop+0x1fe>
 8000b7e:	f04f 0900 	mov.w	r9, #0
 8000b82:	e7bd      	b.n	8000b00 <_Unwind_VRS_Pop+0x1d4>
 8000b84:	f1b8 0f0f 	cmp.w	r8, #15
 8000b88:	f63f af41 	bhi.w	8000a0e <_Unwind_VRS_Pop+0xe2>
 8000b8c:	af20      	add	r7, sp, #128	; 0x80
 8000b8e:	4638      	mov	r0, r7
 8000b90:	f000 f820 	bl	8000bd4 <__gnu_Unwind_Save_VFP_D>
 8000b94:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	f47f af3c 	bne.w	8000a14 <_Unwind_VRS_Pop+0xe8>
 8000b9c:	4638      	mov	r0, r7
 8000b9e:	f000 f815 	bl	8000bcc <__gnu_Unwind_Restore_VFP_D>
 8000ba2:	e764      	b.n	8000a6e <_Unwind_VRS_Pop+0x142>

08000ba4 <__restore_core_regs>:
 8000ba4:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000ba8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000bac:	469c      	mov	ip, r3
 8000bae:	46a6      	mov	lr, r4
 8000bb0:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000bb4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000bb8:	46e5      	mov	sp, ip
 8000bba:	bd00      	pop	{pc}

08000bbc <__gnu_Unwind_Restore_VFP>:
 8000bbc:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__gnu_Unwind_Save_VFP>:
 8000bc4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__gnu_Unwind_Restore_VFP_D>:
 8000bcc:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <__gnu_Unwind_Save_VFP_D>:
 8000bd4:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000bdc:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000be4:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__gnu_Unwind_Restore_WMMXD>:
 8000bec:	ecf0 0102 	ldfe	f0, [r0], #8
 8000bf0:	ecf0 1102 	ldfe	f1, [r0], #8
 8000bf4:	ecf0 2102 	ldfe	f2, [r0], #8
 8000bf8:	ecf0 3102 	ldfe	f3, [r0], #8
 8000bfc:	ecf0 4102 	ldfe	f4, [r0], #8
 8000c00:	ecf0 5102 	ldfe	f5, [r0], #8
 8000c04:	ecf0 6102 	ldfe	f6, [r0], #8
 8000c08:	ecf0 7102 	ldfe	f7, [r0], #8
 8000c0c:	ecf0 8102 	ldfp	f0, [r0], #8
 8000c10:	ecf0 9102 	ldfp	f1, [r0], #8
 8000c14:	ecf0 a102 	ldfp	f2, [r0], #8
 8000c18:	ecf0 b102 	ldfp	f3, [r0], #8
 8000c1c:	ecf0 c102 	ldfp	f4, [r0], #8
 8000c20:	ecf0 d102 	ldfp	f5, [r0], #8
 8000c24:	ecf0 e102 	ldfp	f6, [r0], #8
 8000c28:	ecf0 f102 	ldfp	f7, [r0], #8
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__gnu_Unwind_Save_WMMXD>:
 8000c30:	ece0 0102 	stfe	f0, [r0], #8
 8000c34:	ece0 1102 	stfe	f1, [r0], #8
 8000c38:	ece0 2102 	stfe	f2, [r0], #8
 8000c3c:	ece0 3102 	stfe	f3, [r0], #8
 8000c40:	ece0 4102 	stfe	f4, [r0], #8
 8000c44:	ece0 5102 	stfe	f5, [r0], #8
 8000c48:	ece0 6102 	stfe	f6, [r0], #8
 8000c4c:	ece0 7102 	stfe	f7, [r0], #8
 8000c50:	ece0 8102 	stfp	f0, [r0], #8
 8000c54:	ece0 9102 	stfp	f1, [r0], #8
 8000c58:	ece0 a102 	stfp	f2, [r0], #8
 8000c5c:	ece0 b102 	stfp	f3, [r0], #8
 8000c60:	ece0 c102 	stfp	f4, [r0], #8
 8000c64:	ece0 d102 	stfp	f5, [r0], #8
 8000c68:	ece0 e102 	stfp	f6, [r0], #8
 8000c6c:	ece0 f102 	stfp	f7, [r0], #8
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <__gnu_Unwind_Restore_WMMXC>:
 8000c74:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000c78:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000c7c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000c80:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__gnu_Unwind_Save_WMMXC>:
 8000c88:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000c8c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000c90:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000c94:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <_Unwind_RaiseException>:
 8000c9c:	46ec      	mov	ip, sp
 8000c9e:	b500      	push	{lr}
 8000ca0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ca4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cb0:	a901      	add	r1, sp, #4
 8000cb2:	f7ff fbf1 	bl	8000498 <__gnu_Unwind_RaiseException>
 8000cb6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cba:	b012      	add	sp, #72	; 0x48
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <_Unwind_Resume>:
 8000cc0:	46ec      	mov	ip, sp
 8000cc2:	b500      	push	{lr}
 8000cc4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cc8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cd4:	a901      	add	r1, sp, #4
 8000cd6:	f7ff fc19 	bl	800050c <__gnu_Unwind_Resume>
 8000cda:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cde:	b012      	add	sp, #72	; 0x48
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <_Unwind_Resume_or_Rethrow>:
 8000ce4:	46ec      	mov	ip, sp
 8000ce6:	b500      	push	{lr}
 8000ce8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cf8:	a901      	add	r1, sp, #4
 8000cfa:	f7ff fc29 	bl	8000550 <__gnu_Unwind_Resume_or_Rethrow>
 8000cfe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d02:	b012      	add	sp, #72	; 0x48
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <_Unwind_ForcedUnwind>:
 8000d08:	46ec      	mov	ip, sp
 8000d0a:	b500      	push	{lr}
 8000d0c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d10:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d1c:	ab01      	add	r3, sp, #4
 8000d1e:	f7ff fbeb 	bl	80004f8 <__gnu_Unwind_ForcedUnwind>
 8000d22:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d26:	b012      	add	sp, #72	; 0x48
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <_Unwind_Backtrace>:
 8000d2c:	46ec      	mov	ip, sp
 8000d2e:	b500      	push	{lr}
 8000d30:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d34:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d40:	aa01      	add	r2, sp, #4
 8000d42:	f7ff fc5d 	bl	8000600 <__gnu_Unwind_Backtrace>
 8000d46:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d4a:	b012      	add	sp, #72	; 0x48
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <next_unwind_byte>:
 8000d50:	7a02      	ldrb	r2, [r0, #8]
 8000d52:	b97a      	cbnz	r2, 8000d74 <next_unwind_byte+0x24>
 8000d54:	7a43      	ldrb	r3, [r0, #9]
 8000d56:	b1a3      	cbz	r3, 8000d82 <next_unwind_byte+0x32>
 8000d58:	6842      	ldr	r2, [r0, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	b410      	push	{r4}
 8000d5e:	7243      	strb	r3, [r0, #9]
 8000d60:	6813      	ldr	r3, [r2, #0]
 8000d62:	2103      	movs	r1, #3
 8000d64:	1d14      	adds	r4, r2, #4
 8000d66:	7201      	strb	r1, [r0, #8]
 8000d68:	021a      	lsls	r2, r3, #8
 8000d6a:	6044      	str	r4, [r0, #4]
 8000d6c:	6002      	str	r2, [r0, #0]
 8000d6e:	bc10      	pop	{r4}
 8000d70:	0e18      	lsrs	r0, r3, #24
 8000d72:	4770      	bx	lr
 8000d74:	6803      	ldr	r3, [r0, #0]
 8000d76:	3a01      	subs	r2, #1
 8000d78:	7202      	strb	r2, [r0, #8]
 8000d7a:	021a      	lsls	r2, r3, #8
 8000d7c:	6002      	str	r2, [r0, #0]
 8000d7e:	0e18      	lsrs	r0, r3, #24
 8000d80:	4770      	bx	lr
 8000d82:	20b0      	movs	r0, #176	; 0xb0
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <_Unwind_GetGR.constprop.0>:
 8000d88:	b500      	push	{lr}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	aa03      	add	r2, sp, #12
 8000d8e:	2300      	movs	r3, #0
 8000d90:	9200      	str	r2, [sp, #0]
 8000d92:	4619      	mov	r1, r3
 8000d94:	220c      	movs	r2, #12
 8000d96:	f7ff fbeb 	bl	8000570 <_Unwind_VRS_Get>
 8000d9a:	9803      	ldr	r0, [sp, #12]
 8000d9c:	b005      	add	sp, #20
 8000d9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000da2:	bf00      	nop

08000da4 <unwind_UCB_from_context>:
 8000da4:	e7f0      	b.n	8000d88 <_Unwind_GetGR.constprop.0>
 8000da6:	bf00      	nop

08000da8 <__gnu_unwind_execute>:
 8000da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dac:	4605      	mov	r5, r0
 8000dae:	b085      	sub	sp, #20
 8000db0:	460e      	mov	r6, r1
 8000db2:	f04f 0800 	mov.w	r8, #0
 8000db6:	4630      	mov	r0, r6
 8000db8:	f7ff ffca 	bl	8000d50 <next_unwind_byte>
 8000dbc:	28b0      	cmp	r0, #176	; 0xb0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	f000 80b2 	beq.w	8000f28 <__gnu_unwind_execute+0x180>
 8000dc4:	0607      	lsls	r7, r0, #24
 8000dc6:	d520      	bpl.n	8000e0a <__gnu_unwind_execute+0x62>
 8000dc8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000dcc:	2b80      	cmp	r3, #128	; 0x80
 8000dce:	d04d      	beq.n	8000e6c <__gnu_unwind_execute+0xc4>
 8000dd0:	2b90      	cmp	r3, #144	; 0x90
 8000dd2:	d036      	beq.n	8000e42 <__gnu_unwind_execute+0x9a>
 8000dd4:	2ba0      	cmp	r3, #160	; 0xa0
 8000dd6:	d060      	beq.n	8000e9a <__gnu_unwind_execute+0xf2>
 8000dd8:	2bb0      	cmp	r3, #176	; 0xb0
 8000dda:	d074      	beq.n	8000ec6 <__gnu_unwind_execute+0x11e>
 8000ddc:	2bc0      	cmp	r3, #192	; 0xc0
 8000dde:	f000 808b 	beq.w	8000ef8 <__gnu_unwind_execute+0x150>
 8000de2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000de6:	2bd0      	cmp	r3, #208	; 0xd0
 8000de8:	d10b      	bne.n	8000e02 <__gnu_unwind_execute+0x5a>
 8000dea:	f000 0207 	and.w	r2, r0, #7
 8000dee:	3201      	adds	r2, #1
 8000df0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000df4:	2305      	movs	r3, #5
 8000df6:	2101      	movs	r1, #1
 8000df8:	4628      	mov	r0, r5
 8000dfa:	f7ff fd97 	bl	800092c <_Unwind_VRS_Pop>
 8000dfe:	2800      	cmp	r0, #0
 8000e00:	d0d9      	beq.n	8000db6 <__gnu_unwind_execute+0xe>
 8000e02:	2009      	movs	r0, #9
 8000e04:	b005      	add	sp, #20
 8000e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e0a:	f10d 090c 	add.w	r9, sp, #12
 8000e0e:	2300      	movs	r3, #0
 8000e10:	4619      	mov	r1, r3
 8000e12:	0087      	lsls	r7, r0, #2
 8000e14:	f8cd 9000 	str.w	r9, [sp]
 8000e18:	220d      	movs	r2, #13
 8000e1a:	4628      	mov	r0, r5
 8000e1c:	f7ff fba8 	bl	8000570 <_Unwind_VRS_Get>
 8000e20:	b2ff      	uxtb	r7, r7
 8000e22:	9b03      	ldr	r3, [sp, #12]
 8000e24:	f8cd 9000 	str.w	r9, [sp]
 8000e28:	3704      	adds	r7, #4
 8000e2a:	0660      	lsls	r0, r4, #25
 8000e2c:	bf4c      	ite	mi
 8000e2e:	1bdf      	submi	r7, r3, r7
 8000e30:	18ff      	addpl	r7, r7, r3
 8000e32:	2300      	movs	r3, #0
 8000e34:	4619      	mov	r1, r3
 8000e36:	220d      	movs	r2, #13
 8000e38:	4628      	mov	r0, r5
 8000e3a:	9703      	str	r7, [sp, #12]
 8000e3c:	f7ff fbbc 	bl	80005b8 <_Unwind_VRS_Set>
 8000e40:	e7b9      	b.n	8000db6 <__gnu_unwind_execute+0xe>
 8000e42:	f000 030d 	and.w	r3, r0, #13
 8000e46:	2b0d      	cmp	r3, #13
 8000e48:	d0db      	beq.n	8000e02 <__gnu_unwind_execute+0x5a>
 8000e4a:	af03      	add	r7, sp, #12
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f000 020f 	and.w	r2, r0, #15
 8000e52:	4619      	mov	r1, r3
 8000e54:	9700      	str	r7, [sp, #0]
 8000e56:	4628      	mov	r0, r5
 8000e58:	f7ff fb8a 	bl	8000570 <_Unwind_VRS_Get>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	9700      	str	r7, [sp, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	220d      	movs	r2, #13
 8000e64:	4628      	mov	r0, r5
 8000e66:	f7ff fba7 	bl	80005b8 <_Unwind_VRS_Set>
 8000e6a:	e7a4      	b.n	8000db6 <__gnu_unwind_execute+0xe>
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	f7ff ff6f 	bl	8000d50 <next_unwind_byte>
 8000e72:	0224      	lsls	r4, r4, #8
 8000e74:	4320      	orrs	r0, r4
 8000e76:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000e7a:	d0c2      	beq.n	8000e02 <__gnu_unwind_execute+0x5a>
 8000e7c:	0104      	lsls	r4, r0, #4
 8000e7e:	2300      	movs	r3, #0
 8000e80:	b2a2      	uxth	r2, r4
 8000e82:	4619      	mov	r1, r3
 8000e84:	4628      	mov	r0, r5
 8000e86:	f7ff fd51 	bl	800092c <_Unwind_VRS_Pop>
 8000e8a:	2800      	cmp	r0, #0
 8000e8c:	d1b9      	bne.n	8000e02 <__gnu_unwind_execute+0x5a>
 8000e8e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000e92:	bf18      	it	ne
 8000e94:	f04f 0801 	movne.w	r8, #1
 8000e98:	e78d      	b.n	8000db6 <__gnu_unwind_execute+0xe>
 8000e9a:	43c2      	mvns	r2, r0
 8000e9c:	f002 0307 	and.w	r3, r2, #7
 8000ea0:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000ea4:	411a      	asrs	r2, r3
 8000ea6:	0701      	lsls	r1, r0, #28
 8000ea8:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000eac:	f04f 0300 	mov.w	r3, #0
 8000eb0:	bf48      	it	mi
 8000eb2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4628      	mov	r0, r5
 8000eba:	f7ff fd37 	bl	800092c <_Unwind_VRS_Pop>
 8000ebe:	2800      	cmp	r0, #0
 8000ec0:	f43f af79 	beq.w	8000db6 <__gnu_unwind_execute+0xe>
 8000ec4:	e79d      	b.n	8000e02 <__gnu_unwind_execute+0x5a>
 8000ec6:	28b1      	cmp	r0, #177	; 0xb1
 8000ec8:	d033      	beq.n	8000f32 <__gnu_unwind_execute+0x18a>
 8000eca:	28b2      	cmp	r0, #178	; 0xb2
 8000ecc:	f000 808b 	beq.w	8000fe6 <__gnu_unwind_execute+0x23e>
 8000ed0:	28b3      	cmp	r0, #179	; 0xb3
 8000ed2:	d039      	beq.n	8000f48 <__gnu_unwind_execute+0x1a0>
 8000ed4:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000ed8:	2bb4      	cmp	r3, #180	; 0xb4
 8000eda:	d092      	beq.n	8000e02 <__gnu_unwind_execute+0x5a>
 8000edc:	f000 0207 	and.w	r2, r0, #7
 8000ee0:	3201      	adds	r2, #1
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4628      	mov	r0, r5
 8000eec:	f7ff fd1e 	bl	800092c <_Unwind_VRS_Pop>
 8000ef0:	2800      	cmp	r0, #0
 8000ef2:	f43f af60 	beq.w	8000db6 <__gnu_unwind_execute+0xe>
 8000ef6:	e784      	b.n	8000e02 <__gnu_unwind_execute+0x5a>
 8000ef8:	28c6      	cmp	r0, #198	; 0xc6
 8000efa:	d042      	beq.n	8000f82 <__gnu_unwind_execute+0x1da>
 8000efc:	28c7      	cmp	r0, #199	; 0xc7
 8000efe:	d04c      	beq.n	8000f9a <__gnu_unwind_execute+0x1f2>
 8000f00:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000f04:	2bc0      	cmp	r3, #192	; 0xc0
 8000f06:	d05b      	beq.n	8000fc0 <__gnu_unwind_execute+0x218>
 8000f08:	28c8      	cmp	r0, #200	; 0xc8
 8000f0a:	d060      	beq.n	8000fce <__gnu_unwind_execute+0x226>
 8000f0c:	28c9      	cmp	r0, #201	; 0xc9
 8000f0e:	f47f af78 	bne.w	8000e02 <__gnu_unwind_execute+0x5a>
 8000f12:	4630      	mov	r0, r6
 8000f14:	f7ff ff1c 	bl	8000d50 <next_unwind_byte>
 8000f18:	0302      	lsls	r2, r0, #12
 8000f1a:	f000 000f 	and.w	r0, r0, #15
 8000f1e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000f22:	3001      	adds	r0, #1
 8000f24:	4302      	orrs	r2, r0
 8000f26:	e765      	b.n	8000df4 <__gnu_unwind_execute+0x4c>
 8000f28:	f1b8 0f00 	cmp.w	r8, #0
 8000f2c:	d018      	beq.n	8000f60 <__gnu_unwind_execute+0x1b8>
 8000f2e:	2000      	movs	r0, #0
 8000f30:	e768      	b.n	8000e04 <__gnu_unwind_execute+0x5c>
 8000f32:	4630      	mov	r0, r6
 8000f34:	f7ff ff0c 	bl	8000d50 <next_unwind_byte>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	f43f af61 	beq.w	8000e02 <__gnu_unwind_execute+0x5a>
 8000f40:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f44:	d0d0      	beq.n	8000ee8 <__gnu_unwind_execute+0x140>
 8000f46:	e75c      	b.n	8000e02 <__gnu_unwind_execute+0x5a>
 8000f48:	4630      	mov	r0, r6
 8000f4a:	f7ff ff01 	bl	8000d50 <next_unwind_byte>
 8000f4e:	0301      	lsls	r1, r0, #12
 8000f50:	f000 000f 	and.w	r0, r0, #15
 8000f54:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000f58:	1c42      	adds	r2, r0, #1
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	e7c3      	b.n	8000ee8 <__gnu_unwind_execute+0x140>
 8000f60:	ac03      	add	r4, sp, #12
 8000f62:	4643      	mov	r3, r8
 8000f64:	220e      	movs	r2, #14
 8000f66:	4641      	mov	r1, r8
 8000f68:	9400      	str	r4, [sp, #0]
 8000f6a:	4628      	mov	r0, r5
 8000f6c:	f7ff fb00 	bl	8000570 <_Unwind_VRS_Get>
 8000f70:	9400      	str	r4, [sp, #0]
 8000f72:	4628      	mov	r0, r5
 8000f74:	4643      	mov	r3, r8
 8000f76:	220f      	movs	r2, #15
 8000f78:	4641      	mov	r1, r8
 8000f7a:	f7ff fb1d 	bl	80005b8 <_Unwind_VRS_Set>
 8000f7e:	4640      	mov	r0, r8
 8000f80:	e740      	b.n	8000e04 <__gnu_unwind_execute+0x5c>
 8000f82:	4630      	mov	r0, r6
 8000f84:	f7ff fee4 	bl	8000d50 <next_unwind_byte>
 8000f88:	0301      	lsls	r1, r0, #12
 8000f8a:	f000 000f 	and.w	r0, r0, #15
 8000f8e:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000f92:	1c42      	adds	r2, r0, #1
 8000f94:	2303      	movs	r3, #3
 8000f96:	430a      	orrs	r2, r1
 8000f98:	e7a6      	b.n	8000ee8 <__gnu_unwind_execute+0x140>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	f7ff fed8 	bl	8000d50 <next_unwind_byte>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	2800      	cmp	r0, #0
 8000fa4:	f43f af2d 	beq.w	8000e02 <__gnu_unwind_execute+0x5a>
 8000fa8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fac:	f47f af29 	bne.w	8000e02 <__gnu_unwind_execute+0x5a>
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	4628      	mov	r0, r5
 8000fb4:	f7ff fcba 	bl	800092c <_Unwind_VRS_Pop>
 8000fb8:	2800      	cmp	r0, #0
 8000fba:	f43f aefc 	beq.w	8000db6 <__gnu_unwind_execute+0xe>
 8000fbe:	e720      	b.n	8000e02 <__gnu_unwind_execute+0x5a>
 8000fc0:	f000 020f 	and.w	r2, r0, #15
 8000fc4:	3201      	adds	r2, #1
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000fcc:	e78c      	b.n	8000ee8 <__gnu_unwind_execute+0x140>
 8000fce:	4630      	mov	r0, r6
 8000fd0:	f7ff febe 	bl	8000d50 <next_unwind_byte>
 8000fd4:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8000fd8:	f000 030f 	and.w	r3, r0, #15
 8000fdc:	3210      	adds	r2, #16
 8000fde:	3301      	adds	r3, #1
 8000fe0:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8000fe4:	e706      	b.n	8000df4 <__gnu_unwind_execute+0x4c>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f10d 090c 	add.w	r9, sp, #12
 8000fec:	220d      	movs	r2, #13
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f8cd 9000 	str.w	r9, [sp]
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	f7ff fabb 	bl	8000570 <_Unwind_VRS_Get>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	f7ff fea8 	bl	8000d50 <next_unwind_byte>
 8001000:	0602      	lsls	r2, r0, #24
 8001002:	f04f 0702 	mov.w	r7, #2
 8001006:	d50c      	bpl.n	8001022 <__gnu_unwind_execute+0x27a>
 8001008:	9b03      	ldr	r3, [sp, #12]
 800100a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800100e:	40b8      	lsls	r0, r7
 8001010:	4403      	add	r3, r0
 8001012:	4630      	mov	r0, r6
 8001014:	9303      	str	r3, [sp, #12]
 8001016:	f7ff fe9b 	bl	8000d50 <next_unwind_byte>
 800101a:	0603      	lsls	r3, r0, #24
 800101c:	f107 0707 	add.w	r7, r7, #7
 8001020:	d4f2      	bmi.n	8001008 <__gnu_unwind_execute+0x260>
 8001022:	9b03      	ldr	r3, [sp, #12]
 8001024:	f8cd 9000 	str.w	r9, [sp]
 8001028:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 800102c:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8001030:	40bc      	lsls	r4, r7
 8001032:	2300      	movs	r3, #0
 8001034:	4414      	add	r4, r2
 8001036:	4619      	mov	r1, r3
 8001038:	220d      	movs	r2, #13
 800103a:	4628      	mov	r0, r5
 800103c:	9403      	str	r4, [sp, #12]
 800103e:	f7ff fabb 	bl	80005b8 <_Unwind_VRS_Set>
 8001042:	e6b8      	b.n	8000db6 <__gnu_unwind_execute+0xe>

08001044 <__gnu_unwind_frame>:
 8001044:	b510      	push	{r4, lr}
 8001046:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001048:	b084      	sub	sp, #16
 800104a:	6853      	ldr	r3, [r2, #4]
 800104c:	2403      	movs	r4, #3
 800104e:	f88d 400c 	strb.w	r4, [sp, #12]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	f102 0408 	add.w	r4, r2, #8
 8001058:	4608      	mov	r0, r1
 800105a:	79d2      	ldrb	r2, [r2, #7]
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	a901      	add	r1, sp, #4
 8001060:	9402      	str	r4, [sp, #8]
 8001062:	f88d 200d 	strb.w	r2, [sp, #13]
 8001066:	f7ff fe9f 	bl	8000da8 <__gnu_unwind_execute>
 800106a:	b004      	add	sp, #16
 800106c:	bd10      	pop	{r4, pc}
 800106e:	bf00      	nop

08001070 <_Unwind_GetRegionStart>:
 8001070:	b508      	push	{r3, lr}
 8001072:	f7ff fe97 	bl	8000da4 <unwind_UCB_from_context>
 8001076:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001078:	bd08      	pop	{r3, pc}
 800107a:	bf00      	nop

0800107c <_Unwind_GetLanguageSpecificData>:
 800107c:	b508      	push	{r3, lr}
 800107e:	f7ff fe91 	bl	8000da4 <unwind_UCB_from_context>
 8001082:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001084:	79c3      	ldrb	r3, [r0, #7]
 8001086:	3302      	adds	r3, #2
 8001088:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800108c:	bd08      	pop	{r3, pc}
 800108e:	bf00      	nop

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
//  uint8_t cmd_1[1]={0x0C};
//  uint8_t cmd_2[1]={0x01};
//  uint8_t cmd_3[1]={0x06};
//  uint8_t cmd_4[1]={0x38};
//  uint8_t adr_1[1]={0x00};
  uint8_t data_1[1]={0x59};
 8001096:	2359      	movs	r3, #89	; 0x59
 8001098:	753b      	strb	r3, [r7, #20]
  uint8_t data_2[1]={0x61};
 800109a:	2361      	movs	r3, #97	; 0x61
 800109c:	743b      	strb	r3, [r7, #16]
  uint8_t data_3[1]={0x41};
 800109e:	2341      	movs	r3, #65	; 0x41
 80010a0:	733b      	strb	r3, [r7, #12]
  uint8_t data_4[1]={0x48};
 80010a2:	2348      	movs	r3, #72	; 0x48
 80010a4:	723b      	strb	r3, [r7, #8]
  uint8_t data_5[1]={0x79};
 80010a6:	2379      	movs	r3, #121	; 0x79
 80010a8:	713b      	strb	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010aa:	f000 faf8 	bl	800169e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ae:	f000 f8ba 	bl	8001226 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b2:	f000 f94f 	bl	8001354 <_ZL12MX_GPIO_Initv>
  //MX_I2C1_Init();
  MX_SPI1_Init();
 80010b6:	f000 f90b 	bl	80012d0 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  //Test_coulomb_meter();
  config_lcd();
 80010ba:	f000 f819 	bl	80010f0 <_Z10config_lcdv>
  HAL_Delay(100);
 80010be:	2064      	movs	r0, #100	; 0x64
 80010c0:	f000 fb62 	bl	8001788 <HAL_Delay>
  set_cursor(4,0);
 80010c4:	2100      	movs	r1, #0
 80010c6:	2004      	movs	r0, #4
 80010c8:	f000 f88f 	bl	80011ea <_Z10set_cursorii>
  //set_adresse(addr);
  lcd_print(mot);
 80010cc:	4807      	ldr	r0, [pc, #28]	; (80010ec <main+0x5c>)
 80010ce:	f000 f877 	bl	80011c0 <_Z9lcd_printPh>
//  HAL_Delay(40);
//  HAL_SPI_Transmit(&hspi1,data_4,1,1000);
//  HAL_Delay(40);
//  HAL_SPI_Transmit(&hspi1,data_4,1,1000);
//  HAL_Delay(40);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f000 fe08 	bl	8001cf0 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80010e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010e4:	f000 fb50 	bl	8001788 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <main+0x58>
 80010ea:	bf00      	nop
 80010ec:	20000014 	.word	0x20000014

080010f0 <_Z10config_lcdv>:
//void lcd_write_command(){
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
	//HAL_SPI_Transmit(&hspi1,addr,1,100);
//}

void config_lcd(){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fe:	f000 fdf7 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	2140      	movs	r1, #64	; 0x40
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f000 fdf1 	bl	8001cf0 <HAL_GPIO_WritePin>
	write_cmd(mode);
 800110e:	480d      	ldr	r0, [pc, #52]	; (8001144 <_Z10config_lcdv+0x54>)
 8001110:	f000 f83e 	bl	8001190 <_Z9write_cmdPh>
	HAL_Delay(100);
 8001114:	2064      	movs	r0, #100	; 0x64
 8001116:	f000 fb37 	bl	8001788 <HAL_Delay>
	write_cmd(display);
 800111a:	480b      	ldr	r0, [pc, #44]	; (8001148 <_Z10config_lcdv+0x58>)
 800111c:	f000 f838 	bl	8001190 <_Z9write_cmdPh>
	HAL_Delay(100);
 8001120:	2064      	movs	r0, #100	; 0x64
 8001122:	f000 fb31 	bl	8001788 <HAL_Delay>
	write_cmd(clear);
 8001126:	4809      	ldr	r0, [pc, #36]	; (800114c <_Z10config_lcdv+0x5c>)
 8001128:	f000 f832 	bl	8001190 <_Z9write_cmdPh>
	HAL_Delay(100);
 800112c:	2064      	movs	r0, #100	; 0x64
 800112e:	f000 fb2b 	bl	8001788 <HAL_Delay>
	write_cmd(set);
 8001132:	4807      	ldr	r0, [pc, #28]	; (8001150 <_Z10config_lcdv+0x60>)
 8001134:	f000 f82c 	bl	8001190 <_Z9write_cmdPh>
	HAL_Delay(100);
 8001138:	2064      	movs	r0, #100	; 0x64
 800113a:	f000 fb25 	bl	8001788 <HAL_Delay>
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000010 	.word	0x20000010
 8001148:	20000004 	.word	0x20000004
 800114c:	20000008 	.word	0x20000008
 8001150:	2000000c 	.word	0x2000000c

08001154 <_Z10write_dataPh>:


void write_data(uint8_t* data){
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001166:	f000 fdc3 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	2140      	movs	r1, #64	; 0x40
 800116e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001172:	f000 fdbd 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,data,1,1000);
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	2201      	movs	r2, #1
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	4803      	ldr	r0, [pc, #12]	; (800118c <_Z10write_dataPh+0x38>)
 8001180:	f001 fc89 	bl	8002a96 <HAL_SPI_Transmit>
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200000d8 	.word	0x200000d8

08001190 <_Z9write_cmdPh>:

void write_cmd(uint8_t* cmd){
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2140      	movs	r1, #64	; 0x40
 800119c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a0:	f000 fda6 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,cmd,1,1000);
 80011a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a8:	2201      	movs	r2, #1
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	4803      	ldr	r0, [pc, #12]	; (80011bc <_Z9write_cmdPh+0x2c>)
 80011ae:	f001 fc72 	bl	8002a96 <HAL_SPI_Transmit>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200000d8 	.word	0x200000d8

080011c0 <_Z9lcd_printPh>:

void set_adresse(uint8_t* addr){
	write_cmd(addr);
}

void lcd_print(unsigned char* string){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	unsigned char * ptrChaine;
	ptrChaine=string;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	60fb      	str	r3, [r7, #12]
	while(*ptrChaine!=0){
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <_Z9lcd_printPh+0x22>
		write_data(ptrChaine);
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f7ff ffbd 	bl	8001154 <_Z10write_dataPh>
		ptrChaine++;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3301      	adds	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
	while(*ptrChaine!=0){
 80011e0:	e7f4      	b.n	80011cc <_Z9lcd_printPh+0xc>
	}
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <_Z10set_cursorii>:


void set_cursor(int column,int line){
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b084      	sub	sp, #16
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
	uint8_t val_addr;
	val_addr = (line * 0x40)+column;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	019b      	lsls	r3, r3, #6
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	4413      	add	r3, r2
 8001202:	b2db      	uxtb	r3, r3
 8001204:	73fb      	strb	r3, [r7, #15]
	val_addr = 0x80+(val_addr & 0x7F);
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800120c:	b2db      	uxtb	r3, r3
 800120e:	3b80      	subs	r3, #128	; 0x80
 8001210:	b2db      	uxtb	r3, r3
 8001212:	73fb      	strb	r3, [r7, #15]
	write_cmd(&val_addr);
 8001214:	f107 030f 	add.w	r3, r7, #15
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ffb9 	bl	8001190 <_Z9write_cmdPh>
}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <_Z18SystemClock_Configv>:


void SystemClock_Config(void)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b096      	sub	sp, #88	; 0x58
 800122a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2244      	movs	r2, #68	; 0x44
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f002 fcc9 	bl	8003bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123a:	463b      	mov	r3, r7
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001248:	f44f 7000 	mov.w	r0, #512	; 0x200
 800124c:	f000 fd76 	bl	8001d3c <HAL_PWREx_ControlVoltageScaling>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	bf14      	ite	ne
 8001256:	2301      	movne	r3, #1
 8001258:	2300      	moveq	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8001260:	f000 f8d4 	bl	800140c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001264:	2310      	movs	r3, #16
 8001266:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001268:	2301      	movs	r3, #1
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001270:	2360      	movs	r3, #96	; 0x60
 8001272:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001274:	2300      	movs	r3, #0
 8001276:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4618      	mov	r0, r3
 800127e:	f000 fdb3 	bl	8001de8 <HAL_RCC_OscConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	bf14      	ite	ne
 8001288:	2301      	movne	r3, #1
 800128a:	2300      	moveq	r3, #0
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001292:	f000 f8bb 	bl	800140c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001296:	230f      	movs	r3, #15
 8001298:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012aa:	463b      	mov	r3, r7
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f001 f980 	bl	80025b4 <HAL_RCC_ClockConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	bf14      	ite	ne
 80012ba:	2301      	movne	r3, #1
 80012bc:	2300      	moveq	r3, #0
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80012c4:	f000 f8a2 	bl	800140c <Error_Handler>
  }
}
 80012c8:	bf00      	nop
 80012ca:	3758      	adds	r7, #88	; 0x58
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <_ZL12MX_SPI1_Initv>:
  * @param None
  * @retval None
  */

static void MX_SPI1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <_ZL12MX_SPI1_Initv+0x7c>)
 80012d6:	4a1e      	ldr	r2, [pc, #120]	; (8001350 <_ZL12MX_SPI1_Initv+0x80>)
 80012d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <_ZL12MX_SPI1_Initv+0x7c>)
 80012dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <_ZL12MX_SPI1_Initv+0x7c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <_ZL12MX_SPI1_Initv+0x7c>)
 80012ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f0:	4b16      	ldr	r3, [pc, #88]	; (800134c <_ZL12MX_SPI1_Initv+0x7c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <_ZL12MX_SPI1_Initv+0x7c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <_ZL12MX_SPI1_Initv+0x7c>)
 80012fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001302:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <_ZL12MX_SPI1_Initv+0x7c>)
 8001306:	2228      	movs	r2, #40	; 0x28
 8001308:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <_ZL12MX_SPI1_Initv+0x7c>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <_ZL12MX_SPI1_Initv+0x7c>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <_ZL12MX_SPI1_Initv+0x7c>)
 8001318:	2200      	movs	r2, #0
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <_ZL12MX_SPI1_Initv+0x7c>)
 800131e:	2207      	movs	r2, #7
 8001320:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <_ZL12MX_SPI1_Initv+0x7c>)
 8001324:	2200      	movs	r2, #0
 8001326:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <_ZL12MX_SPI1_Initv+0x7c>)
 800132a:	2200      	movs	r2, #0
 800132c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800132e:	4807      	ldr	r0, [pc, #28]	; (800134c <_ZL12MX_SPI1_Initv+0x7c>)
 8001330:	f001 fb0e 	bl	8002950 <HAL_SPI_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	bf14      	ite	ne
 800133a:	2301      	movne	r3, #1
 800133c:	2300      	moveq	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8001344:	f000 f862 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200000d8 	.word	0x200000d8
 8001350:	40013000 	.word	0x40013000

08001354 <_ZL12MX_GPIO_Initv>:


static void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b27      	ldr	r3, [pc, #156]	; (8001408 <_ZL12MX_GPIO_Initv+0xb4>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	4a26      	ldr	r2, [pc, #152]	; (8001408 <_ZL12MX_GPIO_Initv+0xb4>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <_ZL12MX_GPIO_Initv+0xb4>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <_ZL12MX_GPIO_Initv+0xb4>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	4a20      	ldr	r2, [pc, #128]	; (8001408 <_ZL12MX_GPIO_Initv+0xb4>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138e:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <_ZL12MX_GPIO_Initv+0xb4>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2140      	movs	r1, #64	; 0x40
 800139e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a2:	f000 fca5 	bl	8001cf0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b0:	f000 fc9e 	bl	8001cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013b4:	2340      	movs	r3, #64	; 0x40
 80013b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4619      	mov	r1, r3
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ce:	f000 fae5 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4619      	mov	r1, r3
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ee:	f000 fad5 	bl	800199c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fc:	f000 fc78 	bl	8001cf0 <HAL_GPIO_WritePin>


}
 8001400:	bf00      	nop
 8001402:	3720      	adds	r7, #32
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
}
 8001412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001414:	e7fe      	b.n	8001414 <Error_Handler+0x8>
	...

08001418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <HAL_MspInit+0x44>)
 8001420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001422:	4a0e      	ldr	r2, [pc, #56]	; (800145c <HAL_MspInit+0x44>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6613      	str	r3, [r2, #96]	; 0x60
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_MspInit+0x44>)
 800142c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_MspInit+0x44>)
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <HAL_MspInit+0x44>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	6593      	str	r3, [r2, #88]	; 0x58
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_MspInit+0x44>)
 8001444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000

08001460 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a17      	ldr	r2, [pc, #92]	; (80014dc <HAL_SPI_MspInit+0x7c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d128      	bne.n	80014d4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <HAL_SPI_MspInit+0x80>)
 8001484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001486:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <HAL_SPI_MspInit+0x80>)
 8001488:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800148c:	6613      	str	r3, [r2, #96]	; 0x60
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_SPI_MspInit+0x80>)
 8001490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_SPI_MspInit+0x80>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <HAL_SPI_MspInit+0x80>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_SPI_MspInit+0x80>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80014b2:	23a0      	movs	r3, #160	; 0xa0
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014c2:	2305      	movs	r3, #5
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d0:	f000 fa64 	bl	800199c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014d4:	bf00      	nop
 80014d6:	3728      	adds	r7, #40	; 0x28
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40013000 	.word	0x40013000
 80014e0:	40021000 	.word	0x40021000

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <NMI_Handler+0x4>

080014ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <MemManage_Handler+0x4>

080014f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <UsageFault_Handler+0x4>

08001502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001530:	f000 f90a 	bl	8001748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}

08001538 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
	return 1;
 800153c:	2301      	movs	r3, #1
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <_kill>:

int _kill(int pid, int sig)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001552:	f002 faf1 	bl	8003b38 <__errno>
 8001556:	4603      	mov	r3, r0
 8001558:	2216      	movs	r2, #22
 800155a:	601a      	str	r2, [r3, #0]
	return -1;
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <_exit>:

void _exit (int status)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001570:	f04f 31ff 	mov.w	r1, #4294967295
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ffe7 	bl	8001548 <_kill>
	while (1) {}		/* Make sure we hang here */
 800157a:	e7fe      	b.n	800157a <_exit+0x12>

0800157c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001584:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <_sbrk+0x5c>)
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <_sbrk+0x60>)
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d102      	bne.n	800159e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <_sbrk+0x64>)
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <_sbrk+0x68>)
 800159c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <_sbrk+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d207      	bcs.n	80015bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ac:	f002 fac4 	bl	8003b38 <__errno>
 80015b0:	4603      	mov	r3, r0
 80015b2:	220c      	movs	r2, #12
 80015b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	e009      	b.n	80015d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <_sbrk+0x64>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <_sbrk+0x64>)
 80015cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20018000 	.word	0x20018000
 80015dc:	00000400 	.word	0x00000400
 80015e0:	2000013c 	.word	0x2000013c
 80015e4:	20000230 	.word	0x20000230

080015e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <SystemInit+0x5c>)
 80015ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f2:	4a14      	ldr	r2, [pc, #80]	; (8001644 <SystemInit+0x5c>)
 80015f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <SystemInit+0x60>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a11      	ldr	r2, [pc, #68]	; (8001648 <SystemInit+0x60>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <SystemInit+0x60>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <SystemInit+0x60>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <SystemInit+0x60>)
 8001614:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001618:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800161c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <SystemInit+0x60>)
 8001620:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001624:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <SystemInit+0x60>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a07      	ldr	r2, [pc, #28]	; (8001648 <SystemInit+0x60>)
 800162c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001630:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001632:	4b05      	ldr	r3, [pc, #20]	; (8001648 <SystemInit+0x60>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00
 8001648:	40021000 	.word	0x40021000

0800164c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800164c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001684 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001650:	f7ff ffca 	bl	80015e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001654:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001656:	e003      	b.n	8001660 <LoopCopyDataInit>

08001658 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800165a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800165c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800165e:	3104      	adds	r1, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001660:	480a      	ldr	r0, [pc, #40]	; (800168c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001664:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001666:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001668:	d3f6      	bcc.n	8001658 <CopyDataInit>
	ldr	r2, =_sbss
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <LoopForever+0x12>)
	b	LoopFillZerobss
 800166c:	e002      	b.n	8001674 <LoopFillZerobss>

0800166e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800166e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001670:	f842 3b04 	str.w	r3, [r2], #4

08001674 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <LoopForever+0x16>)
	cmp	r2, r3
 8001676:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001678:	d3f9      	bcc.n	800166e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167a:	f002 fa63 	bl	8003b44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800167e:	f7ff fd07 	bl	8001090 <main>

08001682 <LoopForever>:

LoopForever:
    b LoopForever
 8001682:	e7fe      	b.n	8001682 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001684:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001688:	08004d40 	.word	0x08004d40
	ldr	r0, =_sdata
 800168c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001690:	200000bc 	.word	0x200000bc
	ldr	r2, =_sbss
 8001694:	200000bc 	.word	0x200000bc
	ldr	r3, = _ebss
 8001698:	2000022c 	.word	0x2000022c

0800169c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC1_2_IRQHandler>

0800169e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f000 f943 	bl	8001934 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ae:	200f      	movs	r0, #15
 80016b0:	f000 f80e 	bl	80016d0 <HAL_InitTick>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d002      	beq.n	80016c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	71fb      	strb	r3, [r7, #7]
 80016be:	e001      	b.n	80016c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016c0:	f7ff feaa 	bl	8001418 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016c4:	79fb      	ldrb	r3, [r7, #7]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016dc:	4b17      	ldr	r3, [pc, #92]	; (800173c <HAL_InitTick+0x6c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d023      	beq.n	800172c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016e4:	4b16      	ldr	r3, [pc, #88]	; (8001740 <HAL_InitTick+0x70>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_InitTick+0x6c>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f941 	bl	8001982 <HAL_SYSTICK_Config>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10f      	bne.n	8001726 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b0f      	cmp	r3, #15
 800170a:	d809      	bhi.n	8001720 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170c:	2200      	movs	r2, #0
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f000 f919 	bl	800194a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001718:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <HAL_InitTick+0x74>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	e007      	b.n	8001730 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	e004      	b.n	8001730 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	73fb      	strb	r3, [r7, #15]
 800172a:	e001      	b.n	8001730 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001730:	7bfb      	ldrb	r3, [r7, #15]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000044 	.word	0x20000044
 8001740:	2000003c 	.word	0x2000003c
 8001744:	20000040 	.word	0x20000040

08001748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x20>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x24>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4413      	add	r3, r2
 8001758:	4a04      	ldr	r2, [pc, #16]	; (800176c <HAL_IncTick+0x24>)
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000044 	.word	0x20000044
 800176c:	20000218 	.word	0x20000218

08001770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return uwTick;
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <HAL_GetTick+0x14>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000218 	.word	0x20000218

08001788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001790:	f7ff ffee 	bl	8001770 <HAL_GetTick>
 8001794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a0:	d005      	beq.n	80017ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <HAL_Delay+0x44>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4413      	add	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ae:	bf00      	nop
 80017b0:	f7ff ffde 	bl	8001770 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d8f7      	bhi.n	80017b0 <HAL_Delay+0x28>
  {
  }
}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000044 	.word	0x20000044

080017d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <__NVIC_SetPriorityGrouping+0x44>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ec:	4013      	ands	r3, r2
 80017ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001802:	4a04      	ldr	r2, [pc, #16]	; (8001814 <__NVIC_SetPriorityGrouping+0x44>)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	60d3      	str	r3, [r2, #12]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <__NVIC_GetPriorityGrouping+0x18>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	f003 0307 	and.w	r3, r3, #7
}
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	; (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	; (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
         );
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	; 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001900:	d301      	bcc.n	8001906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001902:	2301      	movs	r3, #1
 8001904:	e00f      	b.n	8001926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <SysTick_Config+0x40>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190e:	210f      	movs	r1, #15
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f7ff ff8e 	bl	8001834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <SysTick_Config+0x40>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191e:	4b04      	ldr	r3, [pc, #16]	; (8001930 <SysTick_Config+0x40>)
 8001920:	2207      	movs	r2, #7
 8001922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	e000e010 	.word	0xe000e010

08001934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff47 	bl	80017d0 <__NVIC_SetPriorityGrouping>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800195c:	f7ff ff5c 	bl	8001818 <__NVIC_GetPriorityGrouping>
 8001960:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	6978      	ldr	r0, [r7, #20]
 8001968:	f7ff ff8e 	bl	8001888 <NVIC_EncodePriority>
 800196c:	4602      	mov	r2, r0
 800196e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff5d 	bl	8001834 <__NVIC_SetPriority>
}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffb0 	bl	80018f0 <SysTick_Config>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800199c:	b480      	push	{r7}
 800199e:	b087      	sub	sp, #28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019aa:	e17f      	b.n	8001cac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	2101      	movs	r1, #1
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	4013      	ands	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 8171 	beq.w	8001ca6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d00b      	beq.n	80019e4 <HAL_GPIO_Init+0x48>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d007      	beq.n	80019e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d8:	2b11      	cmp	r3, #17
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b12      	cmp	r3, #18
 80019e2:	d130      	bne.n	8001a46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	2203      	movs	r2, #3
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	091b      	lsrs	r3, r3, #4
 8001a30:	f003 0201 	and.w	r2, r3, #1
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d118      	bne.n	8001a84 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	08db      	lsrs	r3, r3, #3
 8001a6e:	f003 0201 	and.w	r2, r3, #1
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2203      	movs	r2, #3
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x128>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b12      	cmp	r3, #18
 8001ac2:	d123      	bne.n	8001b0c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	08da      	lsrs	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3208      	adds	r2, #8
 8001acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	08da      	lsrs	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3208      	adds	r2, #8
 8001b06:	6939      	ldr	r1, [r7, #16]
 8001b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0203 	and.w	r2, r3, #3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80ac 	beq.w	8001ca6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	4b5f      	ldr	r3, [pc, #380]	; (8001ccc <HAL_GPIO_Init+0x330>)
 8001b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b52:	4a5e      	ldr	r2, [pc, #376]	; (8001ccc <HAL_GPIO_Init+0x330>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6613      	str	r3, [r2, #96]	; 0x60
 8001b5a:	4b5c      	ldr	r3, [pc, #368]	; (8001ccc <HAL_GPIO_Init+0x330>)
 8001b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b66:	4a5a      	ldr	r2, [pc, #360]	; (8001cd0 <HAL_GPIO_Init+0x334>)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	089b      	lsrs	r3, r3, #2
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	220f      	movs	r2, #15
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b90:	d025      	beq.n	8001bde <HAL_GPIO_Init+0x242>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4f      	ldr	r2, [pc, #316]	; (8001cd4 <HAL_GPIO_Init+0x338>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d01f      	beq.n	8001bda <HAL_GPIO_Init+0x23e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4e      	ldr	r2, [pc, #312]	; (8001cd8 <HAL_GPIO_Init+0x33c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d019      	beq.n	8001bd6 <HAL_GPIO_Init+0x23a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4d      	ldr	r2, [pc, #308]	; (8001cdc <HAL_GPIO_Init+0x340>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d013      	beq.n	8001bd2 <HAL_GPIO_Init+0x236>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4c      	ldr	r2, [pc, #304]	; (8001ce0 <HAL_GPIO_Init+0x344>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00d      	beq.n	8001bce <HAL_GPIO_Init+0x232>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4b      	ldr	r2, [pc, #300]	; (8001ce4 <HAL_GPIO_Init+0x348>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d007      	beq.n	8001bca <HAL_GPIO_Init+0x22e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4a      	ldr	r2, [pc, #296]	; (8001ce8 <HAL_GPIO_Init+0x34c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d101      	bne.n	8001bc6 <HAL_GPIO_Init+0x22a>
 8001bc2:	2306      	movs	r3, #6
 8001bc4:	e00c      	b.n	8001be0 <HAL_GPIO_Init+0x244>
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	e00a      	b.n	8001be0 <HAL_GPIO_Init+0x244>
 8001bca:	2305      	movs	r3, #5
 8001bcc:	e008      	b.n	8001be0 <HAL_GPIO_Init+0x244>
 8001bce:	2304      	movs	r3, #4
 8001bd0:	e006      	b.n	8001be0 <HAL_GPIO_Init+0x244>
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e004      	b.n	8001be0 <HAL_GPIO_Init+0x244>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e002      	b.n	8001be0 <HAL_GPIO_Init+0x244>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_GPIO_Init+0x244>
 8001bde:	2300      	movs	r3, #0
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	f002 0203 	and.w	r2, r2, #3
 8001be6:	0092      	lsls	r2, r2, #2
 8001be8:	4093      	lsls	r3, r2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bf0:	4937      	ldr	r1, [pc, #220]	; (8001cd0 <HAL_GPIO_Init+0x334>)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	089b      	lsrs	r3, r3, #2
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bfe:	4b3b      	ldr	r3, [pc, #236]	; (8001cec <HAL_GPIO_Init+0x350>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c22:	4a32      	ldr	r2, [pc, #200]	; (8001cec <HAL_GPIO_Init+0x350>)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c28:	4b30      	ldr	r3, [pc, #192]	; (8001cec <HAL_GPIO_Init+0x350>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c4c:	4a27      	ldr	r2, [pc, #156]	; (8001cec <HAL_GPIO_Init+0x350>)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c52:	4b26      	ldr	r3, [pc, #152]	; (8001cec <HAL_GPIO_Init+0x350>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c76:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <HAL_GPIO_Init+0x350>)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <HAL_GPIO_Init+0x350>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ca0:	4a12      	ldr	r2, [pc, #72]	; (8001cec <HAL_GPIO_Init+0x350>)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f47f ae78 	bne.w	80019ac <HAL_GPIO_Init+0x10>
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	371c      	adds	r7, #28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40010000 	.word	0x40010000
 8001cd4:	48000400 	.word	0x48000400
 8001cd8:	48000800 	.word	0x48000800
 8001cdc:	48000c00 	.word	0x48000c00
 8001ce0:	48001000 	.word	0x48001000
 8001ce4:	48001400 	.word	0x48001400
 8001ce8:	48001800 	.word	0x48001800
 8001cec:	40010400 	.word	0x40010400

08001cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d00:	787b      	ldrb	r3, [r7, #1]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d0c:	e002      	b.n	8001d14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d0e:	887a      	ldrh	r2, [r7, #2]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40007000 	.word	0x40007000

08001d3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d4a:	d130      	bne.n	8001dae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d4c:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d58:	d038      	beq.n	8001dcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d62:	4a1e      	ldr	r2, [pc, #120]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2232      	movs	r2, #50	; 0x32
 8001d70:	fb02 f303 	mul.w	r3, r2, r3
 8001d74:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	0c9b      	lsrs	r3, r3, #18
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d80:	e002      	b.n	8001d88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d94:	d102      	bne.n	8001d9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f2      	bne.n	8001d82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da8:	d110      	bne.n	8001dcc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e00f      	b.n	8001dce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dba:	d007      	beq.n	8001dcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dc4:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40007000 	.word	0x40007000
 8001de0:	2000003c 	.word	0x2000003c
 8001de4:	431bde83 	.word	0x431bde83

08001de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e3d4      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfa:	4ba1      	ldr	r3, [pc, #644]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e04:	4b9e      	ldr	r3, [pc, #632]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0310 	and.w	r3, r3, #16
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 80e4 	beq.w	8001fe4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <HAL_RCC_OscConfig+0x4a>
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	2b0c      	cmp	r3, #12
 8001e26:	f040 808b 	bne.w	8001f40 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	f040 8087 	bne.w	8001f40 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e32:	4b93      	ldr	r3, [pc, #588]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d005      	beq.n	8001e4a <HAL_RCC_OscConfig+0x62>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e3ac      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a1a      	ldr	r2, [r3, #32]
 8001e4e:	4b8c      	ldr	r3, [pc, #560]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d004      	beq.n	8001e64 <HAL_RCC_OscConfig+0x7c>
 8001e5a:	4b89      	ldr	r3, [pc, #548]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e62:	e005      	b.n	8001e70 <HAL_RCC_OscConfig+0x88>
 8001e64:	4b86      	ldr	r3, [pc, #536]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6a:	091b      	lsrs	r3, r3, #4
 8001e6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d223      	bcs.n	8001ebc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 fd09 	bl	8002890 <RCC_SetFlashLatencyFromMSIRange>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e38d      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e88:	4b7d      	ldr	r3, [pc, #500]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a7c      	ldr	r2, [pc, #496]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001e8e:	f043 0308 	orr.w	r3, r3, #8
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	4b7a      	ldr	r3, [pc, #488]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4977      	ldr	r1, [pc, #476]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ea6:	4b76      	ldr	r3, [pc, #472]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	4972      	ldr	r1, [pc, #456]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	604b      	str	r3, [r1, #4]
 8001eba:	e025      	b.n	8001f08 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ebc:	4b70      	ldr	r3, [pc, #448]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a6f      	ldr	r2, [pc, #444]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001ec2:	f043 0308 	orr.w	r3, r3, #8
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b6d      	ldr	r3, [pc, #436]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	496a      	ldr	r1, [pc, #424]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eda:	4b69      	ldr	r3, [pc, #420]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	4965      	ldr	r1, [pc, #404]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d109      	bne.n	8001f08 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fcc9 	bl	8002890 <RCC_SetFlashLatencyFromMSIRange>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e34d      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f08:	f000 fc36 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	4b5c      	ldr	r3, [pc, #368]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	091b      	lsrs	r3, r3, #4
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	495a      	ldr	r1, [pc, #360]	; (8002084 <HAL_RCC_OscConfig+0x29c>)
 8001f1a:	5ccb      	ldrb	r3, [r1, r3]
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	fa22 f303 	lsr.w	r3, r2, r3
 8001f24:	4a58      	ldr	r2, [pc, #352]	; (8002088 <HAL_RCC_OscConfig+0x2a0>)
 8001f26:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f28:	4b58      	ldr	r3, [pc, #352]	; (800208c <HAL_RCC_OscConfig+0x2a4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fbcf 	bl	80016d0 <HAL_InitTick>
 8001f32:	4603      	mov	r3, r0
 8001f34:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d052      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	e331      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d032      	beq.n	8001fae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f48:	4b4d      	ldr	r3, [pc, #308]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a4c      	ldr	r2, [pc, #304]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f54:	f7ff fc0c 	bl	8001770 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f5c:	f7ff fc08 	bl	8001770 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e31a      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f6e:	4b44      	ldr	r3, [pc, #272]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f7a:	4b41      	ldr	r3, [pc, #260]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a40      	ldr	r2, [pc, #256]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f80:	f043 0308 	orr.w	r3, r3, #8
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b3e      	ldr	r3, [pc, #248]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	493b      	ldr	r1, [pc, #236]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f98:	4b39      	ldr	r3, [pc, #228]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	4936      	ldr	r1, [pc, #216]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
 8001fac:	e01a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fae:	4b34      	ldr	r3, [pc, #208]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a33      	ldr	r2, [pc, #204]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001fb4:	f023 0301 	bic.w	r3, r3, #1
 8001fb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fba:	f7ff fbd9 	bl	8001770 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fc2:	f7ff fbd5 	bl	8001770 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e2e7      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fd4:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f0      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x1da>
 8001fe0:	e000      	b.n	8001fe4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fe2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d074      	beq.n	80020da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d005      	beq.n	8002002 <HAL_RCC_OscConfig+0x21a>
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b0c      	cmp	r3, #12
 8001ffa:	d10e      	bne.n	800201a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d10b      	bne.n	800201a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002002:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d064      	beq.n	80020d8 <HAL_RCC_OscConfig+0x2f0>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d160      	bne.n	80020d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e2c4      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002022:	d106      	bne.n	8002032 <HAL_RCC_OscConfig+0x24a>
 8002024:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a15      	ldr	r2, [pc, #84]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 800202a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	e01d      	b.n	800206e <HAL_RCC_OscConfig+0x286>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800203a:	d10c      	bne.n	8002056 <HAL_RCC_OscConfig+0x26e>
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0f      	ldr	r2, [pc, #60]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8002042:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 800204e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	e00b      	b.n	800206e <HAL_RCC_OscConfig+0x286>
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a09      	ldr	r2, [pc, #36]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 800205c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a06      	ldr	r2, [pc, #24]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8002068:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800206c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d01c      	beq.n	80020b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002076:	f7ff fb7b 	bl	8001770 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800207c:	e011      	b.n	80020a2 <HAL_RCC_OscConfig+0x2ba>
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	080041ec 	.word	0x080041ec
 8002088:	2000003c 	.word	0x2000003c
 800208c:	20000040 	.word	0x20000040
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7ff fb6e 	bl	8001770 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	; 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e280      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020a2:	4baf      	ldr	r3, [pc, #700]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x2a8>
 80020ae:	e014      	b.n	80020da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7ff fb5e 	bl	8001770 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7ff fb5a 	bl	8001770 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	; 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e26c      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ca:	4ba5      	ldr	r3, [pc, #660]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x2d0>
 80020d6:	e000      	b.n	80020da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d060      	beq.n	80021a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d005      	beq.n	80020f8 <HAL_RCC_OscConfig+0x310>
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	d119      	bne.n	8002126 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d116      	bne.n	8002126 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020f8:	4b99      	ldr	r3, [pc, #612]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_RCC_OscConfig+0x328>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e249      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002110:	4b93      	ldr	r3, [pc, #588]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	061b      	lsls	r3, r3, #24
 800211e:	4990      	ldr	r1, [pc, #576]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002124:	e040      	b.n	80021a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d023      	beq.n	8002176 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800212e:	4b8c      	ldr	r3, [pc, #560]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a8b      	ldr	r2, [pc, #556]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213a:	f7ff fb19 	bl	8001770 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002142:	f7ff fb15 	bl	8001770 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e227      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002154:	4b82      	ldr	r3, [pc, #520]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002160:	4b7f      	ldr	r3, [pc, #508]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	061b      	lsls	r3, r3, #24
 800216e:	497c      	ldr	r1, [pc, #496]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
 8002174:	e018      	b.n	80021a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002176:	4b7a      	ldr	r3, [pc, #488]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a79      	ldr	r2, [pc, #484]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 800217c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002182:	f7ff faf5 	bl	8001770 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218a:	f7ff faf1 	bl	8001770 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e203      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800219c:	4b70      	ldr	r3, [pc, #448]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f0      	bne.n	800218a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d03c      	beq.n	800222e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d01c      	beq.n	80021f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021bc:	4b68      	ldr	r3, [pc, #416]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80021be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c2:	4a67      	ldr	r2, [pc, #412]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7ff fad0 	bl	8001770 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d4:	f7ff facc 	bl	8001770 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e1de      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021e6:	4b5e      	ldr	r3, [pc, #376]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80021e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0ef      	beq.n	80021d4 <HAL_RCC_OscConfig+0x3ec>
 80021f4:	e01b      	b.n	800222e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f6:	4b5a      	ldr	r3, [pc, #360]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80021f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fc:	4a58      	ldr	r2, [pc, #352]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80021fe:	f023 0301 	bic.w	r3, r3, #1
 8002202:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002206:	f7ff fab3 	bl	8001770 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800220e:	f7ff faaf 	bl	8001770 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e1c1      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002220:	4b4f      	ldr	r3, [pc, #316]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1ef      	bne.n	800220e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 80a6 	beq.w	8002388 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223c:	2300      	movs	r3, #0
 800223e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002240:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10d      	bne.n	8002268 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224c:	4b44      	ldr	r3, [pc, #272]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	4a43      	ldr	r2, [pc, #268]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002256:	6593      	str	r3, [r2, #88]	; 0x58
 8002258:	4b41      	ldr	r3, [pc, #260]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002264:	2301      	movs	r3, #1
 8002266:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002268:	4b3e      	ldr	r3, [pc, #248]	; (8002364 <HAL_RCC_OscConfig+0x57c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d118      	bne.n	80022a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002274:	4b3b      	ldr	r3, [pc, #236]	; (8002364 <HAL_RCC_OscConfig+0x57c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a3a      	ldr	r2, [pc, #232]	; (8002364 <HAL_RCC_OscConfig+0x57c>)
 800227a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002280:	f7ff fa76 	bl	8001770 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002288:	f7ff fa72 	bl	8001770 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e184      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800229a:	4b32      	ldr	r3, [pc, #200]	; (8002364 <HAL_RCC_OscConfig+0x57c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d108      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4d8>
 80022ae:	4b2c      	ldr	r3, [pc, #176]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b4:	4a2a      	ldr	r2, [pc, #168]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022be:	e024      	b.n	800230a <HAL_RCC_OscConfig+0x522>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b05      	cmp	r3, #5
 80022c6:	d110      	bne.n	80022ea <HAL_RCC_OscConfig+0x502>
 80022c8:	4b25      	ldr	r3, [pc, #148]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ce:	4a24      	ldr	r2, [pc, #144]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80022d0:	f043 0304 	orr.w	r3, r3, #4
 80022d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80022da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022de:	4a20      	ldr	r2, [pc, #128]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022e8:	e00f      	b.n	800230a <HAL_RCC_OscConfig+0x522>
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f0:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80022f2:	f023 0301 	bic.w	r3, r3, #1
 80022f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022fa:	4b19      	ldr	r3, [pc, #100]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002300:	4a17      	ldr	r2, [pc, #92]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002302:	f023 0304 	bic.w	r3, r3, #4
 8002306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d016      	beq.n	8002340 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002312:	f7ff fa2d 	bl	8001770 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002318:	e00a      	b.n	8002330 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f7ff fa29 	bl	8001770 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f241 3288 	movw	r2, #5000	; 0x1388
 8002328:	4293      	cmp	r3, r2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e139      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0ed      	beq.n	800231a <HAL_RCC_OscConfig+0x532>
 800233e:	e01a      	b.n	8002376 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002340:	f7ff fa16 	bl	8001770 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002346:	e00f      	b.n	8002368 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002348:	f7ff fa12 	bl	8001770 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	; 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d906      	bls.n	8002368 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e122      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
 8002364:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002368:	4b90      	ldr	r3, [pc, #576]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1e8      	bne.n	8002348 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002376:	7ffb      	ldrb	r3, [r7, #31]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d105      	bne.n	8002388 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237c:	4b8b      	ldr	r3, [pc, #556]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	4a8a      	ldr	r2, [pc, #552]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 8002382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002386:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 8108 	beq.w	80025a2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002396:	2b02      	cmp	r3, #2
 8002398:	f040 80d0 	bne.w	800253c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800239c:	4b83      	ldr	r3, [pc, #524]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f003 0203 	and.w	r2, r3, #3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d130      	bne.n	8002412 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	3b01      	subs	r3, #1
 80023bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d127      	bne.n	8002412 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d11f      	bne.n	8002412 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023dc:	2a07      	cmp	r2, #7
 80023de:	bf14      	ite	ne
 80023e0:	2201      	movne	r2, #1
 80023e2:	2200      	moveq	r2, #0
 80023e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d113      	bne.n	8002412 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f4:	085b      	lsrs	r3, r3, #1
 80023f6:	3b01      	subs	r3, #1
 80023f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d109      	bne.n	8002412 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	085b      	lsrs	r3, r3, #1
 800240a:	3b01      	subs	r3, #1
 800240c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d06e      	beq.n	80024f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b0c      	cmp	r3, #12
 8002416:	d069      	beq.n	80024ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002418:	4b64      	ldr	r3, [pc, #400]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d105      	bne.n	8002430 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002424:	4b61      	ldr	r3, [pc, #388]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0b7      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002434:	4b5d      	ldr	r3, [pc, #372]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a5c      	ldr	r2, [pc, #368]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 800243a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800243e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002440:	f7ff f996 	bl	8001770 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002448:	f7ff f992 	bl	8001770 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e0a4      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800245a:	4b54      	ldr	r3, [pc, #336]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002466:	4b51      	ldr	r3, [pc, #324]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	4b51      	ldr	r3, [pc, #324]	; (80025b0 <HAL_RCC_OscConfig+0x7c8>)
 800246c:	4013      	ands	r3, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002476:	3a01      	subs	r2, #1
 8002478:	0112      	lsls	r2, r2, #4
 800247a:	4311      	orrs	r1, r2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002480:	0212      	lsls	r2, r2, #8
 8002482:	4311      	orrs	r1, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002488:	0852      	lsrs	r2, r2, #1
 800248a:	3a01      	subs	r2, #1
 800248c:	0552      	lsls	r2, r2, #21
 800248e:	4311      	orrs	r1, r2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002494:	0852      	lsrs	r2, r2, #1
 8002496:	3a01      	subs	r2, #1
 8002498:	0652      	lsls	r2, r2, #25
 800249a:	4311      	orrs	r1, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024a0:	0912      	lsrs	r2, r2, #4
 80024a2:	0452      	lsls	r2, r2, #17
 80024a4:	430a      	orrs	r2, r1
 80024a6:	4941      	ldr	r1, [pc, #260]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024ac:	4b3f      	ldr	r3, [pc, #252]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a3e      	ldr	r2, [pc, #248]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 80024b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024b8:	4b3c      	ldr	r3, [pc, #240]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4a3b      	ldr	r2, [pc, #236]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 80024be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024c4:	f7ff f954 	bl	8001770 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024cc:	f7ff f950 	bl	8001770 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e062      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024de:	4b33      	ldr	r3, [pc, #204]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024ea:	e05a      	b.n	80025a2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e059      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f0:	4b2e      	ldr	r3, [pc, #184]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d152      	bne.n	80025a2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024fc:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a2a      	ldr	r2, [pc, #168]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 8002502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002506:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002508:	4b28      	ldr	r3, [pc, #160]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4a27      	ldr	r2, [pc, #156]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 800250e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002512:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002514:	f7ff f92c 	bl	8001770 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251c:	f7ff f928 	bl	8001770 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e03a      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800252e:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x734>
 800253a:	e032      	b.n	80025a2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	2b0c      	cmp	r3, #12
 8002540:	d02d      	beq.n	800259e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002542:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a19      	ldr	r2, [pc, #100]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 8002548:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800254c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800254e:	4b17      	ldr	r3, [pc, #92]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d105      	bne.n	8002566 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800255a:	4b14      	ldr	r3, [pc, #80]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	4a13      	ldr	r2, [pc, #76]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 8002560:	f023 0303 	bic.w	r3, r3, #3
 8002564:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	4a10      	ldr	r2, [pc, #64]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 800256c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002574:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002576:	f7ff f8fb 	bl	8001770 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257e:	f7ff f8f7 	bl	8001770 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e009      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_RCC_OscConfig+0x7c4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1f0      	bne.n	800257e <HAL_RCC_OscConfig+0x796>
 800259c:	e001      	b.n	80025a2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3720      	adds	r7, #32
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000
 80025b0:	f99d808c 	.word	0xf99d808c

080025b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0c8      	b.n	800275a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025c8:	4b66      	ldr	r3, [pc, #408]	; (8002764 <HAL_RCC_ClockConfig+0x1b0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d910      	bls.n	80025f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b63      	ldr	r3, [pc, #396]	; (8002764 <HAL_RCC_ClockConfig+0x1b0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 0207 	bic.w	r2, r3, #7
 80025de:	4961      	ldr	r1, [pc, #388]	; (8002764 <HAL_RCC_ClockConfig+0x1b0>)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e6:	4b5f      	ldr	r3, [pc, #380]	; (8002764 <HAL_RCC_ClockConfig+0x1b0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0b0      	b.n	800275a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d04c      	beq.n	800269e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b03      	cmp	r3, #3
 800260a:	d107      	bne.n	800261c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800260c:	4b56      	ldr	r3, [pc, #344]	; (8002768 <HAL_RCC_ClockConfig+0x1b4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d121      	bne.n	800265c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e09e      	b.n	800275a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d107      	bne.n	8002634 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002624:	4b50      	ldr	r3, [pc, #320]	; (8002768 <HAL_RCC_ClockConfig+0x1b4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d115      	bne.n	800265c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e092      	b.n	800275a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d107      	bne.n	800264c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800263c:	4b4a      	ldr	r3, [pc, #296]	; (8002768 <HAL_RCC_ClockConfig+0x1b4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d109      	bne.n	800265c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e086      	b.n	800275a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800264c:	4b46      	ldr	r3, [pc, #280]	; (8002768 <HAL_RCC_ClockConfig+0x1b4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e07e      	b.n	800275a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800265c:	4b42      	ldr	r3, [pc, #264]	; (8002768 <HAL_RCC_ClockConfig+0x1b4>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f023 0203 	bic.w	r2, r3, #3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	493f      	ldr	r1, [pc, #252]	; (8002768 <HAL_RCC_ClockConfig+0x1b4>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800266e:	f7ff f87f 	bl	8001770 <HAL_GetTick>
 8002672:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002674:	e00a      	b.n	800268c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002676:	f7ff f87b 	bl	8001770 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f241 3288 	movw	r2, #5000	; 0x1388
 8002684:	4293      	cmp	r3, r2
 8002686:	d901      	bls.n	800268c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e066      	b.n	800275a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268c:	4b36      	ldr	r3, [pc, #216]	; (8002768 <HAL_RCC_ClockConfig+0x1b4>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 020c 	and.w	r2, r3, #12
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	429a      	cmp	r2, r3
 800269c:	d1eb      	bne.n	8002676 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026aa:	4b2f      	ldr	r3, [pc, #188]	; (8002768 <HAL_RCC_ClockConfig+0x1b4>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	492c      	ldr	r1, [pc, #176]	; (8002768 <HAL_RCC_ClockConfig+0x1b4>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026bc:	4b29      	ldr	r3, [pc, #164]	; (8002764 <HAL_RCC_ClockConfig+0x1b0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d210      	bcs.n	80026ec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b26      	ldr	r3, [pc, #152]	; (8002764 <HAL_RCC_ClockConfig+0x1b0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 0207 	bic.w	r2, r3, #7
 80026d2:	4924      	ldr	r1, [pc, #144]	; (8002764 <HAL_RCC_ClockConfig+0x1b0>)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b22      	ldr	r3, [pc, #136]	; (8002764 <HAL_RCC_ClockConfig+0x1b0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e036      	b.n	800275a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <HAL_RCC_ClockConfig+0x1b4>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	4918      	ldr	r1, [pc, #96]	; (8002768 <HAL_RCC_ClockConfig+0x1b4>)
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d009      	beq.n	800272a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002716:	4b14      	ldr	r3, [pc, #80]	; (8002768 <HAL_RCC_ClockConfig+0x1b4>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4910      	ldr	r1, [pc, #64]	; (8002768 <HAL_RCC_ClockConfig+0x1b4>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800272a:	f000 f825 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 800272e:	4602      	mov	r2, r0
 8002730:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <HAL_RCC_ClockConfig+0x1b4>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	490c      	ldr	r1, [pc, #48]	; (800276c <HAL_RCC_ClockConfig+0x1b8>)
 800273c:	5ccb      	ldrb	r3, [r1, r3]
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	fa22 f303 	lsr.w	r3, r2, r3
 8002746:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe ffbe 	bl	80016d0 <HAL_InitTick>
 8002754:	4603      	mov	r3, r0
 8002756:	72fb      	strb	r3, [r7, #11]

  return status;
 8002758:	7afb      	ldrb	r3, [r7, #11]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40022000 	.word	0x40022000
 8002768:	40021000 	.word	0x40021000
 800276c:	080041ec 	.word	0x080041ec
 8002770:	2000003c 	.word	0x2000003c
 8002774:	20000040 	.word	0x20000040

08002778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002778:	b480      	push	{r7}
 800277a:	b089      	sub	sp, #36	; 0x24
 800277c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002786:	4b3e      	ldr	r3, [pc, #248]	; (8002880 <HAL_RCC_GetSysClockFreq+0x108>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002790:	4b3b      	ldr	r3, [pc, #236]	; (8002880 <HAL_RCC_GetSysClockFreq+0x108>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0x34>
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2b0c      	cmp	r3, #12
 80027a4:	d121      	bne.n	80027ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d11e      	bne.n	80027ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027ac:	4b34      	ldr	r3, [pc, #208]	; (8002880 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d107      	bne.n	80027c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027b8:	4b31      	ldr	r3, [pc, #196]	; (8002880 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	f003 030f 	and.w	r3, r3, #15
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	e005      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027c8:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027d4:	4a2b      	ldr	r2, [pc, #172]	; (8002884 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10d      	bne.n	8002800 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027e8:	e00a      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d102      	bne.n	80027f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027f0:	4b25      	ldr	r3, [pc, #148]	; (8002888 <HAL_RCC_GetSysClockFreq+0x110>)
 80027f2:	61bb      	str	r3, [r7, #24]
 80027f4:	e004      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027fc:	4b23      	ldr	r3, [pc, #140]	; (800288c <HAL_RCC_GetSysClockFreq+0x114>)
 80027fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	2b0c      	cmp	r3, #12
 8002804:	d134      	bne.n	8002870 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002806:	4b1e      	ldr	r3, [pc, #120]	; (8002880 <HAL_RCC_GetSysClockFreq+0x108>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d003      	beq.n	800281e <HAL_RCC_GetSysClockFreq+0xa6>
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d003      	beq.n	8002824 <HAL_RCC_GetSysClockFreq+0xac>
 800281c:	e005      	b.n	800282a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800281e:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <HAL_RCC_GetSysClockFreq+0x110>)
 8002820:	617b      	str	r3, [r7, #20]
      break;
 8002822:	e005      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <HAL_RCC_GetSysClockFreq+0x114>)
 8002826:	617b      	str	r3, [r7, #20]
      break;
 8002828:	e002      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	617b      	str	r3, [r7, #20]
      break;
 800282e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002830:	4b13      	ldr	r3, [pc, #76]	; (8002880 <HAL_RCC_GetSysClockFreq+0x108>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	3301      	adds	r3, #1
 800283c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <HAL_RCC_GetSysClockFreq+0x108>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	fb02 f203 	mul.w	r2, r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	fbb2 f3f3 	udiv	r3, r2, r3
 8002854:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <HAL_RCC_GetSysClockFreq+0x108>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	0e5b      	lsrs	r3, r3, #25
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	3301      	adds	r3, #1
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	fbb2 f3f3 	udiv	r3, r2, r3
 800286e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002870:	69bb      	ldr	r3, [r7, #24]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3724      	adds	r7, #36	; 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	080041fc 	.word	0x080041fc
 8002888:	00f42400 	.word	0x00f42400
 800288c:	007a1200 	.word	0x007a1200

08002890 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800289c:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028a8:	f7ff fa3a 	bl	8001d20 <HAL_PWREx_GetVoltageRange>
 80028ac:	6178      	str	r0, [r7, #20]
 80028ae:	e014      	b.n	80028da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028b0:	4b25      	ldr	r3, [pc, #148]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b4:	4a24      	ldr	r2, [pc, #144]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ba:	6593      	str	r3, [r2, #88]	; 0x58
 80028bc:	4b22      	ldr	r3, [pc, #136]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028c8:	f7ff fa2a 	bl	8001d20 <HAL_PWREx_GetVoltageRange>
 80028cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028ce:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d2:	4a1d      	ldr	r2, [pc, #116]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e0:	d10b      	bne.n	80028fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b80      	cmp	r3, #128	; 0x80
 80028e6:	d919      	bls.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2ba0      	cmp	r3, #160	; 0xa0
 80028ec:	d902      	bls.n	80028f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028ee:	2302      	movs	r3, #2
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	e013      	b.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028f4:	2301      	movs	r3, #1
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	e010      	b.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b80      	cmp	r3, #128	; 0x80
 80028fe:	d902      	bls.n	8002906 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002900:	2303      	movs	r3, #3
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	e00a      	b.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b80      	cmp	r3, #128	; 0x80
 800290a:	d102      	bne.n	8002912 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800290c:	2302      	movs	r3, #2
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	e004      	b.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b70      	cmp	r3, #112	; 0x70
 8002916:	d101      	bne.n	800291c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002918:	2301      	movs	r3, #1
 800291a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f023 0207 	bic.w	r2, r3, #7
 8002924:	4909      	ldr	r1, [pc, #36]	; (800294c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800292c:	4b07      	ldr	r3, [pc, #28]	; (800294c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	429a      	cmp	r2, r3
 8002938:	d001      	beq.n	800293e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40021000 	.word	0x40021000
 800294c:	40022000 	.word	0x40022000

08002950 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e095      	b.n	8002a8e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	2b00      	cmp	r3, #0
 8002968:	d108      	bne.n	800297c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002972:	d009      	beq.n	8002988 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	61da      	str	r2, [r3, #28]
 800297a:	e005      	b.n	8002988 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fe fd5c 	bl	8001460 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029c8:	d902      	bls.n	80029d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	e002      	b.n	80029d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80029de:	d007      	beq.n	80029f0 <HAL_SPI_Init+0xa0>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029e8:	d002      	beq.n	80029f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a32:	ea42 0103 	orr.w	r1, r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	0c1b      	lsrs	r3, r3, #16
 8002a4c:	f003 0204 	and.w	r2, r3, #4
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a6c:	ea42 0103 	orr.w	r1, r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b088      	sub	sp, #32
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	603b      	str	r3, [r7, #0]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_SPI_Transmit+0x22>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e158      	b.n	8002d6a <HAL_SPI_Transmit+0x2d4>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ac0:	f7fe fe56 	bl	8001770 <HAL_GetTick>
 8002ac4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d002      	beq.n	8002adc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ada:	e13d      	b.n	8002d58 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <HAL_SPI_Transmit+0x52>
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d102      	bne.n	8002aee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002aec:	e134      	b.n	8002d58 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2203      	movs	r2, #3
 8002af2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	88fa      	ldrh	r2, [r7, #6]
 8002b06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	88fa      	ldrh	r2, [r7, #6]
 8002b0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b38:	d10f      	bne.n	8002b5a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b64:	2b40      	cmp	r3, #64	; 0x40
 8002b66:	d007      	beq.n	8002b78 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b80:	d94b      	bls.n	8002c1a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <HAL_SPI_Transmit+0xfa>
 8002b8a:	8afb      	ldrh	r3, [r7, #22]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d13e      	bne.n	8002c0e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	881a      	ldrh	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	1c9a      	adds	r2, r3, #2
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bb4:	e02b      	b.n	8002c0e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d112      	bne.n	8002bea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	881a      	ldrh	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	1c9a      	adds	r2, r3, #2
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002be8:	e011      	b.n	8002c0e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bea:	f7fe fdc1 	bl	8001770 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d803      	bhi.n	8002c02 <HAL_SPI_Transmit+0x16c>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d102      	bne.n	8002c08 <HAL_SPI_Transmit+0x172>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d102      	bne.n	8002c0e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c0c:	e0a4      	b.n	8002d58 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1ce      	bne.n	8002bb6 <HAL_SPI_Transmit+0x120>
 8002c18:	e07c      	b.n	8002d14 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_SPI_Transmit+0x192>
 8002c22:	8afb      	ldrh	r3, [r7, #22]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d170      	bne.n	8002d0a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d912      	bls.n	8002c58 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c36:	881a      	ldrh	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	1c9a      	adds	r2, r3, #2
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	3b02      	subs	r3, #2
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c56:	e058      	b.n	8002d0a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	330c      	adds	r3, #12
 8002c62:	7812      	ldrb	r2, [r2, #0]
 8002c64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c7e:	e044      	b.n	8002d0a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d12b      	bne.n	8002ce6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d912      	bls.n	8002cbe <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	881a      	ldrh	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	1c9a      	adds	r2, r3, #2
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b02      	subs	r3, #2
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cbc:	e025      	b.n	8002d0a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	330c      	adds	r3, #12
 8002cc8:	7812      	ldrb	r2, [r2, #0]
 8002cca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ce4:	e011      	b.n	8002d0a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ce6:	f7fe fd43 	bl	8001770 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d803      	bhi.n	8002cfe <HAL_SPI_Transmit+0x268>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfc:	d102      	bne.n	8002d04 <HAL_SPI_Transmit+0x26e>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d08:	e026      	b.n	8002d58 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1b5      	bne.n	8002c80 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	6839      	ldr	r1, [r7, #0]
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 f945 	bl	8002fa8 <SPI_EndRxTxTransaction>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	77fb      	strb	r3, [r7, #31]
 8002d54:	e000      	b.n	8002d58 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002d56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d68:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3720      	adds	r7, #32
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d84:	f7fe fcf4 	bl	8001770 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	4413      	add	r3, r2
 8002d92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d94:	f7fe fcec 	bl	8001770 <HAL_GetTick>
 8002d98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d9a:	4b39      	ldr	r3, [pc, #228]	; (8002e80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	015b      	lsls	r3, r3, #5
 8002da0:	0d1b      	lsrs	r3, r3, #20
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	fb02 f303 	mul.w	r3, r2, r3
 8002da8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002daa:	e054      	b.n	8002e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db2:	d050      	beq.n	8002e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002db4:	f7fe fcdc 	bl	8001770 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d902      	bls.n	8002dca <SPI_WaitFlagStateUntilTimeout+0x56>
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d13d      	bne.n	8002e46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002de2:	d111      	bne.n	8002e08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dec:	d004      	beq.n	8002df8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df6:	d107      	bne.n	8002e08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e10:	d10f      	bne.n	8002e32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e017      	b.n	8002e76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	bf0c      	ite	eq
 8002e66:	2301      	moveq	r3, #1
 8002e68:	2300      	movne	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d19b      	bne.n	8002dac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3720      	adds	r7, #32
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	2000003c 	.word	0x2000003c

08002e84 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002e92:	f7fe fc6d 	bl	8001770 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ea2:	f7fe fc65 	bl	8001770 <HAL_GetTick>
 8002ea6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002ea8:	4b3e      	ldr	r3, [pc, #248]	; (8002fa4 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00da      	lsls	r2, r3, #3
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	0d1b      	lsrs	r3, r3, #20
 8002eb8:	69fa      	ldr	r2, [r7, #28]
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8002ec0:	e062      	b.n	8002f88 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002ec8:	d109      	bne.n	8002ede <SPI_WaitFifoStateUntilTimeout+0x5a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d106      	bne.n	8002ede <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	330c      	adds	r3, #12
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002edc:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d050      	beq.n	8002f88 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ee6:	f7fe fc43 	bl	8001770 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d902      	bls.n	8002efc <SPI_WaitFifoStateUntilTimeout+0x78>
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d13d      	bne.n	8002f78 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f14:	d111      	bne.n	8002f3a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f1e:	d004      	beq.n	8002f2a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f28:	d107      	bne.n	8002f3a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f42:	d10f      	bne.n	8002f64 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e010      	b.n	8002f9a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	3b01      	subs	r3, #1
 8002f86:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4013      	ands	r3, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d194      	bne.n	8002ec2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3720      	adds	r7, #32
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	2000003c 	.word	0x2000003c

08002fa8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f7ff ff5f 	bl	8002e84 <SPI_WaitFifoStateUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d007      	beq.n	8002fdc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e027      	b.n	800302c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2180      	movs	r1, #128	; 0x80
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f7ff fec4 	bl	8002d74 <SPI_WaitFlagStateUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d007      	beq.n	8003002 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff6:	f043 0220 	orr.w	r2, r3, #32
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e014      	b.n	800302c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2200      	movs	r2, #0
 800300a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f7ff ff38 	bl	8002e84 <SPI_WaitFifoStateUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d007      	beq.n	800302a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800301e:	f043 0220 	orr.w	r2, r3, #32
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e000      	b.n	800302c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8003034:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003036:	2400      	movs	r4, #0
 8003038:	2310      	movs	r3, #16
 800303a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800303e:	6803      	ldr	r3, [r0, #0]
 8003040:	9400      	str	r4, [sp, #0]
 8003042:	699e      	ldr	r6, [r3, #24]
 8003044:	f88d 4004 	strb.w	r4, [sp, #4]
 8003048:	4615      	mov	r5, r2
 800304a:	466b      	mov	r3, sp
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	47b0      	blx	r6
 8003050:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003054:	f003 0306 	and.w	r3, r3, #6
 8003058:	2b06      	cmp	r3, #6
 800305a:	bf03      	ittte	eq
 800305c:	9b00      	ldreq	r3, [sp, #0]
 800305e:	602b      	streq	r3, [r5, #0]
 8003060:	2001      	moveq	r0, #1
 8003062:	4620      	movne	r0, r4
 8003064:	b004      	add	sp, #16
 8003066:	bd70      	pop	{r4, r5, r6, pc}

08003068 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8003068:	9800      	ldr	r0, [sp, #0]
 800306a:	4290      	cmp	r0, r2
 800306c:	bf14      	ite	ne
 800306e:	2001      	movne	r0, #1
 8003070:	2006      	moveq	r0, #6
 8003072:	4770      	bx	lr

08003074 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8003074:	b510      	push	{r4, lr}
 8003076:	4b03      	ldr	r3, [pc, #12]	; (8003084 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8003078:	6003      	str	r3, [r0, #0]
 800307a:	4604      	mov	r4, r0
 800307c:	f000 f9fb 	bl	8003476 <_ZNSt9type_infoD1Ev>
 8003080:	4620      	mov	r0, r4
 8003082:	bd10      	pop	{r4, pc}
 8003084:	08004264 	.word	0x08004264

08003088 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8003088:	b510      	push	{r4, lr}
 800308a:	4604      	mov	r4, r0
 800308c:	f7ff fff2 	bl	8003074 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8003090:	4620      	mov	r0, r4
 8003092:	2108      	movs	r1, #8
 8003094:	f000 f842 	bl	800311c <_ZdlPvj>
 8003098:	4620      	mov	r0, r4
 800309a:	bd10      	pop	{r4, pc}

0800309c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800309c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030a0:	461f      	mov	r7, r3
 80030a2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80030a6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80030aa:	4598      	cmp	r8, r3
 80030ac:	4606      	mov	r6, r0
 80030ae:	4615      	mov	r5, r2
 80030b0:	d107      	bne.n	80030c2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80030b2:	9907      	ldr	r1, [sp, #28]
 80030b4:	f000 f9e2 	bl	800347c <_ZNKSt9type_infoeqERKS_>
 80030b8:	b118      	cbz	r0, 80030c2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80030ba:	7165      	strb	r5, [r4, #5]
 80030bc:	2000      	movs	r0, #0
 80030be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030c2:	4639      	mov	r1, r7
 80030c4:	4630      	mov	r0, r6
 80030c6:	f000 f9d9 	bl	800347c <_ZNKSt9type_infoeqERKS_>
 80030ca:	2800      	cmp	r0, #0
 80030cc:	d0f6      	beq.n	80030bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80030ce:	2301      	movs	r3, #1
 80030d0:	f8c4 8000 	str.w	r8, [r4]
 80030d4:	7125      	strb	r5, [r4, #4]
 80030d6:	71a3      	strb	r3, [r4, #6]
 80030d8:	e7f0      	b.n	80030bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080030da <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80030da:	b538      	push	{r3, r4, r5, lr}
 80030dc:	4615      	mov	r5, r2
 80030de:	461c      	mov	r4, r3
 80030e0:	f000 f9cc 	bl	800347c <_ZNKSt9type_infoeqERKS_>
 80030e4:	b120      	cbz	r0, 80030f0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80030e6:	2308      	movs	r3, #8
 80030e8:	60e3      	str	r3, [r4, #12]
 80030ea:	2306      	movs	r3, #6
 80030ec:	6025      	str	r5, [r4, #0]
 80030ee:	7123      	strb	r3, [r4, #4]
 80030f0:	bd38      	pop	{r3, r4, r5, pc}

080030f2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80030f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80030f4:	4605      	mov	r5, r0
 80030f6:	460c      	mov	r4, r1
 80030f8:	9201      	str	r2, [sp, #4]
 80030fa:	461e      	mov	r6, r3
 80030fc:	f000 f9be 	bl	800347c <_ZNKSt9type_infoeqERKS_>
 8003100:	b950      	cbnz	r0, 8003118 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8003102:	2e03      	cmp	r6, #3
 8003104:	d808      	bhi.n	8003118 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	9a01      	ldr	r2, [sp, #4]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	4629      	mov	r1, r5
 800310e:	4620      	mov	r0, r4
 8003110:	b002      	add	sp, #8
 8003112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003116:	4718      	bx	r3
 8003118:	b002      	add	sp, #8
 800311a:	bd70      	pop	{r4, r5, r6, pc}

0800311c <_ZdlPvj>:
 800311c:	f000 bbf8 	b.w	8003910 <_ZdlPv>

08003120 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8003120:	b538      	push	{r3, r4, r5, lr}
 8003122:	4c08      	ldr	r4, [pc, #32]	; (8003144 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8003124:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8003128:	4628      	mov	r0, r5
 800312a:	60e5      	str	r5, [r4, #12]
 800312c:	f000 fd30 	bl	8003b90 <malloc>
 8003130:	60a0      	str	r0, [r4, #8]
 8003132:	b910      	cbnz	r0, 800313a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 8003134:	60e0      	str	r0, [r4, #12]
 8003136:	6060      	str	r0, [r4, #4]
 8003138:	bd38      	pop	{r3, r4, r5, pc}
 800313a:	2300      	movs	r3, #0
 800313c:	6060      	str	r0, [r4, #4]
 800313e:	6005      	str	r5, [r0, #0]
 8003140:	6043      	str	r3, [r0, #4]
 8003142:	e7f9      	b.n	8003138 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 8003144:	20000140 	.word	0x20000140

08003148 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8003148:	7803      	ldrb	r3, [r0, #0]
 800314a:	2b47      	cmp	r3, #71	; 0x47
 800314c:	d117      	bne.n	800317e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800314e:	7843      	ldrb	r3, [r0, #1]
 8003150:	2b4e      	cmp	r3, #78	; 0x4e
 8003152:	d114      	bne.n	800317e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003154:	7883      	ldrb	r3, [r0, #2]
 8003156:	2b55      	cmp	r3, #85	; 0x55
 8003158:	d111      	bne.n	800317e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800315a:	78c3      	ldrb	r3, [r0, #3]
 800315c:	2b43      	cmp	r3, #67	; 0x43
 800315e:	d10e      	bne.n	800317e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003160:	7903      	ldrb	r3, [r0, #4]
 8003162:	2b43      	cmp	r3, #67	; 0x43
 8003164:	d10b      	bne.n	800317e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003166:	7943      	ldrb	r3, [r0, #5]
 8003168:	2b2b      	cmp	r3, #43	; 0x2b
 800316a:	d108      	bne.n	800317e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800316c:	7983      	ldrb	r3, [r0, #6]
 800316e:	2b2b      	cmp	r3, #43	; 0x2b
 8003170:	d105      	bne.n	800317e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003172:	79c0      	ldrb	r0, [r0, #7]
 8003174:	2801      	cmp	r0, #1
 8003176:	bf8c      	ite	hi
 8003178:	2000      	movhi	r0, #0
 800317a:	2001      	movls	r0, #1
 800317c:	4770      	bx	lr
 800317e:	2000      	movs	r0, #0
 8003180:	4770      	bx	lr
	...

08003184 <__cxa_type_match>:
 8003184:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003188:	461d      	mov	r5, r3
 800318a:	7803      	ldrb	r3, [r0, #0]
 800318c:	2b47      	cmp	r3, #71	; 0x47
 800318e:	460e      	mov	r6, r1
 8003190:	4602      	mov	r2, r0
 8003192:	79c1      	ldrb	r1, [r0, #7]
 8003194:	d113      	bne.n	80031be <__cxa_type_match+0x3a>
 8003196:	7843      	ldrb	r3, [r0, #1]
 8003198:	2b4e      	cmp	r3, #78	; 0x4e
 800319a:	d110      	bne.n	80031be <__cxa_type_match+0x3a>
 800319c:	7883      	ldrb	r3, [r0, #2]
 800319e:	2b55      	cmp	r3, #85	; 0x55
 80031a0:	d10d      	bne.n	80031be <__cxa_type_match+0x3a>
 80031a2:	78c3      	ldrb	r3, [r0, #3]
 80031a4:	2b43      	cmp	r3, #67	; 0x43
 80031a6:	d10a      	bne.n	80031be <__cxa_type_match+0x3a>
 80031a8:	7903      	ldrb	r3, [r0, #4]
 80031aa:	2b46      	cmp	r3, #70	; 0x46
 80031ac:	d107      	bne.n	80031be <__cxa_type_match+0x3a>
 80031ae:	7943      	ldrb	r3, [r0, #5]
 80031b0:	2b4f      	cmp	r3, #79	; 0x4f
 80031b2:	d104      	bne.n	80031be <__cxa_type_match+0x3a>
 80031b4:	7983      	ldrb	r3, [r0, #6]
 80031b6:	2b52      	cmp	r3, #82	; 0x52
 80031b8:	d101      	bne.n	80031be <__cxa_type_match+0x3a>
 80031ba:	2900      	cmp	r1, #0
 80031bc:	d031      	beq.n	8003222 <__cxa_type_match+0x9e>
 80031be:	4610      	mov	r0, r2
 80031c0:	f7ff ffc2 	bl	8003148 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80031c4:	f080 0001 	eor.w	r0, r0, #1
 80031c8:	b2c0      	uxtb	r0, r0
 80031ca:	2300      	movs	r3, #0
 80031cc:	2400      	movs	r4, #0
 80031ce:	9401      	str	r4, [sp, #4]
 80031d0:	bb53      	cbnz	r3, 8003228 <__cxa_type_match+0xa4>
 80031d2:	bb58      	cbnz	r0, 800322c <__cxa_type_match+0xa8>
 80031d4:	2901      	cmp	r1, #1
 80031d6:	bf0a      	itet	eq
 80031d8:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 80031dc:	f1a2 0320 	subne.w	r3, r2, #32
 80031e0:	3b78      	subeq	r3, #120	; 0x78
 80031e2:	2901      	cmp	r1, #1
 80031e4:	bf08      	it	eq
 80031e6:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 80031ea:	681c      	ldr	r4, [r3, #0]
 80031ec:	bf18      	it	ne
 80031ee:	3258      	addne	r2, #88	; 0x58
 80031f0:	9201      	str	r2, [sp, #4]
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	4620      	mov	r0, r4
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	4798      	blx	r3
 80031fa:	b1c8      	cbz	r0, 8003230 <__cxa_type_match+0xac>
 80031fc:	9b01      	ldr	r3, [sp, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	9301      	str	r3, [sp, #4]
 8003202:	2702      	movs	r7, #2
 8003204:	6833      	ldr	r3, [r6, #0]
 8003206:	aa01      	add	r2, sp, #4
 8003208:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800320c:	4621      	mov	r1, r4
 800320e:	2301      	movs	r3, #1
 8003210:	4630      	mov	r0, r6
 8003212:	47c0      	blx	r8
 8003214:	b170      	cbz	r0, 8003234 <__cxa_type_match+0xb0>
 8003216:	9b01      	ldr	r3, [sp, #4]
 8003218:	602b      	str	r3, [r5, #0]
 800321a:	4638      	mov	r0, r7
 800321c:	b002      	add	sp, #8
 800321e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003222:	2301      	movs	r3, #1
 8003224:	4608      	mov	r0, r1
 8003226:	e7d1      	b.n	80031cc <__cxa_type_match+0x48>
 8003228:	4c03      	ldr	r4, [pc, #12]	; (8003238 <__cxa_type_match+0xb4>)
 800322a:	e7e2      	b.n	80031f2 <__cxa_type_match+0x6e>
 800322c:	4c03      	ldr	r4, [pc, #12]	; (800323c <__cxa_type_match+0xb8>)
 800322e:	e7e0      	b.n	80031f2 <__cxa_type_match+0x6e>
 8003230:	2701      	movs	r7, #1
 8003232:	e7e7      	b.n	8003204 <__cxa_type_match+0x80>
 8003234:	4607      	mov	r7, r0
 8003236:	e7f0      	b.n	800321a <__cxa_type_match+0x96>
 8003238:	08004288 	.word	0x08004288
 800323c:	08004290 	.word	0x08004290

08003240 <__cxa_begin_cleanup>:
 8003240:	b510      	push	{r4, lr}
 8003242:	4604      	mov	r4, r0
 8003244:	f000 f860 	bl	8003308 <__cxa_get_globals>
 8003248:	4602      	mov	r2, r0
 800324a:	4620      	mov	r0, r4
 800324c:	f1a4 0120 	sub.w	r1, r4, #32
 8003250:	f7ff ff7a 	bl	8003148 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8003254:	b160      	cbz	r0, 8003270 <__cxa_begin_cleanup+0x30>
 8003256:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800325a:	3301      	adds	r3, #1
 800325c:	2b01      	cmp	r3, #1
 800325e:	f844 3c04 	str.w	r3, [r4, #-4]
 8003262:	d103      	bne.n	800326c <__cxa_begin_cleanup+0x2c>
 8003264:	6893      	ldr	r3, [r2, #8]
 8003266:	f844 3c08 	str.w	r3, [r4, #-8]
 800326a:	6091      	str	r1, [r2, #8]
 800326c:	2001      	movs	r0, #1
 800326e:	bd10      	pop	{r4, pc}
 8003270:	6893      	ldr	r3, [r2, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f9      	beq.n	800326a <__cxa_begin_cleanup+0x2a>
 8003276:	f000 f857 	bl	8003328 <_ZSt9terminatev>

0800327a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800327a:	7803      	ldrb	r3, [r0, #0]
 800327c:	2b47      	cmp	r3, #71	; 0x47
 800327e:	d117      	bne.n	80032b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003280:	7843      	ldrb	r3, [r0, #1]
 8003282:	2b4e      	cmp	r3, #78	; 0x4e
 8003284:	d114      	bne.n	80032b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003286:	7883      	ldrb	r3, [r0, #2]
 8003288:	2b55      	cmp	r3, #85	; 0x55
 800328a:	d111      	bne.n	80032b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800328c:	78c3      	ldrb	r3, [r0, #3]
 800328e:	2b43      	cmp	r3, #67	; 0x43
 8003290:	d10e      	bne.n	80032b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003292:	7903      	ldrb	r3, [r0, #4]
 8003294:	2b43      	cmp	r3, #67	; 0x43
 8003296:	d10b      	bne.n	80032b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003298:	7943      	ldrb	r3, [r0, #5]
 800329a:	2b2b      	cmp	r3, #43	; 0x2b
 800329c:	d108      	bne.n	80032b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800329e:	7983      	ldrb	r3, [r0, #6]
 80032a0:	2b2b      	cmp	r3, #43	; 0x2b
 80032a2:	d105      	bne.n	80032b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80032a4:	79c0      	ldrb	r0, [r0, #7]
 80032a6:	2801      	cmp	r0, #1
 80032a8:	bf8c      	ite	hi
 80032aa:	2000      	movhi	r0, #0
 80032ac:	2001      	movls	r0, #1
 80032ae:	4770      	bx	lr
 80032b0:	2000      	movs	r0, #0
 80032b2:	4770      	bx	lr

080032b4 <__cxa_begin_catch>:
 80032b4:	b538      	push	{r3, r4, r5, lr}
 80032b6:	4604      	mov	r4, r0
 80032b8:	f000 f826 	bl	8003308 <__cxa_get_globals>
 80032bc:	6805      	ldr	r5, [r0, #0]
 80032be:	4602      	mov	r2, r0
 80032c0:	4620      	mov	r0, r4
 80032c2:	f1a4 0120 	sub.w	r1, r4, #32
 80032c6:	f7ff ffd8 	bl	800327a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80032ca:	b928      	cbnz	r0, 80032d8 <__cxa_begin_catch+0x24>
 80032cc:	b10d      	cbz	r5, 80032d2 <__cxa_begin_catch+0x1e>
 80032ce:	f000 f82b 	bl	8003328 <_ZSt9terminatev>
 80032d2:	6011      	str	r1, [r2, #0]
 80032d4:	4628      	mov	r0, r5
 80032d6:	bd38      	pop	{r3, r4, r5, pc}
 80032d8:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bfb4      	ite	lt
 80032e0:	f1c3 0301 	rsblt	r3, r3, #1
 80032e4:	3301      	addge	r3, #1
 80032e6:	f844 3c0c 	str.w	r3, [r4, #-12]
 80032ea:	6853      	ldr	r3, [r2, #4]
 80032ec:	428d      	cmp	r5, r1
 80032ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80032f2:	6053      	str	r3, [r2, #4]
 80032f4:	4620      	mov	r0, r4
 80032f6:	bf1c      	itt	ne
 80032f8:	f844 5c10 	strne.w	r5, [r4, #-16]
 80032fc:	6011      	strne	r1, [r2, #0]
 80032fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003300:	f7fd f92e 	bl	8000560 <_Unwind_Complete>
 8003304:	e7e6      	b.n	80032d4 <__cxa_begin_catch+0x20>
	...

08003308 <__cxa_get_globals>:
 8003308:	4800      	ldr	r0, [pc, #0]	; (800330c <__cxa_get_globals+0x4>)
 800330a:	4770      	bx	lr
 800330c:	20000150 	.word	0x20000150

08003310 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003310:	b508      	push	{r3, lr}
 8003312:	4780      	blx	r0
 8003314:	f000 fbfb 	bl	8003b0e <abort>

08003318 <_ZSt13get_terminatev>:
 8003318:	4b02      	ldr	r3, [pc, #8]	; (8003324 <_ZSt13get_terminatev+0xc>)
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	f3bf 8f5b 	dmb	ish
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	2000004c 	.word	0x2000004c

08003328 <_ZSt9terminatev>:
 8003328:	b508      	push	{r3, lr}
 800332a:	f7ff fff5 	bl	8003318 <_ZSt13get_terminatev>
 800332e:	f7ff ffef 	bl	8003310 <_ZN10__cxxabiv111__terminateEPFvvE>

08003332 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8003332:	b508      	push	{r3, lr}
 8003334:	4780      	blx	r0
 8003336:	f7ff fff7 	bl	8003328 <_ZSt9terminatev>
	...

0800333c <_ZSt14get_unexpectedv>:
 800333c:	4b02      	ldr	r3, [pc, #8]	; (8003348 <_ZSt14get_unexpectedv+0xc>)
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	f3bf 8f5b 	dmb	ish
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000048 	.word	0x20000048

0800334c <_ZSt10unexpectedv>:
 800334c:	b508      	push	{r3, lr}
 800334e:	f7ff fff5 	bl	800333c <_ZSt14get_unexpectedv>
 8003352:	f7ff ffee 	bl	8003332 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08003356 <_Znwj>:
 8003356:	2801      	cmp	r0, #1
 8003358:	bf38      	it	cc
 800335a:	2001      	movcc	r0, #1
 800335c:	b510      	push	{r4, lr}
 800335e:	4604      	mov	r4, r0
 8003360:	4620      	mov	r0, r4
 8003362:	f000 fc15 	bl	8003b90 <malloc>
 8003366:	b930      	cbnz	r0, 8003376 <_Znwj+0x20>
 8003368:	f000 fb06 	bl	8003978 <_ZSt15get_new_handlerv>
 800336c:	b908      	cbnz	r0, 8003372 <_Znwj+0x1c>
 800336e:	f000 fbce 	bl	8003b0e <abort>
 8003372:	4780      	blx	r0
 8003374:	e7f4      	b.n	8003360 <_Znwj+0xa>
 8003376:	bd10      	pop	{r4, pc}

08003378 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8003378:	b510      	push	{r4, lr}
 800337a:	4b03      	ldr	r3, [pc, #12]	; (8003388 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800337c:	6003      	str	r3, [r0, #0]
 800337e:	4604      	mov	r4, r0
 8003380:	f7ff fe78 	bl	8003074 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8003384:	4620      	mov	r0, r4
 8003386:	bd10      	pop	{r4, pc}
 8003388:	08004318 	.word	0x08004318

0800338c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800338c:	b510      	push	{r4, lr}
 800338e:	4604      	mov	r4, r0
 8003390:	f7ff fff2 	bl	8003378 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8003394:	4620      	mov	r0, r4
 8003396:	210c      	movs	r1, #12
 8003398:	f7ff fec0 	bl	800311c <_ZdlPvj>
 800339c:	4620      	mov	r0, r4
 800339e:	bd10      	pop	{r4, pc}

080033a0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80033a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033a2:	9f08      	ldr	r7, [sp, #32]
 80033a4:	4297      	cmp	r7, r2
 80033a6:	4605      	mov	r5, r0
 80033a8:	460e      	mov	r6, r1
 80033aa:	4614      	mov	r4, r2
 80033ac:	d00a      	beq.n	80033c4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 80033ae:	68a8      	ldr	r0, [r5, #8]
 80033b0:	6802      	ldr	r2, [r0, #0]
 80033b2:	9708      	str	r7, [sp, #32]
 80033b4:	6a15      	ldr	r5, [r2, #32]
 80033b6:	4631      	mov	r1, r6
 80033b8:	4622      	mov	r2, r4
 80033ba:	46ac      	mov	ip, r5
 80033bc:	b003      	add	sp, #12
 80033be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80033c2:	4760      	bx	ip
 80033c4:	4619      	mov	r1, r3
 80033c6:	9301      	str	r3, [sp, #4]
 80033c8:	f000 f858 	bl	800347c <_ZNKSt9type_infoeqERKS_>
 80033cc:	9b01      	ldr	r3, [sp, #4]
 80033ce:	2800      	cmp	r0, #0
 80033d0:	d0ed      	beq.n	80033ae <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 80033d2:	2006      	movs	r0, #6
 80033d4:	b003      	add	sp, #12
 80033d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80033d8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033dc:	460d      	mov	r5, r1
 80033de:	4619      	mov	r1, r3
 80033e0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80033e4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80033e8:	4681      	mov	r9, r0
 80033ea:	4617      	mov	r7, r2
 80033ec:	4698      	mov	r8, r3
 80033ee:	f000 f845 	bl	800347c <_ZNKSt9type_infoeqERKS_>
 80033f2:	b190      	cbz	r0, 800341a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80033f4:	2d00      	cmp	r5, #0
 80033f6:	6034      	str	r4, [r6, #0]
 80033f8:	7137      	strb	r7, [r6, #4]
 80033fa:	db09      	blt.n	8003410 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80033fc:	1961      	adds	r1, r4, r5
 80033fe:	458a      	cmp	sl, r1
 8003400:	bf0c      	ite	eq
 8003402:	2106      	moveq	r1, #6
 8003404:	2101      	movne	r1, #1
 8003406:	71b1      	strb	r1, [r6, #6]
 8003408:	2000      	movs	r0, #0
 800340a:	b001      	add	sp, #4
 800340c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003410:	3502      	adds	r5, #2
 8003412:	d1f9      	bne.n	8003408 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8003414:	2301      	movs	r3, #1
 8003416:	71b3      	strb	r3, [r6, #6]
 8003418:	e7f6      	b.n	8003408 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800341a:	4554      	cmp	r4, sl
 800341c:	d106      	bne.n	800342c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800341e:	4659      	mov	r1, fp
 8003420:	4648      	mov	r0, r9
 8003422:	f000 f82b 	bl	800347c <_ZNKSt9type_infoeqERKS_>
 8003426:	b108      	cbz	r0, 800342c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8003428:	7177      	strb	r7, [r6, #5]
 800342a:	e7ed      	b.n	8003408 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800342c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8003430:	6803      	ldr	r3, [r0, #0]
 8003432:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8003436:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 800343a:	69dc      	ldr	r4, [r3, #28]
 800343c:	463a      	mov	r2, r7
 800343e:	4643      	mov	r3, r8
 8003440:	4629      	mov	r1, r5
 8003442:	46a4      	mov	ip, r4
 8003444:	b001      	add	sp, #4
 8003446:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800344a:	4760      	bx	ip

0800344c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800344c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003450:	4607      	mov	r7, r0
 8003452:	460c      	mov	r4, r1
 8003454:	4615      	mov	r5, r2
 8003456:	461e      	mov	r6, r3
 8003458:	f7ff fe3f 	bl	80030da <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800345c:	b948      	cbnz	r0, 8003472 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800345e:	68b8      	ldr	r0, [r7, #8]
 8003460:	6803      	ldr	r3, [r0, #0]
 8003462:	699f      	ldr	r7, [r3, #24]
 8003464:	462a      	mov	r2, r5
 8003466:	4633      	mov	r3, r6
 8003468:	4621      	mov	r1, r4
 800346a:	46bc      	mov	ip, r7
 800346c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003470:	4760      	bx	ip
 8003472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003476 <_ZNSt9type_infoD1Ev>:
 8003476:	4770      	bx	lr

08003478 <_ZNKSt9type_info14__is_pointer_pEv>:
 8003478:	2000      	movs	r0, #0
 800347a:	4770      	bx	lr

0800347c <_ZNKSt9type_infoeqERKS_>:
 800347c:	4281      	cmp	r1, r0
 800347e:	b508      	push	{r3, lr}
 8003480:	d00e      	beq.n	80034a0 <_ZNKSt9type_infoeqERKS_+0x24>
 8003482:	6840      	ldr	r0, [r0, #4]
 8003484:	7803      	ldrb	r3, [r0, #0]
 8003486:	2b2a      	cmp	r3, #42	; 0x2a
 8003488:	d00c      	beq.n	80034a4 <_ZNKSt9type_infoeqERKS_+0x28>
 800348a:	6849      	ldr	r1, [r1, #4]
 800348c:	780b      	ldrb	r3, [r1, #0]
 800348e:	2b2a      	cmp	r3, #42	; 0x2a
 8003490:	bf08      	it	eq
 8003492:	3101      	addeq	r1, #1
 8003494:	f7fc fe98 	bl	80001c8 <strcmp>
 8003498:	fab0 f080 	clz	r0, r0
 800349c:	0940      	lsrs	r0, r0, #5
 800349e:	bd08      	pop	{r3, pc}
 80034a0:	2001      	movs	r0, #1
 80034a2:	e7fc      	b.n	800349e <_ZNKSt9type_infoeqERKS_+0x22>
 80034a4:	2000      	movs	r0, #0
 80034a6:	e7fa      	b.n	800349e <_ZNKSt9type_infoeqERKS_+0x22>

080034a8 <_ZNSs7_M_copyEPcPKcj>:
 80034a8:	2a01      	cmp	r2, #1
 80034aa:	b430      	push	{r4, r5}
 80034ac:	d103      	bne.n	80034b6 <_ZNSs7_M_copyEPcPKcj+0xe>
 80034ae:	780b      	ldrb	r3, [r1, #0]
 80034b0:	7003      	strb	r3, [r0, #0]
 80034b2:	bc30      	pop	{r4, r5}
 80034b4:	4770      	bx	lr
 80034b6:	2a00      	cmp	r2, #0
 80034b8:	d0fb      	beq.n	80034b2 <_ZNSs7_M_copyEPcPKcj+0xa>
 80034ba:	bc30      	pop	{r4, r5}
 80034bc:	f000 bb78 	b.w	8003bb0 <memcpy>

080034c0 <_ZNSs13_S_copy_charsEPcPKcS1_>:
 80034c0:	b508      	push	{r3, lr}
 80034c2:	1a52      	subs	r2, r2, r1
 80034c4:	f7ff fff0 	bl	80034a8 <_ZNSs7_M_copyEPcPKcj>
 80034c8:	bd08      	pop	{r3, pc}
	...

080034cc <_ZNSs4_Rep26_M_set_length_and_sharableEj>:
 80034cc:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x14>)
 80034ce:	4298      	cmp	r0, r3
 80034d0:	d004      	beq.n	80034dc <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x10>
 80034d2:	6001      	str	r1, [r0, #0]
 80034d4:	4401      	add	r1, r0
 80034d6:	2300      	movs	r3, #0
 80034d8:	6083      	str	r3, [r0, #8]
 80034da:	730b      	strb	r3, [r1, #12]
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	2000015c 	.word	0x2000015c

080034e4 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 80034e4:	4b15      	ldr	r3, [pc, #84]	; (800353c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 80034e6:	4298      	cmp	r0, r3
 80034e8:	b510      	push	{r4, lr}
 80034ea:	4604      	mov	r4, r0
 80034ec:	d902      	bls.n	80034f4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x10>
 80034ee:	4814      	ldr	r0, [pc, #80]	; (8003540 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x5c>)
 80034f0:	f000 f8e6 	bl	80036c0 <_ZSt20__throw_length_errorPKc>
 80034f4:	4288      	cmp	r0, r1
 80034f6:	d903      	bls.n	8003500 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x1c>
 80034f8:	004b      	lsls	r3, r1, #1
 80034fa:	4298      	cmp	r0, r3
 80034fc:	bf38      	it	cc
 80034fe:	461c      	movcc	r4, r3
 8003500:	f104 031d 	add.w	r3, r4, #29
 8003504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003508:	f104 000d 	add.w	r0, r4, #13
 800350c:	d90c      	bls.n	8003528 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 800350e:	428c      	cmp	r4, r1
 8003510:	d90a      	bls.n	8003528 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8003512:	480a      	ldr	r0, [pc, #40]	; (800353c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8003514:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8003518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351c:	1ae4      	subs	r4, r4, r3
 800351e:	4284      	cmp	r4, r0
 8003520:	bf28      	it	cs
 8003522:	4604      	movcs	r4, r0
 8003524:	f104 000d 	add.w	r0, r4, #13
 8003528:	2800      	cmp	r0, #0
 800352a:	da01      	bge.n	8003530 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x4c>
 800352c:	f000 f8c2 	bl	80036b4 <_ZSt17__throw_bad_allocv>
 8003530:	f7ff ff11 	bl	8003356 <_Znwj>
 8003534:	2200      	movs	r2, #0
 8003536:	6044      	str	r4, [r0, #4]
 8003538:	6082      	str	r2, [r0, #8]
 800353a:	bd10      	pop	{r4, pc}
 800353c:	3ffffffc 	.word	0x3ffffffc
 8003540:	08004351 	.word	0x08004351

08003544 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
 8003544:	4288      	cmp	r0, r1
 8003546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800354a:	4604      	mov	r4, r0
 800354c:	460d      	mov	r5, r1
 800354e:	d018      	beq.n	8003582 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x3e>
 8003550:	b1a0      	cbz	r0, 800357c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x38>
 8003552:	eba1 0800 	sub.w	r8, r1, r0
 8003556:	4640      	mov	r0, r8
 8003558:	2100      	movs	r1, #0
 800355a:	f7ff ffc3 	bl	80034e4 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 800355e:	f100 070c 	add.w	r7, r0, #12
 8003562:	4606      	mov	r6, r0
 8003564:	4621      	mov	r1, r4
 8003566:	4638      	mov	r0, r7
 8003568:	462a      	mov	r2, r5
 800356a:	f7ff ffa9 	bl	80034c0 <_ZNSs13_S_copy_charsEPcPKcS1_>
 800356e:	4641      	mov	r1, r8
 8003570:	4630      	mov	r0, r6
 8003572:	f7ff ffab 	bl	80034cc <_ZNSs4_Rep26_M_set_length_and_sharableEj>
 8003576:	4638      	mov	r0, r7
 8003578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800357c:	4802      	ldr	r0, [pc, #8]	; (8003588 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x44>)
 800357e:	f000 f89c 	bl	80036ba <_ZSt19__throw_logic_errorPKc>
 8003582:	4f02      	ldr	r7, [pc, #8]	; (800358c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x48>)
 8003584:	e7f7      	b.n	8003576 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x32>
 8003586:	bf00      	nop
 8003588:	08004369 	.word	0x08004369
 800358c:	20000168 	.word	0x20000168

08003590 <_ZNSsC1EPKcjRKSaIcE>:
 8003590:	b510      	push	{r4, lr}
 8003592:	4604      	mov	r4, r0
 8003594:	4608      	mov	r0, r1
 8003596:	4611      	mov	r1, r2
 8003598:	4401      	add	r1, r0
 800359a:	461a      	mov	r2, r3
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	f7ff ffd0 	bl	8003544 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 80035a4:	6020      	str	r0, [r4, #0]
 80035a6:	4620      	mov	r0, r4
 80035a8:	bd10      	pop	{r4, pc}
	...

080035ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80035ac:	4b18      	ldr	r3, [pc, #96]	; (8003610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	07d1      	lsls	r1, r2, #31
 80035b2:	bf5c      	itt	pl
 80035b4:	2201      	movpl	r2, #1
 80035b6:	601a      	strpl	r2, [r3, #0]
 80035b8:	4b16      	ldr	r3, [pc, #88]	; (8003614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	07d2      	lsls	r2, r2, #31
 80035be:	bf5c      	itt	pl
 80035c0:	2201      	movpl	r2, #1
 80035c2:	601a      	strpl	r2, [r3, #0]
 80035c4:	4b14      	ldr	r3, [pc, #80]	; (8003618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	07d0      	lsls	r0, r2, #31
 80035ca:	bf5c      	itt	pl
 80035cc:	2201      	movpl	r2, #1
 80035ce:	601a      	strpl	r2, [r3, #0]
 80035d0:	4b12      	ldr	r3, [pc, #72]	; (800361c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	07d1      	lsls	r1, r2, #31
 80035d6:	bf5c      	itt	pl
 80035d8:	2201      	movpl	r2, #1
 80035da:	601a      	strpl	r2, [r3, #0]
 80035dc:	4b10      	ldr	r3, [pc, #64]	; (8003620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	07d2      	lsls	r2, r2, #31
 80035e2:	bf5c      	itt	pl
 80035e4:	2201      	movpl	r2, #1
 80035e6:	601a      	strpl	r2, [r3, #0]
 80035e8:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	07d0      	lsls	r0, r2, #31
 80035ee:	bf5c      	itt	pl
 80035f0:	2201      	movpl	r2, #1
 80035f2:	601a      	strpl	r2, [r3, #0]
 80035f4:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	07d1      	lsls	r1, r2, #31
 80035fa:	bf5c      	itt	pl
 80035fc:	2201      	movpl	r2, #1
 80035fe:	601a      	strpl	r2, [r3, #0]
 8003600:	4b0a      	ldr	r3, [pc, #40]	; (800362c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	07d2      	lsls	r2, r2, #31
 8003606:	bf5c      	itt	pl
 8003608:	2201      	movpl	r2, #1
 800360a:	601a      	strpl	r2, [r3, #0]
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	20000188 	.word	0x20000188
 8003614:	20000184 	.word	0x20000184
 8003618:	20000180 	.word	0x20000180
 800361c:	2000017c 	.word	0x2000017c
 8003620:	20000178 	.word	0x20000178
 8003624:	20000174 	.word	0x20000174
 8003628:	20000170 	.word	0x20000170
 800362c:	2000016c 	.word	0x2000016c

08003630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8003630:	4b18      	ldr	r3, [pc, #96]	; (8003694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	07d1      	lsls	r1, r2, #31
 8003636:	bf5c      	itt	pl
 8003638:	2201      	movpl	r2, #1
 800363a:	601a      	strpl	r2, [r3, #0]
 800363c:	4b16      	ldr	r3, [pc, #88]	; (8003698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	07d2      	lsls	r2, r2, #31
 8003642:	bf5c      	itt	pl
 8003644:	2201      	movpl	r2, #1
 8003646:	601a      	strpl	r2, [r3, #0]
 8003648:	4b14      	ldr	r3, [pc, #80]	; (800369c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	07d0      	lsls	r0, r2, #31
 800364e:	bf5c      	itt	pl
 8003650:	2201      	movpl	r2, #1
 8003652:	601a      	strpl	r2, [r3, #0]
 8003654:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	07d1      	lsls	r1, r2, #31
 800365a:	bf5c      	itt	pl
 800365c:	2201      	movpl	r2, #1
 800365e:	601a      	strpl	r2, [r3, #0]
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	07d2      	lsls	r2, r2, #31
 8003666:	bf5c      	itt	pl
 8003668:	2201      	movpl	r2, #1
 800366a:	601a      	strpl	r2, [r3, #0]
 800366c:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	07d0      	lsls	r0, r2, #31
 8003672:	bf5c      	itt	pl
 8003674:	2201      	movpl	r2, #1
 8003676:	601a      	strpl	r2, [r3, #0]
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	07d1      	lsls	r1, r2, #31
 800367e:	bf5c      	itt	pl
 8003680:	2201      	movpl	r2, #1
 8003682:	601a      	strpl	r2, [r3, #0]
 8003684:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	07d2      	lsls	r2, r2, #31
 800368a:	bf5c      	itt	pl
 800368c:	2201      	movpl	r2, #1
 800368e:	601a      	strpl	r2, [r3, #0]
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	200001a8 	.word	0x200001a8
 8003698:	200001a4 	.word	0x200001a4
 800369c:	200001a0 	.word	0x200001a0
 80036a0:	2000019c 	.word	0x2000019c
 80036a4:	20000198 	.word	0x20000198
 80036a8:	20000194 	.word	0x20000194
 80036ac:	20000190 	.word	0x20000190
 80036b0:	2000018c 	.word	0x2000018c

080036b4 <_ZSt17__throw_bad_allocv>:
 80036b4:	b508      	push	{r3, lr}
 80036b6:	f000 fa2a 	bl	8003b0e <abort>

080036ba <_ZSt19__throw_logic_errorPKc>:
 80036ba:	b508      	push	{r3, lr}
 80036bc:	f000 fa27 	bl	8003b0e <abort>

080036c0 <_ZSt20__throw_length_errorPKc>:
 80036c0:	b508      	push	{r3, lr}
 80036c2:	f000 fa24 	bl	8003b0e <abort>

080036c6 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80036c6:	b10a      	cbz	r2, 80036cc <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80036c8:	f000 ba72 	b.w	8003bb0 <memcpy>
 80036cc:	4770      	bx	lr
	...

080036d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80036d0:	4b24      	ldr	r3, [pc, #144]	; (8003764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	07d0      	lsls	r0, r2, #31
 80036d6:	bf5c      	itt	pl
 80036d8:	2201      	movpl	r2, #1
 80036da:	601a      	strpl	r2, [r3, #0]
 80036dc:	4b22      	ldr	r3, [pc, #136]	; (8003768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	07d1      	lsls	r1, r2, #31
 80036e2:	bf5c      	itt	pl
 80036e4:	2201      	movpl	r2, #1
 80036e6:	601a      	strpl	r2, [r3, #0]
 80036e8:	4b20      	ldr	r3, [pc, #128]	; (800376c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	07d2      	lsls	r2, r2, #31
 80036ee:	bf5c      	itt	pl
 80036f0:	2201      	movpl	r2, #1
 80036f2:	601a      	strpl	r2, [r3, #0]
 80036f4:	4b1e      	ldr	r3, [pc, #120]	; (8003770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	07d0      	lsls	r0, r2, #31
 80036fa:	bf5c      	itt	pl
 80036fc:	2201      	movpl	r2, #1
 80036fe:	601a      	strpl	r2, [r3, #0]
 8003700:	4b1c      	ldr	r3, [pc, #112]	; (8003774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	07d1      	lsls	r1, r2, #31
 8003706:	bf5c      	itt	pl
 8003708:	2201      	movpl	r2, #1
 800370a:	601a      	strpl	r2, [r3, #0]
 800370c:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	07d2      	lsls	r2, r2, #31
 8003712:	bf5c      	itt	pl
 8003714:	2201      	movpl	r2, #1
 8003716:	601a      	strpl	r2, [r3, #0]
 8003718:	4b18      	ldr	r3, [pc, #96]	; (800377c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	07d0      	lsls	r0, r2, #31
 800371e:	bf5c      	itt	pl
 8003720:	2201      	movpl	r2, #1
 8003722:	601a      	strpl	r2, [r3, #0]
 8003724:	4b16      	ldr	r3, [pc, #88]	; (8003780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	07d1      	lsls	r1, r2, #31
 800372a:	bf5c      	itt	pl
 800372c:	2201      	movpl	r2, #1
 800372e:	601a      	strpl	r2, [r3, #0]
 8003730:	4b14      	ldr	r3, [pc, #80]	; (8003784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	07d2      	lsls	r2, r2, #31
 8003736:	bf5c      	itt	pl
 8003738:	2201      	movpl	r2, #1
 800373a:	601a      	strpl	r2, [r3, #0]
 800373c:	4b12      	ldr	r3, [pc, #72]	; (8003788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	07d0      	lsls	r0, r2, #31
 8003742:	bf5c      	itt	pl
 8003744:	2201      	movpl	r2, #1
 8003746:	601a      	strpl	r2, [r3, #0]
 8003748:	4b10      	ldr	r3, [pc, #64]	; (800378c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	07d1      	lsls	r1, r2, #31
 800374e:	bf5c      	itt	pl
 8003750:	2201      	movpl	r2, #1
 8003752:	601a      	strpl	r2, [r3, #0]
 8003754:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	07d2      	lsls	r2, r2, #31
 800375a:	bf5c      	itt	pl
 800375c:	2201      	movpl	r2, #1
 800375e:	601a      	strpl	r2, [r3, #0]
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	200001d8 	.word	0x200001d8
 8003768:	200001d4 	.word	0x200001d4
 800376c:	200001d0 	.word	0x200001d0
 8003770:	200001cc 	.word	0x200001cc
 8003774:	200001c8 	.word	0x200001c8
 8003778:	200001c4 	.word	0x200001c4
 800377c:	200001c0 	.word	0x200001c0
 8003780:	200001bc 	.word	0x200001bc
 8003784:	200001b8 	.word	0x200001b8
 8003788:	200001b4 	.word	0x200001b4
 800378c:	200001b0 	.word	0x200001b0
 8003790:	200001ac 	.word	0x200001ac

08003794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8003794:	b508      	push	{r3, lr}
 8003796:	680b      	ldr	r3, [r1, #0]
 8003798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379c:	d302      	bcc.n	80037a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800379e:	480d      	ldr	r0, [pc, #52]	; (80037d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80037a0:	f7ff ff8e 	bl	80036c0 <_ZSt20__throw_length_errorPKc>
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d90b      	bls.n	80037c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80037a8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80037ac:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80037b0:	d206      	bcs.n	80037c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80037b2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80037b6:	bf2a      	itet	cs
 80037b8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80037bc:	6008      	strcc	r0, [r1, #0]
 80037be:	600b      	strcs	r3, [r1, #0]
 80037c0:	6808      	ldr	r0, [r1, #0]
 80037c2:	3001      	adds	r0, #1
 80037c4:	d501      	bpl.n	80037ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80037c6:	f7ff ff75 	bl	80036b4 <_ZSt17__throw_bad_allocv>
 80037ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80037ce:	f7ff bdc2 	b.w	8003356 <_Znwj>
 80037d2:	bf00      	nop
 80037d4:	08004393 	.word	0x08004393

080037d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80037d8:	f850 3b08 	ldr.w	r3, [r0], #8
 80037dc:	4283      	cmp	r3, r0
 80037de:	d002      	beq.n	80037e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 b895 	b.w	8003910 <_ZdlPv>
 80037e6:	4770      	bx	lr

080037e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80037e8:	2a01      	cmp	r2, #1
 80037ea:	b510      	push	{r4, lr}
 80037ec:	d102      	bne.n	80037f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80037ee:	780a      	ldrb	r2, [r1, #0]
 80037f0:	7002      	strb	r2, [r0, #0]
 80037f2:	bd10      	pop	{r4, pc}
 80037f4:	f7ff ff67 	bl	80036c6 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80037f8:	e7fb      	b.n	80037f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080037fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80037fa:	b508      	push	{r3, lr}
 80037fc:	1a52      	subs	r2, r2, r1
 80037fe:	f7ff fff3 	bl	80037e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003802:	bd08      	pop	{r3, pc}

08003804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8003804:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003806:	4604      	mov	r4, r0
 8003808:	4616      	mov	r6, r2
 800380a:	460d      	mov	r5, r1
 800380c:	b919      	cbnz	r1, 8003816 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800380e:	b112      	cbz	r2, 8003816 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8003810:	480d      	ldr	r0, [pc, #52]	; (8003848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8003812:	f7ff ff52 	bl	80036ba <_ZSt19__throw_logic_errorPKc>
 8003816:	1b73      	subs	r3, r6, r5
 8003818:	2b0f      	cmp	r3, #15
 800381a:	9301      	str	r3, [sp, #4]
 800381c:	d907      	bls.n	800382e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800381e:	2200      	movs	r2, #0
 8003820:	a901      	add	r1, sp, #4
 8003822:	4620      	mov	r0, r4
 8003824:	f7ff ffb6 	bl	8003794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8003828:	9b01      	ldr	r3, [sp, #4]
 800382a:	6020      	str	r0, [r4, #0]
 800382c:	60a3      	str	r3, [r4, #8]
 800382e:	4632      	mov	r2, r6
 8003830:	4629      	mov	r1, r5
 8003832:	6820      	ldr	r0, [r4, #0]
 8003834:	f7ff ffe1 	bl	80037fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8003838:	9b01      	ldr	r3, [sp, #4]
 800383a:	6822      	ldr	r2, [r4, #0]
 800383c:	6063      	str	r3, [r4, #4]
 800383e:	2100      	movs	r1, #0
 8003840:	54d1      	strb	r1, [r2, r3]
 8003842:	b002      	add	sp, #8
 8003844:	bd70      	pop	{r4, r5, r6, pc}
 8003846:	bf00      	nop
 8003848:	080043ab 	.word	0x080043ab

0800384c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 800384c:	4b24      	ldr	r3, [pc, #144]	; (80038e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	07d0      	lsls	r0, r2, #31
 8003852:	bf5c      	itt	pl
 8003854:	2201      	movpl	r2, #1
 8003856:	601a      	strpl	r2, [r3, #0]
 8003858:	4b22      	ldr	r3, [pc, #136]	; (80038e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	07d1      	lsls	r1, r2, #31
 800385e:	bf5c      	itt	pl
 8003860:	2201      	movpl	r2, #1
 8003862:	601a      	strpl	r2, [r3, #0]
 8003864:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	07d2      	lsls	r2, r2, #31
 800386a:	bf5c      	itt	pl
 800386c:	2201      	movpl	r2, #1
 800386e:	601a      	strpl	r2, [r3, #0]
 8003870:	4b1e      	ldr	r3, [pc, #120]	; (80038ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	07d0      	lsls	r0, r2, #31
 8003876:	bf5c      	itt	pl
 8003878:	2201      	movpl	r2, #1
 800387a:	601a      	strpl	r2, [r3, #0]
 800387c:	4b1c      	ldr	r3, [pc, #112]	; (80038f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	07d1      	lsls	r1, r2, #31
 8003882:	bf5c      	itt	pl
 8003884:	2201      	movpl	r2, #1
 8003886:	601a      	strpl	r2, [r3, #0]
 8003888:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	07d2      	lsls	r2, r2, #31
 800388e:	bf5c      	itt	pl
 8003890:	2201      	movpl	r2, #1
 8003892:	601a      	strpl	r2, [r3, #0]
 8003894:	4b18      	ldr	r3, [pc, #96]	; (80038f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	07d0      	lsls	r0, r2, #31
 800389a:	bf5c      	itt	pl
 800389c:	2201      	movpl	r2, #1
 800389e:	601a      	strpl	r2, [r3, #0]
 80038a0:	4b16      	ldr	r3, [pc, #88]	; (80038fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	07d1      	lsls	r1, r2, #31
 80038a6:	bf5c      	itt	pl
 80038a8:	2201      	movpl	r2, #1
 80038aa:	601a      	strpl	r2, [r3, #0]
 80038ac:	4b14      	ldr	r3, [pc, #80]	; (8003900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	07d2      	lsls	r2, r2, #31
 80038b2:	bf5c      	itt	pl
 80038b4:	2201      	movpl	r2, #1
 80038b6:	601a      	strpl	r2, [r3, #0]
 80038b8:	4b12      	ldr	r3, [pc, #72]	; (8003904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	07d0      	lsls	r0, r2, #31
 80038be:	bf5c      	itt	pl
 80038c0:	2201      	movpl	r2, #1
 80038c2:	601a      	strpl	r2, [r3, #0]
 80038c4:	4b10      	ldr	r3, [pc, #64]	; (8003908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	07d1      	lsls	r1, r2, #31
 80038ca:	bf5c      	itt	pl
 80038cc:	2201      	movpl	r2, #1
 80038ce:	601a      	strpl	r2, [r3, #0]
 80038d0:	4b0e      	ldr	r3, [pc, #56]	; (800390c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	07d2      	lsls	r2, r2, #31
 80038d6:	bf5c      	itt	pl
 80038d8:	2201      	movpl	r2, #1
 80038da:	601a      	strpl	r2, [r3, #0]
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	20000208 	.word	0x20000208
 80038e4:	20000204 	.word	0x20000204
 80038e8:	20000200 	.word	0x20000200
 80038ec:	200001fc 	.word	0x200001fc
 80038f0:	200001f8 	.word	0x200001f8
 80038f4:	200001f4 	.word	0x200001f4
 80038f8:	200001f0 	.word	0x200001f0
 80038fc:	200001ec 	.word	0x200001ec
 8003900:	200001e8 	.word	0x200001e8
 8003904:	200001e4 	.word	0x200001e4
 8003908:	200001e0 	.word	0x200001e0
 800390c:	200001dc 	.word	0x200001dc

08003910 <_ZdlPv>:
 8003910:	f000 b946 	b.w	8003ba0 <free>

08003914 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8003914:	7803      	ldrb	r3, [r0, #0]
 8003916:	2b47      	cmp	r3, #71	; 0x47
 8003918:	d117      	bne.n	800394a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800391a:	7843      	ldrb	r3, [r0, #1]
 800391c:	2b4e      	cmp	r3, #78	; 0x4e
 800391e:	d114      	bne.n	800394a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003920:	7883      	ldrb	r3, [r0, #2]
 8003922:	2b55      	cmp	r3, #85	; 0x55
 8003924:	d111      	bne.n	800394a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003926:	78c3      	ldrb	r3, [r0, #3]
 8003928:	2b43      	cmp	r3, #67	; 0x43
 800392a:	d10e      	bne.n	800394a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800392c:	7903      	ldrb	r3, [r0, #4]
 800392e:	2b43      	cmp	r3, #67	; 0x43
 8003930:	d10b      	bne.n	800394a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003932:	7943      	ldrb	r3, [r0, #5]
 8003934:	2b2b      	cmp	r3, #43	; 0x2b
 8003936:	d108      	bne.n	800394a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003938:	7983      	ldrb	r3, [r0, #6]
 800393a:	2b2b      	cmp	r3, #43	; 0x2b
 800393c:	d105      	bne.n	800394a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800393e:	79c0      	ldrb	r0, [r0, #7]
 8003940:	2801      	cmp	r0, #1
 8003942:	bf8c      	ite	hi
 8003944:	2000      	movhi	r0, #0
 8003946:	2001      	movls	r0, #1
 8003948:	4770      	bx	lr
 800394a:	2000      	movs	r0, #0
 800394c:	4770      	bx	lr

0800394e <__cxa_call_unexpected>:
 800394e:	b538      	push	{r3, r4, r5, lr}
 8003950:	4602      	mov	r2, r0
 8003952:	f7ff ffdf 	bl	8003914 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8003956:	b140      	cbz	r0, 800396a <__cxa_call_unexpected+0x1c>
 8003958:	f852 4c18 	ldr.w	r4, [r2, #-24]
 800395c:	2500      	movs	r5, #0
 800395e:	4610      	mov	r0, r2
 8003960:	f7ff fca8 	bl	80032b4 <__cxa_begin_catch>
 8003964:	b125      	cbz	r5, 8003970 <__cxa_call_unexpected+0x22>
 8003966:	f7ff fcf1 	bl	800334c <_ZSt10unexpectedv>
 800396a:	4604      	mov	r4, r0
 800396c:	2501      	movs	r5, #1
 800396e:	e7f6      	b.n	800395e <__cxa_call_unexpected+0x10>
 8003970:	4620      	mov	r0, r4
 8003972:	f7ff fcde 	bl	8003332 <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

08003978 <_ZSt15get_new_handlerv>:
 8003978:	4b02      	ldr	r3, [pc, #8]	; (8003984 <_ZSt15get_new_handlerv+0xc>)
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	f3bf 8f5b 	dmb	ish
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	2000020c 	.word	0x2000020c

08003988 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv>:
 8003988:	4800      	ldr	r0, [pc, #0]	; (800398c <_ZNK12_GLOBAL__N_122generic_error_category4nameEv+0x4>)
 800398a:	4770      	bx	lr
 800398c:	080043d5 	.word	0x080043d5

08003990 <_ZNK12_GLOBAL__N_121system_error_category4nameEv>:
 8003990:	4800      	ldr	r0, [pc, #0]	; (8003994 <_ZNK12_GLOBAL__N_121system_error_category4nameEv+0x4>)
 8003992:	4770      	bx	lr
 8003994:	080047ef 	.word	0x080047ef

08003998 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi>:
 8003998:	2a74      	cmp	r2, #116	; 0x74
 800399a:	dc22      	bgt.n	80039e2 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x4a>
 800399c:	2a57      	cmp	r2, #87	; 0x57
 800399e:	dc0b      	bgt.n	80039b8 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x20>
 80039a0:	2a4d      	cmp	r2, #77	; 0x4d
 80039a2:	dc28      	bgt.n	80039f6 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 80039a4:	2a3b      	cmp	r2, #59	; 0x3b
 80039a6:	dc0d      	bgt.n	80039c4 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x2c>
 80039a8:	2a24      	cmp	r2, #36	; 0x24
 80039aa:	dc16      	bgt.n	80039da <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x42>
 80039ac:	2a0f      	cmp	r2, #15
 80039ae:	dc10      	bgt.n	80039d2 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3a>
 80039b0:	1e53      	subs	r3, r2, #1
 80039b2:	2b0d      	cmp	r3, #13
 80039b4:	d81f      	bhi.n	80039f6 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 80039b6:	e00c      	b.n	80039d2 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3a>
 80039b8:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 80039bc:	2101      	movs	r1, #1
 80039be:	4099      	lsls	r1, r3
 80039c0:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x64>)
 80039c2:	e015      	b.n	80039f0 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x58>
 80039c4:	f1a2 013c 	sub.w	r1, r2, #60	; 0x3c
 80039c8:	2301      	movs	r3, #1
 80039ca:	408b      	lsls	r3, r1
 80039cc:	490c      	ldr	r1, [pc, #48]	; (8003a00 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x68>)
 80039ce:	420b      	tst	r3, r1
 80039d0:	d011      	beq.n	80039f6 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 80039d2:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x6c>)
 80039d4:	6002      	str	r2, [r0, #0]
 80039d6:	6043      	str	r3, [r0, #4]
 80039d8:	4770      	bx	lr
 80039da:	f1a2 032d 	sub.w	r3, r2, #45	; 0x2d
 80039de:	2b01      	cmp	r3, #1
 80039e0:	e7e8      	b.n	80039b4 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x1c>
 80039e2:	f1a2 0376 	sub.w	r3, r2, #118	; 0x76
 80039e6:	2b18      	cmp	r3, #24
 80039e8:	d805      	bhi.n	80039f6 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 80039ea:	2101      	movs	r1, #1
 80039ec:	4099      	lsls	r1, r3
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x70>)
 80039f0:	400b      	ands	r3, r1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1ed      	bne.n	80039d2 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3a>
 80039f6:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x74>)
 80039f8:	6002      	str	r2, [r0, #0]
 80039fa:	e7ec      	b.n	80039d6 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3e>
 80039fc:	1fbf009d 	.word	0x1fbf009d
 8003a00:	0002088f 	.word	0x0002088f
 8003a04:	20000054 	.word	0x20000054
 8003a08:	01f107bf 	.word	0x01f107bf
 8003a0c:	20000050 	.word	0x20000050

08003a10 <_ZNKSt3_V214error_category23default_error_conditionEi>:
 8003a10:	e9c0 2100 	strd	r2, r1, [r0]
 8003a14:	4770      	bx	lr

08003a16 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition>:
 8003a16:	b513      	push	{r0, r1, r4, lr}
 8003a18:	6803      	ldr	r3, [r0, #0]
 8003a1a:	4614      	mov	r4, r2
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	460a      	mov	r2, r1
 8003a20:	4601      	mov	r1, r0
 8003a22:	4668      	mov	r0, sp
 8003a24:	4798      	blx	r3
 8003a26:	6863      	ldr	r3, [r4, #4]
 8003a28:	9a01      	ldr	r2, [sp, #4]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d106      	bne.n	8003a3c <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x26>
 8003a2e:	9800      	ldr	r0, [sp, #0]
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	1ac3      	subs	r3, r0, r3
 8003a34:	4258      	negs	r0, r3
 8003a36:	4158      	adcs	r0, r3
 8003a38:	b002      	add	sp, #8
 8003a3a:	bd10      	pop	{r4, pc}
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	e7fb      	b.n	8003a38 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x22>

08003a40 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei>:
 8003a40:	684b      	ldr	r3, [r1, #4]
 8003a42:	4283      	cmp	r3, r0
 8003a44:	d104      	bne.n	8003a50 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei+0x10>
 8003a46:	6808      	ldr	r0, [r1, #0]
 8003a48:	1a83      	subs	r3, r0, r2
 8003a4a:	4258      	negs	r0, r3
 8003a4c:	4158      	adcs	r0, r3
 8003a4e:	4770      	bx	lr
 8003a50:	2000      	movs	r0, #0
 8003a52:	4770      	bx	lr

08003a54 <_ZN12_GLOBAL__N_121system_error_categoryD1Ev>:
 8003a54:	4770      	bx	lr

08003a56 <_ZN12_GLOBAL__N_122generic_error_categoryD1Ev>:
 8003a56:	4770      	bx	lr

08003a58 <_ZN12_GLOBAL__N_121system_error_categoryD0Ev>:
 8003a58:	b510      	push	{r4, lr}
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	f7ff ff58 	bl	8003910 <_ZdlPv>
 8003a60:	4620      	mov	r0, r4
 8003a62:	bd10      	pop	{r4, pc}

08003a64 <_ZN12_GLOBAL__N_122generic_error_categoryD0Ev>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	4604      	mov	r4, r0
 8003a68:	f7ff ff52 	bl	8003910 <_ZdlPv>
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	bd10      	pop	{r4, pc}

08003a70 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei>:
 8003a70:	b510      	push	{r4, lr}
 8003a72:	680b      	ldr	r3, [r1, #0]
 8003a74:	b086      	sub	sp, #24
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	4604      	mov	r4, r0
 8003a7a:	4668      	mov	r0, sp
 8003a7c:	4798      	blx	r3
 8003a7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003a82:	4620      	mov	r0, r4
 8003a84:	f000 f83b 	bl	8003afe <_ZNSt12__cow_stringC1EPKcj>
 8003a88:	4668      	mov	r0, sp
 8003a8a:	f7ff fea5 	bl	80037d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003a8e:	4620      	mov	r0, r4
 8003a90:	b006      	add	sp, #24
 8003a92:	bd10      	pop	{r4, pc}

08003a94 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei>:
 8003a94:	b538      	push	{r3, r4, r5, lr}
 8003a96:	4604      	mov	r4, r0
 8003a98:	4610      	mov	r0, r2
 8003a9a:	f000 fb83 	bl	80041a4 <strerror>
 8003a9e:	f104 0308 	add.w	r3, r4, #8
 8003aa2:	6023      	str	r3, [r4, #0]
 8003aa4:	4605      	mov	r5, r0
 8003aa6:	b150      	cbz	r0, 8003abe <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x2a>
 8003aa8:	f7fc fb98 	bl	80001dc <strlen>
 8003aac:	182a      	adds	r2, r5, r0
 8003aae:	4620      	mov	r0, r4
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	f7ff fea5 	bl	8003804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8003aba:	4620      	mov	r0, r4
 8003abc:	bd38      	pop	{r3, r4, r5, pc}
 8003abe:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac2:	e7f4      	b.n	8003aae <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x1a>

08003ac4 <_GLOBAL__sub_I__ZSt20__throw_system_errori>:
 8003ac4:	b508      	push	{r3, lr}
 8003ac6:	4a06      	ldr	r2, [pc, #24]	; (8003ae0 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x1c>)
 8003ac8:	4906      	ldr	r1, [pc, #24]	; (8003ae4 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x20>)
 8003aca:	4807      	ldr	r0, [pc, #28]	; (8003ae8 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x24>)
 8003acc:	f000 f812 	bl	8003af4 <__aeabi_atexit>
 8003ad0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003ad4:	4a02      	ldr	r2, [pc, #8]	; (8003ae0 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x1c>)
 8003ad6:	4905      	ldr	r1, [pc, #20]	; (8003aec <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x28>)
 8003ad8:	4805      	ldr	r0, [pc, #20]	; (8003af0 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x2c>)
 8003ada:	f000 b80b 	b.w	8003af4 <__aeabi_atexit>
 8003ade:	bf00      	nop
 8003ae0:	20000000 	.word	0x20000000
 8003ae4:	08003a57 	.word	0x08003a57
 8003ae8:	20000054 	.word	0x20000054
 8003aec:	08003a55 	.word	0x08003a55
 8003af0:	20000050 	.word	0x20000050

08003af4 <__aeabi_atexit>:
 8003af4:	460b      	mov	r3, r1
 8003af6:	4601      	mov	r1, r0
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 b80f 	b.w	8003b1c <__cxa_atexit>

08003afe <_ZNSt12__cow_stringC1EPKcj>:
 8003afe:	b513      	push	{r0, r1, r4, lr}
 8003b00:	ab01      	add	r3, sp, #4
 8003b02:	4604      	mov	r4, r0
 8003b04:	f7ff fd44 	bl	8003590 <_ZNSsC1EPKcjRKSaIcE>
 8003b08:	4620      	mov	r0, r4
 8003b0a:	b002      	add	sp, #8
 8003b0c:	bd10      	pop	{r4, pc}

08003b0e <abort>:
 8003b0e:	b508      	push	{r3, lr}
 8003b10:	2006      	movs	r0, #6
 8003b12:	f000 f945 	bl	8003da0 <raise>
 8003b16:	2001      	movs	r0, #1
 8003b18:	f7fd fd26 	bl	8001568 <_exit>

08003b1c <__cxa_atexit>:
 8003b1c:	b510      	push	{r4, lr}
 8003b1e:	4c05      	ldr	r4, [pc, #20]	; (8003b34 <__cxa_atexit+0x18>)
 8003b20:	4613      	mov	r3, r2
 8003b22:	b12c      	cbz	r4, 8003b30 <__cxa_atexit+0x14>
 8003b24:	460a      	mov	r2, r1
 8003b26:	4601      	mov	r1, r0
 8003b28:	2002      	movs	r0, #2
 8003b2a:	f3af 8000 	nop.w
 8003b2e:	bd10      	pop	{r4, pc}
 8003b30:	4620      	mov	r0, r4
 8003b32:	e7fc      	b.n	8003b2e <__cxa_atexit+0x12>
 8003b34:	00000000 	.word	0x00000000

08003b38 <__errno>:
 8003b38:	4b01      	ldr	r3, [pc, #4]	; (8003b40 <__errno+0x8>)
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	20000058 	.word	0x20000058

08003b44 <__libc_init_array>:
 8003b44:	b570      	push	{r4, r5, r6, lr}
 8003b46:	4d0d      	ldr	r5, [pc, #52]	; (8003b7c <__libc_init_array+0x38>)
 8003b48:	4c0d      	ldr	r4, [pc, #52]	; (8003b80 <__libc_init_array+0x3c>)
 8003b4a:	1b64      	subs	r4, r4, r5
 8003b4c:	10a4      	asrs	r4, r4, #2
 8003b4e:	2600      	movs	r6, #0
 8003b50:	42a6      	cmp	r6, r4
 8003b52:	d109      	bne.n	8003b68 <__libc_init_array+0x24>
 8003b54:	4d0b      	ldr	r5, [pc, #44]	; (8003b84 <__libc_init_array+0x40>)
 8003b56:	4c0c      	ldr	r4, [pc, #48]	; (8003b88 <__libc_init_array+0x44>)
 8003b58:	f000 fb3c 	bl	80041d4 <_init>
 8003b5c:	1b64      	subs	r4, r4, r5
 8003b5e:	10a4      	asrs	r4, r4, #2
 8003b60:	2600      	movs	r6, #0
 8003b62:	42a6      	cmp	r6, r4
 8003b64:	d105      	bne.n	8003b72 <__libc_init_array+0x2e>
 8003b66:	bd70      	pop	{r4, r5, r6, pc}
 8003b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b6c:	4798      	blx	r3
 8003b6e:	3601      	adds	r6, #1
 8003b70:	e7ee      	b.n	8003b50 <__libc_init_array+0xc>
 8003b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b76:	4798      	blx	r3
 8003b78:	3601      	adds	r6, #1
 8003b7a:	e7f2      	b.n	8003b62 <__libc_init_array+0x1e>
 8003b7c:	08004d20 	.word	0x08004d20
 8003b80:	08004d20 	.word	0x08004d20
 8003b84:	08004d20 	.word	0x08004d20
 8003b88:	08004d3c 	.word	0x08004d3c

08003b8c <__retarget_lock_acquire_recursive>:
 8003b8c:	4770      	bx	lr

08003b8e <__retarget_lock_release_recursive>:
 8003b8e:	4770      	bx	lr

08003b90 <malloc>:
 8003b90:	4b02      	ldr	r3, [pc, #8]	; (8003b9c <malloc+0xc>)
 8003b92:	4601      	mov	r1, r0
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	f000 b871 	b.w	8003c7c <_malloc_r>
 8003b9a:	bf00      	nop
 8003b9c:	20000058 	.word	0x20000058

08003ba0 <free>:
 8003ba0:	4b02      	ldr	r3, [pc, #8]	; (8003bac <free+0xc>)
 8003ba2:	4601      	mov	r1, r0
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	f000 b819 	b.w	8003bdc <_free_r>
 8003baa:	bf00      	nop
 8003bac:	20000058 	.word	0x20000058

08003bb0 <memcpy>:
 8003bb0:	440a      	add	r2, r1
 8003bb2:	4291      	cmp	r1, r2
 8003bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bb8:	d100      	bne.n	8003bbc <memcpy+0xc>
 8003bba:	4770      	bx	lr
 8003bbc:	b510      	push	{r4, lr}
 8003bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bc6:	4291      	cmp	r1, r2
 8003bc8:	d1f9      	bne.n	8003bbe <memcpy+0xe>
 8003bca:	bd10      	pop	{r4, pc}

08003bcc <memset>:
 8003bcc:	4402      	add	r2, r0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d100      	bne.n	8003bd6 <memset+0xa>
 8003bd4:	4770      	bx	lr
 8003bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bda:	e7f9      	b.n	8003bd0 <memset+0x4>

08003bdc <_free_r>:
 8003bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003bde:	2900      	cmp	r1, #0
 8003be0:	d048      	beq.n	8003c74 <_free_r+0x98>
 8003be2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003be6:	9001      	str	r0, [sp, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f1a1 0404 	sub.w	r4, r1, #4
 8003bee:	bfb8      	it	lt
 8003bf0:	18e4      	addlt	r4, r4, r3
 8003bf2:	f000 fae3 	bl	80041bc <__malloc_lock>
 8003bf6:	4a20      	ldr	r2, [pc, #128]	; (8003c78 <_free_r+0x9c>)
 8003bf8:	9801      	ldr	r0, [sp, #4]
 8003bfa:	6813      	ldr	r3, [r2, #0]
 8003bfc:	4615      	mov	r5, r2
 8003bfe:	b933      	cbnz	r3, 8003c0e <_free_r+0x32>
 8003c00:	6063      	str	r3, [r4, #4]
 8003c02:	6014      	str	r4, [r2, #0]
 8003c04:	b003      	add	sp, #12
 8003c06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c0a:	f000 badd 	b.w	80041c8 <__malloc_unlock>
 8003c0e:	42a3      	cmp	r3, r4
 8003c10:	d90b      	bls.n	8003c2a <_free_r+0x4e>
 8003c12:	6821      	ldr	r1, [r4, #0]
 8003c14:	1862      	adds	r2, r4, r1
 8003c16:	4293      	cmp	r3, r2
 8003c18:	bf04      	itt	eq
 8003c1a:	681a      	ldreq	r2, [r3, #0]
 8003c1c:	685b      	ldreq	r3, [r3, #4]
 8003c1e:	6063      	str	r3, [r4, #4]
 8003c20:	bf04      	itt	eq
 8003c22:	1852      	addeq	r2, r2, r1
 8003c24:	6022      	streq	r2, [r4, #0]
 8003c26:	602c      	str	r4, [r5, #0]
 8003c28:	e7ec      	b.n	8003c04 <_free_r+0x28>
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	b10b      	cbz	r3, 8003c34 <_free_r+0x58>
 8003c30:	42a3      	cmp	r3, r4
 8003c32:	d9fa      	bls.n	8003c2a <_free_r+0x4e>
 8003c34:	6811      	ldr	r1, [r2, #0]
 8003c36:	1855      	adds	r5, r2, r1
 8003c38:	42a5      	cmp	r5, r4
 8003c3a:	d10b      	bne.n	8003c54 <_free_r+0x78>
 8003c3c:	6824      	ldr	r4, [r4, #0]
 8003c3e:	4421      	add	r1, r4
 8003c40:	1854      	adds	r4, r2, r1
 8003c42:	42a3      	cmp	r3, r4
 8003c44:	6011      	str	r1, [r2, #0]
 8003c46:	d1dd      	bne.n	8003c04 <_free_r+0x28>
 8003c48:	681c      	ldr	r4, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	6053      	str	r3, [r2, #4]
 8003c4e:	4421      	add	r1, r4
 8003c50:	6011      	str	r1, [r2, #0]
 8003c52:	e7d7      	b.n	8003c04 <_free_r+0x28>
 8003c54:	d902      	bls.n	8003c5c <_free_r+0x80>
 8003c56:	230c      	movs	r3, #12
 8003c58:	6003      	str	r3, [r0, #0]
 8003c5a:	e7d3      	b.n	8003c04 <_free_r+0x28>
 8003c5c:	6825      	ldr	r5, [r4, #0]
 8003c5e:	1961      	adds	r1, r4, r5
 8003c60:	428b      	cmp	r3, r1
 8003c62:	bf04      	itt	eq
 8003c64:	6819      	ldreq	r1, [r3, #0]
 8003c66:	685b      	ldreq	r3, [r3, #4]
 8003c68:	6063      	str	r3, [r4, #4]
 8003c6a:	bf04      	itt	eq
 8003c6c:	1949      	addeq	r1, r1, r5
 8003c6e:	6021      	streq	r1, [r4, #0]
 8003c70:	6054      	str	r4, [r2, #4]
 8003c72:	e7c7      	b.n	8003c04 <_free_r+0x28>
 8003c74:	b003      	add	sp, #12
 8003c76:	bd30      	pop	{r4, r5, pc}
 8003c78:	20000210 	.word	0x20000210

08003c7c <_malloc_r>:
 8003c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7e:	1ccd      	adds	r5, r1, #3
 8003c80:	f025 0503 	bic.w	r5, r5, #3
 8003c84:	3508      	adds	r5, #8
 8003c86:	2d0c      	cmp	r5, #12
 8003c88:	bf38      	it	cc
 8003c8a:	250c      	movcc	r5, #12
 8003c8c:	2d00      	cmp	r5, #0
 8003c8e:	4606      	mov	r6, r0
 8003c90:	db01      	blt.n	8003c96 <_malloc_r+0x1a>
 8003c92:	42a9      	cmp	r1, r5
 8003c94:	d903      	bls.n	8003c9e <_malloc_r+0x22>
 8003c96:	230c      	movs	r3, #12
 8003c98:	6033      	str	r3, [r6, #0]
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c9e:	f000 fa8d 	bl	80041bc <__malloc_lock>
 8003ca2:	4921      	ldr	r1, [pc, #132]	; (8003d28 <_malloc_r+0xac>)
 8003ca4:	680a      	ldr	r2, [r1, #0]
 8003ca6:	4614      	mov	r4, r2
 8003ca8:	b99c      	cbnz	r4, 8003cd2 <_malloc_r+0x56>
 8003caa:	4f20      	ldr	r7, [pc, #128]	; (8003d2c <_malloc_r+0xb0>)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	b923      	cbnz	r3, 8003cba <_malloc_r+0x3e>
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	f000 f83c 	bl	8003d30 <_sbrk_r>
 8003cb8:	6038      	str	r0, [r7, #0]
 8003cba:	4629      	mov	r1, r5
 8003cbc:	4630      	mov	r0, r6
 8003cbe:	f000 f837 	bl	8003d30 <_sbrk_r>
 8003cc2:	1c43      	adds	r3, r0, #1
 8003cc4:	d123      	bne.n	8003d0e <_malloc_r+0x92>
 8003cc6:	230c      	movs	r3, #12
 8003cc8:	6033      	str	r3, [r6, #0]
 8003cca:	4630      	mov	r0, r6
 8003ccc:	f000 fa7c 	bl	80041c8 <__malloc_unlock>
 8003cd0:	e7e3      	b.n	8003c9a <_malloc_r+0x1e>
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	1b5b      	subs	r3, r3, r5
 8003cd6:	d417      	bmi.n	8003d08 <_malloc_r+0x8c>
 8003cd8:	2b0b      	cmp	r3, #11
 8003cda:	d903      	bls.n	8003ce4 <_malloc_r+0x68>
 8003cdc:	6023      	str	r3, [r4, #0]
 8003cde:	441c      	add	r4, r3
 8003ce0:	6025      	str	r5, [r4, #0]
 8003ce2:	e004      	b.n	8003cee <_malloc_r+0x72>
 8003ce4:	6863      	ldr	r3, [r4, #4]
 8003ce6:	42a2      	cmp	r2, r4
 8003ce8:	bf0c      	ite	eq
 8003cea:	600b      	streq	r3, [r1, #0]
 8003cec:	6053      	strne	r3, [r2, #4]
 8003cee:	4630      	mov	r0, r6
 8003cf0:	f000 fa6a 	bl	80041c8 <__malloc_unlock>
 8003cf4:	f104 000b 	add.w	r0, r4, #11
 8003cf8:	1d23      	adds	r3, r4, #4
 8003cfa:	f020 0007 	bic.w	r0, r0, #7
 8003cfe:	1ac2      	subs	r2, r0, r3
 8003d00:	d0cc      	beq.n	8003c9c <_malloc_r+0x20>
 8003d02:	1a1b      	subs	r3, r3, r0
 8003d04:	50a3      	str	r3, [r4, r2]
 8003d06:	e7c9      	b.n	8003c9c <_malloc_r+0x20>
 8003d08:	4622      	mov	r2, r4
 8003d0a:	6864      	ldr	r4, [r4, #4]
 8003d0c:	e7cc      	b.n	8003ca8 <_malloc_r+0x2c>
 8003d0e:	1cc4      	adds	r4, r0, #3
 8003d10:	f024 0403 	bic.w	r4, r4, #3
 8003d14:	42a0      	cmp	r0, r4
 8003d16:	d0e3      	beq.n	8003ce0 <_malloc_r+0x64>
 8003d18:	1a21      	subs	r1, r4, r0
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	f000 f808 	bl	8003d30 <_sbrk_r>
 8003d20:	3001      	adds	r0, #1
 8003d22:	d1dd      	bne.n	8003ce0 <_malloc_r+0x64>
 8003d24:	e7cf      	b.n	8003cc6 <_malloc_r+0x4a>
 8003d26:	bf00      	nop
 8003d28:	20000210 	.word	0x20000210
 8003d2c:	20000214 	.word	0x20000214

08003d30 <_sbrk_r>:
 8003d30:	b538      	push	{r3, r4, r5, lr}
 8003d32:	4d06      	ldr	r5, [pc, #24]	; (8003d4c <_sbrk_r+0x1c>)
 8003d34:	2300      	movs	r3, #0
 8003d36:	4604      	mov	r4, r0
 8003d38:	4608      	mov	r0, r1
 8003d3a:	602b      	str	r3, [r5, #0]
 8003d3c:	f7fd fc1e 	bl	800157c <_sbrk>
 8003d40:	1c43      	adds	r3, r0, #1
 8003d42:	d102      	bne.n	8003d4a <_sbrk_r+0x1a>
 8003d44:	682b      	ldr	r3, [r5, #0]
 8003d46:	b103      	cbz	r3, 8003d4a <_sbrk_r+0x1a>
 8003d48:	6023      	str	r3, [r4, #0]
 8003d4a:	bd38      	pop	{r3, r4, r5, pc}
 8003d4c:	20000228 	.word	0x20000228

08003d50 <_raise_r>:
 8003d50:	291f      	cmp	r1, #31
 8003d52:	b538      	push	{r3, r4, r5, lr}
 8003d54:	4604      	mov	r4, r0
 8003d56:	460d      	mov	r5, r1
 8003d58:	d904      	bls.n	8003d64 <_raise_r+0x14>
 8003d5a:	2316      	movs	r3, #22
 8003d5c:	6003      	str	r3, [r0, #0]
 8003d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d62:	bd38      	pop	{r3, r4, r5, pc}
 8003d64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003d66:	b112      	cbz	r2, 8003d6e <_raise_r+0x1e>
 8003d68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003d6c:	b94b      	cbnz	r3, 8003d82 <_raise_r+0x32>
 8003d6e:	4620      	mov	r0, r4
 8003d70:	f000 f830 	bl	8003dd4 <_getpid_r>
 8003d74:	462a      	mov	r2, r5
 8003d76:	4601      	mov	r1, r0
 8003d78:	4620      	mov	r0, r4
 8003d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d7e:	f000 b817 	b.w	8003db0 <_kill_r>
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d00a      	beq.n	8003d9c <_raise_r+0x4c>
 8003d86:	1c59      	adds	r1, r3, #1
 8003d88:	d103      	bne.n	8003d92 <_raise_r+0x42>
 8003d8a:	2316      	movs	r3, #22
 8003d8c:	6003      	str	r3, [r0, #0]
 8003d8e:	2001      	movs	r0, #1
 8003d90:	e7e7      	b.n	8003d62 <_raise_r+0x12>
 8003d92:	2400      	movs	r4, #0
 8003d94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003d98:	4628      	mov	r0, r5
 8003d9a:	4798      	blx	r3
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	e7e0      	b.n	8003d62 <_raise_r+0x12>

08003da0 <raise>:
 8003da0:	4b02      	ldr	r3, [pc, #8]	; (8003dac <raise+0xc>)
 8003da2:	4601      	mov	r1, r0
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	f7ff bfd3 	b.w	8003d50 <_raise_r>
 8003daa:	bf00      	nop
 8003dac:	20000058 	.word	0x20000058

08003db0 <_kill_r>:
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	4d07      	ldr	r5, [pc, #28]	; (8003dd0 <_kill_r+0x20>)
 8003db4:	2300      	movs	r3, #0
 8003db6:	4604      	mov	r4, r0
 8003db8:	4608      	mov	r0, r1
 8003dba:	4611      	mov	r1, r2
 8003dbc:	602b      	str	r3, [r5, #0]
 8003dbe:	f7fd fbc3 	bl	8001548 <_kill>
 8003dc2:	1c43      	adds	r3, r0, #1
 8003dc4:	d102      	bne.n	8003dcc <_kill_r+0x1c>
 8003dc6:	682b      	ldr	r3, [r5, #0]
 8003dc8:	b103      	cbz	r3, 8003dcc <_kill_r+0x1c>
 8003dca:	6023      	str	r3, [r4, #0]
 8003dcc:	bd38      	pop	{r3, r4, r5, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000228 	.word	0x20000228

08003dd4 <_getpid_r>:
 8003dd4:	f7fd bbb0 	b.w	8001538 <_getpid>

08003dd8 <_strerror_r>:
 8003dd8:	b510      	push	{r4, lr}
 8003dda:	4604      	mov	r4, r0
 8003ddc:	4608      	mov	r0, r1
 8003dde:	4611      	mov	r1, r2
 8003de0:	288e      	cmp	r0, #142	; 0x8e
 8003de2:	f200 812f 	bhi.w	8004044 <_strerror_r+0x26c>
 8003de6:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003dea:	0138      	.short	0x0138
 8003dec:	0091008f 	.word	0x0091008f
 8003df0:	00950093 	.word	0x00950093
 8003df4:	00990097 	.word	0x00990097
 8003df8:	009d009b 	.word	0x009d009b
 8003dfc:	00a300a1 	.word	0x00a300a1
 8003e00:	00a900a7 	.word	0x00a900a7
 8003e04:	00ad00ab 	.word	0x00ad00ab
 8003e08:	00af012d 	.word	0x00af012d
 8003e0c:	00b300b1 	.word	0x00b300b1
 8003e10:	00b700b5 	.word	0x00b700b5
 8003e14:	00bf00bd 	.word	0x00bf00bd
 8003e18:	00c700c5 	.word	0x00c700c5
 8003e1c:	00cb00c9 	.word	0x00cb00c9
 8003e20:	00d100cd 	.word	0x00d100cd
 8003e24:	00d700d5 	.word	0x00d700d5
 8003e28:	00db00d9 	.word	0x00db00d9
 8003e2c:	00df00dd 	.word	0x00df00dd
 8003e30:	00e300e1 	.word	0x00e300e1
 8003e34:	012d012d 	.word	0x012d012d
 8003e38:	012d012d 	.word	0x012d012d
 8003e3c:	012d012d 	.word	0x012d012d
 8003e40:	012d012d 	.word	0x012d012d
 8003e44:	00eb00e7 	.word	0x00eb00e7
 8003e48:	012d012d 	.word	0x012d012d
 8003e4c:	012d012d 	.word	0x012d012d
 8003e50:	012d012d 	.word	0x012d012d
 8003e54:	012d012d 	.word	0x012d012d
 8003e58:	012d012d 	.word	0x012d012d
 8003e5c:	012d012d 	.word	0x012d012d
 8003e60:	00ed012d 	.word	0x00ed012d
 8003e64:	00ef0107 	.word	0x00ef0107
 8003e68:	012d00f1 	.word	0x012d00f1
 8003e6c:	012d012d 	.word	0x012d012d
 8003e70:	012d00f3 	.word	0x012d00f3
 8003e74:	012d012d 	.word	0x012d012d
 8003e78:	012d00f5 	.word	0x012d00f5
 8003e7c:	00f9012d 	.word	0x00f9012d
 8003e80:	012d012d 	.word	0x012d012d
 8003e84:	012d00fb 	.word	0x012d00fb
 8003e88:	012d012d 	.word	0x012d012d
 8003e8c:	012d012d 	.word	0x012d012d
 8003e90:	012d012d 	.word	0x012d012d
 8003e94:	012d012d 	.word	0x012d012d
 8003e98:	00fd012d 	.word	0x00fd012d
 8003e9c:	00ff012d 	.word	0x00ff012d
 8003ea0:	01030101 	.word	0x01030101
 8003ea4:	012d012d 	.word	0x012d012d
 8003ea8:	012d0125 	.word	0x012d0125
 8003eac:	012d012d 	.word	0x012d012d
 8003eb0:	012d012d 	.word	0x012d012d
 8003eb4:	012d012d 	.word	0x012d012d
 8003eb8:	0113012d 	.word	0x0113012d
 8003ebc:	01090105 	.word	0x01090105
 8003ec0:	010d010b 	.word	0x010d010b
 8003ec4:	012d010f 	.word	0x012d010f
 8003ec8:	01150111 	.word	0x01150111
 8003ecc:	00e90119 	.word	0x00e90119
 8003ed0:	012b00c1 	.word	0x012b00c1
 8003ed4:	00cf00b9 	.word	0x00cf00b9
 8003ed8:	009f00bb 	.word	0x009f00bb
 8003edc:	012900a5 	.word	0x012900a5
 8003ee0:	012d00f7 	.word	0x012d00f7
 8003ee4:	00c30117 	.word	0x00c30117
 8003ee8:	011b011d 	.word	0x011b011d
 8003eec:	012d012d 	.word	0x012d012d
 8003ef0:	012d012d 	.word	0x012d012d
 8003ef4:	00d3012d 	.word	0x00d3012d
 8003ef8:	012d012d 	.word	0x012d012d
 8003efc:	00e5012d 	.word	0x00e5012d
 8003f00:	011f0127 	.word	0x011f0127
 8003f04:	01230121 	.word	0x01230121
 8003f08:	4855      	ldr	r0, [pc, #340]	; (8004060 <_strerror_r+0x288>)
 8003f0a:	bd10      	pop	{r4, pc}
 8003f0c:	4855      	ldr	r0, [pc, #340]	; (8004064 <_strerror_r+0x28c>)
 8003f0e:	e7fc      	b.n	8003f0a <_strerror_r+0x132>
 8003f10:	4855      	ldr	r0, [pc, #340]	; (8004068 <_strerror_r+0x290>)
 8003f12:	e7fa      	b.n	8003f0a <_strerror_r+0x132>
 8003f14:	4855      	ldr	r0, [pc, #340]	; (800406c <_strerror_r+0x294>)
 8003f16:	e7f8      	b.n	8003f0a <_strerror_r+0x132>
 8003f18:	4855      	ldr	r0, [pc, #340]	; (8004070 <_strerror_r+0x298>)
 8003f1a:	e7f6      	b.n	8003f0a <_strerror_r+0x132>
 8003f1c:	4855      	ldr	r0, [pc, #340]	; (8004074 <_strerror_r+0x29c>)
 8003f1e:	e7f4      	b.n	8003f0a <_strerror_r+0x132>
 8003f20:	4855      	ldr	r0, [pc, #340]	; (8004078 <_strerror_r+0x2a0>)
 8003f22:	e7f2      	b.n	8003f0a <_strerror_r+0x132>
 8003f24:	4855      	ldr	r0, [pc, #340]	; (800407c <_strerror_r+0x2a4>)
 8003f26:	e7f0      	b.n	8003f0a <_strerror_r+0x132>
 8003f28:	4855      	ldr	r0, [pc, #340]	; (8004080 <_strerror_r+0x2a8>)
 8003f2a:	e7ee      	b.n	8003f0a <_strerror_r+0x132>
 8003f2c:	4855      	ldr	r0, [pc, #340]	; (8004084 <_strerror_r+0x2ac>)
 8003f2e:	e7ec      	b.n	8003f0a <_strerror_r+0x132>
 8003f30:	4855      	ldr	r0, [pc, #340]	; (8004088 <_strerror_r+0x2b0>)
 8003f32:	e7ea      	b.n	8003f0a <_strerror_r+0x132>
 8003f34:	4855      	ldr	r0, [pc, #340]	; (800408c <_strerror_r+0x2b4>)
 8003f36:	e7e8      	b.n	8003f0a <_strerror_r+0x132>
 8003f38:	4855      	ldr	r0, [pc, #340]	; (8004090 <_strerror_r+0x2b8>)
 8003f3a:	e7e6      	b.n	8003f0a <_strerror_r+0x132>
 8003f3c:	4855      	ldr	r0, [pc, #340]	; (8004094 <_strerror_r+0x2bc>)
 8003f3e:	e7e4      	b.n	8003f0a <_strerror_r+0x132>
 8003f40:	4855      	ldr	r0, [pc, #340]	; (8004098 <_strerror_r+0x2c0>)
 8003f42:	e7e2      	b.n	8003f0a <_strerror_r+0x132>
 8003f44:	4855      	ldr	r0, [pc, #340]	; (800409c <_strerror_r+0x2c4>)
 8003f46:	e7e0      	b.n	8003f0a <_strerror_r+0x132>
 8003f48:	4855      	ldr	r0, [pc, #340]	; (80040a0 <_strerror_r+0x2c8>)
 8003f4a:	e7de      	b.n	8003f0a <_strerror_r+0x132>
 8003f4c:	4855      	ldr	r0, [pc, #340]	; (80040a4 <_strerror_r+0x2cc>)
 8003f4e:	e7dc      	b.n	8003f0a <_strerror_r+0x132>
 8003f50:	4855      	ldr	r0, [pc, #340]	; (80040a8 <_strerror_r+0x2d0>)
 8003f52:	e7da      	b.n	8003f0a <_strerror_r+0x132>
 8003f54:	4855      	ldr	r0, [pc, #340]	; (80040ac <_strerror_r+0x2d4>)
 8003f56:	e7d8      	b.n	8003f0a <_strerror_r+0x132>
 8003f58:	4855      	ldr	r0, [pc, #340]	; (80040b0 <_strerror_r+0x2d8>)
 8003f5a:	e7d6      	b.n	8003f0a <_strerror_r+0x132>
 8003f5c:	4855      	ldr	r0, [pc, #340]	; (80040b4 <_strerror_r+0x2dc>)
 8003f5e:	e7d4      	b.n	8003f0a <_strerror_r+0x132>
 8003f60:	4855      	ldr	r0, [pc, #340]	; (80040b8 <_strerror_r+0x2e0>)
 8003f62:	e7d2      	b.n	8003f0a <_strerror_r+0x132>
 8003f64:	4855      	ldr	r0, [pc, #340]	; (80040bc <_strerror_r+0x2e4>)
 8003f66:	e7d0      	b.n	8003f0a <_strerror_r+0x132>
 8003f68:	4855      	ldr	r0, [pc, #340]	; (80040c0 <_strerror_r+0x2e8>)
 8003f6a:	e7ce      	b.n	8003f0a <_strerror_r+0x132>
 8003f6c:	4855      	ldr	r0, [pc, #340]	; (80040c4 <_strerror_r+0x2ec>)
 8003f6e:	e7cc      	b.n	8003f0a <_strerror_r+0x132>
 8003f70:	4855      	ldr	r0, [pc, #340]	; (80040c8 <_strerror_r+0x2f0>)
 8003f72:	e7ca      	b.n	8003f0a <_strerror_r+0x132>
 8003f74:	4855      	ldr	r0, [pc, #340]	; (80040cc <_strerror_r+0x2f4>)
 8003f76:	e7c8      	b.n	8003f0a <_strerror_r+0x132>
 8003f78:	4855      	ldr	r0, [pc, #340]	; (80040d0 <_strerror_r+0x2f8>)
 8003f7a:	e7c6      	b.n	8003f0a <_strerror_r+0x132>
 8003f7c:	4855      	ldr	r0, [pc, #340]	; (80040d4 <_strerror_r+0x2fc>)
 8003f7e:	e7c4      	b.n	8003f0a <_strerror_r+0x132>
 8003f80:	4855      	ldr	r0, [pc, #340]	; (80040d8 <_strerror_r+0x300>)
 8003f82:	e7c2      	b.n	8003f0a <_strerror_r+0x132>
 8003f84:	4855      	ldr	r0, [pc, #340]	; (80040dc <_strerror_r+0x304>)
 8003f86:	e7c0      	b.n	8003f0a <_strerror_r+0x132>
 8003f88:	4855      	ldr	r0, [pc, #340]	; (80040e0 <_strerror_r+0x308>)
 8003f8a:	e7be      	b.n	8003f0a <_strerror_r+0x132>
 8003f8c:	4855      	ldr	r0, [pc, #340]	; (80040e4 <_strerror_r+0x30c>)
 8003f8e:	e7bc      	b.n	8003f0a <_strerror_r+0x132>
 8003f90:	4855      	ldr	r0, [pc, #340]	; (80040e8 <_strerror_r+0x310>)
 8003f92:	e7ba      	b.n	8003f0a <_strerror_r+0x132>
 8003f94:	4855      	ldr	r0, [pc, #340]	; (80040ec <_strerror_r+0x314>)
 8003f96:	e7b8      	b.n	8003f0a <_strerror_r+0x132>
 8003f98:	4855      	ldr	r0, [pc, #340]	; (80040f0 <_strerror_r+0x318>)
 8003f9a:	e7b6      	b.n	8003f0a <_strerror_r+0x132>
 8003f9c:	4855      	ldr	r0, [pc, #340]	; (80040f4 <_strerror_r+0x31c>)
 8003f9e:	e7b4      	b.n	8003f0a <_strerror_r+0x132>
 8003fa0:	4855      	ldr	r0, [pc, #340]	; (80040f8 <_strerror_r+0x320>)
 8003fa2:	e7b2      	b.n	8003f0a <_strerror_r+0x132>
 8003fa4:	4855      	ldr	r0, [pc, #340]	; (80040fc <_strerror_r+0x324>)
 8003fa6:	e7b0      	b.n	8003f0a <_strerror_r+0x132>
 8003fa8:	4855      	ldr	r0, [pc, #340]	; (8004100 <_strerror_r+0x328>)
 8003faa:	e7ae      	b.n	8003f0a <_strerror_r+0x132>
 8003fac:	4855      	ldr	r0, [pc, #340]	; (8004104 <_strerror_r+0x32c>)
 8003fae:	e7ac      	b.n	8003f0a <_strerror_r+0x132>
 8003fb0:	4855      	ldr	r0, [pc, #340]	; (8004108 <_strerror_r+0x330>)
 8003fb2:	e7aa      	b.n	8003f0a <_strerror_r+0x132>
 8003fb4:	4855      	ldr	r0, [pc, #340]	; (800410c <_strerror_r+0x334>)
 8003fb6:	e7a8      	b.n	8003f0a <_strerror_r+0x132>
 8003fb8:	4855      	ldr	r0, [pc, #340]	; (8004110 <_strerror_r+0x338>)
 8003fba:	e7a6      	b.n	8003f0a <_strerror_r+0x132>
 8003fbc:	4855      	ldr	r0, [pc, #340]	; (8004114 <_strerror_r+0x33c>)
 8003fbe:	e7a4      	b.n	8003f0a <_strerror_r+0x132>
 8003fc0:	4855      	ldr	r0, [pc, #340]	; (8004118 <_strerror_r+0x340>)
 8003fc2:	e7a2      	b.n	8003f0a <_strerror_r+0x132>
 8003fc4:	4855      	ldr	r0, [pc, #340]	; (800411c <_strerror_r+0x344>)
 8003fc6:	e7a0      	b.n	8003f0a <_strerror_r+0x132>
 8003fc8:	4855      	ldr	r0, [pc, #340]	; (8004120 <_strerror_r+0x348>)
 8003fca:	e79e      	b.n	8003f0a <_strerror_r+0x132>
 8003fcc:	4855      	ldr	r0, [pc, #340]	; (8004124 <_strerror_r+0x34c>)
 8003fce:	e79c      	b.n	8003f0a <_strerror_r+0x132>
 8003fd0:	4855      	ldr	r0, [pc, #340]	; (8004128 <_strerror_r+0x350>)
 8003fd2:	e79a      	b.n	8003f0a <_strerror_r+0x132>
 8003fd4:	4855      	ldr	r0, [pc, #340]	; (800412c <_strerror_r+0x354>)
 8003fd6:	e798      	b.n	8003f0a <_strerror_r+0x132>
 8003fd8:	4855      	ldr	r0, [pc, #340]	; (8004130 <_strerror_r+0x358>)
 8003fda:	e796      	b.n	8003f0a <_strerror_r+0x132>
 8003fdc:	4855      	ldr	r0, [pc, #340]	; (8004134 <_strerror_r+0x35c>)
 8003fde:	e794      	b.n	8003f0a <_strerror_r+0x132>
 8003fe0:	4855      	ldr	r0, [pc, #340]	; (8004138 <_strerror_r+0x360>)
 8003fe2:	e792      	b.n	8003f0a <_strerror_r+0x132>
 8003fe4:	4855      	ldr	r0, [pc, #340]	; (800413c <_strerror_r+0x364>)
 8003fe6:	e790      	b.n	8003f0a <_strerror_r+0x132>
 8003fe8:	4855      	ldr	r0, [pc, #340]	; (8004140 <_strerror_r+0x368>)
 8003fea:	e78e      	b.n	8003f0a <_strerror_r+0x132>
 8003fec:	4855      	ldr	r0, [pc, #340]	; (8004144 <_strerror_r+0x36c>)
 8003fee:	e78c      	b.n	8003f0a <_strerror_r+0x132>
 8003ff0:	4855      	ldr	r0, [pc, #340]	; (8004148 <_strerror_r+0x370>)
 8003ff2:	e78a      	b.n	8003f0a <_strerror_r+0x132>
 8003ff4:	4855      	ldr	r0, [pc, #340]	; (800414c <_strerror_r+0x374>)
 8003ff6:	e788      	b.n	8003f0a <_strerror_r+0x132>
 8003ff8:	4855      	ldr	r0, [pc, #340]	; (8004150 <_strerror_r+0x378>)
 8003ffa:	e786      	b.n	8003f0a <_strerror_r+0x132>
 8003ffc:	4855      	ldr	r0, [pc, #340]	; (8004154 <_strerror_r+0x37c>)
 8003ffe:	e784      	b.n	8003f0a <_strerror_r+0x132>
 8004000:	4855      	ldr	r0, [pc, #340]	; (8004158 <_strerror_r+0x380>)
 8004002:	e782      	b.n	8003f0a <_strerror_r+0x132>
 8004004:	4855      	ldr	r0, [pc, #340]	; (800415c <_strerror_r+0x384>)
 8004006:	e780      	b.n	8003f0a <_strerror_r+0x132>
 8004008:	4855      	ldr	r0, [pc, #340]	; (8004160 <_strerror_r+0x388>)
 800400a:	e77e      	b.n	8003f0a <_strerror_r+0x132>
 800400c:	4855      	ldr	r0, [pc, #340]	; (8004164 <_strerror_r+0x38c>)
 800400e:	e77c      	b.n	8003f0a <_strerror_r+0x132>
 8004010:	4855      	ldr	r0, [pc, #340]	; (8004168 <_strerror_r+0x390>)
 8004012:	e77a      	b.n	8003f0a <_strerror_r+0x132>
 8004014:	4855      	ldr	r0, [pc, #340]	; (800416c <_strerror_r+0x394>)
 8004016:	e778      	b.n	8003f0a <_strerror_r+0x132>
 8004018:	4855      	ldr	r0, [pc, #340]	; (8004170 <_strerror_r+0x398>)
 800401a:	e776      	b.n	8003f0a <_strerror_r+0x132>
 800401c:	4855      	ldr	r0, [pc, #340]	; (8004174 <_strerror_r+0x39c>)
 800401e:	e774      	b.n	8003f0a <_strerror_r+0x132>
 8004020:	4855      	ldr	r0, [pc, #340]	; (8004178 <_strerror_r+0x3a0>)
 8004022:	e772      	b.n	8003f0a <_strerror_r+0x132>
 8004024:	4855      	ldr	r0, [pc, #340]	; (800417c <_strerror_r+0x3a4>)
 8004026:	e770      	b.n	8003f0a <_strerror_r+0x132>
 8004028:	4855      	ldr	r0, [pc, #340]	; (8004180 <_strerror_r+0x3a8>)
 800402a:	e76e      	b.n	8003f0a <_strerror_r+0x132>
 800402c:	4855      	ldr	r0, [pc, #340]	; (8004184 <_strerror_r+0x3ac>)
 800402e:	e76c      	b.n	8003f0a <_strerror_r+0x132>
 8004030:	4855      	ldr	r0, [pc, #340]	; (8004188 <_strerror_r+0x3b0>)
 8004032:	e76a      	b.n	8003f0a <_strerror_r+0x132>
 8004034:	4855      	ldr	r0, [pc, #340]	; (800418c <_strerror_r+0x3b4>)
 8004036:	e768      	b.n	8003f0a <_strerror_r+0x132>
 8004038:	4855      	ldr	r0, [pc, #340]	; (8004190 <_strerror_r+0x3b8>)
 800403a:	e766      	b.n	8003f0a <_strerror_r+0x132>
 800403c:	4855      	ldr	r0, [pc, #340]	; (8004194 <_strerror_r+0x3bc>)
 800403e:	e764      	b.n	8003f0a <_strerror_r+0x132>
 8004040:	4855      	ldr	r0, [pc, #340]	; (8004198 <_strerror_r+0x3c0>)
 8004042:	e762      	b.n	8003f0a <_strerror_r+0x132>
 8004044:	2b00      	cmp	r3, #0
 8004046:	bf14      	ite	ne
 8004048:	461a      	movne	r2, r3
 800404a:	4622      	moveq	r2, r4
 800404c:	f000 f8b4 	bl	80041b8 <_user_strerror>
 8004050:	4b52      	ldr	r3, [pc, #328]	; (800419c <_strerror_r+0x3c4>)
 8004052:	2800      	cmp	r0, #0
 8004054:	bf08      	it	eq
 8004056:	4618      	moveq	r0, r3
 8004058:	e757      	b.n	8003f0a <_strerror_r+0x132>
 800405a:	4851      	ldr	r0, [pc, #324]	; (80041a0 <_strerror_r+0x3c8>)
 800405c:	e755      	b.n	8003f0a <_strerror_r+0x132>
 800405e:	bf00      	nop
 8004060:	0800451c 	.word	0x0800451c
 8004064:	08004526 	.word	0x08004526
 8004068:	08004540 	.word	0x08004540
 800406c:	08004550 	.word	0x08004550
 8004070:	08004568 	.word	0x08004568
 8004074:	08004572 	.word	0x08004572
 8004078:	0800458c 	.word	0x0800458c
 800407c:	0800459e 	.word	0x0800459e
 8004080:	080045b0 	.word	0x080045b0
 8004084:	080045c9 	.word	0x080045c9
 8004088:	080045d9 	.word	0x080045d9
 800408c:	080045e5 	.word	0x080045e5
 8004090:	08004602 	.word	0x08004602
 8004094:	08004614 	.word	0x08004614
 8004098:	08004625 	.word	0x08004625
 800409c:	08004637 	.word	0x08004637
 80040a0:	08004643 	.word	0x08004643
 80040a4:	0800465b 	.word	0x0800465b
 80040a8:	08004667 	.word	0x08004667
 80040ac:	08004679 	.word	0x08004679
 80040b0:	08004688 	.word	0x08004688
 80040b4:	08004698 	.word	0x08004698
 80040b8:	080046a5 	.word	0x080046a5
 80040bc:	080046c4 	.word	0x080046c4
 80040c0:	080046d3 	.word	0x080046d3
 80040c4:	080046e4 	.word	0x080046e4
 80040c8:	08004708 	.word	0x08004708
 80040cc:	08004726 	.word	0x08004726
 80040d0:	08004744 	.word	0x08004744
 80040d4:	08004764 	.word	0x08004764
 80040d8:	0800477b 	.word	0x0800477b
 80040dc:	0800478a 	.word	0x0800478a
 80040e0:	08004799 	.word	0x08004799
 80040e4:	080047ad 	.word	0x080047ad
 80040e8:	080047c5 	.word	0x080047c5
 80040ec:	080047d3 	.word	0x080047d3
 80040f0:	080047e0 	.word	0x080047e0
 80040f4:	080047f6 	.word	0x080047f6
 80040f8:	08004805 	.word	0x08004805
 80040fc:	08004811 	.word	0x08004811
 8004100:	08004840 	.word	0x08004840
 8004104:	08004851 	.word	0x08004851
 8004108:	0800486c 	.word	0x0800486c
 800410c:	0800487f 	.word	0x0800487f
 8004110:	08004895 	.word	0x08004895
 8004114:	0800489e 	.word	0x0800489e
 8004118:	080048b5 	.word	0x080048b5
 800411c:	080048bd 	.word	0x080048bd
 8004120:	080048ca 	.word	0x080048ca
 8004124:	080048df 	.word	0x080048df
 8004128:	080048f3 	.word	0x080048f3
 800412c:	0800490b 	.word	0x0800490b
 8004130:	0800491a 	.word	0x0800491a
 8004134:	0800492b 	.word	0x0800492b
 8004138:	0800493e 	.word	0x0800493e
 800413c:	0800494a 	.word	0x0800494a
 8004140:	08004963 	.word	0x08004963
 8004144:	08004977 	.word	0x08004977
 8004148:	08004992 	.word	0x08004992
 800414c:	080049aa 	.word	0x080049aa
 8004150:	080049c4 	.word	0x080049c4
 8004154:	080049cc 	.word	0x080049cc
 8004158:	080049fc 	.word	0x080049fc
 800415c:	08004a1b 	.word	0x08004a1b
 8004160:	08004a3a 	.word	0x08004a3a
 8004164:	08004a51 	.word	0x08004a51
 8004168:	08004a64 	.word	0x08004a64
 800416c:	08004a7d 	.word	0x08004a7d
 8004170:	08004a94 	.word	0x08004a94
 8004174:	08004aaa 	.word	0x08004aaa
 8004178:	08004acb 	.word	0x08004acb
 800417c:	08004ae3 	.word	0x08004ae3
 8004180:	08004aff 	.word	0x08004aff
 8004184:	08004b12 	.word	0x08004b12
 8004188:	08004b28 	.word	0x08004b28
 800418c:	08004b3c 	.word	0x08004b3c
 8004190:	08004b5e 	.word	0x08004b5e
 8004194:	08004b84 	.word	0x08004b84
 8004198:	08004b95 	.word	0x08004b95
 800419c:	080049cb 	.word	0x080049cb
 80041a0:	08004baa 	.word	0x08004baa

080041a4 <strerror>:
 80041a4:	4601      	mov	r1, r0
 80041a6:	4803      	ldr	r0, [pc, #12]	; (80041b4 <strerror+0x10>)
 80041a8:	2300      	movs	r3, #0
 80041aa:	6800      	ldr	r0, [r0, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	f7ff be13 	b.w	8003dd8 <_strerror_r>
 80041b2:	bf00      	nop
 80041b4:	20000058 	.word	0x20000058

080041b8 <_user_strerror>:
 80041b8:	2000      	movs	r0, #0
 80041ba:	4770      	bx	lr

080041bc <__malloc_lock>:
 80041bc:	4801      	ldr	r0, [pc, #4]	; (80041c4 <__malloc_lock+0x8>)
 80041be:	f7ff bce5 	b.w	8003b8c <__retarget_lock_acquire_recursive>
 80041c2:	bf00      	nop
 80041c4:	2000021c 	.word	0x2000021c

080041c8 <__malloc_unlock>:
 80041c8:	4801      	ldr	r0, [pc, #4]	; (80041d0 <__malloc_unlock+0x8>)
 80041ca:	f7ff bce0 	b.w	8003b8e <__retarget_lock_release_recursive>
 80041ce:	bf00      	nop
 80041d0:	2000021c 	.word	0x2000021c

080041d4 <_init>:
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d6:	bf00      	nop
 80041d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041da:	bc08      	pop	{r3}
 80041dc:	469e      	mov	lr, r3
 80041de:	4770      	bx	lr

080041e0 <_fini>:
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	bf00      	nop
 80041e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e6:	bc08      	pop	{r3}
 80041e8:	469e      	mov	lr, r3
 80041ea:	4770      	bx	lr
