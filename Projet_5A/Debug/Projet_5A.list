
Projet_5A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  0800334c  0800334c  0001334c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc0  08003cc0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08003cc0  08003cc0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cc0  08003cc0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000001c  08003cc0  08003cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cdc  08003cdc  00013cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000007c  08003d5c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08003d5c  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c050  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd3  00000000  00000000  0002c0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  0002ddd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000037f8  00000000  00000000  0002f0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b677  00000000  00000000  000328d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6771  00000000  00000000  0003df47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001246b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c958  00000000  00000000  0012470c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003334 	.word	0x08003334

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08003334 	.word	0x08003334

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f0:	f000 fa09 	bl	8000606 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f4:	f000 f805 	bl	8000202 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f8:	f000 f888 	bl	800030c <MX_GPIO_Init>
  MX_I2C1_Init();
 80001fc:	f000 f848 	bl	8000290 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000200:	e7fe      	b.n	8000200 <main+0x14>

08000202 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000202:	b580      	push	{r7, lr}
 8000204:	b096      	sub	sp, #88	; 0x58
 8000206:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000208:	f107 0314 	add.w	r3, r7, #20
 800020c:	2244      	movs	r2, #68	; 0x44
 800020e:	2100      	movs	r1, #0
 8000210:	4618      	mov	r0, r3
 8000212:	f002 fd8b 	bl	8002d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000216:	463b      	mov	r3, r7
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	605a      	str	r2, [r3, #4]
 800021e:	609a      	str	r2, [r3, #8]
 8000220:	60da      	str	r2, [r3, #12]
 8000222:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000224:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000228:	f000 fe26 	bl	8000e78 <HAL_PWREx_ControlVoltageScaling>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000232:	f000 f883 	bl	800033c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000236:	2310      	movs	r3, #16
 8000238:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800023a:	2301      	movs	r3, #1
 800023c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800023e:	2300      	movs	r3, #0
 8000240:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000242:	2360      	movs	r3, #96	; 0x60
 8000244:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000246:	2300      	movs	r3, #0
 8000248:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024a:	f107 0314 	add.w	r3, r7, #20
 800024e:	4618      	mov	r0, r3
 8000250:	f000 fe68 	bl	8000f24 <HAL_RCC_OscConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800025a:	f000 f86f 	bl	800033c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025e:	230f      	movs	r3, #15
 8000260:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000262:	2300      	movs	r3, #0
 8000264:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000272:	463b      	mov	r3, r7
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f001 fa3a 	bl	80016f0 <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000282:	f000 f85b 	bl	800033c <Error_Handler>
  }
}
 8000286:	bf00      	nop
 8000288:	3758      	adds	r7, #88	; 0x58
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000294:	4b1b      	ldr	r3, [pc, #108]	; (8000304 <MX_I2C1_Init+0x74>)
 8000296:	4a1c      	ldr	r2, [pc, #112]	; (8000308 <MX_I2C1_Init+0x78>)
 8000298:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800029a:	4b1a      	ldr	r3, [pc, #104]	; (8000304 <MX_I2C1_Init+0x74>)
 800029c:	f640 6214 	movw	r2, #3604	; 0xe14
 80002a0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002a2:	4b18      	ldr	r3, [pc, #96]	; (8000304 <MX_I2C1_Init+0x74>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002a8:	4b16      	ldr	r3, [pc, #88]	; (8000304 <MX_I2C1_Init+0x74>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002ae:	4b15      	ldr	r3, [pc, #84]	; (8000304 <MX_I2C1_Init+0x74>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002b4:	4b13      	ldr	r3, [pc, #76]	; (8000304 <MX_I2C1_Init+0x74>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002ba:	4b12      	ldr	r3, [pc, #72]	; (8000304 <MX_I2C1_Init+0x74>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002c0:	4b10      	ldr	r3, [pc, #64]	; (8000304 <MX_I2C1_Init+0x74>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <MX_I2C1_Init+0x74>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002cc:	480d      	ldr	r0, [pc, #52]	; (8000304 <MX_I2C1_Init+0x74>)
 80002ce:	f000 fc9f 	bl	8000c10 <HAL_I2C_Init>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002d8:	f000 f830 	bl	800033c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002dc:	2100      	movs	r1, #0
 80002de:	4809      	ldr	r0, [pc, #36]	; (8000304 <MX_I2C1_Init+0x74>)
 80002e0:	f000 fd25 	bl	8000d2e <HAL_I2CEx_ConfigAnalogFilter>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80002ea:	f000 f827 	bl	800033c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002ee:	2100      	movs	r1, #0
 80002f0:	4804      	ldr	r0, [pc, #16]	; (8000304 <MX_I2C1_Init+0x74>)
 80002f2:	f000 fd67 	bl	8000dc4 <HAL_I2CEx_ConfigDigitalFilter>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80002fc:	f000 f81e 	bl	800033c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000300:	bf00      	nop
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000168 	.word	0x20000168
 8000308:	40005400 	.word	0x40005400

0800030c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <MX_GPIO_Init+0x2c>)
 8000314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000316:	4a08      	ldr	r2, [pc, #32]	; (8000338 <MX_GPIO_Init+0x2c>)
 8000318:	f043 0302 	orr.w	r3, r3, #2
 800031c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800031e:	4b06      	ldr	r3, [pc, #24]	; (8000338 <MX_GPIO_Init+0x2c>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000322:	f003 0302 	and.w	r3, r3, #2
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]

}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40021000 	.word	0x40021000

0800033c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000340:	b672      	cpsid	i
}
 8000342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000344:	e7fe      	b.n	8000344 <Error_Handler+0x8>
	...

08000348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800034e:	4b0f      	ldr	r3, [pc, #60]	; (800038c <HAL_MspInit+0x44>)
 8000350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000352:	4a0e      	ldr	r2, [pc, #56]	; (800038c <HAL_MspInit+0x44>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6613      	str	r3, [r2, #96]	; 0x60
 800035a:	4b0c      	ldr	r3, [pc, #48]	; (800038c <HAL_MspInit+0x44>)
 800035c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000366:	4b09      	ldr	r3, [pc, #36]	; (800038c <HAL_MspInit+0x44>)
 8000368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800036a:	4a08      	ldr	r2, [pc, #32]	; (800038c <HAL_MspInit+0x44>)
 800036c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000370:	6593      	str	r3, [r2, #88]	; 0x58
 8000372:	4b06      	ldr	r3, [pc, #24]	; (800038c <HAL_MspInit+0x44>)
 8000374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800037a:	603b      	str	r3, [r7, #0]
 800037c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40021000 	.word	0x40021000

08000390 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b0ac      	sub	sp, #176	; 0xb0
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000398:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
 80003a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a8:	f107 0314 	add.w	r3, r7, #20
 80003ac:	2288      	movs	r2, #136	; 0x88
 80003ae:	2100      	movs	r1, #0
 80003b0:	4618      	mov	r0, r3
 80003b2:	f002 fcbb 	bl	8002d2c <memset>
  if(hi2c->Instance==I2C1)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a21      	ldr	r2, [pc, #132]	; (8000440 <HAL_I2C_MspInit+0xb0>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d13b      	bne.n	8000438 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003c0:	2340      	movs	r3, #64	; 0x40
 80003c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c8:	f107 0314 	add.w	r3, r7, #20
 80003cc:	4618      	mov	r0, r3
 80003ce:	f001 fb5d 	bl	8001a8c <HAL_RCCEx_PeriphCLKConfig>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80003d8:	f7ff ffb0 	bl	800033c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003dc:	4b19      	ldr	r3, [pc, #100]	; (8000444 <HAL_I2C_MspInit+0xb4>)
 80003de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e0:	4a18      	ldr	r2, [pc, #96]	; (8000444 <HAL_I2C_MspInit+0xb4>)
 80003e2:	f043 0302 	orr.w	r3, r3, #2
 80003e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003e8:	4b16      	ldr	r3, [pc, #88]	; (8000444 <HAL_I2C_MspInit+0xb4>)
 80003ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ec:	f003 0302 	and.w	r3, r3, #2
 80003f0:	613b      	str	r3, [r7, #16]
 80003f2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80003f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80003f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003fc:	2312      	movs	r3, #18
 80003fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800040e:	2304      	movs	r3, #4
 8000410:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000414:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000418:	4619      	mov	r1, r3
 800041a:	480b      	ldr	r0, [pc, #44]	; (8000448 <HAL_I2C_MspInit+0xb8>)
 800041c:	f000 fa4e 	bl	80008bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000420:	4b08      	ldr	r3, [pc, #32]	; (8000444 <HAL_I2C_MspInit+0xb4>)
 8000422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000424:	4a07      	ldr	r2, [pc, #28]	; (8000444 <HAL_I2C_MspInit+0xb4>)
 8000426:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800042a:	6593      	str	r3, [r2, #88]	; 0x58
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <HAL_I2C_MspInit+0xb4>)
 800042e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000438:	bf00      	nop
 800043a:	37b0      	adds	r7, #176	; 0xb0
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40005400 	.word	0x40005400
 8000444:	40021000 	.word	0x40021000
 8000448:	48000400 	.word	0x48000400

0800044c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000450:	e7fe      	b.n	8000450 <NMI_Handler+0x4>

08000452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000456:	e7fe      	b.n	8000456 <HardFault_Handler+0x4>

08000458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800045c:	e7fe      	b.n	800045c <MemManage_Handler+0x4>

0800045e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000462:	e7fe      	b.n	8000462 <BusFault_Handler+0x4>

08000464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <UsageFault_Handler+0x4>

0800046a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800046e:	bf00      	nop
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr

08000478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr

08000486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000498:	f000 f90a 	bl	80006b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}

080004a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
	return 1;
 80004a4:	2301      	movs	r3, #1
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <_kill>:

int _kill(int pid, int sig)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80004ba:	f002 fbed 	bl	8002c98 <__errno>
 80004be:	4603      	mov	r3, r0
 80004c0:	2216      	movs	r2, #22
 80004c2:	601a      	str	r2, [r3, #0]
	return -1;
 80004c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <_exit>:

void _exit (int status)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80004d8:	f04f 31ff 	mov.w	r1, #4294967295
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f7ff ffe7 	bl	80004b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80004e2:	e7fe      	b.n	80004e2 <_exit+0x12>

080004e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004ec:	4a14      	ldr	r2, [pc, #80]	; (8000540 <_sbrk+0x5c>)
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <_sbrk+0x60>)
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004f8:	4b13      	ldr	r3, [pc, #76]	; (8000548 <_sbrk+0x64>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d102      	bne.n	8000506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000500:	4b11      	ldr	r3, [pc, #68]	; (8000548 <_sbrk+0x64>)
 8000502:	4a12      	ldr	r2, [pc, #72]	; (800054c <_sbrk+0x68>)
 8000504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <_sbrk+0x64>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	429a      	cmp	r2, r3
 8000512:	d207      	bcs.n	8000524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000514:	f002 fbc0 	bl	8002c98 <__errno>
 8000518:	4603      	mov	r3, r0
 800051a:	220c      	movs	r2, #12
 800051c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
 8000522:	e009      	b.n	8000538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <_sbrk+0x64>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <_sbrk+0x64>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	4a05      	ldr	r2, [pc, #20]	; (8000548 <_sbrk+0x64>)
 8000534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000536:	68fb      	ldr	r3, [r7, #12]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3718      	adds	r7, #24
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20018000 	.word	0x20018000
 8000544:	00000400 	.word	0x00000400
 8000548:	20000098 	.word	0x20000098
 800054c:	200001c8 	.word	0x200001c8

08000550 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <SystemInit+0x5c>)
 8000556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800055a:	4a14      	ldr	r2, [pc, #80]	; (80005ac <SystemInit+0x5c>)
 800055c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <SystemInit+0x60>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a11      	ldr	r2, [pc, #68]	; (80005b0 <SystemInit+0x60>)
 800056a:	f043 0301 	orr.w	r3, r3, #1
 800056e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <SystemInit+0x60>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <SystemInit+0x60>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <SystemInit+0x60>)
 800057c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000580:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000584:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <SystemInit+0x60>)
 8000588:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800058c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <SystemInit+0x60>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <SystemInit+0x60>)
 8000594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000598:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <SystemInit+0x60>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000ed00 	.word	0xe000ed00
 80005b0:	40021000 	.word	0x40021000

080005b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b8:	f7ff ffca 	bl	8000550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005be:	e003      	b.n	80005c8 <LoopCopyDataInit>

080005c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005c6:	3104      	adds	r1, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005c8:	480a      	ldr	r0, [pc, #40]	; (80005f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80005cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005d0:	d3f6      	bcc.n	80005c0 <CopyDataInit>
	ldr	r2, =_sbss
 80005d2:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80005d4:	e002      	b.n	80005dc <LoopFillZerobss>

080005d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005d8:	f842 3b04 	str.w	r3, [r2], #4

080005dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <LoopForever+0x16>)
	cmp	r2, r3
 80005de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005e0:	d3f9      	bcc.n	80005d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005e2:	f002 fb5f 	bl	8002ca4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005e6:	f7ff fe01 	bl	80001ec <main>

080005ea <LoopForever>:

LoopForever:
    b LoopForever
 80005ea:	e7fe      	b.n	80005ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005ec:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80005f0:	08003ce0 	.word	0x08003ce0
	ldr	r0, =_sdata
 80005f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005f8:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 80005fc:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8000600:	200001c8 	.word	0x200001c8

08000604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000604:	e7fe      	b.n	8000604 <ADC1_2_IRQHandler>

08000606 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800060c:	2300      	movs	r3, #0
 800060e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000610:	2003      	movs	r0, #3
 8000612:	f000 f91f 	bl	8000854 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000616:	200f      	movs	r0, #15
 8000618:	f000 f80e 	bl	8000638 <HAL_InitTick>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d002      	beq.n	8000628 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000622:	2301      	movs	r3, #1
 8000624:	71fb      	strb	r3, [r7, #7]
 8000626:	e001      	b.n	800062c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000628:	f7ff fe8e 	bl	8000348 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800062c:	79fb      	ldrb	r3, [r7, #7]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000640:	2300      	movs	r3, #0
 8000642:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000644:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <HAL_InitTick+0x6c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d023      	beq.n	8000694 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <HAL_InitTick+0x70>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <HAL_InitTick+0x6c>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4619      	mov	r1, r3
 8000656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065a:	fbb3 f3f1 	udiv	r3, r3, r1
 800065e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f91d 	bl	80008a2 <HAL_SYSTICK_Config>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d10f      	bne.n	800068e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b0f      	cmp	r3, #15
 8000672:	d809      	bhi.n	8000688 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000674:	2200      	movs	r2, #0
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	f04f 30ff 	mov.w	r0, #4294967295
 800067c:	f000 f8f5 	bl	800086a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000680:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <HAL_InitTick+0x74>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6013      	str	r3, [r2, #0]
 8000686:	e007      	b.n	8000698 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000688:	2301      	movs	r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
 800068c:	e004      	b.n	8000698 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	73fb      	strb	r3, [r7, #15]
 8000692:	e001      	b.n	8000698 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000694:	2301      	movs	r3, #1
 8000696:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000698:	7bfb      	ldrb	r3, [r7, #15]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000000c 	.word	0x2000000c
 80006a8:	20000004 	.word	0x20000004
 80006ac:	20000008 	.word	0x20000008

080006b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_IncTick+0x20>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_IncTick+0x24>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4413      	add	r3, r2
 80006c0:	4a04      	ldr	r2, [pc, #16]	; (80006d4 <HAL_IncTick+0x24>)
 80006c2:	6013      	str	r3, [r2, #0]
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	2000000c 	.word	0x2000000c
 80006d4:	200001b4 	.word	0x200001b4

080006d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return uwTick;
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <HAL_GetTick+0x14>)
 80006de:	681b      	ldr	r3, [r3, #0]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	200001b4 	.word	0x200001b4

080006f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <__NVIC_SetPriorityGrouping+0x44>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800070c:	4013      	ands	r3, r2
 800070e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800071c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000722:	4a04      	ldr	r2, [pc, #16]	; (8000734 <__NVIC_SetPriorityGrouping+0x44>)
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	60d3      	str	r3, [r2, #12]
}
 8000728:	bf00      	nop
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <__NVIC_GetPriorityGrouping+0x18>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	f003 0307 	and.w	r3, r3, #7
}
 8000746:	4618      	mov	r0, r3
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	6039      	str	r1, [r7, #0]
 800075e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000764:	2b00      	cmp	r3, #0
 8000766:	db0a      	blt.n	800077e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	b2da      	uxtb	r2, r3
 800076c:	490c      	ldr	r1, [pc, #48]	; (80007a0 <__NVIC_SetPriority+0x4c>)
 800076e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000772:	0112      	lsls	r2, r2, #4
 8000774:	b2d2      	uxtb	r2, r2
 8000776:	440b      	add	r3, r1
 8000778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800077c:	e00a      	b.n	8000794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4908      	ldr	r1, [pc, #32]	; (80007a4 <__NVIC_SetPriority+0x50>)
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	f003 030f 	and.w	r3, r3, #15
 800078a:	3b04      	subs	r3, #4
 800078c:	0112      	lsls	r2, r2, #4
 800078e:	b2d2      	uxtb	r2, r2
 8000790:	440b      	add	r3, r1
 8000792:	761a      	strb	r2, [r3, #24]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	e000e100 	.word	0xe000e100
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b089      	sub	sp, #36	; 0x24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	f1c3 0307 	rsb	r3, r3, #7
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	bf28      	it	cs
 80007c6:	2304      	movcs	r3, #4
 80007c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3304      	adds	r3, #4
 80007ce:	2b06      	cmp	r3, #6
 80007d0:	d902      	bls.n	80007d8 <NVIC_EncodePriority+0x30>
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	3b03      	subs	r3, #3
 80007d6:	e000      	b.n	80007da <NVIC_EncodePriority+0x32>
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007dc:	f04f 32ff 	mov.w	r2, #4294967295
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	43da      	mvns	r2, r3
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	401a      	ands	r2, r3
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f0:	f04f 31ff 	mov.w	r1, #4294967295
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	43d9      	mvns	r1, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000800:	4313      	orrs	r3, r2
         );
}
 8000802:	4618      	mov	r0, r3
 8000804:	3724      	adds	r7, #36	; 0x24
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
	...

08000810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3b01      	subs	r3, #1
 800081c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000820:	d301      	bcc.n	8000826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000822:	2301      	movs	r3, #1
 8000824:	e00f      	b.n	8000846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <SysTick_Config+0x40>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3b01      	subs	r3, #1
 800082c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082e:	210f      	movs	r1, #15
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	f7ff ff8e 	bl	8000754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <SysTick_Config+0x40>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <SysTick_Config+0x40>)
 8000840:	2207      	movs	r2, #7
 8000842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	e000e010 	.word	0xe000e010

08000854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff47 	bl	80006f0 <__NVIC_SetPriorityGrouping>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b086      	sub	sp, #24
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
 8000876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800087c:	f7ff ff5c 	bl	8000738 <__NVIC_GetPriorityGrouping>
 8000880:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	6978      	ldr	r0, [r7, #20]
 8000888:	f7ff ff8e 	bl	80007a8 <NVIC_EncodePriority>
 800088c:	4602      	mov	r2, r0
 800088e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff5d 	bl	8000754 <__NVIC_SetPriority>
}
 800089a:	bf00      	nop
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffb0 	bl	8000810 <SysTick_Config>
 80008b0:	4603      	mov	r3, r0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008bc:	b480      	push	{r7}
 80008be:	b087      	sub	sp, #28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ca:	e17f      	b.n	8000bcc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	2101      	movs	r1, #1
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	fa01 f303 	lsl.w	r3, r1, r3
 80008d8:	4013      	ands	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f000 8171 	beq.w	8000bc6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d00b      	beq.n	8000904 <HAL_GPIO_Init+0x48>
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d007      	beq.n	8000904 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f8:	2b11      	cmp	r3, #17
 80008fa:	d003      	beq.n	8000904 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	2b12      	cmp	r3, #18
 8000902:	d130      	bne.n	8000966 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	2203      	movs	r2, #3
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	4013      	ands	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	68da      	ldr	r2, [r3, #12]
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4313      	orrs	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800093a:	2201      	movs	r2, #1
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4013      	ands	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	091b      	lsrs	r3, r3, #4
 8000950:	f003 0201 	and.w	r2, r3, #1
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	4313      	orrs	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f003 0303 	and.w	r3, r3, #3
 800096e:	2b03      	cmp	r3, #3
 8000970:	d118      	bne.n	80009a4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000976:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000978:	2201      	movs	r2, #1
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4013      	ands	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	08db      	lsrs	r3, r3, #3
 800098e:	f003 0201 	and.w	r2, r3, #1
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	4313      	orrs	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	2203      	movs	r2, #3
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4013      	ands	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	689a      	ldr	r2, [r3, #8]
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d003      	beq.n	80009e4 <HAL_GPIO_Init+0x128>
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	2b12      	cmp	r3, #18
 80009e2:	d123      	bne.n	8000a2c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	08da      	lsrs	r2, r3, #3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3208      	adds	r2, #8
 80009ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	f003 0307 	and.w	r3, r3, #7
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	220f      	movs	r2, #15
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	691a      	ldr	r2, [r3, #16]
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	08da      	lsrs	r2, r3, #3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3208      	adds	r2, #8
 8000a26:	6939      	ldr	r1, [r7, #16]
 8000a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	2203      	movs	r2, #3
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f003 0203 	and.w	r2, r3, #3
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	f000 80ac 	beq.w	8000bc6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	4b5f      	ldr	r3, [pc, #380]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a72:	4a5e      	ldr	r2, [pc, #376]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6613      	str	r3, [r2, #96]	; 0x60
 8000a7a:	4b5c      	ldr	r3, [pc, #368]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a86:	4a5a      	ldr	r2, [pc, #360]	; (8000bf0 <HAL_GPIO_Init+0x334>)
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	089b      	lsrs	r3, r3, #2
 8000a8c:	3302      	adds	r3, #2
 8000a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	f003 0303 	and.w	r3, r3, #3
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	220f      	movs	r2, #15
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ab0:	d025      	beq.n	8000afe <HAL_GPIO_Init+0x242>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a4f      	ldr	r2, [pc, #316]	; (8000bf4 <HAL_GPIO_Init+0x338>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d01f      	beq.n	8000afa <HAL_GPIO_Init+0x23e>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a4e      	ldr	r2, [pc, #312]	; (8000bf8 <HAL_GPIO_Init+0x33c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d019      	beq.n	8000af6 <HAL_GPIO_Init+0x23a>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a4d      	ldr	r2, [pc, #308]	; (8000bfc <HAL_GPIO_Init+0x340>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d013      	beq.n	8000af2 <HAL_GPIO_Init+0x236>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a4c      	ldr	r2, [pc, #304]	; (8000c00 <HAL_GPIO_Init+0x344>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d00d      	beq.n	8000aee <HAL_GPIO_Init+0x232>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a4b      	ldr	r2, [pc, #300]	; (8000c04 <HAL_GPIO_Init+0x348>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d007      	beq.n	8000aea <HAL_GPIO_Init+0x22e>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a4a      	ldr	r2, [pc, #296]	; (8000c08 <HAL_GPIO_Init+0x34c>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d101      	bne.n	8000ae6 <HAL_GPIO_Init+0x22a>
 8000ae2:	2306      	movs	r3, #6
 8000ae4:	e00c      	b.n	8000b00 <HAL_GPIO_Init+0x244>
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	e00a      	b.n	8000b00 <HAL_GPIO_Init+0x244>
 8000aea:	2305      	movs	r3, #5
 8000aec:	e008      	b.n	8000b00 <HAL_GPIO_Init+0x244>
 8000aee:	2304      	movs	r3, #4
 8000af0:	e006      	b.n	8000b00 <HAL_GPIO_Init+0x244>
 8000af2:	2303      	movs	r3, #3
 8000af4:	e004      	b.n	8000b00 <HAL_GPIO_Init+0x244>
 8000af6:	2302      	movs	r3, #2
 8000af8:	e002      	b.n	8000b00 <HAL_GPIO_Init+0x244>
 8000afa:	2301      	movs	r3, #1
 8000afc:	e000      	b.n	8000b00 <HAL_GPIO_Init+0x244>
 8000afe:	2300      	movs	r3, #0
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	f002 0203 	and.w	r2, r2, #3
 8000b06:	0092      	lsls	r2, r2, #2
 8000b08:	4093      	lsls	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b10:	4937      	ldr	r1, [pc, #220]	; (8000bf0 <HAL_GPIO_Init+0x334>)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	089b      	lsrs	r3, r3, #2
 8000b16:	3302      	adds	r3, #2
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b1e:	4b3b      	ldr	r3, [pc, #236]	; (8000c0c <HAL_GPIO_Init+0x350>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b42:	4a32      	ldr	r2, [pc, #200]	; (8000c0c <HAL_GPIO_Init+0x350>)
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b48:	4b30      	ldr	r3, [pc, #192]	; (8000c0c <HAL_GPIO_Init+0x350>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d003      	beq.n	8000b6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b6c:	4a27      	ldr	r2, [pc, #156]	; (8000c0c <HAL_GPIO_Init+0x350>)
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b72:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <HAL_GPIO_Init+0x350>)
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b96:	4a1d      	ldr	r2, [pc, #116]	; (8000c0c <HAL_GPIO_Init+0x350>)
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <HAL_GPIO_Init+0x350>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bc0:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <HAL_GPIO_Init+0x350>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f47f ae78 	bne.w	80008cc <HAL_GPIO_Init+0x10>
  }
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	371c      	adds	r7, #28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40010000 	.word	0x40010000
 8000bf4:	48000400 	.word	0x48000400
 8000bf8:	48000800 	.word	0x48000800
 8000bfc:	48000c00 	.word	0x48000c00
 8000c00:	48001000 	.word	0x48001000
 8000c04:	48001400 	.word	0x48001400
 8000c08:	48001800 	.word	0x48001800
 8000c0c:	40010400 	.word	0x40010400

08000c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e081      	b.n	8000d26 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d106      	bne.n	8000c3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff fbaa 	bl	8000390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2224      	movs	r2, #36	; 0x24
 8000c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f022 0201 	bic.w	r2, r2, #1
 8000c52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d107      	bne.n	8000c8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	e006      	b.n	8000c98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689a      	ldr	r2, [r3, #8]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000c96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d104      	bne.n	8000caa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ca8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	6812      	ldr	r2, [r2, #0]
 8000cb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68da      	ldr	r2, [r3, #12]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ccc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	691a      	ldr	r2, [r3, #16]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	ea42 0103 	orr.w	r1, r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	021a      	lsls	r2, r3, #8
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	69d9      	ldr	r1, [r3, #28]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6a1a      	ldr	r2, [r3, #32]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f042 0201 	orr.w	r2, r2, #1
 8000d06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2220      	movs	r2, #32
 8000d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b20      	cmp	r3, #32
 8000d42:	d138      	bne.n	8000db6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d101      	bne.n	8000d52 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000d4e:	2302      	movs	r3, #2
 8000d50:	e032      	b.n	8000db8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2224      	movs	r2, #36	; 0x24
 8000d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f022 0201 	bic.w	r2, r2, #1
 8000d70:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d80:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	6819      	ldr	r1, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f042 0201 	orr.w	r2, r2, #1
 8000da0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2220      	movs	r2, #32
 8000da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e000      	b.n	8000db8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000db6:	2302      	movs	r3, #2
  }
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b20      	cmp	r3, #32
 8000dd8:	d139      	bne.n	8000e4e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d101      	bne.n	8000de8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000de4:	2302      	movs	r3, #2
 8000de6:	e033      	b.n	8000e50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2201      	movs	r2, #1
 8000dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2224      	movs	r2, #36	; 0x24
 8000df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 0201 	bic.w	r2, r2, #1
 8000e06:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e16:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f042 0201 	orr.w	r2, r2, #1
 8000e38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2220      	movs	r2, #32
 8000e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000e4e:	2302      	movs	r3, #2
  }
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40007000 	.word	0x40007000

08000e78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e86:	d130      	bne.n	8000eea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e88:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e94:	d038      	beq.n	8000f08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e96:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e9e:	4a1e      	ldr	r2, [pc, #120]	; (8000f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ea0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2232      	movs	r2, #50	; 0x32
 8000eac:	fb02 f303 	mul.w	r3, r2, r3
 8000eb0:	4a1b      	ldr	r2, [pc, #108]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb6:	0c9b      	lsrs	r3, r3, #18
 8000eb8:	3301      	adds	r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ebc:	e002      	b.n	8000ec4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ed0:	d102      	bne.n	8000ed8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1f2      	bne.n	8000ebe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ee4:	d110      	bne.n	8000f08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e00f      	b.n	8000f0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ef6:	d007      	beq.n	8000f08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f00:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40007000 	.word	0x40007000
 8000f1c:	20000004 	.word	0x20000004
 8000f20:	431bde83 	.word	0x431bde83

08000f24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e3d4      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f36:	4ba1      	ldr	r3, [pc, #644]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f003 030c 	and.w	r3, r3, #12
 8000f3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f40:	4b9e      	ldr	r3, [pc, #632]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0310 	and.w	r3, r3, #16
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 80e4 	beq.w	8001120 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d007      	beq.n	8000f6e <HAL_RCC_OscConfig+0x4a>
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	2b0c      	cmp	r3, #12
 8000f62:	f040 808b 	bne.w	800107c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	f040 8087 	bne.w	800107c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f6e:	4b93      	ldr	r3, [pc, #588]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d005      	beq.n	8000f86 <HAL_RCC_OscConfig+0x62>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d101      	bne.n	8000f86 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e3ac      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a1a      	ldr	r2, [r3, #32]
 8000f8a:	4b8c      	ldr	r3, [pc, #560]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0308 	and.w	r3, r3, #8
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d004      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x7c>
 8000f96:	4b89      	ldr	r3, [pc, #548]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f9e:	e005      	b.n	8000fac <HAL_RCC_OscConfig+0x88>
 8000fa0:	4b86      	ldr	r3, [pc, #536]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8000fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fa6:	091b      	lsrs	r3, r3, #4
 8000fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d223      	bcs.n	8000ff8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 fd09 	bl	80019cc <RCC_SetFlashLatencyFromMSIRange>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e38d      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fc4:	4b7d      	ldr	r3, [pc, #500]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a7c      	ldr	r2, [pc, #496]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8000fca:	f043 0308 	orr.w	r3, r3, #8
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	4b7a      	ldr	r3, [pc, #488]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	4977      	ldr	r1, [pc, #476]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fe2:	4b76      	ldr	r3, [pc, #472]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	4972      	ldr	r1, [pc, #456]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	604b      	str	r3, [r1, #4]
 8000ff6:	e025      	b.n	8001044 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ff8:	4b70      	ldr	r3, [pc, #448]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a6f      	ldr	r2, [pc, #444]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b6d      	ldr	r3, [pc, #436]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	496a      	ldr	r1, [pc, #424]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8001012:	4313      	orrs	r3, r2
 8001014:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001016:	4b69      	ldr	r3, [pc, #420]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	4965      	ldr	r1, [pc, #404]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8001026:	4313      	orrs	r3, r2
 8001028:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d109      	bne.n	8001044 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	4618      	mov	r0, r3
 8001036:	f000 fcc9 	bl	80019cc <RCC_SetFlashLatencyFromMSIRange>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e34d      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001044:	f000 fc36 	bl	80018b4 <HAL_RCC_GetSysClockFreq>
 8001048:	4602      	mov	r2, r0
 800104a:	4b5c      	ldr	r3, [pc, #368]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	091b      	lsrs	r3, r3, #4
 8001050:	f003 030f 	and.w	r3, r3, #15
 8001054:	495a      	ldr	r1, [pc, #360]	; (80011c0 <HAL_RCC_OscConfig+0x29c>)
 8001056:	5ccb      	ldrb	r3, [r1, r3]
 8001058:	f003 031f 	and.w	r3, r3, #31
 800105c:	fa22 f303 	lsr.w	r3, r2, r3
 8001060:	4a58      	ldr	r2, [pc, #352]	; (80011c4 <HAL_RCC_OscConfig+0x2a0>)
 8001062:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001064:	4b58      	ldr	r3, [pc, #352]	; (80011c8 <HAL_RCC_OscConfig+0x2a4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fae5 	bl	8000638 <HAL_InitTick>
 800106e:	4603      	mov	r3, r0
 8001070:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d052      	beq.n	800111e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	e331      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d032      	beq.n	80010ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001084:	4b4d      	ldr	r3, [pc, #308]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a4c      	ldr	r2, [pc, #304]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001090:	f7ff fb22 	bl	80006d8 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001098:	f7ff fb1e 	bl	80006d8 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e31a      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010aa:	4b44      	ldr	r3, [pc, #272]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0f0      	beq.n	8001098 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010b6:	4b41      	ldr	r3, [pc, #260]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a40      	ldr	r2, [pc, #256]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b3e      	ldr	r3, [pc, #248]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	493b      	ldr	r1, [pc, #236]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010d4:	4b39      	ldr	r3, [pc, #228]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	4936      	ldr	r1, [pc, #216]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	604b      	str	r3, [r1, #4]
 80010e8:	e01a      	b.n	8001120 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010ea:	4b34      	ldr	r3, [pc, #208]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a33      	ldr	r2, [pc, #204]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 80010f0:	f023 0301 	bic.w	r3, r3, #1
 80010f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010f6:	f7ff faef 	bl	80006d8 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010fe:	f7ff faeb 	bl	80006d8 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e2e7      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001110:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f0      	bne.n	80010fe <HAL_RCC_OscConfig+0x1da>
 800111c:	e000      	b.n	8001120 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800111e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	2b00      	cmp	r3, #0
 800112a:	d074      	beq.n	8001216 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	2b08      	cmp	r3, #8
 8001130:	d005      	beq.n	800113e <HAL_RCC_OscConfig+0x21a>
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	2b0c      	cmp	r3, #12
 8001136:	d10e      	bne.n	8001156 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	2b03      	cmp	r3, #3
 800113c:	d10b      	bne.n	8001156 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800113e:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d064      	beq.n	8001214 <HAL_RCC_OscConfig+0x2f0>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d160      	bne.n	8001214 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e2c4      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800115e:	d106      	bne.n	800116e <HAL_RCC_OscConfig+0x24a>
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a15      	ldr	r2, [pc, #84]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8001166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	e01d      	b.n	80011aa <HAL_RCC_OscConfig+0x286>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001176:	d10c      	bne.n	8001192 <HAL_RCC_OscConfig+0x26e>
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 800117e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 800118a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	e00b      	b.n	80011aa <HAL_RCC_OscConfig+0x286>
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a09      	ldr	r2, [pc, #36]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 8001198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a06      	ldr	r2, [pc, #24]	; (80011bc <HAL_RCC_OscConfig+0x298>)
 80011a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d01c      	beq.n	80011ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b2:	f7ff fa91 	bl	80006d8 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011b8:	e011      	b.n	80011de <HAL_RCC_OscConfig+0x2ba>
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000
 80011c0:	0800334c 	.word	0x0800334c
 80011c4:	20000004 	.word	0x20000004
 80011c8:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011cc:	f7ff fa84 	bl	80006d8 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b64      	cmp	r3, #100	; 0x64
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e280      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011de:	4baf      	ldr	r3, [pc, #700]	; (800149c <HAL_RCC_OscConfig+0x578>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0f0      	beq.n	80011cc <HAL_RCC_OscConfig+0x2a8>
 80011ea:	e014      	b.n	8001216 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ec:	f7ff fa74 	bl	80006d8 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f4:	f7ff fa70 	bl	80006d8 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b64      	cmp	r3, #100	; 0x64
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e26c      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001206:	4ba5      	ldr	r3, [pc, #660]	; (800149c <HAL_RCC_OscConfig+0x578>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0x2d0>
 8001212:	e000      	b.n	8001216 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d060      	beq.n	80012e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	2b04      	cmp	r3, #4
 8001226:	d005      	beq.n	8001234 <HAL_RCC_OscConfig+0x310>
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	2b0c      	cmp	r3, #12
 800122c:	d119      	bne.n	8001262 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d116      	bne.n	8001262 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001234:	4b99      	ldr	r3, [pc, #612]	; (800149c <HAL_RCC_OscConfig+0x578>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <HAL_RCC_OscConfig+0x328>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d101      	bne.n	800124c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e249      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124c:	4b93      	ldr	r3, [pc, #588]	; (800149c <HAL_RCC_OscConfig+0x578>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	061b      	lsls	r3, r3, #24
 800125a:	4990      	ldr	r1, [pc, #576]	; (800149c <HAL_RCC_OscConfig+0x578>)
 800125c:	4313      	orrs	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001260:	e040      	b.n	80012e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d023      	beq.n	80012b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126a:	4b8c      	ldr	r3, [pc, #560]	; (800149c <HAL_RCC_OscConfig+0x578>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a8b      	ldr	r2, [pc, #556]	; (800149c <HAL_RCC_OscConfig+0x578>)
 8001270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001276:	f7ff fa2f 	bl	80006d8 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127e:	f7ff fa2b 	bl	80006d8 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e227      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001290:	4b82      	ldr	r3, [pc, #520]	; (800149c <HAL_RCC_OscConfig+0x578>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0f0      	beq.n	800127e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129c:	4b7f      	ldr	r3, [pc, #508]	; (800149c <HAL_RCC_OscConfig+0x578>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	061b      	lsls	r3, r3, #24
 80012aa:	497c      	ldr	r1, [pc, #496]	; (800149c <HAL_RCC_OscConfig+0x578>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]
 80012b0:	e018      	b.n	80012e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b2:	4b7a      	ldr	r3, [pc, #488]	; (800149c <HAL_RCC_OscConfig+0x578>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a79      	ldr	r2, [pc, #484]	; (800149c <HAL_RCC_OscConfig+0x578>)
 80012b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012be:	f7ff fa0b 	bl	80006d8 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c6:	f7ff fa07 	bl	80006d8 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e203      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012d8:	4b70      	ldr	r3, [pc, #448]	; (800149c <HAL_RCC_OscConfig+0x578>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f0      	bne.n	80012c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d03c      	beq.n	800136a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d01c      	beq.n	8001332 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f8:	4b68      	ldr	r3, [pc, #416]	; (800149c <HAL_RCC_OscConfig+0x578>)
 80012fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012fe:	4a67      	ldr	r2, [pc, #412]	; (800149c <HAL_RCC_OscConfig+0x578>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001308:	f7ff f9e6 	bl	80006d8 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001310:	f7ff f9e2 	bl	80006d8 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e1de      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001322:	4b5e      	ldr	r3, [pc, #376]	; (800149c <HAL_RCC_OscConfig+0x578>)
 8001324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0ef      	beq.n	8001310 <HAL_RCC_OscConfig+0x3ec>
 8001330:	e01b      	b.n	800136a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001332:	4b5a      	ldr	r3, [pc, #360]	; (800149c <HAL_RCC_OscConfig+0x578>)
 8001334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001338:	4a58      	ldr	r2, [pc, #352]	; (800149c <HAL_RCC_OscConfig+0x578>)
 800133a:	f023 0301 	bic.w	r3, r3, #1
 800133e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001342:	f7ff f9c9 	bl	80006d8 <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800134a:	f7ff f9c5 	bl	80006d8 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e1c1      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800135c:	4b4f      	ldr	r3, [pc, #316]	; (800149c <HAL_RCC_OscConfig+0x578>)
 800135e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1ef      	bne.n	800134a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 80a6 	beq.w	80014c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800137c:	4b47      	ldr	r3, [pc, #284]	; (800149c <HAL_RCC_OscConfig+0x578>)
 800137e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10d      	bne.n	80013a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001388:	4b44      	ldr	r3, [pc, #272]	; (800149c <HAL_RCC_OscConfig+0x578>)
 800138a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138c:	4a43      	ldr	r2, [pc, #268]	; (800149c <HAL_RCC_OscConfig+0x578>)
 800138e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001392:	6593      	str	r3, [r2, #88]	; 0x58
 8001394:	4b41      	ldr	r3, [pc, #260]	; (800149c <HAL_RCC_OscConfig+0x578>)
 8001396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013a0:	2301      	movs	r3, #1
 80013a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013a4:	4b3e      	ldr	r3, [pc, #248]	; (80014a0 <HAL_RCC_OscConfig+0x57c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d118      	bne.n	80013e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013b0:	4b3b      	ldr	r3, [pc, #236]	; (80014a0 <HAL_RCC_OscConfig+0x57c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a3a      	ldr	r2, [pc, #232]	; (80014a0 <HAL_RCC_OscConfig+0x57c>)
 80013b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013bc:	f7ff f98c 	bl	80006d8 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c4:	f7ff f988 	bl	80006d8 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e184      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013d6:	4b32      	ldr	r3, [pc, #200]	; (80014a0 <HAL_RCC_OscConfig+0x57c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d108      	bne.n	80013fc <HAL_RCC_OscConfig+0x4d8>
 80013ea:	4b2c      	ldr	r3, [pc, #176]	; (800149c <HAL_RCC_OscConfig+0x578>)
 80013ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f0:	4a2a      	ldr	r2, [pc, #168]	; (800149c <HAL_RCC_OscConfig+0x578>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013fa:	e024      	b.n	8001446 <HAL_RCC_OscConfig+0x522>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b05      	cmp	r3, #5
 8001402:	d110      	bne.n	8001426 <HAL_RCC_OscConfig+0x502>
 8001404:	4b25      	ldr	r3, [pc, #148]	; (800149c <HAL_RCC_OscConfig+0x578>)
 8001406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800140a:	4a24      	ldr	r2, [pc, #144]	; (800149c <HAL_RCC_OscConfig+0x578>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001414:	4b21      	ldr	r3, [pc, #132]	; (800149c <HAL_RCC_OscConfig+0x578>)
 8001416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800141a:	4a20      	ldr	r2, [pc, #128]	; (800149c <HAL_RCC_OscConfig+0x578>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001424:	e00f      	b.n	8001446 <HAL_RCC_OscConfig+0x522>
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <HAL_RCC_OscConfig+0x578>)
 8001428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800142c:	4a1b      	ldr	r2, [pc, #108]	; (800149c <HAL_RCC_OscConfig+0x578>)
 800142e:	f023 0301 	bic.w	r3, r3, #1
 8001432:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001436:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_RCC_OscConfig+0x578>)
 8001438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800143c:	4a17      	ldr	r2, [pc, #92]	; (800149c <HAL_RCC_OscConfig+0x578>)
 800143e:	f023 0304 	bic.w	r3, r3, #4
 8001442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d016      	beq.n	800147c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144e:	f7ff f943 	bl	80006d8 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001454:	e00a      	b.n	800146c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001456:	f7ff f93f 	bl	80006d8 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	f241 3288 	movw	r2, #5000	; 0x1388
 8001464:	4293      	cmp	r3, r2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e139      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_RCC_OscConfig+0x578>)
 800146e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0ed      	beq.n	8001456 <HAL_RCC_OscConfig+0x532>
 800147a:	e01a      	b.n	80014b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147c:	f7ff f92c 	bl	80006d8 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001482:	e00f      	b.n	80014a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001484:	f7ff f928 	bl	80006d8 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001492:	4293      	cmp	r3, r2
 8001494:	d906      	bls.n	80014a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e122      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000
 80014a0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014a4:	4b90      	ldr	r3, [pc, #576]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 80014a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1e8      	bne.n	8001484 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014b2:	7ffb      	ldrb	r3, [r7, #31]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d105      	bne.n	80014c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014b8:	4b8b      	ldr	r3, [pc, #556]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 80014ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014bc:	4a8a      	ldr	r2, [pc, #552]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 80014be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 8108 	beq.w	80016de <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	f040 80d0 	bne.w	8001678 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014d8:	4b83      	ldr	r3, [pc, #524]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f003 0203 	and.w	r2, r3, #3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d130      	bne.n	800154e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	3b01      	subs	r3, #1
 80014f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d127      	bne.n	800154e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001508:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800150a:	429a      	cmp	r2, r3
 800150c:	d11f      	bne.n	800154e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001518:	2a07      	cmp	r2, #7
 800151a:	bf14      	ite	ne
 800151c:	2201      	movne	r2, #1
 800151e:	2200      	moveq	r2, #0
 8001520:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001522:	4293      	cmp	r3, r2
 8001524:	d113      	bne.n	800154e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001530:	085b      	lsrs	r3, r3, #1
 8001532:	3b01      	subs	r3, #1
 8001534:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001536:	429a      	cmp	r2, r3
 8001538:	d109      	bne.n	800154e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	085b      	lsrs	r3, r3, #1
 8001546:	3b01      	subs	r3, #1
 8001548:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800154a:	429a      	cmp	r2, r3
 800154c:	d06e      	beq.n	800162c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2b0c      	cmp	r3, #12
 8001552:	d069      	beq.n	8001628 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001554:	4b64      	ldr	r3, [pc, #400]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d105      	bne.n	800156c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001560:	4b61      	ldr	r3, [pc, #388]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0b7      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001570:	4b5d      	ldr	r3, [pc, #372]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a5c      	ldr	r2, [pc, #368]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 8001576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800157a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800157c:	f7ff f8ac 	bl	80006d8 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001584:	f7ff f8a8 	bl	80006d8 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e0a4      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001596:	4b54      	ldr	r3, [pc, #336]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a2:	4b51      	ldr	r3, [pc, #324]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	4b51      	ldr	r3, [pc, #324]	; (80016ec <HAL_RCC_OscConfig+0x7c8>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015b2:	3a01      	subs	r2, #1
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	4311      	orrs	r1, r2
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015bc:	0212      	lsls	r2, r2, #8
 80015be:	4311      	orrs	r1, r2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80015c4:	0852      	lsrs	r2, r2, #1
 80015c6:	3a01      	subs	r2, #1
 80015c8:	0552      	lsls	r2, r2, #21
 80015ca:	4311      	orrs	r1, r2
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015d0:	0852      	lsrs	r2, r2, #1
 80015d2:	3a01      	subs	r2, #1
 80015d4:	0652      	lsls	r2, r2, #25
 80015d6:	4311      	orrs	r1, r2
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015dc:	0912      	lsrs	r2, r2, #4
 80015de:	0452      	lsls	r2, r2, #17
 80015e0:	430a      	orrs	r2, r1
 80015e2:	4941      	ldr	r1, [pc, #260]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015e8:	4b3f      	ldr	r3, [pc, #252]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a3e      	ldr	r2, [pc, #248]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 80015ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015f4:	4b3c      	ldr	r3, [pc, #240]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4a3b      	ldr	r2, [pc, #236]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 80015fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001600:	f7ff f86a 	bl	80006d8 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001608:	f7ff f866 	bl	80006d8 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e062      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800161a:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001626:	e05a      	b.n	80016de <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e059      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800162c:	4b2e      	ldr	r3, [pc, #184]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d152      	bne.n	80016de <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001638:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a2a      	ldr	r2, [pc, #168]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 800163e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001642:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001644:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4a27      	ldr	r2, [pc, #156]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 800164a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800164e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001650:	f7ff f842 	bl	80006d8 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001658:	f7ff f83e 	bl	80006d8 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e03a      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x734>
 8001676:	e032      	b.n	80016de <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2b0c      	cmp	r3, #12
 800167c:	d02d      	beq.n	80016da <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a19      	ldr	r2, [pc, #100]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 8001684:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001688:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d105      	bne.n	80016a2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	4a13      	ldr	r2, [pc, #76]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 800169c:	f023 0303 	bic.w	r3, r3, #3
 80016a0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	4a10      	ldr	r2, [pc, #64]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 80016a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80016ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b2:	f7ff f811 	bl	80006d8 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff f80d 	bl	80006d8 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e009      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_RCC_OscConfig+0x7c4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f0      	bne.n	80016ba <HAL_RCC_OscConfig+0x796>
 80016d8:	e001      	b.n	80016de <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3720      	adds	r7, #32
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021000 	.word	0x40021000
 80016ec:	f99d808c 	.word	0xf99d808c

080016f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0c8      	b.n	8001896 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001704:	4b66      	ldr	r3, [pc, #408]	; (80018a0 <HAL_RCC_ClockConfig+0x1b0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d910      	bls.n	8001734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b63      	ldr	r3, [pc, #396]	; (80018a0 <HAL_RCC_ClockConfig+0x1b0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f023 0207 	bic.w	r2, r3, #7
 800171a:	4961      	ldr	r1, [pc, #388]	; (80018a0 <HAL_RCC_ClockConfig+0x1b0>)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	4313      	orrs	r3, r2
 8001720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b5f      	ldr	r3, [pc, #380]	; (80018a0 <HAL_RCC_ClockConfig+0x1b0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0b0      	b.n	8001896 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d04c      	beq.n	80017da <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b03      	cmp	r3, #3
 8001746:	d107      	bne.n	8001758 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001748:	4b56      	ldr	r3, [pc, #344]	; (80018a4 <HAL_RCC_ClockConfig+0x1b4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d121      	bne.n	8001798 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e09e      	b.n	8001896 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d107      	bne.n	8001770 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001760:	4b50      	ldr	r3, [pc, #320]	; (80018a4 <HAL_RCC_ClockConfig+0x1b4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d115      	bne.n	8001798 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e092      	b.n	8001896 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d107      	bne.n	8001788 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001778:	4b4a      	ldr	r3, [pc, #296]	; (80018a4 <HAL_RCC_ClockConfig+0x1b4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d109      	bne.n	8001798 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e086      	b.n	8001896 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001788:	4b46      	ldr	r3, [pc, #280]	; (80018a4 <HAL_RCC_ClockConfig+0x1b4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e07e      	b.n	8001896 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001798:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <HAL_RCC_ClockConfig+0x1b4>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f023 0203 	bic.w	r2, r3, #3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	493f      	ldr	r1, [pc, #252]	; (80018a4 <HAL_RCC_ClockConfig+0x1b4>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017aa:	f7fe ff95 	bl	80006d8 <HAL_GetTick>
 80017ae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b0:	e00a      	b.n	80017c8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b2:	f7fe ff91 	bl	80006d8 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e066      	b.n	8001896 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c8:	4b36      	ldr	r3, [pc, #216]	; (80018a4 <HAL_RCC_ClockConfig+0x1b4>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 020c 	and.w	r2, r3, #12
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d1eb      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d008      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e6:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <HAL_RCC_ClockConfig+0x1b4>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	492c      	ldr	r1, [pc, #176]	; (80018a4 <HAL_RCC_ClockConfig+0x1b4>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f8:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <HAL_RCC_ClockConfig+0x1b0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d210      	bcs.n	8001828 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001806:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <HAL_RCC_ClockConfig+0x1b0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 0207 	bic.w	r2, r3, #7
 800180e:	4924      	ldr	r1, [pc, #144]	; (80018a0 <HAL_RCC_ClockConfig+0x1b0>)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	4313      	orrs	r3, r2
 8001814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001816:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <HAL_RCC_ClockConfig+0x1b0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e036      	b.n	8001896 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d008      	beq.n	8001846 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_RCC_ClockConfig+0x1b4>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	4918      	ldr	r1, [pc, #96]	; (80018a4 <HAL_RCC_ClockConfig+0x1b4>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d009      	beq.n	8001866 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_RCC_ClockConfig+0x1b4>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4910      	ldr	r1, [pc, #64]	; (80018a4 <HAL_RCC_ClockConfig+0x1b4>)
 8001862:	4313      	orrs	r3, r2
 8001864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001866:	f000 f825 	bl	80018b4 <HAL_RCC_GetSysClockFreq>
 800186a:	4602      	mov	r2, r0
 800186c:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <HAL_RCC_ClockConfig+0x1b4>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	490c      	ldr	r1, [pc, #48]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001878:	5ccb      	ldrb	r3, [r1, r3]
 800187a:	f003 031f 	and.w	r3, r3, #31
 800187e:	fa22 f303 	lsr.w	r3, r2, r3
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fed4 	bl	8000638 <HAL_InitTick>
 8001890:	4603      	mov	r3, r0
 8001892:	72fb      	strb	r3, [r7, #11]

  return status;
 8001894:	7afb      	ldrb	r3, [r7, #11]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40022000 	.word	0x40022000
 80018a4:	40021000 	.word	0x40021000
 80018a8:	0800334c 	.word	0x0800334c
 80018ac:	20000004 	.word	0x20000004
 80018b0:	20000008 	.word	0x20000008

080018b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c2:	4b3e      	ldr	r3, [pc, #248]	; (80019bc <HAL_RCC_GetSysClockFreq+0x108>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018cc:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <HAL_RCC_GetSysClockFreq+0x108>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0x34>
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	2b0c      	cmp	r3, #12
 80018e0:	d121      	bne.n	8001926 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d11e      	bne.n	8001926 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018e8:	4b34      	ldr	r3, [pc, #208]	; (80019bc <HAL_RCC_GetSysClockFreq+0x108>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d107      	bne.n	8001904 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018f4:	4b31      	ldr	r3, [pc, #196]	; (80019bc <HAL_RCC_GetSysClockFreq+0x108>)
 80018f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fa:	0a1b      	lsrs	r3, r3, #8
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	e005      	b.n	8001910 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001904:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <HAL_RCC_GetSysClockFreq+0x108>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001910:	4a2b      	ldr	r2, [pc, #172]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001918:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10d      	bne.n	800193c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001924:	e00a      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	2b04      	cmp	r3, #4
 800192a:	d102      	bne.n	8001932 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800192c:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800192e:	61bb      	str	r3, [r7, #24]
 8001930:	e004      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	2b08      	cmp	r3, #8
 8001936:	d101      	bne.n	800193c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800193a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	2b0c      	cmp	r3, #12
 8001940:	d134      	bne.n	80019ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001942:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <HAL_RCC_GetSysClockFreq+0x108>)
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d003      	beq.n	800195a <HAL_RCC_GetSysClockFreq+0xa6>
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d003      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0xac>
 8001958:	e005      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800195c:	617b      	str	r3, [r7, #20]
      break;
 800195e:	e005      	b.n	800196c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001962:	617b      	str	r3, [r7, #20]
      break;
 8001964:	e002      	b.n	800196c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	617b      	str	r3, [r7, #20]
      break;
 800196a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <HAL_RCC_GetSysClockFreq+0x108>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	3301      	adds	r3, #1
 8001978:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <HAL_RCC_GetSysClockFreq+0x108>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	fb02 f203 	mul.w	r2, r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001990:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_RCC_GetSysClockFreq+0x108>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	0e5b      	lsrs	r3, r3, #25
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	3301      	adds	r3, #1
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019ac:	69bb      	ldr	r3, [r7, #24]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
 80019c0:	0800335c 	.word	0x0800335c
 80019c4:	00f42400 	.word	0x00f42400
 80019c8:	007a1200 	.word	0x007a1200

080019cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019d8:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019e4:	f7ff fa3a 	bl	8000e5c <HAL_PWREx_GetVoltageRange>
 80019e8:	6178      	str	r0, [r7, #20]
 80019ea:	e014      	b.n	8001a16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019ec:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f0:	4a24      	ldr	r2, [pc, #144]	; (8001a84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f6:	6593      	str	r3, [r2, #88]	; 0x58
 80019f8:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a04:	f7ff fa2a 	bl	8000e5c <HAL_PWREx_GetVoltageRange>
 8001a08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0e:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a1c:	d10b      	bne.n	8001a36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b80      	cmp	r3, #128	; 0x80
 8001a22:	d919      	bls.n	8001a58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2ba0      	cmp	r3, #160	; 0xa0
 8001a28:	d902      	bls.n	8001a30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	e013      	b.n	8001a58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a30:	2301      	movs	r3, #1
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	e010      	b.n	8001a58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b80      	cmp	r3, #128	; 0x80
 8001a3a:	d902      	bls.n	8001a42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	e00a      	b.n	8001a58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b80      	cmp	r3, #128	; 0x80
 8001a46:	d102      	bne.n	8001a4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a48:	2302      	movs	r3, #2
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	e004      	b.n	8001a58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b70      	cmp	r3, #112	; 0x70
 8001a52:	d101      	bne.n	8001a58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a54:	2301      	movs	r3, #1
 8001a56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f023 0207 	bic.w	r2, r3, #7
 8001a60:	4909      	ldr	r1, [pc, #36]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d001      	beq.n	8001a7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40022000 	.word	0x40022000

08001a8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001a94:	2300      	movs	r3, #0
 8001a96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a98:	2300      	movs	r3, #0
 8001a9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d041      	beq.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001aac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ab0:	d02a      	beq.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ab2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ab6:	d824      	bhi.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ab8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001abc:	d008      	beq.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001abe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ac2:	d81e      	bhi.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00a      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ac8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001acc:	d010      	beq.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001ace:	e018      	b.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ad0:	4b86      	ldr	r3, [pc, #536]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	4a85      	ldr	r2, [pc, #532]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ada:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001adc:	e015      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 fabb 	bl	8002060 <RCCEx_PLLSAI1_Config>
 8001aea:	4603      	mov	r3, r0
 8001aec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001aee:	e00c      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3320      	adds	r3, #32
 8001af4:	2100      	movs	r1, #0
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 fba6 	bl	8002248 <RCCEx_PLLSAI2_Config>
 8001afc:	4603      	mov	r3, r0
 8001afe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001b00:	e003      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	74fb      	strb	r3, [r7, #19]
      break;
 8001b06:	e000      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001b0a:	7cfb      	ldrb	r3, [r7, #19]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10b      	bne.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b10:	4b76      	ldr	r3, [pc, #472]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b1e:	4973      	ldr	r1, [pc, #460]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001b26:	e001      	b.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b28:	7cfb      	ldrb	r3, [r7, #19]
 8001b2a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d041      	beq.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001b40:	d02a      	beq.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001b42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001b46:	d824      	bhi.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001b48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b4c:	d008      	beq.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001b4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b52:	d81e      	bhi.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00a      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b5c:	d010      	beq.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001b5e:	e018      	b.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001b60:	4b62      	ldr	r3, [pc, #392]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	4a61      	ldr	r2, [pc, #388]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001b6c:	e015      	b.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3304      	adds	r3, #4
 8001b72:	2100      	movs	r1, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 fa73 	bl	8002060 <RCCEx_PLLSAI1_Config>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001b7e:	e00c      	b.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3320      	adds	r3, #32
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 fb5e 	bl	8002248 <RCCEx_PLLSAI2_Config>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001b90:	e003      	b.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	74fb      	strb	r3, [r7, #19]
      break;
 8001b96:	e000      	b.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001b98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001b9a:	7cfb      	ldrb	r3, [r7, #19]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10b      	bne.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ba0:	4b52      	ldr	r3, [pc, #328]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bae:	494f      	ldr	r1, [pc, #316]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001bb6:	e001      	b.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001bb8:	7cfb      	ldrb	r3, [r7, #19]
 8001bba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80a0 	beq.w	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001bce:	4b47      	ldr	r3, [pc, #284]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001bde:	2300      	movs	r3, #0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00d      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be4:	4b41      	ldr	r3, [pc, #260]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be8:	4a40      	ldr	r2, [pc, #256]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bee:	6593      	str	r3, [r2, #88]	; 0x58
 8001bf0:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c00:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a3a      	ldr	r2, [pc, #232]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c0c:	f7fe fd64 	bl	80006d8 <HAL_GetTick>
 8001c10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001c12:	e009      	b.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c14:	f7fe fd60 	bl	80006d8 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d902      	bls.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	74fb      	strb	r3, [r7, #19]
        break;
 8001c26:	e005      	b.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001c28:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0ef      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001c34:	7cfb      	ldrb	r3, [r7, #19]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d15c      	bne.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c3a:	4b2c      	ldr	r3, [pc, #176]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d01f      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d019      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c58:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c64:	4b21      	ldr	r3, [pc, #132]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6a:	4a20      	ldr	r2, [pc, #128]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7a:	4a1c      	ldr	r2, [pc, #112]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001c84:	4a19      	ldr	r2, [pc, #100]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d016      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c96:	f7fe fd1f 	bl	80006d8 <HAL_GetTick>
 8001c9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c9c:	e00b      	b.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9e:	f7fe fd1b 	bl	80006d8 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d902      	bls.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	74fb      	strb	r3, [r7, #19]
            break;
 8001cb4:	e006      	b.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0ec      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001cc4:	7cfb      	ldrb	r3, [r7, #19]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cda:	4904      	ldr	r1, [pc, #16]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ce2:	e009      	b.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ce4:	7cfb      	ldrb	r3, [r7, #19]
 8001ce6:	74bb      	strb	r3, [r7, #18]
 8001ce8:	e006      	b.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cf4:	7cfb      	ldrb	r3, [r7, #19]
 8001cf6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cf8:	7c7b      	ldrb	r3, [r7, #17]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d105      	bne.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cfe:	4b9e      	ldr	r3, [pc, #632]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	4a9d      	ldr	r2, [pc, #628]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00a      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d16:	4b98      	ldr	r3, [pc, #608]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1c:	f023 0203 	bic.w	r2, r3, #3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d24:	4994      	ldr	r1, [pc, #592]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00a      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d38:	4b8f      	ldr	r3, [pc, #572]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3e:	f023 020c 	bic.w	r2, r3, #12
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d46:	498c      	ldr	r1, [pc, #560]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00a      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d5a:	4b87      	ldr	r3, [pc, #540]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	4983      	ldr	r1, [pc, #524]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00a      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d7c:	4b7e      	ldr	r3, [pc, #504]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	497b      	ldr	r1, [pc, #492]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d9e:	4b76      	ldr	r3, [pc, #472]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dac:	4972      	ldr	r1, [pc, #456]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0320 	and.w	r3, r3, #32
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00a      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001dc0:	4b6d      	ldr	r3, [pc, #436]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	496a      	ldr	r1, [pc, #424]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00a      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001de2:	4b65      	ldr	r3, [pc, #404]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	4961      	ldr	r1, [pc, #388]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00a      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e04:	4b5c      	ldr	r3, [pc, #368]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e12:	4959      	ldr	r1, [pc, #356]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00a      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e26:	4b54      	ldr	r3, [pc, #336]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e34:	4950      	ldr	r1, [pc, #320]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00a      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e48:	4b4b      	ldr	r3, [pc, #300]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e56:	4948      	ldr	r1, [pc, #288]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00a      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e6a:	4b43      	ldr	r3, [pc, #268]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	493f      	ldr	r1, [pc, #252]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d028      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e8c:	4b3a      	ldr	r3, [pc, #232]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e9a:	4937      	ldr	r1, [pc, #220]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ea6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001eaa:	d106      	bne.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001eac:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a31      	ldr	r2, [pc, #196]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eb6:	60d3      	str	r3, [r2, #12]
 8001eb8:	e011      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ebe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ec2:	d10c      	bne.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	2101      	movs	r1, #1
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f8c8 	bl	8002060 <RCCEx_PLLSAI1_Config>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001ed4:	7cfb      	ldrb	r3, [r7, #19]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8001eda:	7cfb      	ldrb	r3, [r7, #19]
 8001edc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d028      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001eea:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef8:	491f      	ldr	r1, [pc, #124]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f08:	d106      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	4a1a      	ldr	r2, [pc, #104]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f14:	60d3      	str	r3, [r2, #12]
 8001f16:	e011      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3304      	adds	r3, #4
 8001f26:	2101      	movs	r1, #1
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 f899 	bl	8002060 <RCCEx_PLLSAI1_Config>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f32:	7cfb      	ldrb	r3, [r7, #19]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8001f38:	7cfb      	ldrb	r3, [r7, #19]
 8001f3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d02b      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f56:	4908      	ldr	r1, [pc, #32]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f66:	d109      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4a02      	ldr	r2, [pc, #8]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f72:	60d3      	str	r3, [r2, #12]
 8001f74:	e014      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 f867 	bl	8002060 <RCCEx_PLLSAI1_Config>
 8001f92:	4603      	mov	r3, r0
 8001f94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f96:	7cfb      	ldrb	r3, [r7, #19]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8001f9c:	7cfb      	ldrb	r3, [r7, #19]
 8001f9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d02f      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fac:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fba:	4928      	ldr	r1, [pc, #160]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fca:	d10d      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3304      	adds	r3, #4
 8001fd0:	2102      	movs	r1, #2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f844 	bl	8002060 <RCCEx_PLLSAI1_Config>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001fdc:	7cfb      	ldrb	r3, [r7, #19]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d014      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001fe2:	7cfb      	ldrb	r3, [r7, #19]
 8001fe4:	74bb      	strb	r3, [r7, #18]
 8001fe6:	e011      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ff0:	d10c      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3320      	adds	r3, #32
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 f925 	bl	8002248 <RCCEx_PLLSAI2_Config>
 8001ffe:	4603      	mov	r3, r0
 8002000:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002002:	7cfb      	ldrb	r3, [r7, #19]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002008:	7cfb      	ldrb	r3, [r7, #19]
 800200a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00a      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002018:	4b10      	ldr	r3, [pc, #64]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002026:	490d      	ldr	r1, [pc, #52]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800203c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002040:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800204a:	4904      	ldr	r1, [pc, #16]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002052:	7cbb      	ldrb	r3, [r7, #18]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40021000 	.word	0x40021000

08002060 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800206e:	4b75      	ldr	r3, [pc, #468]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d018      	beq.n	80020ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800207a:	4b72      	ldr	r3, [pc, #456]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f003 0203 	and.w	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d10d      	bne.n	80020a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
       ||
 800208e:	2b00      	cmp	r3, #0
 8002090:	d009      	beq.n	80020a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002092:	4b6c      	ldr	r3, [pc, #432]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
       ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d047      	beq.n	8002136 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
 80020aa:	e044      	b.n	8002136 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d018      	beq.n	80020e6 <RCCEx_PLLSAI1_Config+0x86>
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d825      	bhi.n	8002104 <RCCEx_PLLSAI1_Config+0xa4>
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d002      	beq.n	80020c2 <RCCEx_PLLSAI1_Config+0x62>
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d009      	beq.n	80020d4 <RCCEx_PLLSAI1_Config+0x74>
 80020c0:	e020      	b.n	8002104 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80020c2:	4b60      	ldr	r3, [pc, #384]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d11d      	bne.n	800210a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d2:	e01a      	b.n	800210a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80020d4:	4b5b      	ldr	r3, [pc, #364]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d116      	bne.n	800210e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020e4:	e013      	b.n	800210e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80020e6:	4b57      	ldr	r3, [pc, #348]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10f      	bne.n	8002112 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80020f2:	4b54      	ldr	r3, [pc, #336]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002102:	e006      	b.n	8002112 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
      break;
 8002108:	e004      	b.n	8002114 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800210a:	bf00      	nop
 800210c:	e002      	b.n	8002114 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800210e:	bf00      	nop
 8002110:	e000      	b.n	8002114 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002112:	bf00      	nop
    }

    if(status == HAL_OK)
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10d      	bne.n	8002136 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800211a:	4b4a      	ldr	r3, [pc, #296]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6819      	ldr	r1, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	3b01      	subs	r3, #1
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	430b      	orrs	r3, r1
 8002130:	4944      	ldr	r1, [pc, #272]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002132:	4313      	orrs	r3, r2
 8002134:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d17d      	bne.n	8002238 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800213c:	4b41      	ldr	r3, [pc, #260]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a40      	ldr	r2, [pc, #256]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002142:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002146:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002148:	f7fe fac6 	bl	80006d8 <HAL_GetTick>
 800214c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800214e:	e009      	b.n	8002164 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002150:	f7fe fac2 	bl	80006d8 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d902      	bls.n	8002164 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	73fb      	strb	r3, [r7, #15]
        break;
 8002162:	e005      	b.n	8002170 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002164:	4b37      	ldr	r3, [pc, #220]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1ef      	bne.n	8002150 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d160      	bne.n	8002238 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d111      	bne.n	80021a0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800217c:	4b31      	ldr	r3, [pc, #196]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6892      	ldr	r2, [r2, #8]
 800218c:	0211      	lsls	r1, r2, #8
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68d2      	ldr	r2, [r2, #12]
 8002192:	0912      	lsrs	r2, r2, #4
 8002194:	0452      	lsls	r2, r2, #17
 8002196:	430a      	orrs	r2, r1
 8002198:	492a      	ldr	r1, [pc, #168]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 800219a:	4313      	orrs	r3, r2
 800219c:	610b      	str	r3, [r1, #16]
 800219e:	e027      	b.n	80021f0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d112      	bne.n	80021cc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021a6:	4b27      	ldr	r3, [pc, #156]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80021ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6892      	ldr	r2, [r2, #8]
 80021b6:	0211      	lsls	r1, r2, #8
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6912      	ldr	r2, [r2, #16]
 80021bc:	0852      	lsrs	r2, r2, #1
 80021be:	3a01      	subs	r2, #1
 80021c0:	0552      	lsls	r2, r2, #21
 80021c2:	430a      	orrs	r2, r1
 80021c4:	491f      	ldr	r1, [pc, #124]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	610b      	str	r3, [r1, #16]
 80021ca:	e011      	b.n	80021f0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80021d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6892      	ldr	r2, [r2, #8]
 80021dc:	0211      	lsls	r1, r2, #8
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6952      	ldr	r2, [r2, #20]
 80021e2:	0852      	lsrs	r2, r2, #1
 80021e4:	3a01      	subs	r2, #1
 80021e6:	0652      	lsls	r2, r2, #25
 80021e8:	430a      	orrs	r2, r1
 80021ea:	4916      	ldr	r1, [pc, #88]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a13      	ldr	r2, [pc, #76]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 80021f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fc:	f7fe fa6c 	bl	80006d8 <HAL_GetTick>
 8002200:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002202:	e009      	b.n	8002218 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002204:	f7fe fa68 	bl	80006d8 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d902      	bls.n	8002218 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	73fb      	strb	r3, [r7, #15]
          break;
 8002216:	e005      	b.n	8002224 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002218:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0ef      	beq.n	8002204 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	4904      	ldr	r1, [pc, #16]	; (8002244 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002234:	4313      	orrs	r3, r2
 8002236:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002238:	7bfb      	ldrb	r3, [r7, #15]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000

08002248 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002256:	4b6a      	ldr	r3, [pc, #424]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d018      	beq.n	8002294 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002262:	4b67      	ldr	r3, [pc, #412]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f003 0203 	and.w	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d10d      	bne.n	800228e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
       ||
 8002276:	2b00      	cmp	r3, #0
 8002278:	d009      	beq.n	800228e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800227a:	4b61      	ldr	r3, [pc, #388]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
       ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d047      	beq.n	800231e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
 8002292:	e044      	b.n	800231e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d018      	beq.n	80022ce <RCCEx_PLLSAI2_Config+0x86>
 800229c:	2b03      	cmp	r3, #3
 800229e:	d825      	bhi.n	80022ec <RCCEx_PLLSAI2_Config+0xa4>
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d002      	beq.n	80022aa <RCCEx_PLLSAI2_Config+0x62>
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d009      	beq.n	80022bc <RCCEx_PLLSAI2_Config+0x74>
 80022a8:	e020      	b.n	80022ec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022aa:	4b55      	ldr	r3, [pc, #340]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d11d      	bne.n	80022f2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022ba:	e01a      	b.n	80022f2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022bc:	4b50      	ldr	r3, [pc, #320]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d116      	bne.n	80022f6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022cc:	e013      	b.n	80022f6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022ce:	4b4c      	ldr	r3, [pc, #304]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10f      	bne.n	80022fa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022da:	4b49      	ldr	r3, [pc, #292]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022ea:	e006      	b.n	80022fa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
      break;
 80022f0:	e004      	b.n	80022fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80022f2:	bf00      	nop
 80022f4:	e002      	b.n	80022fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80022f6:	bf00      	nop
 80022f8:	e000      	b.n	80022fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80022fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10d      	bne.n	800231e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002302:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6819      	ldr	r1, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	430b      	orrs	r3, r1
 8002318:	4939      	ldr	r1, [pc, #228]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 800231a:	4313      	orrs	r3, r2
 800231c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d167      	bne.n	80023f4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002324:	4b36      	ldr	r3, [pc, #216]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a35      	ldr	r2, [pc, #212]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 800232a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800232e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002330:	f7fe f9d2 	bl	80006d8 <HAL_GetTick>
 8002334:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002336:	e009      	b.n	800234c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002338:	f7fe f9ce 	bl	80006d8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d902      	bls.n	800234c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	73fb      	strb	r3, [r7, #15]
        break;
 800234a:	e005      	b.n	8002358 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800234c:	4b2c      	ldr	r3, [pc, #176]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1ef      	bne.n	8002338 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d14a      	bne.n	80023f4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d111      	bne.n	8002388 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002364:	4b26      	ldr	r3, [pc, #152]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800236c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6892      	ldr	r2, [r2, #8]
 8002374:	0211      	lsls	r1, r2, #8
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68d2      	ldr	r2, [r2, #12]
 800237a:	0912      	lsrs	r2, r2, #4
 800237c:	0452      	lsls	r2, r2, #17
 800237e:	430a      	orrs	r2, r1
 8002380:	491f      	ldr	r1, [pc, #124]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002382:	4313      	orrs	r3, r2
 8002384:	614b      	str	r3, [r1, #20]
 8002386:	e011      	b.n	80023ac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002388:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002390:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6892      	ldr	r2, [r2, #8]
 8002398:	0211      	lsls	r1, r2, #8
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6912      	ldr	r2, [r2, #16]
 800239e:	0852      	lsrs	r2, r2, #1
 80023a0:	3a01      	subs	r2, #1
 80023a2:	0652      	lsls	r2, r2, #25
 80023a4:	430a      	orrs	r2, r1
 80023a6:	4916      	ldr	r1, [pc, #88]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a13      	ldr	r2, [pc, #76]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b8:	f7fe f98e 	bl	80006d8 <HAL_GetTick>
 80023bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80023be:	e009      	b.n	80023d4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80023c0:	f7fe f98a 	bl	80006d8 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d902      	bls.n	80023d4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	73fb      	strb	r3, [r7, #15]
          break;
 80023d2:	e005      	b.n	80023e0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80023d4:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0ef      	beq.n	80023c0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	4904      	ldr	r1, [pc, #16]	; (8002400 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000

08002404 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8002404:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002406:	2400      	movs	r4, #0
 8002408:	2310      	movs	r3, #16
 800240a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800240e:	6803      	ldr	r3, [r0, #0]
 8002410:	9400      	str	r4, [sp, #0]
 8002412:	699e      	ldr	r6, [r3, #24]
 8002414:	f88d 4004 	strb.w	r4, [sp, #4]
 8002418:	4615      	mov	r5, r2
 800241a:	466b      	mov	r3, sp
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	47b0      	blx	r6
 8002420:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002424:	f003 0306 	and.w	r3, r3, #6
 8002428:	2b06      	cmp	r3, #6
 800242a:	bf03      	ittte	eq
 800242c:	9b00      	ldreq	r3, [sp, #0]
 800242e:	602b      	streq	r3, [r5, #0]
 8002430:	2001      	moveq	r0, #1
 8002432:	4620      	movne	r0, r4
 8002434:	b004      	add	sp, #16
 8002436:	bd70      	pop	{r4, r5, r6, pc}

08002438 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8002438:	9800      	ldr	r0, [sp, #0]
 800243a:	4290      	cmp	r0, r2
 800243c:	bf14      	ite	ne
 800243e:	2001      	movne	r0, #1
 8002440:	2006      	moveq	r0, #6
 8002442:	4770      	bx	lr

08002444 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8002444:	b510      	push	{r4, lr}
 8002446:	4b03      	ldr	r3, [pc, #12]	; (8002454 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8002448:	6003      	str	r3, [r0, #0]
 800244a:	4604      	mov	r4, r0
 800244c:	f000 f8e3 	bl	8002616 <_ZNSt9type_infoD1Ev>
 8002450:	4620      	mov	r0, r4
 8002452:	bd10      	pop	{r4, pc}
 8002454:	080033c4 	.word	0x080033c4

08002458 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8002458:	b510      	push	{r4, lr}
 800245a:	4604      	mov	r4, r0
 800245c:	f7ff fff2 	bl	8002444 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8002460:	4620      	mov	r0, r4
 8002462:	2108      	movs	r1, #8
 8002464:	f000 f842 	bl	80024ec <_ZdlPvj>
 8002468:	4620      	mov	r0, r4
 800246a:	bd10      	pop	{r4, pc}

0800246c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800246c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002470:	461f      	mov	r7, r3
 8002472:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8002476:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800247a:	4598      	cmp	r8, r3
 800247c:	4606      	mov	r6, r0
 800247e:	4615      	mov	r5, r2
 8002480:	d107      	bne.n	8002492 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8002482:	9907      	ldr	r1, [sp, #28]
 8002484:	f000 f8ca 	bl	800261c <_ZNKSt9type_infoeqERKS_>
 8002488:	b118      	cbz	r0, 8002492 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800248a:	7165      	strb	r5, [r4, #5]
 800248c:	2000      	movs	r0, #0
 800248e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002492:	4639      	mov	r1, r7
 8002494:	4630      	mov	r0, r6
 8002496:	f000 f8c1 	bl	800261c <_ZNKSt9type_infoeqERKS_>
 800249a:	2800      	cmp	r0, #0
 800249c:	d0f6      	beq.n	800248c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 800249e:	2301      	movs	r3, #1
 80024a0:	f8c4 8000 	str.w	r8, [r4]
 80024a4:	7125      	strb	r5, [r4, #4]
 80024a6:	71a3      	strb	r3, [r4, #6]
 80024a8:	e7f0      	b.n	800248c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080024aa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80024aa:	b538      	push	{r3, r4, r5, lr}
 80024ac:	4615      	mov	r5, r2
 80024ae:	461c      	mov	r4, r3
 80024b0:	f000 f8b4 	bl	800261c <_ZNKSt9type_infoeqERKS_>
 80024b4:	b120      	cbz	r0, 80024c0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80024b6:	2308      	movs	r3, #8
 80024b8:	60e3      	str	r3, [r4, #12]
 80024ba:	2306      	movs	r3, #6
 80024bc:	6025      	str	r5, [r4, #0]
 80024be:	7123      	strb	r3, [r4, #4]
 80024c0:	bd38      	pop	{r3, r4, r5, pc}

080024c2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80024c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80024c4:	4605      	mov	r5, r0
 80024c6:	460c      	mov	r4, r1
 80024c8:	9201      	str	r2, [sp, #4]
 80024ca:	461e      	mov	r6, r3
 80024cc:	f000 f8a6 	bl	800261c <_ZNKSt9type_infoeqERKS_>
 80024d0:	b950      	cbnz	r0, 80024e8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80024d2:	2e03      	cmp	r6, #3
 80024d4:	d808      	bhi.n	80024e8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80024d6:	6823      	ldr	r3, [r4, #0]
 80024d8:	9a01      	ldr	r2, [sp, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	4629      	mov	r1, r5
 80024de:	4620      	mov	r0, r4
 80024e0:	b002      	add	sp, #8
 80024e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80024e6:	4718      	bx	r3
 80024e8:	b002      	add	sp, #8
 80024ea:	bd70      	pop	{r4, r5, r6, pc}

080024ec <_ZdlPvj>:
 80024ec:	f000 bae0 	b.w	8002ab0 <_ZdlPv>

080024f0 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 80024f0:	b538      	push	{r3, r4, r5, lr}
 80024f2:	4c08      	ldr	r4, [pc, #32]	; (8002514 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 80024f4:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 80024f8:	4628      	mov	r0, r5
 80024fa:	60e5      	str	r5, [r4, #12]
 80024fc:	f000 fbf8 	bl	8002cf0 <malloc>
 8002500:	60a0      	str	r0, [r4, #8]
 8002502:	b910      	cbnz	r0, 800250a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 8002504:	60e0      	str	r0, [r4, #12]
 8002506:	6060      	str	r0, [r4, #4]
 8002508:	bd38      	pop	{r3, r4, r5, pc}
 800250a:	2300      	movs	r3, #0
 800250c:	6060      	str	r0, [r4, #4]
 800250e:	6005      	str	r5, [r0, #0]
 8002510:	6043      	str	r3, [r0, #4]
 8002512:	e7f9      	b.n	8002508 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 8002514:	2000009c 	.word	0x2000009c

08002518 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8002518:	b510      	push	{r4, lr}
 800251a:	4b03      	ldr	r3, [pc, #12]	; (8002528 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800251c:	6003      	str	r3, [r0, #0]
 800251e:	4604      	mov	r4, r0
 8002520:	f7ff ff90 	bl	8002444 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8002524:	4620      	mov	r0, r4
 8002526:	bd10      	pop	{r4, pc}
 8002528:	08003424 	.word	0x08003424

0800252c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800252c:	b510      	push	{r4, lr}
 800252e:	4604      	mov	r4, r0
 8002530:	f7ff fff2 	bl	8002518 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8002534:	4620      	mov	r0, r4
 8002536:	210c      	movs	r1, #12
 8002538:	f7ff ffd8 	bl	80024ec <_ZdlPvj>
 800253c:	4620      	mov	r0, r4
 800253e:	bd10      	pop	{r4, pc}

08002540 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8002540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002542:	9f08      	ldr	r7, [sp, #32]
 8002544:	4297      	cmp	r7, r2
 8002546:	4605      	mov	r5, r0
 8002548:	460e      	mov	r6, r1
 800254a:	4614      	mov	r4, r2
 800254c:	d00a      	beq.n	8002564 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 800254e:	68a8      	ldr	r0, [r5, #8]
 8002550:	6802      	ldr	r2, [r0, #0]
 8002552:	9708      	str	r7, [sp, #32]
 8002554:	6a15      	ldr	r5, [r2, #32]
 8002556:	4631      	mov	r1, r6
 8002558:	4622      	mov	r2, r4
 800255a:	46ac      	mov	ip, r5
 800255c:	b003      	add	sp, #12
 800255e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8002562:	4760      	bx	ip
 8002564:	4619      	mov	r1, r3
 8002566:	9301      	str	r3, [sp, #4]
 8002568:	f000 f858 	bl	800261c <_ZNKSt9type_infoeqERKS_>
 800256c:	9b01      	ldr	r3, [sp, #4]
 800256e:	2800      	cmp	r0, #0
 8002570:	d0ed      	beq.n	800254e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8002572:	2006      	movs	r0, #6
 8002574:	b003      	add	sp, #12
 8002576:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002578 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8002578:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800257c:	460d      	mov	r5, r1
 800257e:	4619      	mov	r1, r3
 8002580:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8002584:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8002588:	4681      	mov	r9, r0
 800258a:	4617      	mov	r7, r2
 800258c:	4698      	mov	r8, r3
 800258e:	f000 f845 	bl	800261c <_ZNKSt9type_infoeqERKS_>
 8002592:	b190      	cbz	r0, 80025ba <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8002594:	2d00      	cmp	r5, #0
 8002596:	6034      	str	r4, [r6, #0]
 8002598:	7137      	strb	r7, [r6, #4]
 800259a:	db09      	blt.n	80025b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800259c:	1961      	adds	r1, r4, r5
 800259e:	458a      	cmp	sl, r1
 80025a0:	bf0c      	ite	eq
 80025a2:	2106      	moveq	r1, #6
 80025a4:	2101      	movne	r1, #1
 80025a6:	71b1      	strb	r1, [r6, #6]
 80025a8:	2000      	movs	r0, #0
 80025aa:	b001      	add	sp, #4
 80025ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025b0:	3502      	adds	r5, #2
 80025b2:	d1f9      	bne.n	80025a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80025b4:	2301      	movs	r3, #1
 80025b6:	71b3      	strb	r3, [r6, #6]
 80025b8:	e7f6      	b.n	80025a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80025ba:	4554      	cmp	r4, sl
 80025bc:	d106      	bne.n	80025cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80025be:	4659      	mov	r1, fp
 80025c0:	4648      	mov	r0, r9
 80025c2:	f000 f82b 	bl	800261c <_ZNKSt9type_infoeqERKS_>
 80025c6:	b108      	cbz	r0, 80025cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80025c8:	7177      	strb	r7, [r6, #5]
 80025ca:	e7ed      	b.n	80025a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80025cc:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80025d0:	6803      	ldr	r3, [r0, #0]
 80025d2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80025d6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80025da:	69dc      	ldr	r4, [r3, #28]
 80025dc:	463a      	mov	r2, r7
 80025de:	4643      	mov	r3, r8
 80025e0:	4629      	mov	r1, r5
 80025e2:	46a4      	mov	ip, r4
 80025e4:	b001      	add	sp, #4
 80025e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025ea:	4760      	bx	ip

080025ec <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80025ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025f0:	4607      	mov	r7, r0
 80025f2:	460c      	mov	r4, r1
 80025f4:	4615      	mov	r5, r2
 80025f6:	461e      	mov	r6, r3
 80025f8:	f7ff ff57 	bl	80024aa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80025fc:	b948      	cbnz	r0, 8002612 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80025fe:	68b8      	ldr	r0, [r7, #8]
 8002600:	6803      	ldr	r3, [r0, #0]
 8002602:	699f      	ldr	r7, [r3, #24]
 8002604:	462a      	mov	r2, r5
 8002606:	4633      	mov	r3, r6
 8002608:	4621      	mov	r1, r4
 800260a:	46bc      	mov	ip, r7
 800260c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002610:	4760      	bx	ip
 8002612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002616 <_ZNSt9type_infoD1Ev>:
 8002616:	4770      	bx	lr

08002618 <_ZNKSt9type_info14__is_pointer_pEv>:
 8002618:	2000      	movs	r0, #0
 800261a:	4770      	bx	lr

0800261c <_ZNKSt9type_infoeqERKS_>:
 800261c:	4281      	cmp	r1, r0
 800261e:	b508      	push	{r3, lr}
 8002620:	d00e      	beq.n	8002640 <_ZNKSt9type_infoeqERKS_+0x24>
 8002622:	6840      	ldr	r0, [r0, #4]
 8002624:	7803      	ldrb	r3, [r0, #0]
 8002626:	2b2a      	cmp	r3, #42	; 0x2a
 8002628:	d00c      	beq.n	8002644 <_ZNKSt9type_infoeqERKS_+0x28>
 800262a:	6849      	ldr	r1, [r1, #4]
 800262c:	780b      	ldrb	r3, [r1, #0]
 800262e:	2b2a      	cmp	r3, #42	; 0x2a
 8002630:	bf08      	it	eq
 8002632:	3101      	addeq	r1, #1
 8002634:	f7fd fdc8 	bl	80001c8 <strcmp>
 8002638:	fab0 f080 	clz	r0, r0
 800263c:	0940      	lsrs	r0, r0, #5
 800263e:	bd08      	pop	{r3, pc}
 8002640:	2001      	movs	r0, #1
 8002642:	e7fc      	b.n	800263e <_ZNKSt9type_infoeqERKS_+0x22>
 8002644:	2000      	movs	r0, #0
 8002646:	e7fa      	b.n	800263e <_ZNKSt9type_infoeqERKS_+0x22>

08002648 <_ZNSs7_M_copyEPcPKcj>:
 8002648:	2a01      	cmp	r2, #1
 800264a:	b430      	push	{r4, r5}
 800264c:	d103      	bne.n	8002656 <_ZNSs7_M_copyEPcPKcj+0xe>
 800264e:	780b      	ldrb	r3, [r1, #0]
 8002650:	7003      	strb	r3, [r0, #0]
 8002652:	bc30      	pop	{r4, r5}
 8002654:	4770      	bx	lr
 8002656:	2a00      	cmp	r2, #0
 8002658:	d0fb      	beq.n	8002652 <_ZNSs7_M_copyEPcPKcj+0xa>
 800265a:	bc30      	pop	{r4, r5}
 800265c:	f000 bb58 	b.w	8002d10 <memcpy>

08002660 <_ZNSs13_S_copy_charsEPcPKcS1_>:
 8002660:	b508      	push	{r3, lr}
 8002662:	1a52      	subs	r2, r2, r1
 8002664:	f7ff fff0 	bl	8002648 <_ZNSs7_M_copyEPcPKcj>
 8002668:	bd08      	pop	{r3, pc}
	...

0800266c <_ZNSs4_Rep26_M_set_length_and_sharableEj>:
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x14>)
 800266e:	4298      	cmp	r0, r3
 8002670:	d004      	beq.n	800267c <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x10>
 8002672:	6001      	str	r1, [r0, #0]
 8002674:	4401      	add	r1, r0
 8002676:	2300      	movs	r3, #0
 8002678:	6083      	str	r3, [r0, #8]
 800267a:	730b      	strb	r3, [r1, #12]
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	200000ac 	.word	0x200000ac

08002684 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 8002684:	4b15      	ldr	r3, [pc, #84]	; (80026dc <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8002686:	4298      	cmp	r0, r3
 8002688:	b510      	push	{r4, lr}
 800268a:	4604      	mov	r4, r0
 800268c:	d902      	bls.n	8002694 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x10>
 800268e:	4814      	ldr	r0, [pc, #80]	; (80026e0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x5c>)
 8002690:	f000 f8e6 	bl	8002860 <_ZSt20__throw_length_errorPKc>
 8002694:	4288      	cmp	r0, r1
 8002696:	d903      	bls.n	80026a0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x1c>
 8002698:	004b      	lsls	r3, r1, #1
 800269a:	4298      	cmp	r0, r3
 800269c:	bf38      	it	cc
 800269e:	461c      	movcc	r4, r3
 80026a0:	f104 031d 	add.w	r3, r4, #29
 80026a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a8:	f104 000d 	add.w	r0, r4, #13
 80026ac:	d90c      	bls.n	80026c8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 80026ae:	428c      	cmp	r4, r1
 80026b0:	d90a      	bls.n	80026c8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 80026b2:	480a      	ldr	r0, [pc, #40]	; (80026dc <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 80026b4:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 80026b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026bc:	1ae4      	subs	r4, r4, r3
 80026be:	4284      	cmp	r4, r0
 80026c0:	bf28      	it	cs
 80026c2:	4604      	movcs	r4, r0
 80026c4:	f104 000d 	add.w	r0, r4, #13
 80026c8:	2800      	cmp	r0, #0
 80026ca:	da01      	bge.n	80026d0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x4c>
 80026cc:	f000 f8c2 	bl	8002854 <_ZSt17__throw_bad_allocv>
 80026d0:	f000 f9f8 	bl	8002ac4 <_Znwj>
 80026d4:	2200      	movs	r2, #0
 80026d6:	6044      	str	r4, [r0, #4]
 80026d8:	6082      	str	r2, [r0, #8]
 80026da:	bd10      	pop	{r4, pc}
 80026dc:	3ffffffc 	.word	0x3ffffffc
 80026e0:	0800345d 	.word	0x0800345d

080026e4 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
 80026e4:	4288      	cmp	r0, r1
 80026e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026ea:	4604      	mov	r4, r0
 80026ec:	460d      	mov	r5, r1
 80026ee:	d018      	beq.n	8002722 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x3e>
 80026f0:	b1a0      	cbz	r0, 800271c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x38>
 80026f2:	eba1 0800 	sub.w	r8, r1, r0
 80026f6:	4640      	mov	r0, r8
 80026f8:	2100      	movs	r1, #0
 80026fa:	f7ff ffc3 	bl	8002684 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 80026fe:	f100 070c 	add.w	r7, r0, #12
 8002702:	4606      	mov	r6, r0
 8002704:	4621      	mov	r1, r4
 8002706:	4638      	mov	r0, r7
 8002708:	462a      	mov	r2, r5
 800270a:	f7ff ffa9 	bl	8002660 <_ZNSs13_S_copy_charsEPcPKcS1_>
 800270e:	4641      	mov	r1, r8
 8002710:	4630      	mov	r0, r6
 8002712:	f7ff ffab 	bl	800266c <_ZNSs4_Rep26_M_set_length_and_sharableEj>
 8002716:	4638      	mov	r0, r7
 8002718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800271c:	4802      	ldr	r0, [pc, #8]	; (8002728 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x44>)
 800271e:	f000 f89c 	bl	800285a <_ZSt19__throw_logic_errorPKc>
 8002722:	4f02      	ldr	r7, [pc, #8]	; (800272c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x48>)
 8002724:	e7f7      	b.n	8002716 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x32>
 8002726:	bf00      	nop
 8002728:	08003475 	.word	0x08003475
 800272c:	200000b8 	.word	0x200000b8

08002730 <_ZNSsC1EPKcjRKSaIcE>:
 8002730:	b510      	push	{r4, lr}
 8002732:	4604      	mov	r4, r0
 8002734:	4608      	mov	r0, r1
 8002736:	4611      	mov	r1, r2
 8002738:	4401      	add	r1, r0
 800273a:	461a      	mov	r2, r3
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	f7ff ffd0 	bl	80026e4 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 8002744:	6020      	str	r0, [r4, #0]
 8002746:	4620      	mov	r0, r4
 8002748:	bd10      	pop	{r4, pc}
	...

0800274c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 800274c:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	07d1      	lsls	r1, r2, #31
 8002752:	bf5c      	itt	pl
 8002754:	2201      	movpl	r2, #1
 8002756:	601a      	strpl	r2, [r3, #0]
 8002758:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	07d2      	lsls	r2, r2, #31
 800275e:	bf5c      	itt	pl
 8002760:	2201      	movpl	r2, #1
 8002762:	601a      	strpl	r2, [r3, #0]
 8002764:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	07d0      	lsls	r0, r2, #31
 800276a:	bf5c      	itt	pl
 800276c:	2201      	movpl	r2, #1
 800276e:	601a      	strpl	r2, [r3, #0]
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	07d1      	lsls	r1, r2, #31
 8002776:	bf5c      	itt	pl
 8002778:	2201      	movpl	r2, #1
 800277a:	601a      	strpl	r2, [r3, #0]
 800277c:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	07d2      	lsls	r2, r2, #31
 8002782:	bf5c      	itt	pl
 8002784:	2201      	movpl	r2, #1
 8002786:	601a      	strpl	r2, [r3, #0]
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	07d0      	lsls	r0, r2, #31
 800278e:	bf5c      	itt	pl
 8002790:	2201      	movpl	r2, #1
 8002792:	601a      	strpl	r2, [r3, #0]
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	07d1      	lsls	r1, r2, #31
 800279a:	bf5c      	itt	pl
 800279c:	2201      	movpl	r2, #1
 800279e:	601a      	strpl	r2, [r3, #0]
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	07d2      	lsls	r2, r2, #31
 80027a6:	bf5c      	itt	pl
 80027a8:	2201      	movpl	r2, #1
 80027aa:	601a      	strpl	r2, [r3, #0]
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	200000d8 	.word	0x200000d8
 80027b4:	200000d4 	.word	0x200000d4
 80027b8:	200000d0 	.word	0x200000d0
 80027bc:	200000cc 	.word	0x200000cc
 80027c0:	200000c8 	.word	0x200000c8
 80027c4:	200000c4 	.word	0x200000c4
 80027c8:	200000c0 	.word	0x200000c0
 80027cc:	200000bc 	.word	0x200000bc

080027d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80027d0:	4b18      	ldr	r3, [pc, #96]	; (8002834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	07d1      	lsls	r1, r2, #31
 80027d6:	bf5c      	itt	pl
 80027d8:	2201      	movpl	r2, #1
 80027da:	601a      	strpl	r2, [r3, #0]
 80027dc:	4b16      	ldr	r3, [pc, #88]	; (8002838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	07d2      	lsls	r2, r2, #31
 80027e2:	bf5c      	itt	pl
 80027e4:	2201      	movpl	r2, #1
 80027e6:	601a      	strpl	r2, [r3, #0]
 80027e8:	4b14      	ldr	r3, [pc, #80]	; (800283c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	07d0      	lsls	r0, r2, #31
 80027ee:	bf5c      	itt	pl
 80027f0:	2201      	movpl	r2, #1
 80027f2:	601a      	strpl	r2, [r3, #0]
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	07d1      	lsls	r1, r2, #31
 80027fa:	bf5c      	itt	pl
 80027fc:	2201      	movpl	r2, #1
 80027fe:	601a      	strpl	r2, [r3, #0]
 8002800:	4b10      	ldr	r3, [pc, #64]	; (8002844 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	07d2      	lsls	r2, r2, #31
 8002806:	bf5c      	itt	pl
 8002808:	2201      	movpl	r2, #1
 800280a:	601a      	strpl	r2, [r3, #0]
 800280c:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	07d0      	lsls	r0, r2, #31
 8002812:	bf5c      	itt	pl
 8002814:	2201      	movpl	r2, #1
 8002816:	601a      	strpl	r2, [r3, #0]
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	07d1      	lsls	r1, r2, #31
 800281e:	bf5c      	itt	pl
 8002820:	2201      	movpl	r2, #1
 8002822:	601a      	strpl	r2, [r3, #0]
 8002824:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	07d2      	lsls	r2, r2, #31
 800282a:	bf5c      	itt	pl
 800282c:	2201      	movpl	r2, #1
 800282e:	601a      	strpl	r2, [r3, #0]
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	200000f8 	.word	0x200000f8
 8002838:	200000f4 	.word	0x200000f4
 800283c:	200000f0 	.word	0x200000f0
 8002840:	200000ec 	.word	0x200000ec
 8002844:	200000e8 	.word	0x200000e8
 8002848:	200000e4 	.word	0x200000e4
 800284c:	200000e0 	.word	0x200000e0
 8002850:	200000dc 	.word	0x200000dc

08002854 <_ZSt17__throw_bad_allocv>:
 8002854:	b508      	push	{r3, lr}
 8002856:	f000 fa0a 	bl	8002c6e <abort>

0800285a <_ZSt19__throw_logic_errorPKc>:
 800285a:	b508      	push	{r3, lr}
 800285c:	f000 fa07 	bl	8002c6e <abort>

08002860 <_ZSt20__throw_length_errorPKc>:
 8002860:	b508      	push	{r3, lr}
 8002862:	f000 fa04 	bl	8002c6e <abort>

08002866 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8002866:	b10a      	cbz	r2, 800286c <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8002868:	f000 ba52 	b.w	8002d10 <memcpy>
 800286c:	4770      	bx	lr
	...

08002870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8002870:	4b24      	ldr	r3, [pc, #144]	; (8002904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	07d0      	lsls	r0, r2, #31
 8002876:	bf5c      	itt	pl
 8002878:	2201      	movpl	r2, #1
 800287a:	601a      	strpl	r2, [r3, #0]
 800287c:	4b22      	ldr	r3, [pc, #136]	; (8002908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	07d1      	lsls	r1, r2, #31
 8002882:	bf5c      	itt	pl
 8002884:	2201      	movpl	r2, #1
 8002886:	601a      	strpl	r2, [r3, #0]
 8002888:	4b20      	ldr	r3, [pc, #128]	; (800290c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	07d2      	lsls	r2, r2, #31
 800288e:	bf5c      	itt	pl
 8002890:	2201      	movpl	r2, #1
 8002892:	601a      	strpl	r2, [r3, #0]
 8002894:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	07d0      	lsls	r0, r2, #31
 800289a:	bf5c      	itt	pl
 800289c:	2201      	movpl	r2, #1
 800289e:	601a      	strpl	r2, [r3, #0]
 80028a0:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	07d1      	lsls	r1, r2, #31
 80028a6:	bf5c      	itt	pl
 80028a8:	2201      	movpl	r2, #1
 80028aa:	601a      	strpl	r2, [r3, #0]
 80028ac:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	07d2      	lsls	r2, r2, #31
 80028b2:	bf5c      	itt	pl
 80028b4:	2201      	movpl	r2, #1
 80028b6:	601a      	strpl	r2, [r3, #0]
 80028b8:	4b18      	ldr	r3, [pc, #96]	; (800291c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	07d0      	lsls	r0, r2, #31
 80028be:	bf5c      	itt	pl
 80028c0:	2201      	movpl	r2, #1
 80028c2:	601a      	strpl	r2, [r3, #0]
 80028c4:	4b16      	ldr	r3, [pc, #88]	; (8002920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	07d1      	lsls	r1, r2, #31
 80028ca:	bf5c      	itt	pl
 80028cc:	2201      	movpl	r2, #1
 80028ce:	601a      	strpl	r2, [r3, #0]
 80028d0:	4b14      	ldr	r3, [pc, #80]	; (8002924 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	07d2      	lsls	r2, r2, #31
 80028d6:	bf5c      	itt	pl
 80028d8:	2201      	movpl	r2, #1
 80028da:	601a      	strpl	r2, [r3, #0]
 80028dc:	4b12      	ldr	r3, [pc, #72]	; (8002928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	07d0      	lsls	r0, r2, #31
 80028e2:	bf5c      	itt	pl
 80028e4:	2201      	movpl	r2, #1
 80028e6:	601a      	strpl	r2, [r3, #0]
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	07d1      	lsls	r1, r2, #31
 80028ee:	bf5c      	itt	pl
 80028f0:	2201      	movpl	r2, #1
 80028f2:	601a      	strpl	r2, [r3, #0]
 80028f4:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	07d2      	lsls	r2, r2, #31
 80028fa:	bf5c      	itt	pl
 80028fc:	2201      	movpl	r2, #1
 80028fe:	601a      	strpl	r2, [r3, #0]
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20000128 	.word	0x20000128
 8002908:	20000124 	.word	0x20000124
 800290c:	20000120 	.word	0x20000120
 8002910:	2000011c 	.word	0x2000011c
 8002914:	20000118 	.word	0x20000118
 8002918:	20000114 	.word	0x20000114
 800291c:	20000110 	.word	0x20000110
 8002920:	2000010c 	.word	0x2000010c
 8002924:	20000108 	.word	0x20000108
 8002928:	20000104 	.word	0x20000104
 800292c:	20000100 	.word	0x20000100
 8002930:	200000fc 	.word	0x200000fc

08002934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8002934:	b508      	push	{r3, lr}
 8002936:	680b      	ldr	r3, [r1, #0]
 8002938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293c:	d302      	bcc.n	8002944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800293e:	480d      	ldr	r0, [pc, #52]	; (8002974 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8002940:	f7ff ff8e 	bl	8002860 <_ZSt20__throw_length_errorPKc>
 8002944:	4293      	cmp	r3, r2
 8002946:	d90b      	bls.n	8002960 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8002948:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800294c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8002950:	d206      	bcs.n	8002960 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8002952:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002956:	bf2a      	itet	cs
 8002958:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800295c:	6008      	strcc	r0, [r1, #0]
 800295e:	600b      	strcs	r3, [r1, #0]
 8002960:	6808      	ldr	r0, [r1, #0]
 8002962:	3001      	adds	r0, #1
 8002964:	d501      	bpl.n	800296a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8002966:	f7ff ff75 	bl	8002854 <_ZSt17__throw_bad_allocv>
 800296a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800296e:	f000 b8a9 	b.w	8002ac4 <_Znwj>
 8002972:	bf00      	nop
 8002974:	0800349f 	.word	0x0800349f

08002978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8002978:	f850 3b08 	ldr.w	r3, [r0], #8
 800297c:	4283      	cmp	r3, r0
 800297e:	d002      	beq.n	8002986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8002980:	4618      	mov	r0, r3
 8002982:	f000 b895 	b.w	8002ab0 <_ZdlPv>
 8002986:	4770      	bx	lr

08002988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8002988:	2a01      	cmp	r2, #1
 800298a:	b510      	push	{r4, lr}
 800298c:	d102      	bne.n	8002994 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800298e:	780a      	ldrb	r2, [r1, #0]
 8002990:	7002      	strb	r2, [r0, #0]
 8002992:	bd10      	pop	{r4, pc}
 8002994:	f7ff ff67 	bl	8002866 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8002998:	e7fb      	b.n	8002992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800299a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800299a:	b508      	push	{r3, lr}
 800299c:	1a52      	subs	r2, r2, r1
 800299e:	f7ff fff3 	bl	8002988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80029a2:	bd08      	pop	{r3, pc}

080029a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80029a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80029a6:	4604      	mov	r4, r0
 80029a8:	4616      	mov	r6, r2
 80029aa:	460d      	mov	r5, r1
 80029ac:	b919      	cbnz	r1, 80029b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80029ae:	b112      	cbz	r2, 80029b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80029b0:	480d      	ldr	r0, [pc, #52]	; (80029e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80029b2:	f7ff ff52 	bl	800285a <_ZSt19__throw_logic_errorPKc>
 80029b6:	1b73      	subs	r3, r6, r5
 80029b8:	2b0f      	cmp	r3, #15
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	d907      	bls.n	80029ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80029be:	2200      	movs	r2, #0
 80029c0:	a901      	add	r1, sp, #4
 80029c2:	4620      	mov	r0, r4
 80029c4:	f7ff ffb6 	bl	8002934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80029c8:	9b01      	ldr	r3, [sp, #4]
 80029ca:	6020      	str	r0, [r4, #0]
 80029cc:	60a3      	str	r3, [r4, #8]
 80029ce:	4632      	mov	r2, r6
 80029d0:	4629      	mov	r1, r5
 80029d2:	6820      	ldr	r0, [r4, #0]
 80029d4:	f7ff ffe1 	bl	800299a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80029d8:	9b01      	ldr	r3, [sp, #4]
 80029da:	6822      	ldr	r2, [r4, #0]
 80029dc:	6063      	str	r3, [r4, #4]
 80029de:	2100      	movs	r1, #0
 80029e0:	54d1      	strb	r1, [r2, r3]
 80029e2:	b002      	add	sp, #8
 80029e4:	bd70      	pop	{r4, r5, r6, pc}
 80029e6:	bf00      	nop
 80029e8:	080034b7 	.word	0x080034b7

080029ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80029ec:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	07d0      	lsls	r0, r2, #31
 80029f2:	bf5c      	itt	pl
 80029f4:	2201      	movpl	r2, #1
 80029f6:	601a      	strpl	r2, [r3, #0]
 80029f8:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	07d1      	lsls	r1, r2, #31
 80029fe:	bf5c      	itt	pl
 8002a00:	2201      	movpl	r2, #1
 8002a02:	601a      	strpl	r2, [r3, #0]
 8002a04:	4b20      	ldr	r3, [pc, #128]	; (8002a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	07d2      	lsls	r2, r2, #31
 8002a0a:	bf5c      	itt	pl
 8002a0c:	2201      	movpl	r2, #1
 8002a0e:	601a      	strpl	r2, [r3, #0]
 8002a10:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	07d0      	lsls	r0, r2, #31
 8002a16:	bf5c      	itt	pl
 8002a18:	2201      	movpl	r2, #1
 8002a1a:	601a      	strpl	r2, [r3, #0]
 8002a1c:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	07d1      	lsls	r1, r2, #31
 8002a22:	bf5c      	itt	pl
 8002a24:	2201      	movpl	r2, #1
 8002a26:	601a      	strpl	r2, [r3, #0]
 8002a28:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	07d2      	lsls	r2, r2, #31
 8002a2e:	bf5c      	itt	pl
 8002a30:	2201      	movpl	r2, #1
 8002a32:	601a      	strpl	r2, [r3, #0]
 8002a34:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	07d0      	lsls	r0, r2, #31
 8002a3a:	bf5c      	itt	pl
 8002a3c:	2201      	movpl	r2, #1
 8002a3e:	601a      	strpl	r2, [r3, #0]
 8002a40:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	07d1      	lsls	r1, r2, #31
 8002a46:	bf5c      	itt	pl
 8002a48:	2201      	movpl	r2, #1
 8002a4a:	601a      	strpl	r2, [r3, #0]
 8002a4c:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	07d2      	lsls	r2, r2, #31
 8002a52:	bf5c      	itt	pl
 8002a54:	2201      	movpl	r2, #1
 8002a56:	601a      	strpl	r2, [r3, #0]
 8002a58:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	07d0      	lsls	r0, r2, #31
 8002a5e:	bf5c      	itt	pl
 8002a60:	2201      	movpl	r2, #1
 8002a62:	601a      	strpl	r2, [r3, #0]
 8002a64:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	07d1      	lsls	r1, r2, #31
 8002a6a:	bf5c      	itt	pl
 8002a6c:	2201      	movpl	r2, #1
 8002a6e:	601a      	strpl	r2, [r3, #0]
 8002a70:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	07d2      	lsls	r2, r2, #31
 8002a76:	bf5c      	itt	pl
 8002a78:	2201      	movpl	r2, #1
 8002a7a:	601a      	strpl	r2, [r3, #0]
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000158 	.word	0x20000158
 8002a84:	20000154 	.word	0x20000154
 8002a88:	20000150 	.word	0x20000150
 8002a8c:	2000014c 	.word	0x2000014c
 8002a90:	20000148 	.word	0x20000148
 8002a94:	20000144 	.word	0x20000144
 8002a98:	20000140 	.word	0x20000140
 8002a9c:	2000013c 	.word	0x2000013c
 8002aa0:	20000138 	.word	0x20000138
 8002aa4:	20000134 	.word	0x20000134
 8002aa8:	20000130 	.word	0x20000130
 8002aac:	2000012c 	.word	0x2000012c

08002ab0 <_ZdlPv>:
 8002ab0:	f000 b926 	b.w	8002d00 <free>

08002ab4 <_ZSt15get_new_handlerv>:
 8002ab4:	4b02      	ldr	r3, [pc, #8]	; (8002ac0 <_ZSt15get_new_handlerv+0xc>)
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	f3bf 8f5b 	dmb	ish
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	2000015c 	.word	0x2000015c

08002ac4 <_Znwj>:
 8002ac4:	2801      	cmp	r0, #1
 8002ac6:	bf38      	it	cc
 8002ac8:	2001      	movcc	r0, #1
 8002aca:	b510      	push	{r4, lr}
 8002acc:	4604      	mov	r4, r0
 8002ace:	4620      	mov	r0, r4
 8002ad0:	f000 f90e 	bl	8002cf0 <malloc>
 8002ad4:	b930      	cbnz	r0, 8002ae4 <_Znwj+0x20>
 8002ad6:	f7ff ffed 	bl	8002ab4 <_ZSt15get_new_handlerv>
 8002ada:	b908      	cbnz	r0, 8002ae0 <_Znwj+0x1c>
 8002adc:	f000 f8c7 	bl	8002c6e <abort>
 8002ae0:	4780      	blx	r0
 8002ae2:	e7f4      	b.n	8002ace <_Znwj+0xa>
 8002ae4:	bd10      	pop	{r4, pc}
	...

08002ae8 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv>:
 8002ae8:	4800      	ldr	r0, [pc, #0]	; (8002aec <_ZNK12_GLOBAL__N_122generic_error_category4nameEv+0x4>)
 8002aea:	4770      	bx	lr
 8002aec:	080034e1 	.word	0x080034e1

08002af0 <_ZNK12_GLOBAL__N_121system_error_category4nameEv>:
 8002af0:	4800      	ldr	r0, [pc, #0]	; (8002af4 <_ZNK12_GLOBAL__N_121system_error_category4nameEv+0x4>)
 8002af2:	4770      	bx	lr
 8002af4:	080038fb 	.word	0x080038fb

08002af8 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi>:
 8002af8:	2a74      	cmp	r2, #116	; 0x74
 8002afa:	dc22      	bgt.n	8002b42 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x4a>
 8002afc:	2a57      	cmp	r2, #87	; 0x57
 8002afe:	dc0b      	bgt.n	8002b18 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x20>
 8002b00:	2a4d      	cmp	r2, #77	; 0x4d
 8002b02:	dc28      	bgt.n	8002b56 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 8002b04:	2a3b      	cmp	r2, #59	; 0x3b
 8002b06:	dc0d      	bgt.n	8002b24 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x2c>
 8002b08:	2a24      	cmp	r2, #36	; 0x24
 8002b0a:	dc16      	bgt.n	8002b3a <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x42>
 8002b0c:	2a0f      	cmp	r2, #15
 8002b0e:	dc10      	bgt.n	8002b32 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3a>
 8002b10:	1e53      	subs	r3, r2, #1
 8002b12:	2b0d      	cmp	r3, #13
 8002b14:	d81f      	bhi.n	8002b56 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 8002b16:	e00c      	b.n	8002b32 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3a>
 8002b18:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	4099      	lsls	r1, r3
 8002b20:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x64>)
 8002b22:	e015      	b.n	8002b50 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x58>
 8002b24:	f1a2 013c 	sub.w	r1, r2, #60	; 0x3c
 8002b28:	2301      	movs	r3, #1
 8002b2a:	408b      	lsls	r3, r1
 8002b2c:	490c      	ldr	r1, [pc, #48]	; (8002b60 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x68>)
 8002b2e:	420b      	tst	r3, r1
 8002b30:	d011      	beq.n	8002b56 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x6c>)
 8002b34:	6002      	str	r2, [r0, #0]
 8002b36:	6043      	str	r3, [r0, #4]
 8002b38:	4770      	bx	lr
 8002b3a:	f1a2 032d 	sub.w	r3, r2, #45	; 0x2d
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	e7e8      	b.n	8002b14 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x1c>
 8002b42:	f1a2 0376 	sub.w	r3, r2, #118	; 0x76
 8002b46:	2b18      	cmp	r3, #24
 8002b48:	d805      	bhi.n	8002b56 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	4099      	lsls	r1, r3
 8002b4e:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x70>)
 8002b50:	400b      	ands	r3, r1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1ed      	bne.n	8002b32 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3a>
 8002b56:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x74>)
 8002b58:	6002      	str	r2, [r0, #0]
 8002b5a:	e7ec      	b.n	8002b36 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3e>
 8002b5c:	1fbf009d 	.word	0x1fbf009d
 8002b60:	0002088f 	.word	0x0002088f
 8002b64:	20000014 	.word	0x20000014
 8002b68:	01f107bf 	.word	0x01f107bf
 8002b6c:	20000010 	.word	0x20000010

08002b70 <_ZNKSt3_V214error_category23default_error_conditionEi>:
 8002b70:	e9c0 2100 	strd	r2, r1, [r0]
 8002b74:	4770      	bx	lr

08002b76 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition>:
 8002b76:	b513      	push	{r0, r1, r4, lr}
 8002b78:	6803      	ldr	r3, [r0, #0]
 8002b7a:	4614      	mov	r4, r2
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	460a      	mov	r2, r1
 8002b80:	4601      	mov	r1, r0
 8002b82:	4668      	mov	r0, sp
 8002b84:	4798      	blx	r3
 8002b86:	6863      	ldr	r3, [r4, #4]
 8002b88:	9a01      	ldr	r2, [sp, #4]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d106      	bne.n	8002b9c <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x26>
 8002b8e:	9800      	ldr	r0, [sp, #0]
 8002b90:	6823      	ldr	r3, [r4, #0]
 8002b92:	1ac3      	subs	r3, r0, r3
 8002b94:	4258      	negs	r0, r3
 8002b96:	4158      	adcs	r0, r3
 8002b98:	b002      	add	sp, #8
 8002b9a:	bd10      	pop	{r4, pc}
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	e7fb      	b.n	8002b98 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x22>

08002ba0 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei>:
 8002ba0:	684b      	ldr	r3, [r1, #4]
 8002ba2:	4283      	cmp	r3, r0
 8002ba4:	d104      	bne.n	8002bb0 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei+0x10>
 8002ba6:	6808      	ldr	r0, [r1, #0]
 8002ba8:	1a83      	subs	r3, r0, r2
 8002baa:	4258      	negs	r0, r3
 8002bac:	4158      	adcs	r0, r3
 8002bae:	4770      	bx	lr
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	4770      	bx	lr

08002bb4 <_ZN12_GLOBAL__N_121system_error_categoryD1Ev>:
 8002bb4:	4770      	bx	lr

08002bb6 <_ZN12_GLOBAL__N_122generic_error_categoryD1Ev>:
 8002bb6:	4770      	bx	lr

08002bb8 <_ZN12_GLOBAL__N_121system_error_categoryD0Ev>:
 8002bb8:	b510      	push	{r4, lr}
 8002bba:	4604      	mov	r4, r0
 8002bbc:	f7ff ff78 	bl	8002ab0 <_ZdlPv>
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	bd10      	pop	{r4, pc}

08002bc4 <_ZN12_GLOBAL__N_122generic_error_categoryD0Ev>:
 8002bc4:	b510      	push	{r4, lr}
 8002bc6:	4604      	mov	r4, r0
 8002bc8:	f7ff ff72 	bl	8002ab0 <_ZdlPv>
 8002bcc:	4620      	mov	r0, r4
 8002bce:	bd10      	pop	{r4, pc}

08002bd0 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei>:
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	680b      	ldr	r3, [r1, #0]
 8002bd4:	b086      	sub	sp, #24
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	4604      	mov	r4, r0
 8002bda:	4668      	mov	r0, sp
 8002bdc:	4798      	blx	r3
 8002bde:	e9dd 1200 	ldrd	r1, r2, [sp]
 8002be2:	4620      	mov	r0, r4
 8002be4:	f000 f83b 	bl	8002c5e <_ZNSt12__cow_stringC1EPKcj>
 8002be8:	4668      	mov	r0, sp
 8002bea:	f7ff fec5 	bl	8002978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002bee:	4620      	mov	r0, r4
 8002bf0:	b006      	add	sp, #24
 8002bf2:	bd10      	pop	{r4, pc}

08002bf4 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei>:
 8002bf4:	b538      	push	{r3, r4, r5, lr}
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	f000 fb83 	bl	8003304 <strerror>
 8002bfe:	f104 0308 	add.w	r3, r4, #8
 8002c02:	6023      	str	r3, [r4, #0]
 8002c04:	4605      	mov	r5, r0
 8002c06:	b150      	cbz	r0, 8002c1e <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x2a>
 8002c08:	f7fd fae8 	bl	80001dc <strlen>
 8002c0c:	182a      	adds	r2, r5, r0
 8002c0e:	4620      	mov	r0, r4
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	4629      	mov	r1, r5
 8002c16:	f7ff fec5 	bl	80029a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	bd38      	pop	{r3, r4, r5, pc}
 8002c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c22:	e7f4      	b.n	8002c0e <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x1a>

08002c24 <_GLOBAL__sub_I__ZSt20__throw_system_errori>:
 8002c24:	b508      	push	{r3, lr}
 8002c26:	4a06      	ldr	r2, [pc, #24]	; (8002c40 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x1c>)
 8002c28:	4906      	ldr	r1, [pc, #24]	; (8002c44 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x20>)
 8002c2a:	4807      	ldr	r0, [pc, #28]	; (8002c48 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x24>)
 8002c2c:	f000 f812 	bl	8002c54 <__aeabi_atexit>
 8002c30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002c34:	4a02      	ldr	r2, [pc, #8]	; (8002c40 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x1c>)
 8002c36:	4905      	ldr	r1, [pc, #20]	; (8002c4c <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x28>)
 8002c38:	4805      	ldr	r0, [pc, #20]	; (8002c50 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x2c>)
 8002c3a:	f000 b80b 	b.w	8002c54 <__aeabi_atexit>
 8002c3e:	bf00      	nop
 8002c40:	20000000 	.word	0x20000000
 8002c44:	08002bb7 	.word	0x08002bb7
 8002c48:	20000014 	.word	0x20000014
 8002c4c:	08002bb5 	.word	0x08002bb5
 8002c50:	20000010 	.word	0x20000010

08002c54 <__aeabi_atexit>:
 8002c54:	460b      	mov	r3, r1
 8002c56:	4601      	mov	r1, r0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 b80f 	b.w	8002c7c <__cxa_atexit>

08002c5e <_ZNSt12__cow_stringC1EPKcj>:
 8002c5e:	b513      	push	{r0, r1, r4, lr}
 8002c60:	ab01      	add	r3, sp, #4
 8002c62:	4604      	mov	r4, r0
 8002c64:	f7ff fd64 	bl	8002730 <_ZNSsC1EPKcjRKSaIcE>
 8002c68:	4620      	mov	r0, r4
 8002c6a:	b002      	add	sp, #8
 8002c6c:	bd10      	pop	{r4, pc}

08002c6e <abort>:
 8002c6e:	b508      	push	{r3, lr}
 8002c70:	2006      	movs	r0, #6
 8002c72:	f000 f945 	bl	8002f00 <raise>
 8002c76:	2001      	movs	r0, #1
 8002c78:	f7fd fc2a 	bl	80004d0 <_exit>

08002c7c <__cxa_atexit>:
 8002c7c:	b510      	push	{r4, lr}
 8002c7e:	4c05      	ldr	r4, [pc, #20]	; (8002c94 <__cxa_atexit+0x18>)
 8002c80:	4613      	mov	r3, r2
 8002c82:	b12c      	cbz	r4, 8002c90 <__cxa_atexit+0x14>
 8002c84:	460a      	mov	r2, r1
 8002c86:	4601      	mov	r1, r0
 8002c88:	2002      	movs	r0, #2
 8002c8a:	f3af 8000 	nop.w
 8002c8e:	bd10      	pop	{r4, pc}
 8002c90:	4620      	mov	r0, r4
 8002c92:	e7fc      	b.n	8002c8e <__cxa_atexit+0x12>
 8002c94:	00000000 	.word	0x00000000

08002c98 <__errno>:
 8002c98:	4b01      	ldr	r3, [pc, #4]	; (8002ca0 <__errno+0x8>)
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000018 	.word	0x20000018

08002ca4 <__libc_init_array>:
 8002ca4:	b570      	push	{r4, r5, r6, lr}
 8002ca6:	4d0d      	ldr	r5, [pc, #52]	; (8002cdc <__libc_init_array+0x38>)
 8002ca8:	4c0d      	ldr	r4, [pc, #52]	; (8002ce0 <__libc_init_array+0x3c>)
 8002caa:	1b64      	subs	r4, r4, r5
 8002cac:	10a4      	asrs	r4, r4, #2
 8002cae:	2600      	movs	r6, #0
 8002cb0:	42a6      	cmp	r6, r4
 8002cb2:	d109      	bne.n	8002cc8 <__libc_init_array+0x24>
 8002cb4:	4d0b      	ldr	r5, [pc, #44]	; (8002ce4 <__libc_init_array+0x40>)
 8002cb6:	4c0c      	ldr	r4, [pc, #48]	; (8002ce8 <__libc_init_array+0x44>)
 8002cb8:	f000 fb3c 	bl	8003334 <_init>
 8002cbc:	1b64      	subs	r4, r4, r5
 8002cbe:	10a4      	asrs	r4, r4, #2
 8002cc0:	2600      	movs	r6, #0
 8002cc2:	42a6      	cmp	r6, r4
 8002cc4:	d105      	bne.n	8002cd2 <__libc_init_array+0x2e>
 8002cc6:	bd70      	pop	{r4, r5, r6, pc}
 8002cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ccc:	4798      	blx	r3
 8002cce:	3601      	adds	r6, #1
 8002cd0:	e7ee      	b.n	8002cb0 <__libc_init_array+0xc>
 8002cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd6:	4798      	blx	r3
 8002cd8:	3601      	adds	r6, #1
 8002cda:	e7f2      	b.n	8002cc2 <__libc_init_array+0x1e>
 8002cdc:	08003cc0 	.word	0x08003cc0
 8002ce0:	08003cc0 	.word	0x08003cc0
 8002ce4:	08003cc0 	.word	0x08003cc0
 8002ce8:	08003cdc 	.word	0x08003cdc

08002cec <__retarget_lock_acquire_recursive>:
 8002cec:	4770      	bx	lr

08002cee <__retarget_lock_release_recursive>:
 8002cee:	4770      	bx	lr

08002cf0 <malloc>:
 8002cf0:	4b02      	ldr	r3, [pc, #8]	; (8002cfc <malloc+0xc>)
 8002cf2:	4601      	mov	r1, r0
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	f000 b871 	b.w	8002ddc <_malloc_r>
 8002cfa:	bf00      	nop
 8002cfc:	20000018 	.word	0x20000018

08002d00 <free>:
 8002d00:	4b02      	ldr	r3, [pc, #8]	; (8002d0c <free+0xc>)
 8002d02:	4601      	mov	r1, r0
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	f000 b819 	b.w	8002d3c <_free_r>
 8002d0a:	bf00      	nop
 8002d0c:	20000018 	.word	0x20000018

08002d10 <memcpy>:
 8002d10:	440a      	add	r2, r1
 8002d12:	4291      	cmp	r1, r2
 8002d14:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d18:	d100      	bne.n	8002d1c <memcpy+0xc>
 8002d1a:	4770      	bx	lr
 8002d1c:	b510      	push	{r4, lr}
 8002d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d26:	4291      	cmp	r1, r2
 8002d28:	d1f9      	bne.n	8002d1e <memcpy+0xe>
 8002d2a:	bd10      	pop	{r4, pc}

08002d2c <memset>:
 8002d2c:	4402      	add	r2, r0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d100      	bne.n	8002d36 <memset+0xa>
 8002d34:	4770      	bx	lr
 8002d36:	f803 1b01 	strb.w	r1, [r3], #1
 8002d3a:	e7f9      	b.n	8002d30 <memset+0x4>

08002d3c <_free_r>:
 8002d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d3e:	2900      	cmp	r1, #0
 8002d40:	d048      	beq.n	8002dd4 <_free_r+0x98>
 8002d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d46:	9001      	str	r0, [sp, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f1a1 0404 	sub.w	r4, r1, #4
 8002d4e:	bfb8      	it	lt
 8002d50:	18e4      	addlt	r4, r4, r3
 8002d52:	f000 fae3 	bl	800331c <__malloc_lock>
 8002d56:	4a20      	ldr	r2, [pc, #128]	; (8002dd8 <_free_r+0x9c>)
 8002d58:	9801      	ldr	r0, [sp, #4]
 8002d5a:	6813      	ldr	r3, [r2, #0]
 8002d5c:	4615      	mov	r5, r2
 8002d5e:	b933      	cbnz	r3, 8002d6e <_free_r+0x32>
 8002d60:	6063      	str	r3, [r4, #4]
 8002d62:	6014      	str	r4, [r2, #0]
 8002d64:	b003      	add	sp, #12
 8002d66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d6a:	f000 badd 	b.w	8003328 <__malloc_unlock>
 8002d6e:	42a3      	cmp	r3, r4
 8002d70:	d90b      	bls.n	8002d8a <_free_r+0x4e>
 8002d72:	6821      	ldr	r1, [r4, #0]
 8002d74:	1862      	adds	r2, r4, r1
 8002d76:	4293      	cmp	r3, r2
 8002d78:	bf04      	itt	eq
 8002d7a:	681a      	ldreq	r2, [r3, #0]
 8002d7c:	685b      	ldreq	r3, [r3, #4]
 8002d7e:	6063      	str	r3, [r4, #4]
 8002d80:	bf04      	itt	eq
 8002d82:	1852      	addeq	r2, r2, r1
 8002d84:	6022      	streq	r2, [r4, #0]
 8002d86:	602c      	str	r4, [r5, #0]
 8002d88:	e7ec      	b.n	8002d64 <_free_r+0x28>
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	b10b      	cbz	r3, 8002d94 <_free_r+0x58>
 8002d90:	42a3      	cmp	r3, r4
 8002d92:	d9fa      	bls.n	8002d8a <_free_r+0x4e>
 8002d94:	6811      	ldr	r1, [r2, #0]
 8002d96:	1855      	adds	r5, r2, r1
 8002d98:	42a5      	cmp	r5, r4
 8002d9a:	d10b      	bne.n	8002db4 <_free_r+0x78>
 8002d9c:	6824      	ldr	r4, [r4, #0]
 8002d9e:	4421      	add	r1, r4
 8002da0:	1854      	adds	r4, r2, r1
 8002da2:	42a3      	cmp	r3, r4
 8002da4:	6011      	str	r1, [r2, #0]
 8002da6:	d1dd      	bne.n	8002d64 <_free_r+0x28>
 8002da8:	681c      	ldr	r4, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	6053      	str	r3, [r2, #4]
 8002dae:	4421      	add	r1, r4
 8002db0:	6011      	str	r1, [r2, #0]
 8002db2:	e7d7      	b.n	8002d64 <_free_r+0x28>
 8002db4:	d902      	bls.n	8002dbc <_free_r+0x80>
 8002db6:	230c      	movs	r3, #12
 8002db8:	6003      	str	r3, [r0, #0]
 8002dba:	e7d3      	b.n	8002d64 <_free_r+0x28>
 8002dbc:	6825      	ldr	r5, [r4, #0]
 8002dbe:	1961      	adds	r1, r4, r5
 8002dc0:	428b      	cmp	r3, r1
 8002dc2:	bf04      	itt	eq
 8002dc4:	6819      	ldreq	r1, [r3, #0]
 8002dc6:	685b      	ldreq	r3, [r3, #4]
 8002dc8:	6063      	str	r3, [r4, #4]
 8002dca:	bf04      	itt	eq
 8002dcc:	1949      	addeq	r1, r1, r5
 8002dce:	6021      	streq	r1, [r4, #0]
 8002dd0:	6054      	str	r4, [r2, #4]
 8002dd2:	e7c7      	b.n	8002d64 <_free_r+0x28>
 8002dd4:	b003      	add	sp, #12
 8002dd6:	bd30      	pop	{r4, r5, pc}
 8002dd8:	20000160 	.word	0x20000160

08002ddc <_malloc_r>:
 8002ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dde:	1ccd      	adds	r5, r1, #3
 8002de0:	f025 0503 	bic.w	r5, r5, #3
 8002de4:	3508      	adds	r5, #8
 8002de6:	2d0c      	cmp	r5, #12
 8002de8:	bf38      	it	cc
 8002dea:	250c      	movcc	r5, #12
 8002dec:	2d00      	cmp	r5, #0
 8002dee:	4606      	mov	r6, r0
 8002df0:	db01      	blt.n	8002df6 <_malloc_r+0x1a>
 8002df2:	42a9      	cmp	r1, r5
 8002df4:	d903      	bls.n	8002dfe <_malloc_r+0x22>
 8002df6:	230c      	movs	r3, #12
 8002df8:	6033      	str	r3, [r6, #0]
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dfe:	f000 fa8d 	bl	800331c <__malloc_lock>
 8002e02:	4921      	ldr	r1, [pc, #132]	; (8002e88 <_malloc_r+0xac>)
 8002e04:	680a      	ldr	r2, [r1, #0]
 8002e06:	4614      	mov	r4, r2
 8002e08:	b99c      	cbnz	r4, 8002e32 <_malloc_r+0x56>
 8002e0a:	4f20      	ldr	r7, [pc, #128]	; (8002e8c <_malloc_r+0xb0>)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	b923      	cbnz	r3, 8002e1a <_malloc_r+0x3e>
 8002e10:	4621      	mov	r1, r4
 8002e12:	4630      	mov	r0, r6
 8002e14:	f000 f83c 	bl	8002e90 <_sbrk_r>
 8002e18:	6038      	str	r0, [r7, #0]
 8002e1a:	4629      	mov	r1, r5
 8002e1c:	4630      	mov	r0, r6
 8002e1e:	f000 f837 	bl	8002e90 <_sbrk_r>
 8002e22:	1c43      	adds	r3, r0, #1
 8002e24:	d123      	bne.n	8002e6e <_malloc_r+0x92>
 8002e26:	230c      	movs	r3, #12
 8002e28:	6033      	str	r3, [r6, #0]
 8002e2a:	4630      	mov	r0, r6
 8002e2c:	f000 fa7c 	bl	8003328 <__malloc_unlock>
 8002e30:	e7e3      	b.n	8002dfa <_malloc_r+0x1e>
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	1b5b      	subs	r3, r3, r5
 8002e36:	d417      	bmi.n	8002e68 <_malloc_r+0x8c>
 8002e38:	2b0b      	cmp	r3, #11
 8002e3a:	d903      	bls.n	8002e44 <_malloc_r+0x68>
 8002e3c:	6023      	str	r3, [r4, #0]
 8002e3e:	441c      	add	r4, r3
 8002e40:	6025      	str	r5, [r4, #0]
 8002e42:	e004      	b.n	8002e4e <_malloc_r+0x72>
 8002e44:	6863      	ldr	r3, [r4, #4]
 8002e46:	42a2      	cmp	r2, r4
 8002e48:	bf0c      	ite	eq
 8002e4a:	600b      	streq	r3, [r1, #0]
 8002e4c:	6053      	strne	r3, [r2, #4]
 8002e4e:	4630      	mov	r0, r6
 8002e50:	f000 fa6a 	bl	8003328 <__malloc_unlock>
 8002e54:	f104 000b 	add.w	r0, r4, #11
 8002e58:	1d23      	adds	r3, r4, #4
 8002e5a:	f020 0007 	bic.w	r0, r0, #7
 8002e5e:	1ac2      	subs	r2, r0, r3
 8002e60:	d0cc      	beq.n	8002dfc <_malloc_r+0x20>
 8002e62:	1a1b      	subs	r3, r3, r0
 8002e64:	50a3      	str	r3, [r4, r2]
 8002e66:	e7c9      	b.n	8002dfc <_malloc_r+0x20>
 8002e68:	4622      	mov	r2, r4
 8002e6a:	6864      	ldr	r4, [r4, #4]
 8002e6c:	e7cc      	b.n	8002e08 <_malloc_r+0x2c>
 8002e6e:	1cc4      	adds	r4, r0, #3
 8002e70:	f024 0403 	bic.w	r4, r4, #3
 8002e74:	42a0      	cmp	r0, r4
 8002e76:	d0e3      	beq.n	8002e40 <_malloc_r+0x64>
 8002e78:	1a21      	subs	r1, r4, r0
 8002e7a:	4630      	mov	r0, r6
 8002e7c:	f000 f808 	bl	8002e90 <_sbrk_r>
 8002e80:	3001      	adds	r0, #1
 8002e82:	d1dd      	bne.n	8002e40 <_malloc_r+0x64>
 8002e84:	e7cf      	b.n	8002e26 <_malloc_r+0x4a>
 8002e86:	bf00      	nop
 8002e88:	20000160 	.word	0x20000160
 8002e8c:	20000164 	.word	0x20000164

08002e90 <_sbrk_r>:
 8002e90:	b538      	push	{r3, r4, r5, lr}
 8002e92:	4d06      	ldr	r5, [pc, #24]	; (8002eac <_sbrk_r+0x1c>)
 8002e94:	2300      	movs	r3, #0
 8002e96:	4604      	mov	r4, r0
 8002e98:	4608      	mov	r0, r1
 8002e9a:	602b      	str	r3, [r5, #0]
 8002e9c:	f7fd fb22 	bl	80004e4 <_sbrk>
 8002ea0:	1c43      	adds	r3, r0, #1
 8002ea2:	d102      	bne.n	8002eaa <_sbrk_r+0x1a>
 8002ea4:	682b      	ldr	r3, [r5, #0]
 8002ea6:	b103      	cbz	r3, 8002eaa <_sbrk_r+0x1a>
 8002ea8:	6023      	str	r3, [r4, #0]
 8002eaa:	bd38      	pop	{r3, r4, r5, pc}
 8002eac:	200001c4 	.word	0x200001c4

08002eb0 <_raise_r>:
 8002eb0:	291f      	cmp	r1, #31
 8002eb2:	b538      	push	{r3, r4, r5, lr}
 8002eb4:	4604      	mov	r4, r0
 8002eb6:	460d      	mov	r5, r1
 8002eb8:	d904      	bls.n	8002ec4 <_raise_r+0x14>
 8002eba:	2316      	movs	r3, #22
 8002ebc:	6003      	str	r3, [r0, #0]
 8002ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec2:	bd38      	pop	{r3, r4, r5, pc}
 8002ec4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002ec6:	b112      	cbz	r2, 8002ece <_raise_r+0x1e>
 8002ec8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002ecc:	b94b      	cbnz	r3, 8002ee2 <_raise_r+0x32>
 8002ece:	4620      	mov	r0, r4
 8002ed0:	f000 f830 	bl	8002f34 <_getpid_r>
 8002ed4:	462a      	mov	r2, r5
 8002ed6:	4601      	mov	r1, r0
 8002ed8:	4620      	mov	r0, r4
 8002eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ede:	f000 b817 	b.w	8002f10 <_kill_r>
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d00a      	beq.n	8002efc <_raise_r+0x4c>
 8002ee6:	1c59      	adds	r1, r3, #1
 8002ee8:	d103      	bne.n	8002ef2 <_raise_r+0x42>
 8002eea:	2316      	movs	r3, #22
 8002eec:	6003      	str	r3, [r0, #0]
 8002eee:	2001      	movs	r0, #1
 8002ef0:	e7e7      	b.n	8002ec2 <_raise_r+0x12>
 8002ef2:	2400      	movs	r4, #0
 8002ef4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002ef8:	4628      	mov	r0, r5
 8002efa:	4798      	blx	r3
 8002efc:	2000      	movs	r0, #0
 8002efe:	e7e0      	b.n	8002ec2 <_raise_r+0x12>

08002f00 <raise>:
 8002f00:	4b02      	ldr	r3, [pc, #8]	; (8002f0c <raise+0xc>)
 8002f02:	4601      	mov	r1, r0
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	f7ff bfd3 	b.w	8002eb0 <_raise_r>
 8002f0a:	bf00      	nop
 8002f0c:	20000018 	.word	0x20000018

08002f10 <_kill_r>:
 8002f10:	b538      	push	{r3, r4, r5, lr}
 8002f12:	4d07      	ldr	r5, [pc, #28]	; (8002f30 <_kill_r+0x20>)
 8002f14:	2300      	movs	r3, #0
 8002f16:	4604      	mov	r4, r0
 8002f18:	4608      	mov	r0, r1
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	602b      	str	r3, [r5, #0]
 8002f1e:	f7fd fac7 	bl	80004b0 <_kill>
 8002f22:	1c43      	adds	r3, r0, #1
 8002f24:	d102      	bne.n	8002f2c <_kill_r+0x1c>
 8002f26:	682b      	ldr	r3, [r5, #0]
 8002f28:	b103      	cbz	r3, 8002f2c <_kill_r+0x1c>
 8002f2a:	6023      	str	r3, [r4, #0]
 8002f2c:	bd38      	pop	{r3, r4, r5, pc}
 8002f2e:	bf00      	nop
 8002f30:	200001c4 	.word	0x200001c4

08002f34 <_getpid_r>:
 8002f34:	f7fd bab4 	b.w	80004a0 <_getpid>

08002f38 <_strerror_r>:
 8002f38:	b510      	push	{r4, lr}
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	4611      	mov	r1, r2
 8002f40:	288e      	cmp	r0, #142	; 0x8e
 8002f42:	f200 812f 	bhi.w	80031a4 <_strerror_r+0x26c>
 8002f46:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002f4a:	0138      	.short	0x0138
 8002f4c:	0091008f 	.word	0x0091008f
 8002f50:	00950093 	.word	0x00950093
 8002f54:	00990097 	.word	0x00990097
 8002f58:	009d009b 	.word	0x009d009b
 8002f5c:	00a300a1 	.word	0x00a300a1
 8002f60:	00a900a7 	.word	0x00a900a7
 8002f64:	00ad00ab 	.word	0x00ad00ab
 8002f68:	00af012d 	.word	0x00af012d
 8002f6c:	00b300b1 	.word	0x00b300b1
 8002f70:	00b700b5 	.word	0x00b700b5
 8002f74:	00bf00bd 	.word	0x00bf00bd
 8002f78:	00c700c5 	.word	0x00c700c5
 8002f7c:	00cb00c9 	.word	0x00cb00c9
 8002f80:	00d100cd 	.word	0x00d100cd
 8002f84:	00d700d5 	.word	0x00d700d5
 8002f88:	00db00d9 	.word	0x00db00d9
 8002f8c:	00df00dd 	.word	0x00df00dd
 8002f90:	00e300e1 	.word	0x00e300e1
 8002f94:	012d012d 	.word	0x012d012d
 8002f98:	012d012d 	.word	0x012d012d
 8002f9c:	012d012d 	.word	0x012d012d
 8002fa0:	012d012d 	.word	0x012d012d
 8002fa4:	00eb00e7 	.word	0x00eb00e7
 8002fa8:	012d012d 	.word	0x012d012d
 8002fac:	012d012d 	.word	0x012d012d
 8002fb0:	012d012d 	.word	0x012d012d
 8002fb4:	012d012d 	.word	0x012d012d
 8002fb8:	012d012d 	.word	0x012d012d
 8002fbc:	012d012d 	.word	0x012d012d
 8002fc0:	00ed012d 	.word	0x00ed012d
 8002fc4:	00ef0107 	.word	0x00ef0107
 8002fc8:	012d00f1 	.word	0x012d00f1
 8002fcc:	012d012d 	.word	0x012d012d
 8002fd0:	012d00f3 	.word	0x012d00f3
 8002fd4:	012d012d 	.word	0x012d012d
 8002fd8:	012d00f5 	.word	0x012d00f5
 8002fdc:	00f9012d 	.word	0x00f9012d
 8002fe0:	012d012d 	.word	0x012d012d
 8002fe4:	012d00fb 	.word	0x012d00fb
 8002fe8:	012d012d 	.word	0x012d012d
 8002fec:	012d012d 	.word	0x012d012d
 8002ff0:	012d012d 	.word	0x012d012d
 8002ff4:	012d012d 	.word	0x012d012d
 8002ff8:	00fd012d 	.word	0x00fd012d
 8002ffc:	00ff012d 	.word	0x00ff012d
 8003000:	01030101 	.word	0x01030101
 8003004:	012d012d 	.word	0x012d012d
 8003008:	012d0125 	.word	0x012d0125
 800300c:	012d012d 	.word	0x012d012d
 8003010:	012d012d 	.word	0x012d012d
 8003014:	012d012d 	.word	0x012d012d
 8003018:	0113012d 	.word	0x0113012d
 800301c:	01090105 	.word	0x01090105
 8003020:	010d010b 	.word	0x010d010b
 8003024:	012d010f 	.word	0x012d010f
 8003028:	01150111 	.word	0x01150111
 800302c:	00e90119 	.word	0x00e90119
 8003030:	012b00c1 	.word	0x012b00c1
 8003034:	00cf00b9 	.word	0x00cf00b9
 8003038:	009f00bb 	.word	0x009f00bb
 800303c:	012900a5 	.word	0x012900a5
 8003040:	012d00f7 	.word	0x012d00f7
 8003044:	00c30117 	.word	0x00c30117
 8003048:	011b011d 	.word	0x011b011d
 800304c:	012d012d 	.word	0x012d012d
 8003050:	012d012d 	.word	0x012d012d
 8003054:	00d3012d 	.word	0x00d3012d
 8003058:	012d012d 	.word	0x012d012d
 800305c:	00e5012d 	.word	0x00e5012d
 8003060:	011f0127 	.word	0x011f0127
 8003064:	01230121 	.word	0x01230121
 8003068:	4855      	ldr	r0, [pc, #340]	; (80031c0 <_strerror_r+0x288>)
 800306a:	bd10      	pop	{r4, pc}
 800306c:	4855      	ldr	r0, [pc, #340]	; (80031c4 <_strerror_r+0x28c>)
 800306e:	e7fc      	b.n	800306a <_strerror_r+0x132>
 8003070:	4855      	ldr	r0, [pc, #340]	; (80031c8 <_strerror_r+0x290>)
 8003072:	e7fa      	b.n	800306a <_strerror_r+0x132>
 8003074:	4855      	ldr	r0, [pc, #340]	; (80031cc <_strerror_r+0x294>)
 8003076:	e7f8      	b.n	800306a <_strerror_r+0x132>
 8003078:	4855      	ldr	r0, [pc, #340]	; (80031d0 <_strerror_r+0x298>)
 800307a:	e7f6      	b.n	800306a <_strerror_r+0x132>
 800307c:	4855      	ldr	r0, [pc, #340]	; (80031d4 <_strerror_r+0x29c>)
 800307e:	e7f4      	b.n	800306a <_strerror_r+0x132>
 8003080:	4855      	ldr	r0, [pc, #340]	; (80031d8 <_strerror_r+0x2a0>)
 8003082:	e7f2      	b.n	800306a <_strerror_r+0x132>
 8003084:	4855      	ldr	r0, [pc, #340]	; (80031dc <_strerror_r+0x2a4>)
 8003086:	e7f0      	b.n	800306a <_strerror_r+0x132>
 8003088:	4855      	ldr	r0, [pc, #340]	; (80031e0 <_strerror_r+0x2a8>)
 800308a:	e7ee      	b.n	800306a <_strerror_r+0x132>
 800308c:	4855      	ldr	r0, [pc, #340]	; (80031e4 <_strerror_r+0x2ac>)
 800308e:	e7ec      	b.n	800306a <_strerror_r+0x132>
 8003090:	4855      	ldr	r0, [pc, #340]	; (80031e8 <_strerror_r+0x2b0>)
 8003092:	e7ea      	b.n	800306a <_strerror_r+0x132>
 8003094:	4855      	ldr	r0, [pc, #340]	; (80031ec <_strerror_r+0x2b4>)
 8003096:	e7e8      	b.n	800306a <_strerror_r+0x132>
 8003098:	4855      	ldr	r0, [pc, #340]	; (80031f0 <_strerror_r+0x2b8>)
 800309a:	e7e6      	b.n	800306a <_strerror_r+0x132>
 800309c:	4855      	ldr	r0, [pc, #340]	; (80031f4 <_strerror_r+0x2bc>)
 800309e:	e7e4      	b.n	800306a <_strerror_r+0x132>
 80030a0:	4855      	ldr	r0, [pc, #340]	; (80031f8 <_strerror_r+0x2c0>)
 80030a2:	e7e2      	b.n	800306a <_strerror_r+0x132>
 80030a4:	4855      	ldr	r0, [pc, #340]	; (80031fc <_strerror_r+0x2c4>)
 80030a6:	e7e0      	b.n	800306a <_strerror_r+0x132>
 80030a8:	4855      	ldr	r0, [pc, #340]	; (8003200 <_strerror_r+0x2c8>)
 80030aa:	e7de      	b.n	800306a <_strerror_r+0x132>
 80030ac:	4855      	ldr	r0, [pc, #340]	; (8003204 <_strerror_r+0x2cc>)
 80030ae:	e7dc      	b.n	800306a <_strerror_r+0x132>
 80030b0:	4855      	ldr	r0, [pc, #340]	; (8003208 <_strerror_r+0x2d0>)
 80030b2:	e7da      	b.n	800306a <_strerror_r+0x132>
 80030b4:	4855      	ldr	r0, [pc, #340]	; (800320c <_strerror_r+0x2d4>)
 80030b6:	e7d8      	b.n	800306a <_strerror_r+0x132>
 80030b8:	4855      	ldr	r0, [pc, #340]	; (8003210 <_strerror_r+0x2d8>)
 80030ba:	e7d6      	b.n	800306a <_strerror_r+0x132>
 80030bc:	4855      	ldr	r0, [pc, #340]	; (8003214 <_strerror_r+0x2dc>)
 80030be:	e7d4      	b.n	800306a <_strerror_r+0x132>
 80030c0:	4855      	ldr	r0, [pc, #340]	; (8003218 <_strerror_r+0x2e0>)
 80030c2:	e7d2      	b.n	800306a <_strerror_r+0x132>
 80030c4:	4855      	ldr	r0, [pc, #340]	; (800321c <_strerror_r+0x2e4>)
 80030c6:	e7d0      	b.n	800306a <_strerror_r+0x132>
 80030c8:	4855      	ldr	r0, [pc, #340]	; (8003220 <_strerror_r+0x2e8>)
 80030ca:	e7ce      	b.n	800306a <_strerror_r+0x132>
 80030cc:	4855      	ldr	r0, [pc, #340]	; (8003224 <_strerror_r+0x2ec>)
 80030ce:	e7cc      	b.n	800306a <_strerror_r+0x132>
 80030d0:	4855      	ldr	r0, [pc, #340]	; (8003228 <_strerror_r+0x2f0>)
 80030d2:	e7ca      	b.n	800306a <_strerror_r+0x132>
 80030d4:	4855      	ldr	r0, [pc, #340]	; (800322c <_strerror_r+0x2f4>)
 80030d6:	e7c8      	b.n	800306a <_strerror_r+0x132>
 80030d8:	4855      	ldr	r0, [pc, #340]	; (8003230 <_strerror_r+0x2f8>)
 80030da:	e7c6      	b.n	800306a <_strerror_r+0x132>
 80030dc:	4855      	ldr	r0, [pc, #340]	; (8003234 <_strerror_r+0x2fc>)
 80030de:	e7c4      	b.n	800306a <_strerror_r+0x132>
 80030e0:	4855      	ldr	r0, [pc, #340]	; (8003238 <_strerror_r+0x300>)
 80030e2:	e7c2      	b.n	800306a <_strerror_r+0x132>
 80030e4:	4855      	ldr	r0, [pc, #340]	; (800323c <_strerror_r+0x304>)
 80030e6:	e7c0      	b.n	800306a <_strerror_r+0x132>
 80030e8:	4855      	ldr	r0, [pc, #340]	; (8003240 <_strerror_r+0x308>)
 80030ea:	e7be      	b.n	800306a <_strerror_r+0x132>
 80030ec:	4855      	ldr	r0, [pc, #340]	; (8003244 <_strerror_r+0x30c>)
 80030ee:	e7bc      	b.n	800306a <_strerror_r+0x132>
 80030f0:	4855      	ldr	r0, [pc, #340]	; (8003248 <_strerror_r+0x310>)
 80030f2:	e7ba      	b.n	800306a <_strerror_r+0x132>
 80030f4:	4855      	ldr	r0, [pc, #340]	; (800324c <_strerror_r+0x314>)
 80030f6:	e7b8      	b.n	800306a <_strerror_r+0x132>
 80030f8:	4855      	ldr	r0, [pc, #340]	; (8003250 <_strerror_r+0x318>)
 80030fa:	e7b6      	b.n	800306a <_strerror_r+0x132>
 80030fc:	4855      	ldr	r0, [pc, #340]	; (8003254 <_strerror_r+0x31c>)
 80030fe:	e7b4      	b.n	800306a <_strerror_r+0x132>
 8003100:	4855      	ldr	r0, [pc, #340]	; (8003258 <_strerror_r+0x320>)
 8003102:	e7b2      	b.n	800306a <_strerror_r+0x132>
 8003104:	4855      	ldr	r0, [pc, #340]	; (800325c <_strerror_r+0x324>)
 8003106:	e7b0      	b.n	800306a <_strerror_r+0x132>
 8003108:	4855      	ldr	r0, [pc, #340]	; (8003260 <_strerror_r+0x328>)
 800310a:	e7ae      	b.n	800306a <_strerror_r+0x132>
 800310c:	4855      	ldr	r0, [pc, #340]	; (8003264 <_strerror_r+0x32c>)
 800310e:	e7ac      	b.n	800306a <_strerror_r+0x132>
 8003110:	4855      	ldr	r0, [pc, #340]	; (8003268 <_strerror_r+0x330>)
 8003112:	e7aa      	b.n	800306a <_strerror_r+0x132>
 8003114:	4855      	ldr	r0, [pc, #340]	; (800326c <_strerror_r+0x334>)
 8003116:	e7a8      	b.n	800306a <_strerror_r+0x132>
 8003118:	4855      	ldr	r0, [pc, #340]	; (8003270 <_strerror_r+0x338>)
 800311a:	e7a6      	b.n	800306a <_strerror_r+0x132>
 800311c:	4855      	ldr	r0, [pc, #340]	; (8003274 <_strerror_r+0x33c>)
 800311e:	e7a4      	b.n	800306a <_strerror_r+0x132>
 8003120:	4855      	ldr	r0, [pc, #340]	; (8003278 <_strerror_r+0x340>)
 8003122:	e7a2      	b.n	800306a <_strerror_r+0x132>
 8003124:	4855      	ldr	r0, [pc, #340]	; (800327c <_strerror_r+0x344>)
 8003126:	e7a0      	b.n	800306a <_strerror_r+0x132>
 8003128:	4855      	ldr	r0, [pc, #340]	; (8003280 <_strerror_r+0x348>)
 800312a:	e79e      	b.n	800306a <_strerror_r+0x132>
 800312c:	4855      	ldr	r0, [pc, #340]	; (8003284 <_strerror_r+0x34c>)
 800312e:	e79c      	b.n	800306a <_strerror_r+0x132>
 8003130:	4855      	ldr	r0, [pc, #340]	; (8003288 <_strerror_r+0x350>)
 8003132:	e79a      	b.n	800306a <_strerror_r+0x132>
 8003134:	4855      	ldr	r0, [pc, #340]	; (800328c <_strerror_r+0x354>)
 8003136:	e798      	b.n	800306a <_strerror_r+0x132>
 8003138:	4855      	ldr	r0, [pc, #340]	; (8003290 <_strerror_r+0x358>)
 800313a:	e796      	b.n	800306a <_strerror_r+0x132>
 800313c:	4855      	ldr	r0, [pc, #340]	; (8003294 <_strerror_r+0x35c>)
 800313e:	e794      	b.n	800306a <_strerror_r+0x132>
 8003140:	4855      	ldr	r0, [pc, #340]	; (8003298 <_strerror_r+0x360>)
 8003142:	e792      	b.n	800306a <_strerror_r+0x132>
 8003144:	4855      	ldr	r0, [pc, #340]	; (800329c <_strerror_r+0x364>)
 8003146:	e790      	b.n	800306a <_strerror_r+0x132>
 8003148:	4855      	ldr	r0, [pc, #340]	; (80032a0 <_strerror_r+0x368>)
 800314a:	e78e      	b.n	800306a <_strerror_r+0x132>
 800314c:	4855      	ldr	r0, [pc, #340]	; (80032a4 <_strerror_r+0x36c>)
 800314e:	e78c      	b.n	800306a <_strerror_r+0x132>
 8003150:	4855      	ldr	r0, [pc, #340]	; (80032a8 <_strerror_r+0x370>)
 8003152:	e78a      	b.n	800306a <_strerror_r+0x132>
 8003154:	4855      	ldr	r0, [pc, #340]	; (80032ac <_strerror_r+0x374>)
 8003156:	e788      	b.n	800306a <_strerror_r+0x132>
 8003158:	4855      	ldr	r0, [pc, #340]	; (80032b0 <_strerror_r+0x378>)
 800315a:	e786      	b.n	800306a <_strerror_r+0x132>
 800315c:	4855      	ldr	r0, [pc, #340]	; (80032b4 <_strerror_r+0x37c>)
 800315e:	e784      	b.n	800306a <_strerror_r+0x132>
 8003160:	4855      	ldr	r0, [pc, #340]	; (80032b8 <_strerror_r+0x380>)
 8003162:	e782      	b.n	800306a <_strerror_r+0x132>
 8003164:	4855      	ldr	r0, [pc, #340]	; (80032bc <_strerror_r+0x384>)
 8003166:	e780      	b.n	800306a <_strerror_r+0x132>
 8003168:	4855      	ldr	r0, [pc, #340]	; (80032c0 <_strerror_r+0x388>)
 800316a:	e77e      	b.n	800306a <_strerror_r+0x132>
 800316c:	4855      	ldr	r0, [pc, #340]	; (80032c4 <_strerror_r+0x38c>)
 800316e:	e77c      	b.n	800306a <_strerror_r+0x132>
 8003170:	4855      	ldr	r0, [pc, #340]	; (80032c8 <_strerror_r+0x390>)
 8003172:	e77a      	b.n	800306a <_strerror_r+0x132>
 8003174:	4855      	ldr	r0, [pc, #340]	; (80032cc <_strerror_r+0x394>)
 8003176:	e778      	b.n	800306a <_strerror_r+0x132>
 8003178:	4855      	ldr	r0, [pc, #340]	; (80032d0 <_strerror_r+0x398>)
 800317a:	e776      	b.n	800306a <_strerror_r+0x132>
 800317c:	4855      	ldr	r0, [pc, #340]	; (80032d4 <_strerror_r+0x39c>)
 800317e:	e774      	b.n	800306a <_strerror_r+0x132>
 8003180:	4855      	ldr	r0, [pc, #340]	; (80032d8 <_strerror_r+0x3a0>)
 8003182:	e772      	b.n	800306a <_strerror_r+0x132>
 8003184:	4855      	ldr	r0, [pc, #340]	; (80032dc <_strerror_r+0x3a4>)
 8003186:	e770      	b.n	800306a <_strerror_r+0x132>
 8003188:	4855      	ldr	r0, [pc, #340]	; (80032e0 <_strerror_r+0x3a8>)
 800318a:	e76e      	b.n	800306a <_strerror_r+0x132>
 800318c:	4855      	ldr	r0, [pc, #340]	; (80032e4 <_strerror_r+0x3ac>)
 800318e:	e76c      	b.n	800306a <_strerror_r+0x132>
 8003190:	4855      	ldr	r0, [pc, #340]	; (80032e8 <_strerror_r+0x3b0>)
 8003192:	e76a      	b.n	800306a <_strerror_r+0x132>
 8003194:	4855      	ldr	r0, [pc, #340]	; (80032ec <_strerror_r+0x3b4>)
 8003196:	e768      	b.n	800306a <_strerror_r+0x132>
 8003198:	4855      	ldr	r0, [pc, #340]	; (80032f0 <_strerror_r+0x3b8>)
 800319a:	e766      	b.n	800306a <_strerror_r+0x132>
 800319c:	4855      	ldr	r0, [pc, #340]	; (80032f4 <_strerror_r+0x3bc>)
 800319e:	e764      	b.n	800306a <_strerror_r+0x132>
 80031a0:	4855      	ldr	r0, [pc, #340]	; (80032f8 <_strerror_r+0x3c0>)
 80031a2:	e762      	b.n	800306a <_strerror_r+0x132>
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf14      	ite	ne
 80031a8:	461a      	movne	r2, r3
 80031aa:	4622      	moveq	r2, r4
 80031ac:	f000 f8b4 	bl	8003318 <_user_strerror>
 80031b0:	4b52      	ldr	r3, [pc, #328]	; (80032fc <_strerror_r+0x3c4>)
 80031b2:	2800      	cmp	r0, #0
 80031b4:	bf08      	it	eq
 80031b6:	4618      	moveq	r0, r3
 80031b8:	e757      	b.n	800306a <_strerror_r+0x132>
 80031ba:	4851      	ldr	r0, [pc, #324]	; (8003300 <_strerror_r+0x3c8>)
 80031bc:	e755      	b.n	800306a <_strerror_r+0x132>
 80031be:	bf00      	nop
 80031c0:	08003628 	.word	0x08003628
 80031c4:	08003632 	.word	0x08003632
 80031c8:	0800364c 	.word	0x0800364c
 80031cc:	0800365c 	.word	0x0800365c
 80031d0:	08003674 	.word	0x08003674
 80031d4:	0800367e 	.word	0x0800367e
 80031d8:	08003698 	.word	0x08003698
 80031dc:	080036aa 	.word	0x080036aa
 80031e0:	080036bc 	.word	0x080036bc
 80031e4:	080036d5 	.word	0x080036d5
 80031e8:	080036e5 	.word	0x080036e5
 80031ec:	080036f1 	.word	0x080036f1
 80031f0:	0800370e 	.word	0x0800370e
 80031f4:	08003720 	.word	0x08003720
 80031f8:	08003731 	.word	0x08003731
 80031fc:	08003743 	.word	0x08003743
 8003200:	0800374f 	.word	0x0800374f
 8003204:	08003767 	.word	0x08003767
 8003208:	08003773 	.word	0x08003773
 800320c:	08003785 	.word	0x08003785
 8003210:	08003794 	.word	0x08003794
 8003214:	080037a4 	.word	0x080037a4
 8003218:	080037b1 	.word	0x080037b1
 800321c:	080037d0 	.word	0x080037d0
 8003220:	080037df 	.word	0x080037df
 8003224:	080037f0 	.word	0x080037f0
 8003228:	08003814 	.word	0x08003814
 800322c:	08003832 	.word	0x08003832
 8003230:	08003850 	.word	0x08003850
 8003234:	08003870 	.word	0x08003870
 8003238:	08003887 	.word	0x08003887
 800323c:	08003896 	.word	0x08003896
 8003240:	080038a5 	.word	0x080038a5
 8003244:	080038b9 	.word	0x080038b9
 8003248:	080038d1 	.word	0x080038d1
 800324c:	080038df 	.word	0x080038df
 8003250:	080038ec 	.word	0x080038ec
 8003254:	08003902 	.word	0x08003902
 8003258:	08003911 	.word	0x08003911
 800325c:	0800391d 	.word	0x0800391d
 8003260:	0800394c 	.word	0x0800394c
 8003264:	0800395d 	.word	0x0800395d
 8003268:	08003978 	.word	0x08003978
 800326c:	0800398b 	.word	0x0800398b
 8003270:	080039a1 	.word	0x080039a1
 8003274:	080039aa 	.word	0x080039aa
 8003278:	080039c1 	.word	0x080039c1
 800327c:	080039c9 	.word	0x080039c9
 8003280:	080039d6 	.word	0x080039d6
 8003284:	080039eb 	.word	0x080039eb
 8003288:	080039ff 	.word	0x080039ff
 800328c:	08003a17 	.word	0x08003a17
 8003290:	08003a26 	.word	0x08003a26
 8003294:	08003a37 	.word	0x08003a37
 8003298:	08003a4a 	.word	0x08003a4a
 800329c:	08003a56 	.word	0x08003a56
 80032a0:	08003a6f 	.word	0x08003a6f
 80032a4:	08003a83 	.word	0x08003a83
 80032a8:	08003a9e 	.word	0x08003a9e
 80032ac:	08003ab6 	.word	0x08003ab6
 80032b0:	08003ad0 	.word	0x08003ad0
 80032b4:	08003ad8 	.word	0x08003ad8
 80032b8:	08003b08 	.word	0x08003b08
 80032bc:	08003b27 	.word	0x08003b27
 80032c0:	08003b46 	.word	0x08003b46
 80032c4:	08003b5d 	.word	0x08003b5d
 80032c8:	08003b70 	.word	0x08003b70
 80032cc:	08003b89 	.word	0x08003b89
 80032d0:	08003ba0 	.word	0x08003ba0
 80032d4:	08003bb6 	.word	0x08003bb6
 80032d8:	08003bd7 	.word	0x08003bd7
 80032dc:	08003bef 	.word	0x08003bef
 80032e0:	08003c0b 	.word	0x08003c0b
 80032e4:	08003c1e 	.word	0x08003c1e
 80032e8:	08003c34 	.word	0x08003c34
 80032ec:	08003c48 	.word	0x08003c48
 80032f0:	08003c6a 	.word	0x08003c6a
 80032f4:	08003c90 	.word	0x08003c90
 80032f8:	08003ca1 	.word	0x08003ca1
 80032fc:	08003ad7 	.word	0x08003ad7
 8003300:	08003cb6 	.word	0x08003cb6

08003304 <strerror>:
 8003304:	4601      	mov	r1, r0
 8003306:	4803      	ldr	r0, [pc, #12]	; (8003314 <strerror+0x10>)
 8003308:	2300      	movs	r3, #0
 800330a:	6800      	ldr	r0, [r0, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	f7ff be13 	b.w	8002f38 <_strerror_r>
 8003312:	bf00      	nop
 8003314:	20000018 	.word	0x20000018

08003318 <_user_strerror>:
 8003318:	2000      	movs	r0, #0
 800331a:	4770      	bx	lr

0800331c <__malloc_lock>:
 800331c:	4801      	ldr	r0, [pc, #4]	; (8003324 <__malloc_lock+0x8>)
 800331e:	f7ff bce5 	b.w	8002cec <__retarget_lock_acquire_recursive>
 8003322:	bf00      	nop
 8003324:	200001b8 	.word	0x200001b8

08003328 <__malloc_unlock>:
 8003328:	4801      	ldr	r0, [pc, #4]	; (8003330 <__malloc_unlock+0x8>)
 800332a:	f7ff bce0 	b.w	8002cee <__retarget_lock_release_recursive>
 800332e:	bf00      	nop
 8003330:	200001b8 	.word	0x200001b8

08003334 <_init>:
 8003334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003336:	bf00      	nop
 8003338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800333a:	bc08      	pop	{r3}
 800333c:	469e      	mov	lr, r3
 800333e:	4770      	bx	lr

08003340 <_fini>:
 8003340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003342:	bf00      	nop
 8003344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003346:	bc08      	pop	{r3}
 8003348:	469e      	mov	lr, r3
 800334a:	4770      	bx	lr
