
Projet_5A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b14  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a78  08006c9c  08006c9c  00016c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000c8  08007714  08007714  00017714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000130  080077dc  080077dc  000177dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800790c  0800790c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800792c  0800792c  0001792c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08007930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000094  080079c4  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  080079c4  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b635  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046d1  00000000  00000000  0004b6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  0004fdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f8  00000000  00000000  000512e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006407  00000000  00000000  000526e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b0a3  00000000  00000000  00058ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103170  00000000  00000000  00073b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176cfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000104e4  00000000  00000000  00176d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006c84 	.word	0x08006c84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08006c84 	.word	0x08006c84

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f001 b8c0 	b.w	8001384 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <selfrel_offset31>:
 80004e0:	6803      	ldr	r3, [r0, #0]
 80004e2:	005a      	lsls	r2, r3, #1
 80004e4:	bf4c      	ite	mi
 80004e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80004ea:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80004ee:	4418      	add	r0, r3
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <search_EIT_table>:
 80004f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80004f8:	b329      	cbz	r1, 8000546 <search_EIT_table+0x52>
 80004fa:	1e4f      	subs	r7, r1, #1
 80004fc:	4604      	mov	r4, r0
 80004fe:	4615      	mov	r5, r2
 8000500:	463e      	mov	r6, r7
 8000502:	f04f 0800 	mov.w	r8, #0
 8000506:	eb08 0106 	add.w	r1, r8, r6
 800050a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800050e:	1049      	asrs	r1, r1, #1
 8000510:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000514:	4648      	mov	r0, r9
 8000516:	f7ff ffe3 	bl	80004e0 <selfrel_offset31>
 800051a:	4603      	mov	r3, r0
 800051c:	00c8      	lsls	r0, r1, #3
 800051e:	3008      	adds	r0, #8
 8000520:	428f      	cmp	r7, r1
 8000522:	4420      	add	r0, r4
 8000524:	d009      	beq.n	800053a <search_EIT_table+0x46>
 8000526:	42ab      	cmp	r3, r5
 8000528:	d809      	bhi.n	800053e <search_EIT_table+0x4a>
 800052a:	f7ff ffd9 	bl	80004e0 <selfrel_offset31>
 800052e:	3801      	subs	r0, #1
 8000530:	42a8      	cmp	r0, r5
 8000532:	d20a      	bcs.n	800054a <search_EIT_table+0x56>
 8000534:	f101 0801 	add.w	r8, r1, #1
 8000538:	e7e5      	b.n	8000506 <search_EIT_table+0x12>
 800053a:	42ab      	cmp	r3, r5
 800053c:	d905      	bls.n	800054a <search_EIT_table+0x56>
 800053e:	4588      	cmp	r8, r1
 8000540:	d001      	beq.n	8000546 <search_EIT_table+0x52>
 8000542:	1e4e      	subs	r6, r1, #1
 8000544:	e7df      	b.n	8000506 <search_EIT_table+0x12>
 8000546:	f04f 0900 	mov.w	r9, #0
 800054a:	4648      	mov	r0, r9
 800054c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000550 <__gnu_unwind_get_pr_addr>:
 8000550:	2801      	cmp	r0, #1
 8000552:	d007      	beq.n	8000564 <__gnu_unwind_get_pr_addr+0x14>
 8000554:	2802      	cmp	r0, #2
 8000556:	d007      	beq.n	8000568 <__gnu_unwind_get_pr_addr+0x18>
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <__gnu_unwind_get_pr_addr+0x1c>)
 800055a:	2800      	cmp	r0, #0
 800055c:	bf0c      	ite	eq
 800055e:	4618      	moveq	r0, r3
 8000560:	2000      	movne	r0, #0
 8000562:	4770      	bx	lr
 8000564:	4802      	ldr	r0, [pc, #8]	; (8000570 <__gnu_unwind_get_pr_addr+0x20>)
 8000566:	4770      	bx	lr
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <__gnu_unwind_get_pr_addr+0x24>)
 800056a:	4770      	bx	lr
 800056c:	08000c15 	.word	0x08000c15
 8000570:	08000c19 	.word	0x08000c19
 8000574:	08000c1d 	.word	0x08000c1d

08000578 <get_eit_entry>:
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	4b23      	ldr	r3, [pc, #140]	; (8000608 <get_eit_entry+0x90>)
 800057c:	b083      	sub	sp, #12
 800057e:	4604      	mov	r4, r0
 8000580:	1e8d      	subs	r5, r1, #2
 8000582:	b33b      	cbz	r3, 80005d4 <get_eit_entry+0x5c>
 8000584:	a901      	add	r1, sp, #4
 8000586:	4628      	mov	r0, r5
 8000588:	f3af 8000 	nop.w
 800058c:	b1e8      	cbz	r0, 80005ca <get_eit_entry+0x52>
 800058e:	9901      	ldr	r1, [sp, #4]
 8000590:	462a      	mov	r2, r5
 8000592:	f7ff ffaf 	bl	80004f4 <search_EIT_table>
 8000596:	4601      	mov	r1, r0
 8000598:	b1b8      	cbz	r0, 80005ca <get_eit_entry+0x52>
 800059a:	f7ff ffa1 	bl	80004e0 <selfrel_offset31>
 800059e:	684b      	ldr	r3, [r1, #4]
 80005a0:	64a0      	str	r0, [r4, #72]	; 0x48
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d02b      	beq.n	80005fe <get_eit_entry+0x86>
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	f101 0004 	add.w	r0, r1, #4
 80005ac:	db23      	blt.n	80005f6 <get_eit_entry+0x7e>
 80005ae:	f7ff ff97 	bl	80004e0 <selfrel_offset31>
 80005b2:	2300      	movs	r3, #0
 80005b4:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80005b8:	6803      	ldr	r3, [r0, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db10      	blt.n	80005e0 <get_eit_entry+0x68>
 80005be:	f7ff ff8f 	bl	80004e0 <selfrel_offset31>
 80005c2:	6120      	str	r0, [r4, #16]
 80005c4:	2000      	movs	r0, #0
 80005c6:	b003      	add	sp, #12
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	2300      	movs	r3, #0
 80005cc:	2009      	movs	r0, #9
 80005ce:	6123      	str	r3, [r4, #16]
 80005d0:	b003      	add	sp, #12
 80005d2:	bd30      	pop	{r4, r5, pc}
 80005d4:	490d      	ldr	r1, [pc, #52]	; (800060c <get_eit_entry+0x94>)
 80005d6:	480e      	ldr	r0, [pc, #56]	; (8000610 <get_eit_entry+0x98>)
 80005d8:	1a09      	subs	r1, r1, r0
 80005da:	10c9      	asrs	r1, r1, #3
 80005dc:	9101      	str	r1, [sp, #4]
 80005de:	e7d7      	b.n	8000590 <get_eit_entry+0x18>
 80005e0:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80005e4:	f7ff ffb4 	bl	8000550 <__gnu_unwind_get_pr_addr>
 80005e8:	2800      	cmp	r0, #0
 80005ea:	6120      	str	r0, [r4, #16]
 80005ec:	bf14      	ite	ne
 80005ee:	2000      	movne	r0, #0
 80005f0:	2009      	moveq	r0, #9
 80005f2:	b003      	add	sp, #12
 80005f4:	bd30      	pop	{r4, r5, pc}
 80005f6:	2301      	movs	r3, #1
 80005f8:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80005fc:	e7dc      	b.n	80005b8 <get_eit_entry+0x40>
 80005fe:	2300      	movs	r3, #0
 8000600:	6123      	str	r3, [r4, #16]
 8000602:	2005      	movs	r0, #5
 8000604:	e7df      	b.n	80005c6 <get_eit_entry+0x4e>
 8000606:	bf00      	nop
 8000608:	00000000 	.word	0x00000000
 800060c:	0800790c 	.word	0x0800790c
 8000610:	080077dc 	.word	0x080077dc

08000614 <restore_non_core_regs>:
 8000614:	6803      	ldr	r3, [r0, #0]
 8000616:	07da      	lsls	r2, r3, #31
 8000618:	b510      	push	{r4, lr}
 800061a:	4604      	mov	r4, r0
 800061c:	d406      	bmi.n	800062c <restore_non_core_regs+0x18>
 800061e:	079b      	lsls	r3, r3, #30
 8000620:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000624:	d509      	bpl.n	800063a <restore_non_core_regs+0x26>
 8000626:	f000 fc4b 	bl	8000ec0 <__gnu_Unwind_Restore_VFP_D>
 800062a:	6823      	ldr	r3, [r4, #0]
 800062c:	0759      	lsls	r1, r3, #29
 800062e:	d509      	bpl.n	8000644 <restore_non_core_regs+0x30>
 8000630:	071a      	lsls	r2, r3, #28
 8000632:	d50e      	bpl.n	8000652 <restore_non_core_regs+0x3e>
 8000634:	06db      	lsls	r3, r3, #27
 8000636:	d513      	bpl.n	8000660 <restore_non_core_regs+0x4c>
 8000638:	bd10      	pop	{r4, pc}
 800063a:	f000 fc39 	bl	8000eb0 <__gnu_Unwind_Restore_VFP>
 800063e:	6823      	ldr	r3, [r4, #0]
 8000640:	0759      	lsls	r1, r3, #29
 8000642:	d4f5      	bmi.n	8000630 <restore_non_core_regs+0x1c>
 8000644:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000648:	f000 fc42 	bl	8000ed0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800064c:	6823      	ldr	r3, [r4, #0]
 800064e:	071a      	lsls	r2, r3, #28
 8000650:	d4f0      	bmi.n	8000634 <restore_non_core_regs+0x20>
 8000652:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000656:	f000 fc43 	bl	8000ee0 <__gnu_Unwind_Restore_WMMXD>
 800065a:	6823      	ldr	r3, [r4, #0]
 800065c:	06db      	lsls	r3, r3, #27
 800065e:	d4eb      	bmi.n	8000638 <restore_non_core_regs+0x24>
 8000660:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000668:	f000 bc7e 	b.w	8000f68 <__gnu_Unwind_Restore_WMMXC>

0800066c <_Unwind_decode_typeinfo_ptr.isra.0>:
 800066c:	4603      	mov	r3, r0
 800066e:	6800      	ldr	r0, [r0, #0]
 8000670:	b100      	cbz	r0, 8000674 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 8000672:	4418      	add	r0, r3
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__gnu_unwind_24bit.isra.0>:
 8000678:	2009      	movs	r0, #9
 800067a:	4770      	bx	lr

0800067c <_Unwind_DebugHook>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <unwind_phase2>:
 8000680:	b570      	push	{r4, r5, r6, lr}
 8000682:	4604      	mov	r4, r0
 8000684:	460e      	mov	r6, r1
 8000686:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000688:	4620      	mov	r0, r4
 800068a:	f7ff ff75 	bl	8000578 <get_eit_entry>
 800068e:	4605      	mov	r5, r0
 8000690:	b988      	cbnz	r0, 80006b6 <unwind_phase2+0x36>
 8000692:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000694:	6163      	str	r3, [r4, #20]
 8000696:	4632      	mov	r2, r6
 8000698:	6923      	ldr	r3, [r4, #16]
 800069a:	4621      	mov	r1, r4
 800069c:	2001      	movs	r0, #1
 800069e:	4798      	blx	r3
 80006a0:	2808      	cmp	r0, #8
 80006a2:	d0f0      	beq.n	8000686 <unwind_phase2+0x6>
 80006a4:	2807      	cmp	r0, #7
 80006a6:	d106      	bne.n	80006b6 <unwind_phase2+0x36>
 80006a8:	4628      	mov	r0, r5
 80006aa:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80006ac:	f7ff ffe6 	bl	800067c <_Unwind_DebugHook>
 80006b0:	1d30      	adds	r0, r6, #4
 80006b2:	f000 fbf1 	bl	8000e98 <__restore_core_regs>
 80006b6:	f005 ff74 	bl	80065a2 <abort>
 80006ba:	bf00      	nop

080006bc <unwind_phase2_forced>:
 80006bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006c0:	1d0d      	adds	r5, r1, #4
 80006c2:	4606      	mov	r6, r0
 80006c4:	4614      	mov	r4, r2
 80006c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c8:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80006cc:	f10d 0c0c 	add.w	ip, sp, #12
 80006d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006e4:	ad02      	add	r5, sp, #8
 80006e6:	68f7      	ldr	r7, [r6, #12]
 80006e8:	f8d6 8018 	ldr.w	r8, [r6, #24]
 80006ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80006f0:	2300      	movs	r3, #0
 80006f2:	602b      	str	r3, [r5, #0]
 80006f4:	e021      	b.n	800073a <unwind_phase2_forced+0x7e>
 80006f6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80006f8:	6173      	str	r3, [r6, #20]
 80006fa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80006fe:	4629      	mov	r1, r5
 8000700:	a87a      	add	r0, sp, #488	; 0x1e8
 8000702:	f005 ff9f 	bl	8006644 <memcpy>
 8000706:	6933      	ldr	r3, [r6, #16]
 8000708:	aa7a      	add	r2, sp, #488	; 0x1e8
 800070a:	4631      	mov	r1, r6
 800070c:	4650      	mov	r0, sl
 800070e:	4798      	blx	r3
 8000710:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000712:	e9cd 5800 	strd	r5, r8, [sp]
 8000716:	4621      	mov	r1, r4
 8000718:	646b      	str	r3, [r5, #68]	; 0x44
 800071a:	4681      	mov	r9, r0
 800071c:	4633      	mov	r3, r6
 800071e:	4632      	mov	r2, r6
 8000720:	2001      	movs	r0, #1
 8000722:	47b8      	blx	r7
 8000724:	4604      	mov	r4, r0
 8000726:	b9e8      	cbnz	r0, 8000764 <unwind_phase2_forced+0xa8>
 8000728:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800072c:	a97a      	add	r1, sp, #488	; 0x1e8
 800072e:	4628      	mov	r0, r5
 8000730:	f005 ff88 	bl	8006644 <memcpy>
 8000734:	f1b9 0f08 	cmp.w	r9, #8
 8000738:	d11b      	bne.n	8000772 <unwind_phase2_forced+0xb6>
 800073a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800073c:	4630      	mov	r0, r6
 800073e:	f7ff ff1b 	bl	8000578 <get_eit_entry>
 8000742:	3409      	adds	r4, #9
 8000744:	fa5f fa84 	uxtb.w	sl, r4
 8000748:	4681      	mov	r9, r0
 800074a:	2800      	cmp	r0, #0
 800074c:	d0d3      	beq.n	80006f6 <unwind_phase2_forced+0x3a>
 800074e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000750:	f04a 0110 	orr.w	r1, sl, #16
 8000754:	e9cd 5800 	strd	r5, r8, [sp]
 8000758:	4632      	mov	r2, r6
 800075a:	646b      	str	r3, [r5, #68]	; 0x44
 800075c:	2001      	movs	r0, #1
 800075e:	4633      	mov	r3, r6
 8000760:	47b8      	blx	r7
 8000762:	b108      	cbz	r0, 8000768 <unwind_phase2_forced+0xac>
 8000764:	f04f 0909 	mov.w	r9, #9
 8000768:	4648      	mov	r0, r9
 800076a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800076e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000772:	f1b9 0f07 	cmp.w	r9, #7
 8000776:	d1f5      	bne.n	8000764 <unwind_phase2_forced+0xa8>
 8000778:	4620      	mov	r0, r4
 800077a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800077c:	f7ff ff7e 	bl	800067c <_Unwind_DebugHook>
 8000780:	a803      	add	r0, sp, #12
 8000782:	f000 fb89 	bl	8000e98 <__restore_core_regs>
 8000786:	bf00      	nop

08000788 <_Unwind_GetCFA>:
 8000788:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800078a:	4770      	bx	lr

0800078c <__gnu_Unwind_RaiseException>:
 800078c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000790:	640b      	str	r3, [r1, #64]	; 0x40
 8000792:	1d0e      	adds	r6, r1, #4
 8000794:	460f      	mov	r7, r1
 8000796:	4605      	mov	r5, r0
 8000798:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800079a:	b0f9      	sub	sp, #484	; 0x1e4
 800079c:	ac01      	add	r4, sp, #4
 800079e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007ac:	f04f 36ff 	mov.w	r6, #4294967295
 80007b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80007b4:	9600      	str	r6, [sp, #0]
 80007b6:	e006      	b.n	80007c6 <__gnu_Unwind_RaiseException+0x3a>
 80007b8:	692b      	ldr	r3, [r5, #16]
 80007ba:	466a      	mov	r2, sp
 80007bc:	4629      	mov	r1, r5
 80007be:	4798      	blx	r3
 80007c0:	2808      	cmp	r0, #8
 80007c2:	4604      	mov	r4, r0
 80007c4:	d108      	bne.n	80007d8 <__gnu_Unwind_RaiseException+0x4c>
 80007c6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80007c8:	4628      	mov	r0, r5
 80007ca:	f7ff fed5 	bl	8000578 <get_eit_entry>
 80007ce:	2800      	cmp	r0, #0
 80007d0:	d0f2      	beq.n	80007b8 <__gnu_Unwind_RaiseException+0x2c>
 80007d2:	2009      	movs	r0, #9
 80007d4:	b079      	add	sp, #484	; 0x1e4
 80007d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d8:	4668      	mov	r0, sp
 80007da:	f7ff ff1b 	bl	8000614 <restore_non_core_regs>
 80007de:	2c06      	cmp	r4, #6
 80007e0:	d1f7      	bne.n	80007d2 <__gnu_Unwind_RaiseException+0x46>
 80007e2:	4639      	mov	r1, r7
 80007e4:	4628      	mov	r0, r5
 80007e6:	f7ff ff4b 	bl	8000680 <unwind_phase2>
 80007ea:	bf00      	nop

080007ec <__gnu_Unwind_ForcedUnwind>:
 80007ec:	b430      	push	{r4, r5}
 80007ee:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80007f0:	60c1      	str	r1, [r0, #12]
 80007f2:	6182      	str	r2, [r0, #24]
 80007f4:	4619      	mov	r1, r3
 80007f6:	641d      	str	r5, [r3, #64]	; 0x40
 80007f8:	2200      	movs	r2, #0
 80007fa:	bc30      	pop	{r4, r5}
 80007fc:	e75e      	b.n	80006bc <unwind_phase2_forced>
 80007fe:	bf00      	nop

08000800 <__gnu_Unwind_Resume>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	68c6      	ldr	r6, [r0, #12]
 8000804:	6943      	ldr	r3, [r0, #20]
 8000806:	640b      	str	r3, [r1, #64]	; 0x40
 8000808:	b9ae      	cbnz	r6, 8000836 <__gnu_Unwind_Resume+0x36>
 800080a:	6903      	ldr	r3, [r0, #16]
 800080c:	460a      	mov	r2, r1
 800080e:	4604      	mov	r4, r0
 8000810:	460d      	mov	r5, r1
 8000812:	4601      	mov	r1, r0
 8000814:	2002      	movs	r0, #2
 8000816:	4798      	blx	r3
 8000818:	2807      	cmp	r0, #7
 800081a:	d005      	beq.n	8000828 <__gnu_Unwind_Resume+0x28>
 800081c:	2808      	cmp	r0, #8
 800081e:	d10f      	bne.n	8000840 <__gnu_Unwind_Resume+0x40>
 8000820:	4629      	mov	r1, r5
 8000822:	4620      	mov	r0, r4
 8000824:	f7ff ff2c 	bl	8000680 <unwind_phase2>
 8000828:	4630      	mov	r0, r6
 800082a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800082c:	f7ff ff26 	bl	800067c <_Unwind_DebugHook>
 8000830:	1d28      	adds	r0, r5, #4
 8000832:	f000 fb31 	bl	8000e98 <__restore_core_regs>
 8000836:	2201      	movs	r2, #1
 8000838:	f7ff ff40 	bl	80006bc <unwind_phase2_forced>
 800083c:	f005 feb1 	bl	80065a2 <abort>
 8000840:	f005 feaf 	bl	80065a2 <abort>

08000844 <__gnu_Unwind_Resume_or_Rethrow>:
 8000844:	68c2      	ldr	r2, [r0, #12]
 8000846:	b11a      	cbz	r2, 8000850 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000848:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800084a:	640a      	str	r2, [r1, #64]	; 0x40
 800084c:	2200      	movs	r2, #0
 800084e:	e735      	b.n	80006bc <unwind_phase2_forced>
 8000850:	e79c      	b.n	800078c <__gnu_Unwind_RaiseException>
 8000852:	bf00      	nop

08000854 <_Unwind_Complete>:
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop

08000858 <_Unwind_DeleteException>:
 8000858:	6883      	ldr	r3, [r0, #8]
 800085a:	4601      	mov	r1, r0
 800085c:	b10b      	cbz	r3, 8000862 <_Unwind_DeleteException+0xa>
 800085e:	2001      	movs	r0, #1
 8000860:	4718      	bx	r3
 8000862:	4770      	bx	lr

08000864 <_Unwind_VRS_Get>:
 8000864:	2901      	cmp	r1, #1
 8000866:	d012      	beq.n	800088e <_Unwind_VRS_Get+0x2a>
 8000868:	d809      	bhi.n	800087e <_Unwind_VRS_Get+0x1a>
 800086a:	b973      	cbnz	r3, 800088a <_Unwind_VRS_Get+0x26>
 800086c:	2a0f      	cmp	r2, #15
 800086e:	d80c      	bhi.n	800088a <_Unwind_VRS_Get+0x26>
 8000870:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000874:	4618      	mov	r0, r3
 8000876:	6853      	ldr	r3, [r2, #4]
 8000878:	9a00      	ldr	r2, [sp, #0]
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	4770      	bx	lr
 800087e:	3903      	subs	r1, #3
 8000880:	2901      	cmp	r1, #1
 8000882:	bf94      	ite	ls
 8000884:	2001      	movls	r0, #1
 8000886:	2002      	movhi	r0, #2
 8000888:	4770      	bx	lr
 800088a:	2002      	movs	r0, #2
 800088c:	4770      	bx	lr
 800088e:	4608      	mov	r0, r1
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <_Unwind_GetGR>:
 8000894:	b510      	push	{r4, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	2300      	movs	r3, #0
 800089a:	ac03      	add	r4, sp, #12
 800089c:	460a      	mov	r2, r1
 800089e:	9400      	str	r4, [sp, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	f7ff ffdf 	bl	8000864 <_Unwind_VRS_Get>
 80008a6:	9803      	ldr	r0, [sp, #12]
 80008a8:	b004      	add	sp, #16
 80008aa:	bd10      	pop	{r4, pc}

080008ac <_Unwind_VRS_Set>:
 80008ac:	2901      	cmp	r1, #1
 80008ae:	d012      	beq.n	80008d6 <_Unwind_VRS_Set+0x2a>
 80008b0:	d809      	bhi.n	80008c6 <_Unwind_VRS_Set+0x1a>
 80008b2:	b973      	cbnz	r3, 80008d2 <_Unwind_VRS_Set+0x26>
 80008b4:	2a0f      	cmp	r2, #15
 80008b6:	d80c      	bhi.n	80008d2 <_Unwind_VRS_Set+0x26>
 80008b8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80008bc:	9a00      	ldr	r2, [sp, #0]
 80008be:	6812      	ldr	r2, [r2, #0]
 80008c0:	6042      	str	r2, [r0, #4]
 80008c2:	4618      	mov	r0, r3
 80008c4:	4770      	bx	lr
 80008c6:	3903      	subs	r1, #3
 80008c8:	2901      	cmp	r1, #1
 80008ca:	bf94      	ite	ls
 80008cc:	2001      	movls	r0, #1
 80008ce:	2002      	movhi	r0, #2
 80008d0:	4770      	bx	lr
 80008d2:	2002      	movs	r0, #2
 80008d4:	4770      	bx	lr
 80008d6:	4608      	mov	r0, r1
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <_Unwind_SetGR>:
 80008dc:	b510      	push	{r4, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	2300      	movs	r3, #0
 80008e2:	ac03      	add	r4, sp, #12
 80008e4:	9203      	str	r2, [sp, #12]
 80008e6:	9400      	str	r4, [sp, #0]
 80008e8:	460a      	mov	r2, r1
 80008ea:	4619      	mov	r1, r3
 80008ec:	f7ff ffde 	bl	80008ac <_Unwind_VRS_Set>
 80008f0:	b004      	add	sp, #16
 80008f2:	bd10      	pop	{r4, pc}

080008f4 <__gnu_Unwind_Backtrace>:
 80008f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80008f8:	6413      	str	r3, [r2, #64]	; 0x40
 80008fa:	1d15      	adds	r5, r2, #4
 80008fc:	468c      	mov	ip, r1
 80008fe:	4606      	mov	r6, r0
 8000900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000902:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000906:	ac17      	add	r4, sp, #92	; 0x5c
 8000908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800090a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800090c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800090e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000910:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000912:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000916:	f04f 37ff 	mov.w	r7, #4294967295
 800091a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800091e:	4665      	mov	r5, ip
 8000920:	9716      	str	r7, [sp, #88]	; 0x58
 8000922:	e010      	b.n	8000946 <__gnu_Unwind_Backtrace+0x52>
 8000924:	f7ff ffda 	bl	80008dc <_Unwind_SetGR>
 8000928:	4629      	mov	r1, r5
 800092a:	a816      	add	r0, sp, #88	; 0x58
 800092c:	47b0      	blx	r6
 800092e:	4603      	mov	r3, r0
 8000930:	aa16      	add	r2, sp, #88	; 0x58
 8000932:	4669      	mov	r1, sp
 8000934:	2008      	movs	r0, #8
 8000936:	b983      	cbnz	r3, 800095a <__gnu_Unwind_Backtrace+0x66>
 8000938:	9b04      	ldr	r3, [sp, #16]
 800093a:	4798      	blx	r3
 800093c:	2805      	cmp	r0, #5
 800093e:	4604      	mov	r4, r0
 8000940:	d00c      	beq.n	800095c <__gnu_Unwind_Backtrace+0x68>
 8000942:	2809      	cmp	r0, #9
 8000944:	d009      	beq.n	800095a <__gnu_Unwind_Backtrace+0x66>
 8000946:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000948:	4668      	mov	r0, sp
 800094a:	f7ff fe15 	bl	8000578 <get_eit_entry>
 800094e:	4603      	mov	r3, r0
 8000950:	466a      	mov	r2, sp
 8000952:	210c      	movs	r1, #12
 8000954:	a816      	add	r0, sp, #88	; 0x58
 8000956:	2b00      	cmp	r3, #0
 8000958:	d0e4      	beq.n	8000924 <__gnu_Unwind_Backtrace+0x30>
 800095a:	2409      	movs	r4, #9
 800095c:	a816      	add	r0, sp, #88	; 0x58
 800095e:	f7ff fe59 	bl	8000614 <restore_non_core_regs>
 8000962:	4620      	mov	r0, r4
 8000964:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800096a:	bf00      	nop

0800096c <__gnu_unwind_pr_common>:
 800096c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000970:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000972:	b089      	sub	sp, #36	; 0x24
 8000974:	460d      	mov	r5, r1
 8000976:	f854 1b04 	ldr.w	r1, [r4], #4
 800097a:	9406      	str	r4, [sp, #24]
 800097c:	4617      	mov	r7, r2
 800097e:	f000 0803 	and.w	r8, r0, #3
 8000982:	461e      	mov	r6, r3
 8000984:	2b00      	cmp	r3, #0
 8000986:	d079      	beq.n	8000a7c <__gnu_unwind_pr_common+0x110>
 8000988:	0c0b      	lsrs	r3, r1, #16
 800098a:	b2da      	uxtb	r2, r3
 800098c:	0409      	lsls	r1, r1, #16
 800098e:	f88d 301d 	strb.w	r3, [sp, #29]
 8000992:	2302      	movs	r3, #2
 8000994:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000998:	9105      	str	r1, [sp, #20]
 800099a:	f88d 301c 	strb.w	r3, [sp, #28]
 800099e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80009a0:	f1b8 0f02 	cmp.w	r8, #2
 80009a4:	bf08      	it	eq
 80009a6:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80009a8:	f013 0301 	ands.w	r3, r3, #1
 80009ac:	d00c      	beq.n	80009c8 <__gnu_unwind_pr_common+0x5c>
 80009ae:	4638      	mov	r0, r7
 80009b0:	a905      	add	r1, sp, #20
 80009b2:	f000 fb73 	bl	800109c <__gnu_unwind_execute>
 80009b6:	b918      	cbnz	r0, 80009c0 <__gnu_unwind_pr_common+0x54>
 80009b8:	2008      	movs	r0, #8
 80009ba:	b009      	add	sp, #36	; 0x24
 80009bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009c0:	2009      	movs	r0, #9
 80009c2:	b009      	add	sp, #36	; 0x24
 80009c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009c8:	f8d4 a000 	ldr.w	sl, [r4]
 80009cc:	f1ba 0f00 	cmp.w	sl, #0
 80009d0:	d0ed      	beq.n	80009ae <__gnu_unwind_pr_common+0x42>
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	f000 0308 	and.w	r3, r0, #8
 80009d8:	9302      	str	r3, [sp, #8]
 80009da:	2e02      	cmp	r6, #2
 80009dc:	d04a      	beq.n	8000a74 <__gnu_unwind_pr_common+0x108>
 80009de:	f8b4 a000 	ldrh.w	sl, [r4]
 80009e2:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80009e6:	3404      	adds	r4, #4
 80009e8:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80009ea:	f029 0b01 	bic.w	fp, r9, #1
 80009ee:	210f      	movs	r1, #15
 80009f0:	4638      	mov	r0, r7
 80009f2:	4493      	add	fp, r2
 80009f4:	f7ff ff4e 	bl	8000894 <_Unwind_GetGR>
 80009f8:	4583      	cmp	fp, r0
 80009fa:	d839      	bhi.n	8000a70 <__gnu_unwind_pr_common+0x104>
 80009fc:	f02a 0201 	bic.w	r2, sl, #1
 8000a00:	445a      	add	r2, fp
 8000a02:	4282      	cmp	r2, r0
 8000a04:	bf94      	ite	ls
 8000a06:	2000      	movls	r0, #0
 8000a08:	2001      	movhi	r0, #1
 8000a0a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	f00a 0a01 	and.w	sl, sl, #1
 8000a16:	ea43 030a 	orr.w	r3, r3, sl
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d049      	beq.n	8000ab2 <__gnu_unwind_pr_common+0x146>
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d032      	beq.n	8000a88 <__gnu_unwind_pr_common+0x11c>
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1cc      	bne.n	80009c0 <__gnu_unwind_pr_common+0x54>
 8000a26:	f1b8 0f00 	cmp.w	r8, #0
 8000a2a:	d002      	beq.n	8000a32 <__gnu_unwind_pr_common+0xc6>
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	f040 80cd 	bne.w	8000bcc <__gnu_unwind_pr_common+0x260>
 8000a32:	3404      	adds	r4, #4
 8000a34:	f8d4 a000 	ldr.w	sl, [r4]
 8000a38:	f1ba 0f00 	cmp.w	sl, #0
 8000a3c:	d1cd      	bne.n	80009da <__gnu_unwind_pr_common+0x6e>
 8000a3e:	a905      	add	r1, sp, #20
 8000a40:	4638      	mov	r0, r7
 8000a42:	f000 fb2b 	bl	800109c <__gnu_unwind_execute>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	d1ba      	bne.n	80009c0 <__gnu_unwind_pr_common+0x54>
 8000a4a:	9b01      	ldr	r3, [sp, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d0b3      	beq.n	80009b8 <__gnu_unwind_pr_common+0x4c>
 8000a50:	210f      	movs	r1, #15
 8000a52:	4638      	mov	r0, r7
 8000a54:	f7ff ff1e 	bl	8000894 <_Unwind_GetGR>
 8000a58:	210e      	movs	r1, #14
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	4638      	mov	r0, r7
 8000a5e:	f7ff ff3d 	bl	80008dc <_Unwind_SetGR>
 8000a62:	4638      	mov	r0, r7
 8000a64:	4a6a      	ldr	r2, [pc, #424]	; (8000c10 <__gnu_unwind_pr_common+0x2a4>)
 8000a66:	210f      	movs	r1, #15
 8000a68:	f7ff ff38 	bl	80008dc <_Unwind_SetGR>
 8000a6c:	2007      	movs	r0, #7
 8000a6e:	e7a8      	b.n	80009c2 <__gnu_unwind_pr_common+0x56>
 8000a70:	2000      	movs	r0, #0
 8000a72:	e7ca      	b.n	8000a0a <__gnu_unwind_pr_common+0x9e>
 8000a74:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000a78:	3408      	adds	r4, #8
 8000a7a:	e7b5      	b.n	80009e8 <__gnu_unwind_pr_common+0x7c>
 8000a7c:	0209      	lsls	r1, r1, #8
 8000a7e:	2303      	movs	r3, #3
 8000a80:	9105      	str	r1, [sp, #20]
 8000a82:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000a86:	e78a      	b.n	800099e <__gnu_unwind_pr_common+0x32>
 8000a88:	6823      	ldr	r3, [r4, #0]
 8000a8a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8000a8e:	f1b8 0f00 	cmp.w	r8, #0
 8000a92:	d145      	bne.n	8000b20 <__gnu_unwind_pr_common+0x1b4>
 8000a94:	b128      	cbz	r0, 8000aa2 <__gnu_unwind_pr_common+0x136>
 8000a96:	9a02      	ldr	r2, [sp, #8]
 8000a98:	2a00      	cmp	r2, #0
 8000a9a:	d05c      	beq.n	8000b56 <__gnu_unwind_pr_common+0x1ea>
 8000a9c:	f1bb 0f00 	cmp.w	fp, #0
 8000aa0:	d074      	beq.n	8000b8c <__gnu_unwind_pr_common+0x220>
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	da00      	bge.n	8000aa8 <__gnu_unwind_pr_common+0x13c>
 8000aa6:	3404      	adds	r4, #4
 8000aa8:	f10b 0b01 	add.w	fp, fp, #1
 8000aac:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000ab0:	e7c0      	b.n	8000a34 <__gnu_unwind_pr_common+0xc8>
 8000ab2:	f1b8 0f00 	cmp.w	r8, #0
 8000ab6:	d119      	bne.n	8000aec <__gnu_unwind_pr_common+0x180>
 8000ab8:	b1b0      	cbz	r0, 8000ae8 <__gnu_unwind_pr_common+0x17c>
 8000aba:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000abe:	1c99      	adds	r1, r3, #2
 8000ac0:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000ac4:	f43f af7c 	beq.w	80009c0 <__gnu_unwind_pr_common+0x54>
 8000ac8:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000acc:	3301      	adds	r3, #1
 8000ace:	9104      	str	r1, [sp, #16]
 8000ad0:	f000 8090 	beq.w	8000bf4 <__gnu_unwind_pr_common+0x288>
 8000ad4:	1d20      	adds	r0, r4, #4
 8000ad6:	f7ff fdc9 	bl	800066c <_Unwind_decode_typeinfo_ptr.isra.0>
 8000ada:	ab04      	add	r3, sp, #16
 8000adc:	4601      	mov	r1, r0
 8000ade:	4628      	mov	r0, r5
 8000ae0:	f004 fd8e 	bl	8005600 <__cxa_type_match>
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	d15b      	bne.n	8000ba0 <__gnu_unwind_pr_common+0x234>
 8000ae8:	3408      	adds	r4, #8
 8000aea:	e7a3      	b.n	8000a34 <__gnu_unwind_pr_common+0xc8>
 8000aec:	210d      	movs	r1, #13
 8000aee:	4638      	mov	r0, r7
 8000af0:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000af4:	f7ff fece 	bl	8000894 <_Unwind_GetGR>
 8000af8:	4581      	cmp	r9, r0
 8000afa:	d1f5      	bne.n	8000ae8 <__gnu_unwind_pr_common+0x17c>
 8000afc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000afe:	429c      	cmp	r4, r3
 8000b00:	d1f2      	bne.n	8000ae8 <__gnu_unwind_pr_common+0x17c>
 8000b02:	4620      	mov	r0, r4
 8000b04:	f7ff fcec 	bl	80004e0 <selfrel_offset31>
 8000b08:	210f      	movs	r1, #15
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	4638      	mov	r0, r7
 8000b0e:	f7ff fee5 	bl	80008dc <_Unwind_SetGR>
 8000b12:	4638      	mov	r0, r7
 8000b14:	462a      	mov	r2, r5
 8000b16:	2100      	movs	r1, #0
 8000b18:	f7ff fee0 	bl	80008dc <_Unwind_SetGR>
 8000b1c:	2007      	movs	r0, #7
 8000b1e:	e750      	b.n	80009c2 <__gnu_unwind_pr_common+0x56>
 8000b20:	210d      	movs	r1, #13
 8000b22:	4638      	mov	r0, r7
 8000b24:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000b28:	f7ff feb4 	bl	8000894 <_Unwind_GetGR>
 8000b2c:	4581      	cmp	r9, r0
 8000b2e:	d001      	beq.n	8000b34 <__gnu_unwind_pr_common+0x1c8>
 8000b30:	6823      	ldr	r3, [r4, #0]
 8000b32:	e7b6      	b.n	8000aa2 <__gnu_unwind_pr_common+0x136>
 8000b34:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b36:	429c      	cmp	r4, r3
 8000b38:	d1fa      	bne.n	8000b30 <__gnu_unwind_pr_common+0x1c4>
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
 8000b42:	18a3      	adds	r3, r4, r2
 8000b44:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000b48:	636b      	str	r3, [r5, #52]	; 0x34
 8000b4a:	6823      	ldr	r3, [r4, #0]
 8000b4c:	428b      	cmp	r3, r1
 8000b4e:	db59      	blt.n	8000c04 <__gnu_unwind_pr_common+0x298>
 8000b50:	2301      	movs	r3, #1
 8000b52:	9301      	str	r3, [sp, #4]
 8000b54:	e7a8      	b.n	8000aa8 <__gnu_unwind_pr_common+0x13c>
 8000b56:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000b5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b5e:	f104 0a04 	add.w	sl, r4, #4
 8000b62:	46b0      	mov	r8, r6
 8000b64:	4691      	mov	r9, r2
 8000b66:	461e      	mov	r6, r3
 8000b68:	e00d      	b.n	8000b86 <__gnu_unwind_pr_common+0x21a>
 8000b6a:	9604      	str	r6, [sp, #16]
 8000b6c:	f7ff fd7e 	bl	800066c <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b70:	ab04      	add	r3, sp, #16
 8000b72:	4601      	mov	r1, r0
 8000b74:	2200      	movs	r2, #0
 8000b76:	4628      	mov	r0, r5
 8000b78:	f004 fd42 	bl	8005600 <__cxa_type_match>
 8000b7c:	f109 0901 	add.w	r9, r9, #1
 8000b80:	f10a 0a04 	add.w	sl, sl, #4
 8000b84:	b9e8      	cbnz	r0, 8000bc2 <__gnu_unwind_pr_common+0x256>
 8000b86:	45d9      	cmp	r9, fp
 8000b88:	4650      	mov	r0, sl
 8000b8a:	d1ee      	bne.n	8000b6a <__gnu_unwind_pr_common+0x1fe>
 8000b8c:	4638      	mov	r0, r7
 8000b8e:	210d      	movs	r1, #13
 8000b90:	f7ff fe80 	bl	8000894 <_Unwind_GetGR>
 8000b94:	9b04      	ldr	r3, [sp, #16]
 8000b96:	6228      	str	r0, [r5, #32]
 8000b98:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8000b9c:	2006      	movs	r0, #6
 8000b9e:	e710      	b.n	80009c2 <__gnu_unwind_pr_common+0x56>
 8000ba0:	4681      	mov	r9, r0
 8000ba2:	210d      	movs	r1, #13
 8000ba4:	4638      	mov	r0, r7
 8000ba6:	f7ff fe75 	bl	8000894 <_Unwind_GetGR>
 8000baa:	f1b9 0f02 	cmp.w	r9, #2
 8000bae:	6228      	str	r0, [r5, #32]
 8000bb0:	d125      	bne.n	8000bfe <__gnu_unwind_pr_common+0x292>
 8000bb2:	462b      	mov	r3, r5
 8000bb4:	9a04      	ldr	r2, [sp, #16]
 8000bb6:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000bba:	626b      	str	r3, [r5, #36]	; 0x24
 8000bbc:	62ac      	str	r4, [r5, #40]	; 0x28
 8000bbe:	2006      	movs	r0, #6
 8000bc0:	e6ff      	b.n	80009c2 <__gnu_unwind_pr_common+0x56>
 8000bc2:	4646      	mov	r6, r8
 8000bc4:	6823      	ldr	r3, [r4, #0]
 8000bc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000bca:	e76a      	b.n	8000aa2 <__gnu_unwind_pr_common+0x136>
 8000bcc:	4620      	mov	r0, r4
 8000bce:	f7ff fc87 	bl	80004e0 <selfrel_offset31>
 8000bd2:	3404      	adds	r4, #4
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	63ac      	str	r4, [r5, #56]	; 0x38
 8000bd8:	4628      	mov	r0, r5
 8000bda:	4614      	mov	r4, r2
 8000bdc:	f004 fd6e 	bl	80056bc <__cxa_begin_cleanup>
 8000be0:	2800      	cmp	r0, #0
 8000be2:	f43f aeed 	beq.w	80009c0 <__gnu_unwind_pr_common+0x54>
 8000be6:	4638      	mov	r0, r7
 8000be8:	4622      	mov	r2, r4
 8000bea:	210f      	movs	r1, #15
 8000bec:	f7ff fe76 	bl	80008dc <_Unwind_SetGR>
 8000bf0:	2007      	movs	r0, #7
 8000bf2:	e6e6      	b.n	80009c2 <__gnu_unwind_pr_common+0x56>
 8000bf4:	4638      	mov	r0, r7
 8000bf6:	210d      	movs	r1, #13
 8000bf8:	f7ff fe4c 	bl	8000894 <_Unwind_GetGR>
 8000bfc:	6228      	str	r0, [r5, #32]
 8000bfe:	9b04      	ldr	r3, [sp, #16]
 8000c00:	626b      	str	r3, [r5, #36]	; 0x24
 8000c02:	e7db      	b.n	8000bbc <__gnu_unwind_pr_common+0x250>
 8000c04:	f10b 0001 	add.w	r0, fp, #1
 8000c08:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c0c:	e77a      	b.n	8000b04 <__gnu_unwind_pr_common+0x198>
 8000c0e:	bf00      	nop
 8000c10:	080063e5 	.word	0x080063e5

08000c14 <__aeabi_unwind_cpp_pr0>:
 8000c14:	2300      	movs	r3, #0
 8000c16:	e6a9      	b.n	800096c <__gnu_unwind_pr_common>

08000c18 <__aeabi_unwind_cpp_pr1>:
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e6a7      	b.n	800096c <__gnu_unwind_pr_common>

08000c1c <__aeabi_unwind_cpp_pr2>:
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	e6a5      	b.n	800096c <__gnu_unwind_pr_common>

08000c20 <_Unwind_VRS_Pop>:
 8000c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c24:	4606      	mov	r6, r0
 8000c26:	b0c3      	sub	sp, #268	; 0x10c
 8000c28:	4615      	mov	r5, r2
 8000c2a:	461c      	mov	r4, r3
 8000c2c:	2904      	cmp	r1, #4
 8000c2e:	f200 80b9 	bhi.w	8000da4 <_Unwind_VRS_Pop+0x184>
 8000c32:	e8df f001 	tbb	[pc, r1]
 8000c36:	539a      	.short	0x539a
 8000c38:	29b7      	.short	0x29b7
 8000c3a:	03          	.byte	0x03
 8000c3b:	00          	.byte	0x00
 8000c3c:	2c00      	cmp	r4, #0
 8000c3e:	f040 80b1 	bne.w	8000da4 <_Unwind_VRS_Pop+0x184>
 8000c42:	2a10      	cmp	r2, #16
 8000c44:	f200 80ae 	bhi.w	8000da4 <_Unwind_VRS_Pop+0x184>
 8000c48:	6803      	ldr	r3, [r0, #0]
 8000c4a:	06d8      	lsls	r0, r3, #27
 8000c4c:	f100 80f3 	bmi.w	8000e36 <_Unwind_VRS_Pop+0x216>
 8000c50:	af20      	add	r7, sp, #128	; 0x80
 8000c52:	4638      	mov	r0, r7
 8000c54:	f000 f992 	bl	8000f7c <__gnu_Unwind_Save_WMMXC>
 8000c58:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	2401      	movs	r4, #1
 8000c5e:	fa04 f203 	lsl.w	r2, r4, r3
 8000c62:	422a      	tst	r2, r5
 8000c64:	4601      	mov	r1, r0
 8000c66:	d004      	beq.n	8000c72 <_Unwind_VRS_Pop+0x52>
 8000c68:	f851 2b04 	ldr.w	r2, [r1], #4
 8000c6c:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8000c70:	4608      	mov	r0, r1
 8000c72:	3301      	adds	r3, #1
 8000c74:	2b04      	cmp	r3, #4
 8000c76:	d1f2      	bne.n	8000c5e <_Unwind_VRS_Pop+0x3e>
 8000c78:	63b0      	str	r0, [r6, #56]	; 0x38
 8000c7a:	4638      	mov	r0, r7
 8000c7c:	f000 f974 	bl	8000f68 <__gnu_Unwind_Restore_WMMXC>
 8000c80:	2000      	movs	r0, #0
 8000c82:	b043      	add	sp, #268	; 0x10c
 8000c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c88:	2c03      	cmp	r4, #3
 8000c8a:	f040 808b 	bne.w	8000da4 <_Unwind_VRS_Pop+0x184>
 8000c8e:	b294      	uxth	r4, r2
 8000c90:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000c94:	2b10      	cmp	r3, #16
 8000c96:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000c9a:	f200 8083 	bhi.w	8000da4 <_Unwind_VRS_Pop+0x184>
 8000c9e:	6803      	ldr	r3, [r0, #0]
 8000ca0:	071f      	lsls	r7, r3, #28
 8000ca2:	f100 80d0 	bmi.w	8000e46 <_Unwind_VRS_Pop+0x226>
 8000ca6:	af20      	add	r7, sp, #128	; 0x80
 8000ca8:	4638      	mov	r0, r7
 8000caa:	f000 f93b 	bl	8000f24 <__gnu_Unwind_Save_WMMXD>
 8000cae:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000cb2:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 8000cb4:	b154      	cbz	r4, 8000ccc <_Unwind_VRS_Pop+0xac>
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	1ae8      	subs	r0, r5, r3
 8000cba:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000cbe:	00e4      	lsls	r4, r4, #3
 8000cc0:	581a      	ldr	r2, [r3, r0]
 8000cc2:	f843 2b04 	str.w	r2, [r3], #4
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d1fa      	bne.n	8000cc0 <_Unwind_VRS_Pop+0xa0>
 8000cca:	4425      	add	r5, r4
 8000ccc:	4638      	mov	r0, r7
 8000cce:	63b5      	str	r5, [r6, #56]	; 0x38
 8000cd0:	f000 f906 	bl	8000ee0 <__gnu_Unwind_Restore_WMMXD>
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	b043      	add	sp, #268	; 0x10c
 8000cd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cdc:	2c01      	cmp	r4, #1
 8000cde:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000ce2:	b295      	uxth	r5, r2
 8000ce4:	d05a      	beq.n	8000d9c <_Unwind_VRS_Pop+0x17c>
 8000ce6:	2c05      	cmp	r4, #5
 8000ce8:	d15c      	bne.n	8000da4 <_Unwind_VRS_Pop+0x184>
 8000cea:	eb08 0905 	add.w	r9, r8, r5
 8000cee:	f1b9 0f20 	cmp.w	r9, #32
 8000cf2:	d857      	bhi.n	8000da4 <_Unwind_VRS_Pop+0x184>
 8000cf4:	f1b8 0f0f 	cmp.w	r8, #15
 8000cf8:	d977      	bls.n	8000dea <_Unwind_VRS_Pop+0x1ca>
 8000cfa:	46a9      	mov	r9, r5
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	f040 8088 	bne.w	8000e12 <_Unwind_VRS_Pop+0x1f2>
 8000d02:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000d04:	b36d      	cbz	r5, 8000d62 <_Unwind_VRS_Pop+0x142>
 8000d06:	af20      	add	r7, sp, #128	; 0x80
 8000d08:	f04f 0900 	mov.w	r9, #0
 8000d0c:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000d10:	3f04      	subs	r7, #4
 8000d12:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000d16:	f853 1b04 	ldr.w	r1, [r3], #4
 8000d1a:	f847 1f04 	str.w	r1, [r7, #4]!
 8000d1e:	42ab      	cmp	r3, r5
 8000d20:	d1f9      	bne.n	8000d16 <_Unwind_VRS_Pop+0xf6>
 8000d22:	f1b9 0f00 	cmp.w	r9, #0
 8000d26:	d00f      	beq.n	8000d48 <_Unwind_VRS_Pop+0x128>
 8000d28:	466f      	mov	r7, sp
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	2910      	cmp	r1, #16
 8000d2e:	bf38      	it	cc
 8000d30:	2110      	movcc	r1, #16
 8000d32:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000d36:	3984      	subs	r1, #132	; 0x84
 8000d38:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000d3c:	f853 0b04 	ldr.w	r0, [r3], #4
 8000d40:	f841 0f04 	str.w	r0, [r1, #4]!
 8000d44:	42ab      	cmp	r3, r5
 8000d46:	d1f9      	bne.n	8000d3c <_Unwind_VRS_Pop+0x11c>
 8000d48:	2c01      	cmp	r4, #1
 8000d4a:	f000 8084 	beq.w	8000e56 <_Unwind_VRS_Pop+0x236>
 8000d4e:	f1b8 0f0f 	cmp.w	r8, #15
 8000d52:	63b5      	str	r5, [r6, #56]	; 0x38
 8000d54:	d945      	bls.n	8000de2 <_Unwind_VRS_Pop+0x1c2>
 8000d56:	f1b9 0f00 	cmp.w	r9, #0
 8000d5a:	d002      	beq.n	8000d62 <_Unwind_VRS_Pop+0x142>
 8000d5c:	4668      	mov	r0, sp
 8000d5e:	f000 f8b7 	bl	8000ed0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000d62:	2000      	movs	r0, #0
 8000d64:	b043      	add	sp, #268	; 0x10c
 8000d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d6a:	b9dc      	cbnz	r4, 8000da4 <_Unwind_VRS_Pop+0x184>
 8000d6c:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8000d6e:	4623      	mov	r3, r4
 8000d70:	2001      	movs	r0, #1
 8000d72:	b294      	uxth	r4, r2
 8000d74:	f106 0c04 	add.w	ip, r6, #4
 8000d78:	fa00 f203 	lsl.w	r2, r0, r3
 8000d7c:	4222      	tst	r2, r4
 8000d7e:	4639      	mov	r1, r7
 8000d80:	d004      	beq.n	8000d8c <_Unwind_VRS_Pop+0x16c>
 8000d82:	f851 2b04 	ldr.w	r2, [r1], #4
 8000d86:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
 8000d8a:	460f      	mov	r7, r1
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	2b10      	cmp	r3, #16
 8000d90:	d1f2      	bne.n	8000d78 <_Unwind_VRS_Pop+0x158>
 8000d92:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000d96:	d1e4      	bne.n	8000d62 <_Unwind_VRS_Pop+0x142>
 8000d98:	63b7      	str	r7, [r6, #56]	; 0x38
 8000d9a:	e004      	b.n	8000da6 <_Unwind_VRS_Pop+0x186>
 8000d9c:	eb08 0305 	add.w	r3, r8, r5
 8000da0:	2b10      	cmp	r3, #16
 8000da2:	d903      	bls.n	8000dac <_Unwind_VRS_Pop+0x18c>
 8000da4:	2002      	movs	r0, #2
 8000da6:	b043      	add	sp, #268	; 0x10c
 8000da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dac:	f1b8 0f0f 	cmp.w	r8, #15
 8000db0:	d8f8      	bhi.n	8000da4 <_Unwind_VRS_Pop+0x184>
 8000db2:	6833      	ldr	r3, [r6, #0]
 8000db4:	07da      	lsls	r2, r3, #31
 8000db6:	d506      	bpl.n	8000dc6 <_Unwind_VRS_Pop+0x1a6>
 8000db8:	4630      	mov	r0, r6
 8000dba:	f023 0303 	bic.w	r3, r3, #3
 8000dbe:	f840 3b48 	str.w	r3, [r0], #72
 8000dc2:	f000 f879 	bl	8000eb8 <__gnu_Unwind_Save_VFP>
 8000dc6:	af20      	add	r7, sp, #128	; 0x80
 8000dc8:	4638      	mov	r0, r7
 8000dca:	f000 f875 	bl	8000eb8 <__gnu_Unwind_Save_VFP>
 8000dce:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000dd0:	2d00      	cmp	r5, #0
 8000dd2:	d199      	bne.n	8000d08 <_Unwind_VRS_Pop+0xe8>
 8000dd4:	461d      	mov	r5, r3
 8000dd6:	3504      	adds	r5, #4
 8000dd8:	63b5      	str	r5, [r6, #56]	; 0x38
 8000dda:	4638      	mov	r0, r7
 8000ddc:	f000 f868 	bl	8000eb0 <__gnu_Unwind_Restore_VFP>
 8000de0:	e7bf      	b.n	8000d62 <_Unwind_VRS_Pop+0x142>
 8000de2:	a820      	add	r0, sp, #128	; 0x80
 8000de4:	f000 f86c 	bl	8000ec0 <__gnu_Unwind_Restore_VFP_D>
 8000de8:	e7b5      	b.n	8000d56 <_Unwind_VRS_Pop+0x136>
 8000dea:	f1b9 0f10 	cmp.w	r9, #16
 8000dee:	d940      	bls.n	8000e72 <_Unwind_VRS_Pop+0x252>
 8000df0:	f1a9 0910 	sub.w	r9, r9, #16
 8000df4:	6833      	ldr	r3, [r6, #0]
 8000df6:	07d9      	lsls	r1, r3, #31
 8000df8:	d508      	bpl.n	8000e0c <_Unwind_VRS_Pop+0x1ec>
 8000dfa:	f023 0301 	bic.w	r3, r3, #1
 8000dfe:	4630      	mov	r0, r6
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	f840 3b48 	str.w	r3, [r0], #72
 8000e08:	f000 f85e 	bl	8000ec8 <__gnu_Unwind_Save_VFP_D>
 8000e0c:	f1b9 0f00 	cmp.w	r9, #0
 8000e10:	d032      	beq.n	8000e78 <_Unwind_VRS_Pop+0x258>
 8000e12:	6833      	ldr	r3, [r6, #0]
 8000e14:	075a      	lsls	r2, r3, #29
 8000e16:	d420      	bmi.n	8000e5a <_Unwind_VRS_Pop+0x23a>
 8000e18:	f1b8 0f0f 	cmp.w	r8, #15
 8000e1c:	d925      	bls.n	8000e6a <_Unwind_VRS_Pop+0x24a>
 8000e1e:	466f      	mov	r7, sp
 8000e20:	4638      	mov	r0, r7
 8000e22:	f1c8 0510 	rsb	r5, r8, #16
 8000e26:	f000 f857 	bl	8000ed8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e2a:	2d00      	cmp	r5, #0
 8000e2c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000e2e:	f77f af7c 	ble.w	8000d2a <_Unwind_VRS_Pop+0x10a>
 8000e32:	af20      	add	r7, sp, #128	; 0x80
 8000e34:	e76a      	b.n	8000d0c <_Unwind_VRS_Pop+0xec>
 8000e36:	f023 0310 	bic.w	r3, r3, #16
 8000e3a:	6033      	str	r3, [r6, #0]
 8000e3c:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000e40:	f000 f89c 	bl	8000f7c <__gnu_Unwind_Save_WMMXC>
 8000e44:	e704      	b.n	8000c50 <_Unwind_VRS_Pop+0x30>
 8000e46:	f023 0308 	bic.w	r3, r3, #8
 8000e4a:	6003      	str	r3, [r0, #0]
 8000e4c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000e50:	f000 f868 	bl	8000f24 <__gnu_Unwind_Save_WMMXD>
 8000e54:	e727      	b.n	8000ca6 <_Unwind_VRS_Pop+0x86>
 8000e56:	af20      	add	r7, sp, #128	; 0x80
 8000e58:	e7bd      	b.n	8000dd6 <_Unwind_VRS_Pop+0x1b6>
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	f023 0304 	bic.w	r3, r3, #4
 8000e60:	f840 3bd0 	str.w	r3, [r0], #208
 8000e64:	f000 f838 	bl	8000ed8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e68:	e7d6      	b.n	8000e18 <_Unwind_VRS_Pop+0x1f8>
 8000e6a:	a820      	add	r0, sp, #128	; 0x80
 8000e6c:	f000 f82c 	bl	8000ec8 <__gnu_Unwind_Save_VFP_D>
 8000e70:	e7d5      	b.n	8000e1e <_Unwind_VRS_Pop+0x1fe>
 8000e72:	f04f 0900 	mov.w	r9, #0
 8000e76:	e7bd      	b.n	8000df4 <_Unwind_VRS_Pop+0x1d4>
 8000e78:	f1b8 0f0f 	cmp.w	r8, #15
 8000e7c:	f63f af41 	bhi.w	8000d02 <_Unwind_VRS_Pop+0xe2>
 8000e80:	af20      	add	r7, sp, #128	; 0x80
 8000e82:	4638      	mov	r0, r7
 8000e84:	f000 f820 	bl	8000ec8 <__gnu_Unwind_Save_VFP_D>
 8000e88:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	f47f af3c 	bne.w	8000d08 <_Unwind_VRS_Pop+0xe8>
 8000e90:	4638      	mov	r0, r7
 8000e92:	f000 f815 	bl	8000ec0 <__gnu_Unwind_Restore_VFP_D>
 8000e96:	e764      	b.n	8000d62 <_Unwind_VRS_Pop+0x142>

08000e98 <__restore_core_regs>:
 8000e98:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000e9c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000ea0:	469c      	mov	ip, r3
 8000ea2:	46a6      	mov	lr, r4
 8000ea4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000ea8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000eac:	46e5      	mov	sp, ip
 8000eae:	bd00      	pop	{pc}

08000eb0 <__gnu_Unwind_Restore_VFP>:
 8000eb0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__gnu_Unwind_Save_VFP>:
 8000eb8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <__gnu_Unwind_Restore_VFP_D>:
 8000ec0:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <__gnu_Unwind_Save_VFP_D>:
 8000ec8:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000ed0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000ed8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__gnu_Unwind_Restore_WMMXD>:
 8000ee0:	ecf0 0102 	ldfe	f0, [r0], #8
 8000ee4:	ecf0 1102 	ldfe	f1, [r0], #8
 8000ee8:	ecf0 2102 	ldfe	f2, [r0], #8
 8000eec:	ecf0 3102 	ldfe	f3, [r0], #8
 8000ef0:	ecf0 4102 	ldfe	f4, [r0], #8
 8000ef4:	ecf0 5102 	ldfe	f5, [r0], #8
 8000ef8:	ecf0 6102 	ldfe	f6, [r0], #8
 8000efc:	ecf0 7102 	ldfe	f7, [r0], #8
 8000f00:	ecf0 8102 	ldfp	f0, [r0], #8
 8000f04:	ecf0 9102 	ldfp	f1, [r0], #8
 8000f08:	ecf0 a102 	ldfp	f2, [r0], #8
 8000f0c:	ecf0 b102 	ldfp	f3, [r0], #8
 8000f10:	ecf0 c102 	ldfp	f4, [r0], #8
 8000f14:	ecf0 d102 	ldfp	f5, [r0], #8
 8000f18:	ecf0 e102 	ldfp	f6, [r0], #8
 8000f1c:	ecf0 f102 	ldfp	f7, [r0], #8
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <__gnu_Unwind_Save_WMMXD>:
 8000f24:	ece0 0102 	stfe	f0, [r0], #8
 8000f28:	ece0 1102 	stfe	f1, [r0], #8
 8000f2c:	ece0 2102 	stfe	f2, [r0], #8
 8000f30:	ece0 3102 	stfe	f3, [r0], #8
 8000f34:	ece0 4102 	stfe	f4, [r0], #8
 8000f38:	ece0 5102 	stfe	f5, [r0], #8
 8000f3c:	ece0 6102 	stfe	f6, [r0], #8
 8000f40:	ece0 7102 	stfe	f7, [r0], #8
 8000f44:	ece0 8102 	stfp	f0, [r0], #8
 8000f48:	ece0 9102 	stfp	f1, [r0], #8
 8000f4c:	ece0 a102 	stfp	f2, [r0], #8
 8000f50:	ece0 b102 	stfp	f3, [r0], #8
 8000f54:	ece0 c102 	stfp	f4, [r0], #8
 8000f58:	ece0 d102 	stfp	f5, [r0], #8
 8000f5c:	ece0 e102 	stfp	f6, [r0], #8
 8000f60:	ece0 f102 	stfp	f7, [r0], #8
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <__gnu_Unwind_Restore_WMMXC>:
 8000f68:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000f6c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000f70:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000f74:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <__gnu_Unwind_Save_WMMXC>:
 8000f7c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000f80:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000f84:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000f88:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <_Unwind_RaiseException>:
 8000f90:	46ec      	mov	ip, sp
 8000f92:	b500      	push	{lr}
 8000f94:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000f98:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000fa4:	a901      	add	r1, sp, #4
 8000fa6:	f7ff fbf1 	bl	800078c <__gnu_Unwind_RaiseException>
 8000faa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000fae:	b012      	add	sp, #72	; 0x48
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <_Unwind_Resume>:
 8000fb4:	46ec      	mov	ip, sp
 8000fb6:	b500      	push	{lr}
 8000fb8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000fbc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000fc0:	f04f 0300 	mov.w	r3, #0
 8000fc4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000fc8:	a901      	add	r1, sp, #4
 8000fca:	f7ff fc19 	bl	8000800 <__gnu_Unwind_Resume>
 8000fce:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000fd2:	b012      	add	sp, #72	; 0x48
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <_Unwind_Resume_or_Rethrow>:
 8000fd8:	46ec      	mov	ip, sp
 8000fda:	b500      	push	{lr}
 8000fdc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000fe0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000fe4:	f04f 0300 	mov.w	r3, #0
 8000fe8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000fec:	a901      	add	r1, sp, #4
 8000fee:	f7ff fc29 	bl	8000844 <__gnu_Unwind_Resume_or_Rethrow>
 8000ff2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000ff6:	b012      	add	sp, #72	; 0x48
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <_Unwind_ForcedUnwind>:
 8000ffc:	46ec      	mov	ip, sp
 8000ffe:	b500      	push	{lr}
 8001000:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001004:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001010:	ab01      	add	r3, sp, #4
 8001012:	f7ff fbeb 	bl	80007ec <__gnu_Unwind_ForcedUnwind>
 8001016:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800101a:	b012      	add	sp, #72	; 0x48
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <_Unwind_Backtrace>:
 8001020:	46ec      	mov	ip, sp
 8001022:	b500      	push	{lr}
 8001024:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001028:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800102c:	f04f 0300 	mov.w	r3, #0
 8001030:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001034:	aa01      	add	r2, sp, #4
 8001036:	f7ff fc5d 	bl	80008f4 <__gnu_Unwind_Backtrace>
 800103a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800103e:	b012      	add	sp, #72	; 0x48
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <next_unwind_byte>:
 8001044:	7a02      	ldrb	r2, [r0, #8]
 8001046:	b97a      	cbnz	r2, 8001068 <next_unwind_byte+0x24>
 8001048:	7a43      	ldrb	r3, [r0, #9]
 800104a:	b1a3      	cbz	r3, 8001076 <next_unwind_byte+0x32>
 800104c:	6842      	ldr	r2, [r0, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	b410      	push	{r4}
 8001052:	7243      	strb	r3, [r0, #9]
 8001054:	6813      	ldr	r3, [r2, #0]
 8001056:	2103      	movs	r1, #3
 8001058:	1d14      	adds	r4, r2, #4
 800105a:	7201      	strb	r1, [r0, #8]
 800105c:	021a      	lsls	r2, r3, #8
 800105e:	6044      	str	r4, [r0, #4]
 8001060:	6002      	str	r2, [r0, #0]
 8001062:	bc10      	pop	{r4}
 8001064:	0e18      	lsrs	r0, r3, #24
 8001066:	4770      	bx	lr
 8001068:	6803      	ldr	r3, [r0, #0]
 800106a:	3a01      	subs	r2, #1
 800106c:	7202      	strb	r2, [r0, #8]
 800106e:	021a      	lsls	r2, r3, #8
 8001070:	6002      	str	r2, [r0, #0]
 8001072:	0e18      	lsrs	r0, r3, #24
 8001074:	4770      	bx	lr
 8001076:	20b0      	movs	r0, #176	; 0xb0
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <_Unwind_GetGR.constprop.0>:
 800107c:	b500      	push	{lr}
 800107e:	b085      	sub	sp, #20
 8001080:	aa03      	add	r2, sp, #12
 8001082:	2300      	movs	r3, #0
 8001084:	9200      	str	r2, [sp, #0]
 8001086:	4619      	mov	r1, r3
 8001088:	220c      	movs	r2, #12
 800108a:	f7ff fbeb 	bl	8000864 <_Unwind_VRS_Get>
 800108e:	9803      	ldr	r0, [sp, #12]
 8001090:	b005      	add	sp, #20
 8001092:	f85d fb04 	ldr.w	pc, [sp], #4
 8001096:	bf00      	nop

08001098 <unwind_UCB_from_context>:
 8001098:	e7f0      	b.n	800107c <_Unwind_GetGR.constprop.0>
 800109a:	bf00      	nop

0800109c <__gnu_unwind_execute>:
 800109c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010a0:	4605      	mov	r5, r0
 80010a2:	b085      	sub	sp, #20
 80010a4:	460e      	mov	r6, r1
 80010a6:	f04f 0800 	mov.w	r8, #0
 80010aa:	4630      	mov	r0, r6
 80010ac:	f7ff ffca 	bl	8001044 <next_unwind_byte>
 80010b0:	28b0      	cmp	r0, #176	; 0xb0
 80010b2:	4604      	mov	r4, r0
 80010b4:	f000 80b2 	beq.w	800121c <__gnu_unwind_execute+0x180>
 80010b8:	0607      	lsls	r7, r0, #24
 80010ba:	d520      	bpl.n	80010fe <__gnu_unwind_execute+0x62>
 80010bc:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80010c0:	2b80      	cmp	r3, #128	; 0x80
 80010c2:	d04d      	beq.n	8001160 <__gnu_unwind_execute+0xc4>
 80010c4:	2b90      	cmp	r3, #144	; 0x90
 80010c6:	d036      	beq.n	8001136 <__gnu_unwind_execute+0x9a>
 80010c8:	2ba0      	cmp	r3, #160	; 0xa0
 80010ca:	d060      	beq.n	800118e <__gnu_unwind_execute+0xf2>
 80010cc:	2bb0      	cmp	r3, #176	; 0xb0
 80010ce:	d074      	beq.n	80011ba <__gnu_unwind_execute+0x11e>
 80010d0:	2bc0      	cmp	r3, #192	; 0xc0
 80010d2:	f000 808b 	beq.w	80011ec <__gnu_unwind_execute+0x150>
 80010d6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80010da:	2bd0      	cmp	r3, #208	; 0xd0
 80010dc:	d10b      	bne.n	80010f6 <__gnu_unwind_execute+0x5a>
 80010de:	f000 0207 	and.w	r2, r0, #7
 80010e2:	3201      	adds	r2, #1
 80010e4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80010e8:	2305      	movs	r3, #5
 80010ea:	2101      	movs	r1, #1
 80010ec:	4628      	mov	r0, r5
 80010ee:	f7ff fd97 	bl	8000c20 <_Unwind_VRS_Pop>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d0d9      	beq.n	80010aa <__gnu_unwind_execute+0xe>
 80010f6:	2009      	movs	r0, #9
 80010f8:	b005      	add	sp, #20
 80010fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010fe:	f10d 090c 	add.w	r9, sp, #12
 8001102:	2300      	movs	r3, #0
 8001104:	4619      	mov	r1, r3
 8001106:	0087      	lsls	r7, r0, #2
 8001108:	f8cd 9000 	str.w	r9, [sp]
 800110c:	220d      	movs	r2, #13
 800110e:	4628      	mov	r0, r5
 8001110:	f7ff fba8 	bl	8000864 <_Unwind_VRS_Get>
 8001114:	b2ff      	uxtb	r7, r7
 8001116:	9b03      	ldr	r3, [sp, #12]
 8001118:	f8cd 9000 	str.w	r9, [sp]
 800111c:	3704      	adds	r7, #4
 800111e:	0660      	lsls	r0, r4, #25
 8001120:	bf4c      	ite	mi
 8001122:	1bdf      	submi	r7, r3, r7
 8001124:	18ff      	addpl	r7, r7, r3
 8001126:	2300      	movs	r3, #0
 8001128:	4619      	mov	r1, r3
 800112a:	220d      	movs	r2, #13
 800112c:	4628      	mov	r0, r5
 800112e:	9703      	str	r7, [sp, #12]
 8001130:	f7ff fbbc 	bl	80008ac <_Unwind_VRS_Set>
 8001134:	e7b9      	b.n	80010aa <__gnu_unwind_execute+0xe>
 8001136:	f000 030d 	and.w	r3, r0, #13
 800113a:	2b0d      	cmp	r3, #13
 800113c:	d0db      	beq.n	80010f6 <__gnu_unwind_execute+0x5a>
 800113e:	af03      	add	r7, sp, #12
 8001140:	2300      	movs	r3, #0
 8001142:	f000 020f 	and.w	r2, r0, #15
 8001146:	4619      	mov	r1, r3
 8001148:	9700      	str	r7, [sp, #0]
 800114a:	4628      	mov	r0, r5
 800114c:	f7ff fb8a 	bl	8000864 <_Unwind_VRS_Get>
 8001150:	2300      	movs	r3, #0
 8001152:	9700      	str	r7, [sp, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	220d      	movs	r2, #13
 8001158:	4628      	mov	r0, r5
 800115a:	f7ff fba7 	bl	80008ac <_Unwind_VRS_Set>
 800115e:	e7a4      	b.n	80010aa <__gnu_unwind_execute+0xe>
 8001160:	4630      	mov	r0, r6
 8001162:	f7ff ff6f 	bl	8001044 <next_unwind_byte>
 8001166:	0224      	lsls	r4, r4, #8
 8001168:	4320      	orrs	r0, r4
 800116a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800116e:	d0c2      	beq.n	80010f6 <__gnu_unwind_execute+0x5a>
 8001170:	0104      	lsls	r4, r0, #4
 8001172:	2300      	movs	r3, #0
 8001174:	b2a2      	uxth	r2, r4
 8001176:	4619      	mov	r1, r3
 8001178:	4628      	mov	r0, r5
 800117a:	f7ff fd51 	bl	8000c20 <_Unwind_VRS_Pop>
 800117e:	2800      	cmp	r0, #0
 8001180:	d1b9      	bne.n	80010f6 <__gnu_unwind_execute+0x5a>
 8001182:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001186:	bf18      	it	ne
 8001188:	f04f 0801 	movne.w	r8, #1
 800118c:	e78d      	b.n	80010aa <__gnu_unwind_execute+0xe>
 800118e:	43c2      	mvns	r2, r0
 8001190:	f002 0307 	and.w	r3, r2, #7
 8001194:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001198:	411a      	asrs	r2, r3
 800119a:	0701      	lsls	r1, r0, #28
 800119c:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80011a0:	f04f 0300 	mov.w	r3, #0
 80011a4:	bf48      	it	mi
 80011a6:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80011aa:	4619      	mov	r1, r3
 80011ac:	4628      	mov	r0, r5
 80011ae:	f7ff fd37 	bl	8000c20 <_Unwind_VRS_Pop>
 80011b2:	2800      	cmp	r0, #0
 80011b4:	f43f af79 	beq.w	80010aa <__gnu_unwind_execute+0xe>
 80011b8:	e79d      	b.n	80010f6 <__gnu_unwind_execute+0x5a>
 80011ba:	28b1      	cmp	r0, #177	; 0xb1
 80011bc:	d033      	beq.n	8001226 <__gnu_unwind_execute+0x18a>
 80011be:	28b2      	cmp	r0, #178	; 0xb2
 80011c0:	f000 808b 	beq.w	80012da <__gnu_unwind_execute+0x23e>
 80011c4:	28b3      	cmp	r0, #179	; 0xb3
 80011c6:	d039      	beq.n	800123c <__gnu_unwind_execute+0x1a0>
 80011c8:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80011cc:	2bb4      	cmp	r3, #180	; 0xb4
 80011ce:	d092      	beq.n	80010f6 <__gnu_unwind_execute+0x5a>
 80011d0:	f000 0207 	and.w	r2, r0, #7
 80011d4:	3201      	adds	r2, #1
 80011d6:	2301      	movs	r3, #1
 80011d8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011dc:	4619      	mov	r1, r3
 80011de:	4628      	mov	r0, r5
 80011e0:	f7ff fd1e 	bl	8000c20 <_Unwind_VRS_Pop>
 80011e4:	2800      	cmp	r0, #0
 80011e6:	f43f af60 	beq.w	80010aa <__gnu_unwind_execute+0xe>
 80011ea:	e784      	b.n	80010f6 <__gnu_unwind_execute+0x5a>
 80011ec:	28c6      	cmp	r0, #198	; 0xc6
 80011ee:	d042      	beq.n	8001276 <__gnu_unwind_execute+0x1da>
 80011f0:	28c7      	cmp	r0, #199	; 0xc7
 80011f2:	d04c      	beq.n	800128e <__gnu_unwind_execute+0x1f2>
 80011f4:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80011f8:	2bc0      	cmp	r3, #192	; 0xc0
 80011fa:	d05b      	beq.n	80012b4 <__gnu_unwind_execute+0x218>
 80011fc:	28c8      	cmp	r0, #200	; 0xc8
 80011fe:	d060      	beq.n	80012c2 <__gnu_unwind_execute+0x226>
 8001200:	28c9      	cmp	r0, #201	; 0xc9
 8001202:	f47f af78 	bne.w	80010f6 <__gnu_unwind_execute+0x5a>
 8001206:	4630      	mov	r0, r6
 8001208:	f7ff ff1c 	bl	8001044 <next_unwind_byte>
 800120c:	0302      	lsls	r2, r0, #12
 800120e:	f000 000f 	and.w	r0, r0, #15
 8001212:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001216:	3001      	adds	r0, #1
 8001218:	4302      	orrs	r2, r0
 800121a:	e765      	b.n	80010e8 <__gnu_unwind_execute+0x4c>
 800121c:	f1b8 0f00 	cmp.w	r8, #0
 8001220:	d018      	beq.n	8001254 <__gnu_unwind_execute+0x1b8>
 8001222:	2000      	movs	r0, #0
 8001224:	e768      	b.n	80010f8 <__gnu_unwind_execute+0x5c>
 8001226:	4630      	mov	r0, r6
 8001228:	f7ff ff0c 	bl	8001044 <next_unwind_byte>
 800122c:	4602      	mov	r2, r0
 800122e:	2800      	cmp	r0, #0
 8001230:	f43f af61 	beq.w	80010f6 <__gnu_unwind_execute+0x5a>
 8001234:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001238:	d0d0      	beq.n	80011dc <__gnu_unwind_execute+0x140>
 800123a:	e75c      	b.n	80010f6 <__gnu_unwind_execute+0x5a>
 800123c:	4630      	mov	r0, r6
 800123e:	f7ff ff01 	bl	8001044 <next_unwind_byte>
 8001242:	0301      	lsls	r1, r0, #12
 8001244:	f000 000f 	and.w	r0, r0, #15
 8001248:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800124c:	1c42      	adds	r2, r0, #1
 800124e:	2301      	movs	r3, #1
 8001250:	430a      	orrs	r2, r1
 8001252:	e7c3      	b.n	80011dc <__gnu_unwind_execute+0x140>
 8001254:	ac03      	add	r4, sp, #12
 8001256:	4643      	mov	r3, r8
 8001258:	220e      	movs	r2, #14
 800125a:	4641      	mov	r1, r8
 800125c:	9400      	str	r4, [sp, #0]
 800125e:	4628      	mov	r0, r5
 8001260:	f7ff fb00 	bl	8000864 <_Unwind_VRS_Get>
 8001264:	9400      	str	r4, [sp, #0]
 8001266:	4628      	mov	r0, r5
 8001268:	4643      	mov	r3, r8
 800126a:	220f      	movs	r2, #15
 800126c:	4641      	mov	r1, r8
 800126e:	f7ff fb1d 	bl	80008ac <_Unwind_VRS_Set>
 8001272:	4640      	mov	r0, r8
 8001274:	e740      	b.n	80010f8 <__gnu_unwind_execute+0x5c>
 8001276:	4630      	mov	r0, r6
 8001278:	f7ff fee4 	bl	8001044 <next_unwind_byte>
 800127c:	0301      	lsls	r1, r0, #12
 800127e:	f000 000f 	and.w	r0, r0, #15
 8001282:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001286:	1c42      	adds	r2, r0, #1
 8001288:	2303      	movs	r3, #3
 800128a:	430a      	orrs	r2, r1
 800128c:	e7a6      	b.n	80011dc <__gnu_unwind_execute+0x140>
 800128e:	4630      	mov	r0, r6
 8001290:	f7ff fed8 	bl	8001044 <next_unwind_byte>
 8001294:	4602      	mov	r2, r0
 8001296:	2800      	cmp	r0, #0
 8001298:	f43f af2d 	beq.w	80010f6 <__gnu_unwind_execute+0x5a>
 800129c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80012a0:	f47f af29 	bne.w	80010f6 <__gnu_unwind_execute+0x5a>
 80012a4:	2104      	movs	r1, #4
 80012a6:	4628      	mov	r0, r5
 80012a8:	f7ff fcba 	bl	8000c20 <_Unwind_VRS_Pop>
 80012ac:	2800      	cmp	r0, #0
 80012ae:	f43f aefc 	beq.w	80010aa <__gnu_unwind_execute+0xe>
 80012b2:	e720      	b.n	80010f6 <__gnu_unwind_execute+0x5a>
 80012b4:	f000 020f 	and.w	r2, r0, #15
 80012b8:	3201      	adds	r2, #1
 80012ba:	2303      	movs	r3, #3
 80012bc:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80012c0:	e78c      	b.n	80011dc <__gnu_unwind_execute+0x140>
 80012c2:	4630      	mov	r0, r6
 80012c4:	f7ff febe 	bl	8001044 <next_unwind_byte>
 80012c8:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80012cc:	f000 030f 	and.w	r3, r0, #15
 80012d0:	3210      	adds	r2, #16
 80012d2:	3301      	adds	r3, #1
 80012d4:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80012d8:	e706      	b.n	80010e8 <__gnu_unwind_execute+0x4c>
 80012da:	2300      	movs	r3, #0
 80012dc:	f10d 090c 	add.w	r9, sp, #12
 80012e0:	220d      	movs	r2, #13
 80012e2:	4619      	mov	r1, r3
 80012e4:	f8cd 9000 	str.w	r9, [sp]
 80012e8:	4628      	mov	r0, r5
 80012ea:	f7ff fabb 	bl	8000864 <_Unwind_VRS_Get>
 80012ee:	4630      	mov	r0, r6
 80012f0:	f7ff fea8 	bl	8001044 <next_unwind_byte>
 80012f4:	0602      	lsls	r2, r0, #24
 80012f6:	f04f 0702 	mov.w	r7, #2
 80012fa:	d50c      	bpl.n	8001316 <__gnu_unwind_execute+0x27a>
 80012fc:	9b03      	ldr	r3, [sp, #12]
 80012fe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001302:	40b8      	lsls	r0, r7
 8001304:	4403      	add	r3, r0
 8001306:	4630      	mov	r0, r6
 8001308:	9303      	str	r3, [sp, #12]
 800130a:	f7ff fe9b 	bl	8001044 <next_unwind_byte>
 800130e:	0603      	lsls	r3, r0, #24
 8001310:	f107 0707 	add.w	r7, r7, #7
 8001314:	d4f2      	bmi.n	80012fc <__gnu_unwind_execute+0x260>
 8001316:	9b03      	ldr	r3, [sp, #12]
 8001318:	f8cd 9000 	str.w	r9, [sp]
 800131c:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8001320:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8001324:	40bc      	lsls	r4, r7
 8001326:	2300      	movs	r3, #0
 8001328:	4414      	add	r4, r2
 800132a:	4619      	mov	r1, r3
 800132c:	220d      	movs	r2, #13
 800132e:	4628      	mov	r0, r5
 8001330:	9403      	str	r4, [sp, #12]
 8001332:	f7ff fabb 	bl	80008ac <_Unwind_VRS_Set>
 8001336:	e6b8      	b.n	80010aa <__gnu_unwind_execute+0xe>

08001338 <__gnu_unwind_frame>:
 8001338:	b510      	push	{r4, lr}
 800133a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800133c:	b084      	sub	sp, #16
 800133e:	6853      	ldr	r3, [r2, #4]
 8001340:	2403      	movs	r4, #3
 8001342:	f88d 400c 	strb.w	r4, [sp, #12]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	f102 0408 	add.w	r4, r2, #8
 800134c:	4608      	mov	r0, r1
 800134e:	79d2      	ldrb	r2, [r2, #7]
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	a901      	add	r1, sp, #4
 8001354:	9402      	str	r4, [sp, #8]
 8001356:	f88d 200d 	strb.w	r2, [sp, #13]
 800135a:	f7ff fe9f 	bl	800109c <__gnu_unwind_execute>
 800135e:	b004      	add	sp, #16
 8001360:	bd10      	pop	{r4, pc}
 8001362:	bf00      	nop

08001364 <_Unwind_GetRegionStart>:
 8001364:	b508      	push	{r3, lr}
 8001366:	f7ff fe97 	bl	8001098 <unwind_UCB_from_context>
 800136a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800136c:	bd08      	pop	{r3, pc}
 800136e:	bf00      	nop

08001370 <_Unwind_GetLanguageSpecificData>:
 8001370:	b508      	push	{r3, lr}
 8001372:	f7ff fe91 	bl	8001098 <unwind_UCB_from_context>
 8001376:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001378:	79c3      	ldrb	r3, [r0, #7]
 800137a:	3302      	adds	r3, #2
 800137c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001380:	bd08      	pop	{r3, pc}
 8001382:	bf00      	nop

08001384 <__aeabi_idiv0>:
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop

08001388 <_ZN4PageC1Ev>:
	int num 		= -1;
	string title 	= "";
	string text 	= "";
	int nb_sub_page	= 0;
	Sub_Page* sub;
}Page;
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f04f 32ff 	mov.w	r2, #4294967295
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	1d1c      	adds	r4, r3, #4
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 fd5f 	bl	8005e64 <_ZNSaIcEC1Ev>
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	461a      	mov	r2, r3
 80013ac:	491c      	ldr	r1, [pc, #112]	; (8001420 <_ZN4PageC1Ev+0x98>)
 80013ae:	4620      	mov	r0, r4
 80013b0:	f004 ff70 	bl	8006294 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	4618      	mov	r0, r3
 80013ba:	f004 fd54 	bl	8005e66 <_ZNSaIcED1Ev>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f103 041c 	add.w	r4, r3, #28
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4618      	mov	r0, r3
 80013ca:	f004 fd4b 	bl	8005e64 <_ZNSaIcEC1Ev>
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	461a      	mov	r2, r3
 80013d4:	4912      	ldr	r1, [pc, #72]	; (8001420 <_ZN4PageC1Ev+0x98>)
 80013d6:	4620      	mov	r0, r4
 80013d8:	f004 ff5c 	bl	8006294 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	4618      	mov	r0, r3
 80013e2:	f004 fd40 	bl	8005e66 <_ZNSaIcED1Ev>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	635a      	str	r2, [r3, #52]	; 0x34
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	e012      	b.n	8001416 <_ZN4PageC1Ev+0x8e>
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	4618      	mov	r0, r3
 80013f6:	f004 fd36 	bl	8005e66 <_ZNSaIcED1Ev>
 80013fa:	f004 f8dd 	bl	80055b8 <__cxa_end_cleanup>
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	4618      	mov	r0, r3
 8001404:	f004 fd2f 	bl	8005e66 <_ZNSaIcED1Ev>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3304      	adds	r3, #4
 800140c:	4618      	mov	r0, r3
 800140e:	f004 fede 	bl	80061ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001412:	f004 f8d1 	bl	80055b8 <__cxa_end_cleanup>
 8001416:	4618      	mov	r0, r3
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bd90      	pop	{r4, r7, pc}
 800141e:	bf00      	nop
 8001420:	08006c9c 	.word	0x08006c9c

08001424 <_ZN4PageD1Ev>:
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	331c      	adds	r3, #28
 8001430:	4618      	mov	r0, r3
 8001432:	f004 fecc 	bl	80061ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3304      	adds	r3, #4
 800143a:	4618      	mov	r0, r3
 800143c:	f004 fec7 	bl	80061ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <_ZN2UIC1E7Display10theEncoder>:
	}
}

// ########### 		CLASS		###############
// ---- CONSTRUCTORS ------
UI::UI(Display display,theEncoder button):display(display),button(button){
 800144a:	b084      	sub	sp, #16
 800144c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800145a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	731a      	strb	r2, [r3, #12]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	735a      	strb	r2, [r3, #13]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	739a      	strb	r2, [r3, #14]
 8001482:	20bc      	movs	r0, #188	; 0xbc
 8001484:	f004 fc54 	bl	8005d30 <_Znaj>
 8001488:	4603      	mov	r3, r0
 800148a:	461c      	mov	r4, r3
 800148c:	1d23      	adds	r3, r4, #4
 800148e:	3b04      	subs	r3, #4
 8001490:	223c      	movs	r2, #60	; 0x3c
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	1d23      	adds	r3, r4, #4
 8001496:	2203      	movs	r2, #3
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	f104 0608 	add.w	r6, r4, #8
 800149e:	2502      	movs	r5, #2
 80014a0:	46b0      	mov	r8, r6
 80014a2:	2d00      	cmp	r5, #0
 80014a4:	db06      	blt.n	80014b4 <_ZN2UIC1E7Display10theEncoder+0x6a>
 80014a6:	4640      	mov	r0, r8
 80014a8:	f7ff ff6e 	bl	8001388 <_ZN4PageC1Ev>
 80014ac:	f108 083c 	add.w	r8, r8, #60	; 0x3c
 80014b0:	3d01      	subs	r5, #1
 80014b2:	e7f6      	b.n	80014a2 <_ZN2UIC1E7Display10theEncoder+0x58>
 80014b4:	f104 0208 	add.w	r2, r4, #8
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	611a      	str	r2, [r3, #16]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f103 0414 	add.w	r4, r3, #20
 80014c2:	f107 0524 	add.w	r5, r7, #36	; 0x24
 80014c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ca:	682b      	ldr	r3, [r5, #0]
 80014cc:	6023      	str	r3, [r4, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80014d4:	f107 0538 	add.w	r5, r7, #56	; 0x38
 80014d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	e016      	b.n	8001516 <_ZN2UIC1E7Display10theEncoder+0xcc>
 80014e8:	2e00      	cmp	r6, #0
 80014ea:	d00e      	beq.n	800150a <_ZN2UIC1E7Display10theEncoder+0xc0>
UI::UI(Display display,theEncoder button):display(display),button(button){
 80014ec:	f1c5 0302 	rsb	r3, r5, #2
 80014f0:	461a      	mov	r2, r3
 80014f2:	4613      	mov	r3, r2
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	1a9b      	subs	r3, r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	18f5      	adds	r5, r6, r3
 80014fc:	42b5      	cmp	r5, r6
 80014fe:	d004      	beq.n	800150a <_ZN2UIC1E7Display10theEncoder+0xc0>
 8001500:	3d3c      	subs	r5, #60	; 0x3c
 8001502:	4628      	mov	r0, r5
 8001504:	f7ff ff8e 	bl	8001424 <_ZN4PageD1Ev>
 8001508:	e7f8      	b.n	80014fc <_ZN2UIC1E7Display10theEncoder+0xb2>
 800150a:	21bc      	movs	r1, #188	; 0xbc
 800150c:	4620      	mov	r0, r4
 800150e:	f004 f83d 	bl	800558c <_ZdaPvj>
 8001512:	f004 f851 	bl	80055b8 <__cxa_end_cleanup>
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001520:	b004      	add	sp, #16
 8001522:	4770      	bx	lr

08001524 <setup>:

// Test hash
	myHash<Values,float> table(6);


void setup(){
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	// We start the encoder
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001528:	2104      	movs	r1, #4
 800152a:	4806      	ldr	r0, [pc, #24]	; (8001544 <setup+0x20>)
 800152c:	f003 f9a2 	bl	8004874 <HAL_TIM_Encoder_Start>
	TIM_ENC -> CNT = 32768;
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <setup+0x24>)
 8001532:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001536:	625a      	str	r2, [r3, #36]	; 0x24
	screen.init();
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <setup+0x28>)
 800153a:	f000 f8e3 	bl	8001704 <_ZN7Display4initEv>
	//ui.init_menu();
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	2000033c 	.word	0x2000033c
 8001548:	40000400 	.word	0x40000400
 800154c:	200000cc 	.word	0x200000cc

08001550 <My_app>:

void My_app(){
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	setup();
 8001554:	f7ff ffe6 	bl	8001524 <setup>

	Test_display();
 8001558:	f000 f872 	bl	8001640 <_Z12Test_displayv>
	//Test_UI();
	while (1)
 800155c:	e7fe      	b.n	800155c <My_app+0xc>

0800155e <_ZN6myHashI6ValuesfEC1Ej>:
 *  Created on: 15 déc. 2021
 *      Author: rapha
 */

template <class K, class V>
myHash<K,V>::myHash(unsigned int size):size(size){
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	6039      	str	r1, [r7, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	605a      	str	r2, [r3, #4]
	p_table = new struct hash_obj<K,V>[size];
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001574:	d201      	bcs.n	800157a <_ZN6myHashI6ValuesfEC1Ej+0x1c>
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	e001      	b.n	800157e <_ZN6myHashI6ValuesfEC1Ej+0x20>
 800157a:	f004 f8d5 	bl	8005728 <__cxa_throw_bad_array_new_length>
 800157e:	4618      	mov	r0, r3
 8001580:	f004 fbd6 	bl	8005d30 <_Znaj>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <_Z41__static_initialization_and_destruction_0ii>:

	}
}

#ifdef __cplusplus
}
 8001598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800159a:	b08d      	sub	sp, #52	; 0x34
 800159c:	af0a      	add	r7, sp, #40	; 0x28
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d131      	bne.n	800160c <_Z41__static_initialization_and_destruction_0ii+0x74>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d12c      	bne.n	800160c <_Z41__static_initialization_and_destruction_0ii+0x74>
	theEncoder button_main(GPIOEncoder, EncoderButtonPin, TIM_ENC);
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80015b4:	2202      	movs	r2, #2
 80015b6:	4918      	ldr	r1, [pc, #96]	; (8001618 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80015b8:	4818      	ldr	r0, [pc, #96]	; (800161c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80015ba:	f000 f99d 	bl	80018f8 <_ZN10theEncoderC1EP12GPIO_TypeDeftP11TIM_TypeDef>
	Display screen(&hspi1, PIN_LCD_RS, PORT_LCD_RS, PIN_LCD_CS, PORT_LCD_CS);
 80015be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015ce:	2240      	movs	r2, #64	; 0x40
 80015d0:	4913      	ldr	r1, [pc, #76]	; (8001620 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80015d2:	4814      	ldr	r0, [pc, #80]	; (8001624 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80015d4:	f000 f878 	bl	80016c8 <_ZN7DisplayC1EP19__SPI_HandleTypeDeftP12GPIO_TypeDeftS3_>
	UI ui(screen,button_main);
 80015d8:	4e12      	ldr	r6, [pc, #72]	; (8001624 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80015dc:	ac02      	add	r4, sp, #8
 80015de:	461d      	mov	r5, r3
 80015e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80015ec:	466a      	mov	r2, sp
 80015ee:	f106 030c 	add.w	r3, r6, #12
 80015f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015f6:	e882 0003 	stmia.w	r2, {r0, r1}
 80015fa:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80015fe:	480a      	ldr	r0, [pc, #40]	; (8001628 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001600:	f7ff ff23 	bl	800144a <_ZN2UIC1E7Display10theEncoder>
	myHash<Values,float> table(6);
 8001604:	2106      	movs	r1, #6
 8001606:	4809      	ldr	r0, [pc, #36]	; (800162c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001608:	f7ff ffa9 	bl	800155e <_ZN6myHashI6ValuesfEC1Ej>
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001614:	40000400 	.word	0x40000400
 8001618:	48000800 	.word	0x48000800
 800161c:	200000b0 	.word	0x200000b0
 8001620:	20000208 	.word	0x20000208
 8001624:	200000cc 	.word	0x200000cc
 8001628:	200000e0 	.word	0x200000e0
 800162c:	20000124 	.word	0x20000124

08001630 <_GLOBAL__sub_I_button_main>:
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
 8001634:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001638:	2001      	movs	r0, #1
 800163a:	f7ff ffad 	bl	8001598 <_Z41__static_initialization_and_destruction_0ii>
 800163e:	bd80      	pop	{r7, pc}

08001640 <_Z12Test_displayv>:
uint8_t cmd_data_1[1]	={0x59};

extern Display screen;

// ########### 		CLASS		###############
void Test_display(){
 8001640:	b580      	push	{r7, lr}
 8001642:	b08e      	sub	sp, #56	; 0x38
 8001644:	af00      	add	r7, sp, #0
	string txt = "Youpi!";
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	4618      	mov	r0, r3
 800164c:	f004 fc0a 	bl	8005e64 <_ZNSaIcEC1Ev>
 8001650:	f107 021c 	add.w	r2, r7, #28
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	491a      	ldr	r1, [pc, #104]	; (80016c0 <_Z12Test_displayv+0x80>)
 8001658:	4618      	mov	r0, r3
 800165a:	f004 fe1b 	bl	8006294 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	4618      	mov	r0, r3
 8001664:	f004 fbff 	bl	8005e66 <_ZNSaIcED1Ev>
	screen.set_cursor(0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	4815      	ldr	r0, [pc, #84]	; (80016c4 <_Z12Test_displayv+0x84>)
 800166e:	f000 f923 	bl	80018b8 <_ZN7Display10set_cursorEii>
	screen.print(txt);
 8001672:	1d3a      	adds	r2, r7, #4
 8001674:	f107 0320 	add.w	r3, r7, #32
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f004 fdd6 	bl	800622c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001680:	f107 0320 	add.w	r3, r7, #32
 8001684:	4619      	mov	r1, r3
 8001686:	480f      	ldr	r0, [pc, #60]	; (80016c4 <_Z12Test_displayv+0x84>)
 8001688:	f000 f8d1 	bl	800182e <_ZN7Display5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800168c:	f107 0320 	add.w	r3, r7, #32
 8001690:	4618      	mov	r0, r3
 8001692:	f004 fd9c 	bl	80061ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(1){}
 8001696:	e7fe      	b.n	8001696 <_Z12Test_displayv+0x56>
	string txt = "Youpi!";
 8001698:	f107 031c 	add.w	r3, r7, #28
 800169c:	4618      	mov	r0, r3
 800169e:	f004 fbe2 	bl	8005e66 <_ZNSaIcED1Ev>
 80016a2:	f003 ff89 	bl	80055b8 <__cxa_end_cleanup>
	screen.print(txt);
 80016a6:	f107 0320 	add.w	r3, r7, #32
 80016aa:	4618      	mov	r0, r3
 80016ac:	f004 fd8f 	bl	80061ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80016b0:	e7ff      	b.n	80016b2 <_Z12Test_displayv+0x72>
	string txt = "Youpi!";
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	4618      	mov	r0, r3
 80016b6:	f004 fd8a 	bl	80061ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80016ba:	f003 ff7d 	bl	80055b8 <__cxa_end_cleanup>
 80016be:	bf00      	nop
 80016c0:	08006d3c 	.word	0x08006d3c
 80016c4:	200000cc 	.word	0x200000cc

080016c8 <_ZN7DisplayC1EP19__SPI_HandleTypeDeftP12GPIO_TypeDeftS3_>:
}

// Initialisation procedure
Display::Display(SPI_HandleTypeDef* p_hspi, uint16_t PIN_RS, GPIO_TypeDef * PORT_RS, uint16_t PIN_CS, GPIO_TypeDef * PORT_CS):\
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	4613      	mov	r3, r2
 80016d6:	80fb      	strh	r3, [r7, #6]
		p_hspi(p_hspi), PIN_RS(PIN_RS), PORT_RS(PORT_RS), PIN_CS(PIN_CS), PORT_CS(PORT_CS)\
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	88fa      	ldrh	r2, [r7, #6]
 80016e2:	809a      	strh	r2, [r3, #4]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8b3a      	ldrh	r2, [r7, #24]
 80016ee:	819a      	strh	r2, [r3, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	611a      	str	r2, [r3, #16]
{

}
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <_ZN7Display4initEv>:

void Display::init(){
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PORT_CS, PIN_CS, GPIO_PIN_RESET);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6918      	ldr	r0, [r3, #16]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	899b      	ldrh	r3, [r3, #12]
 8001714:	2200      	movs	r2, #0
 8001716:	4619      	mov	r1, r3
 8001718:	f001 f84a 	bl	80027b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_RS, PIN_RS, GPIO_PIN_RESET);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6898      	ldr	r0, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	889b      	ldrh	r3, [r3, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	4619      	mov	r1, r3
 8001728:	f001 f842 	bl	80027b0 <HAL_GPIO_WritePin>
	write_cmd(cmd_mode);
 800172c:	490f      	ldr	r1, [pc, #60]	; (800176c <_ZN7Display4initEv+0x68>)
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f84d 	bl	80017ce <_ZN7Display9write_cmdEPh>
	HAL_Delay(100);
 8001734:	2064      	movs	r0, #100	; 0x64
 8001736:	f000 fd87 	bl	8002248 <HAL_Delay>
	write_cmd(cmd_display);
 800173a:	490d      	ldr	r1, [pc, #52]	; (8001770 <_ZN7Display4initEv+0x6c>)
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f846 	bl	80017ce <_ZN7Display9write_cmdEPh>
	HAL_Delay(100);
 8001742:	2064      	movs	r0, #100	; 0x64
 8001744:	f000 fd80 	bl	8002248 <HAL_Delay>
	write_cmd(cmd_clear);
 8001748:	490a      	ldr	r1, [pc, #40]	; (8001774 <_ZN7Display4initEv+0x70>)
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f83f 	bl	80017ce <_ZN7Display9write_cmdEPh>
	HAL_Delay(100);
 8001750:	2064      	movs	r0, #100	; 0x64
 8001752:	f000 fd79 	bl	8002248 <HAL_Delay>
	write_cmd(cmd_set);
 8001756:	4908      	ldr	r1, [pc, #32]	; (8001778 <_ZN7Display4initEv+0x74>)
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 f838 	bl	80017ce <_ZN7Display9write_cmdEPh>
	HAL_Delay(100);
 800175e:	2064      	movs	r0, #100	; 0x64
 8001760:	f000 fd72 	bl	8002248 <HAL_Delay>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000010 	.word	0x20000010
 8001770:	20000004 	.word	0x20000004
 8001774:	20000008 	.word	0x20000008
 8001778:	2000000c 	.word	0x2000000c

0800177c <_ZN7Display10write_dataEPh>:

void Display::write_data(uint8_t* data){
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(PORT_CS, PIN_CS, GPIO_PIN_RESET);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6918      	ldr	r0, [r3, #16]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	899b      	ldrh	r3, [r3, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	4619      	mov	r1, r3
 8001792:	f001 f80d 	bl	80027b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_RS, PIN_RS, GPIO_PIN_SET);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6898      	ldr	r0, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	889b      	ldrh	r3, [r3, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	4619      	mov	r1, r3
 80017a2:	f001 f805 	bl	80027b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(p_hspi,data,1,1000);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6818      	ldr	r0, [r3, #0]
 80017aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ae:	2201      	movs	r2, #1
 80017b0:	6839      	ldr	r1, [r7, #0]
 80017b2:	f002 fcea 	bl	800418a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PORT_CS, PIN_CS, GPIO_PIN_SET);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6918      	ldr	r0, [r3, #16]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	899b      	ldrh	r3, [r3, #12]
 80017be:	2201      	movs	r2, #1
 80017c0:	4619      	mov	r1, r3
 80017c2:	f000 fff5 	bl	80027b0 <HAL_GPIO_WritePin>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_ZN7Display9write_cmdEPh>:

// Write a command through SPI
void Display::write_cmd(uint8_t* cmd){
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(PORT_RS, PIN_RS, GPIO_PIN_RESET);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6898      	ldr	r0, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	889b      	ldrh	r3, [r3, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	4619      	mov	r1, r3
 80017e4:	f000 ffe4 	bl	80027b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(p_hspi,cmd,1,1000);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f0:	2201      	movs	r2, #1
 80017f2:	6839      	ldr	r1, [r7, #0]
 80017f4:	f002 fcc9 	bl	800418a <HAL_SPI_Transmit>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_ZN7Display10print_charEPh>:

void Display::clear(){
	write_cmd(cmd_clear);
}

void Display::print_char(uint8_t* s){
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
	uint8_t* ptrChaine;
	ptrChaine=s;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	60fb      	str	r3, [r7, #12]
	while(*ptrChaine!=0){
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d007      	beq.n	8001826 <_ZN7Display10print_charEPh+0x26>
		write_data(ptrChaine);
 8001816:	68f9      	ldr	r1, [r7, #12]
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ffaf 	bl	800177c <_ZN7Display10write_dataEPh>
		ptrChaine++;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	3301      	adds	r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
	while(*ptrChaine!=0){
 8001824:	e7f3      	b.n	800180e <_ZN7Display10print_charEPh+0xe>
	}
}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_ZN7Display5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Display::print(string s){
 800182e:	b5b0      	push	{r4, r5, r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]
    char char_array[n + 1];
    // copying the contents of the
    // string to char array
    strcpy(char_array, s.c_str());
    // we print the char*
    print_char((uint8_t*) char_array);
 8001838:	466b      	mov	r3, sp
 800183a:	461d      	mov	r5, r3
    int n = s.length();
 800183c:	6838      	ldr	r0, [r7, #0]
 800183e:	f004 fccc 	bl	80061da <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001842:	4603      	mov	r3, r0
 8001844:	617b      	str	r3, [r7, #20]
    char char_array[n + 1];
 8001846:	697c      	ldr	r4, [r7, #20]
 8001848:	613c      	str	r4, [r7, #16]
 800184a:	4623      	mov	r3, r4
 800184c:	3301      	adds	r3, #1
 800184e:	4618      	mov	r0, r3
 8001850:	f04f 0100 	mov.w	r1, #0
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	00cb      	lsls	r3, r1, #3
 800185e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001862:	00c2      	lsls	r2, r0, #3
 8001864:	4623      	mov	r3, r4
 8001866:	3301      	adds	r3, #1
 8001868:	4618      	mov	r0, r3
 800186a:	f04f 0100 	mov.w	r1, #0
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	00cb      	lsls	r3, r1, #3
 8001878:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800187c:	00c2      	lsls	r2, r0, #3
 800187e:	4623      	mov	r3, r4
 8001880:	3301      	adds	r3, #1
 8001882:	3307      	adds	r3, #7
 8001884:	08db      	lsrs	r3, r3, #3
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	ebad 0d03 	sub.w	sp, sp, r3
 800188c:	466b      	mov	r3, sp
 800188e:	3300      	adds	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
    strcpy(char_array, s.c_str());
 8001892:	68fc      	ldr	r4, [r7, #12]
 8001894:	6838      	ldr	r0, [r7, #0]
 8001896:	f004 fca2 	bl	80061de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800189a:	4603      	mov	r3, r0
 800189c:	4619      	mov	r1, r3
 800189e:	4620      	mov	r0, r4
 80018a0:	f004 ffe4 	bl	800686c <strcpy>
    print_char((uint8_t*) char_array);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4619      	mov	r1, r3
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ffa9 	bl	8001800 <_ZN7Display10print_charEPh>
 80018ae:	46ad      	mov	sp, r5
}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bdb0      	pop	{r4, r5, r7, pc}

080018b8 <_ZN7Display10set_cursorEii>:
	strs << number;
	string temp_str = strs.str();
	print(temp_str);
}

void Display::set_cursor(int column,int line){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
	uint8_t val_addr;
	val_addr = (line * 0x40)+column;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	019b      	lsls	r3, r3, #6
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	75fb      	strb	r3, [r7, #23]
	val_addr = 0x80+(val_addr & 0x7F);
 80018d6:	7dfb      	ldrb	r3, [r7, #23]
 80018d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	3b80      	subs	r3, #128	; 0x80
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	75fb      	strb	r3, [r7, #23]
	write_cmd(&val_addr);
 80018e4:	f107 0317 	add.w	r3, r7, #23
 80018e8:	4619      	mov	r1, r3
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f7ff ff6f 	bl	80017ce <_ZN7Display9write_cmdEPh>
}
 80018f0:	bf00      	nop
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_ZN10theEncoderC1EP12GPIO_TypeDeftP11TIM_TypeDef>:

// ########### FONCTIONS TEST ################

// ########### 		CLASS		###############

theEncoder::theEncoder(GPIO_TypeDef* GPIOenc, uint16_t ButtonPin, TIM_TypeDef* TIMER):\
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af02      	add	r7, sp, #8
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	80fb      	strh	r3, [r7, #6]
		theEncoder(GPIOenc, ButtonPin, TIMER, 32768){}
 8001908:	88fa      	ldrh	r2, [r7, #6]
 800190a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68b9      	ldr	r1, [r7, #8]
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 f805 	bl	8001924 <_ZN10theEncoderC1EP12GPIO_TypeDeftP11TIM_TypeDefi>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_ZN10theEncoderC1EP12GPIO_TypeDeftP11TIM_TypeDefi>:

theEncoder::theEncoder(GPIO_TypeDef* GPIOenc, uint16_t ButtonPin, TIM_TypeDef* TIMER, int theValInit):\
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	4613      	mov	r3, r2
 8001932:	80fb      	strh	r3, [r7, #6]
		compteurEncoder(theValInit), GPIOEncoder(GPIOenc), EncoderButtonPin(ButtonPin), TIM_ENC(TIMER)\
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	611a      	str	r2, [r3, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	88fa      	ldrh	r2, [r7, #6]
 8001944:	829a      	strh	r2, [r3, #20]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	619a      	str	r2, [r3, #24]
{
	TIM_ENC -> CNT = 32768;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001968:	f000 fbf9 	bl	800215e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800196c:	f000 f80d 	bl	800198a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001970:	f000 f954 	bl	8001c1c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001974:	f000 f850 	bl	8001a18 <MX_I2C1_Init>
  MX_UART4_Init();
 8001978:	f000 f920 	bl	8001bbc <MX_UART4_Init>
  MX_SPI1_Init();
 800197c:	f000 f88a 	bl	8001a94 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001980:	f000 f8c6 	bl	8001b10 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  My_app(); // never return
 8001984:	f7ff fde4 	bl	8001550 <My_app>
  while (1)
 8001988:	e7fe      	b.n	8001988 <main+0x24>

0800198a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b096      	sub	sp, #88	; 0x58
 800198e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2244      	movs	r2, #68	; 0x44
 8001996:	2100      	movs	r1, #0
 8001998:	4618      	mov	r0, r3
 800199a:	f004 fe61 	bl	8006660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199e:	463b      	mov	r3, r7
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019b0:	f001 f84a 	bl	8002a48 <HAL_PWREx_ControlVoltageScaling>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019ba:	f000 f989 	bl	8001cd0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80019be:	2310      	movs	r3, #16
 80019c0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019c2:	2301      	movs	r3, #1
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019ca:	2360      	movs	r3, #96	; 0x60
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4618      	mov	r0, r3
 80019d8:	f001 f88c 	bl	8002af4 <HAL_RCC_OscConfig>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80019e2:	f000 f975 	bl	8001cd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e6:	230f      	movs	r3, #15
 80019e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019fa:	463b      	mov	r3, r7
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f001 fc5e 	bl	80032c0 <HAL_RCC_ClockConfig>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001a0a:	f000 f961 	bl	8001cd0 <Error_Handler>
  }
}
 8001a0e:	bf00      	nop
 8001a10:	3758      	adds	r7, #88	; 0x58
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <MX_I2C1_Init+0x74>)
 8001a1e:	4a1c      	ldr	r2, [pc, #112]	; (8001a90 <MX_I2C1_Init+0x78>)
 8001a20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00008BFF;
 8001a22:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <MX_I2C1_Init+0x74>)
 8001a24:	f648 32ff 	movw	r2, #35839	; 0x8bff
 8001a28:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <MX_I2C1_Init+0x74>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <MX_I2C1_Init+0x74>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <MX_I2C1_Init+0x74>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <MX_I2C1_Init+0x74>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <MX_I2C1_Init+0x74>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <MX_I2C1_Init+0x74>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_I2C1_Init+0x74>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a54:	480d      	ldr	r0, [pc, #52]	; (8001a8c <MX_I2C1_Init+0x74>)
 8001a56:	f000 fec3 	bl	80027e0 <HAL_I2C_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a60:	f000 f936 	bl	8001cd0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a64:	2100      	movs	r1, #0
 8001a66:	4809      	ldr	r0, [pc, #36]	; (8001a8c <MX_I2C1_Init+0x74>)
 8001a68:	f000 ff49 	bl	80028fe <HAL_I2CEx_ConfigAnalogFilter>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001a72:	f000 f92d 	bl	8001cd0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a76:	2100      	movs	r1, #0
 8001a78:	4804      	ldr	r0, [pc, #16]	; (8001a8c <MX_I2C1_Init+0x74>)
 8001a7a:	f000 ff8b 	bl	8002994 <HAL_I2CEx_ConfigDigitalFilter>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001a84:	f000 f924 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	2000026c 	.word	0x2000026c
 8001a90:	40005400 	.word	0x40005400

08001a94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <MX_SPI1_Init+0x74>)
 8001a9a:	4a1c      	ldr	r2, [pc, #112]	; (8001b0c <MX_SPI1_Init+0x78>)
 8001a9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <MX_SPI1_Init+0x74>)
 8001aa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001aa4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <MX_SPI1_Init+0x74>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <MX_SPI1_Init+0x74>)
 8001aae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ab2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <MX_SPI1_Init+0x74>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <MX_SPI1_Init+0x74>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_SPI1_Init+0x74>)
 8001ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <MX_SPI1_Init+0x74>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_SPI1_Init+0x74>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <MX_SPI1_Init+0x74>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <MX_SPI1_Init+0x74>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <MX_SPI1_Init+0x74>)
 8001ae2:	2207      	movs	r2, #7
 8001ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <MX_SPI1_Init+0x74>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <MX_SPI1_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001af2:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_SPI1_Init+0x74>)
 8001af4:	f002 faa6 	bl	8004044 <HAL_SPI_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001afe:	f000 f8e7 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000208 	.word	0x20000208
 8001b0c:	40013000 	.word	0x40013000

08001b10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08c      	sub	sp, #48	; 0x30
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	2224      	movs	r2, #36	; 0x24
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f004 fd9e 	bl	8006660 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b24:	463b      	mov	r3, r7
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b2e:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <MX_TIM3_Init+0xa4>)
 8001b30:	4a21      	ldr	r2, [pc, #132]	; (8001bb8 <MX_TIM3_Init+0xa8>)
 8001b32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b34:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <MX_TIM3_Init+0xa4>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <MX_TIM3_Init+0xa4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <MX_TIM3_Init+0xa4>)
 8001b42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <MX_TIM3_Init+0xa4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <MX_TIM3_Init+0xa4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b54:	2301      	movs	r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <MX_TIM3_Init+0xa4>)
 8001b80:	f002 fdd2 	bl	8004728 <HAL_TIM_Encoder_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001b8a:	f000 f8a1 	bl	8001cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b96:	463b      	mov	r3, r7
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4806      	ldr	r0, [pc, #24]	; (8001bb4 <MX_TIM3_Init+0xa4>)
 8001b9c:	f002 ffb8 	bl	8004b10 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001ba6:	f000 f893 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	3730      	adds	r7, #48	; 0x30
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	2000033c 	.word	0x2000033c
 8001bb8:	40000400 	.word	0x40000400

08001bbc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001bc0:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <MX_UART4_Init+0x58>)
 8001bc2:	4a15      	ldr	r2, [pc, #84]	; (8001c18 <MX_UART4_Init+0x5c>)
 8001bc4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <MX_UART4_Init+0x58>)
 8001bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bcc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_UART4_Init+0x58>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <MX_UART4_Init+0x58>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_UART4_Init+0x58>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_UART4_Init+0x58>)
 8001be2:	220c      	movs	r2, #12
 8001be4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <MX_UART4_Init+0x58>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_UART4_Init+0x58>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <MX_UART4_Init+0x58>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_UART4_Init+0x58>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_UART4_Init+0x58>)
 8001c00:	f003 f80e 	bl	8004c20 <HAL_UART_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001c0a:	f000 f861 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200002b8 	.word	0x200002b8
 8001c18:	40004c00 	.word	0x40004c00

08001c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	f107 030c 	add.w	r3, r7, #12
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c32:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <MX_GPIO_Init+0xac>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	4a24      	ldr	r2, [pc, #144]	; (8001cc8 <MX_GPIO_Init+0xac>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c3e:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <MX_GPIO_Init+0xac>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <MX_GPIO_Init+0xac>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	4a1e      	ldr	r2, [pc, #120]	; (8001cc8 <MX_GPIO_Init+0xac>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c56:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <MX_GPIO_Init+0xac>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c62:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <MX_GPIO_Init+0xac>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <MX_GPIO_Init+0xac>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6e:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <MX_GPIO_Init+0xac>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c84:	f000 fd94 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	4619      	mov	r1, r3
 8001c9a:	480c      	ldr	r0, [pc, #48]	; (8001ccc <MX_GPIO_Init+0xb0>)
 8001c9c:	f000 fbde 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001ca0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001ca4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cbc:	f000 fbce 	bl	800245c <HAL_GPIO_Init>

}
 8001cc0:	bf00      	nop
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	48000800 	.word	0x48000800

08001cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd4:	b672      	cpsid	i
}
 8001cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <Error_Handler+0x8>
	...

08001cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_MspInit+0x44>)
 8001ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce6:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <HAL_MspInit+0x44>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6613      	str	r3, [r2, #96]	; 0x60
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <HAL_MspInit+0x44>)
 8001cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_MspInit+0x44>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <HAL_MspInit+0x44>)
 8001d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d04:	6593      	str	r3, [r2, #88]	; 0x58
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_MspInit+0x44>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000

08001d24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b0ac      	sub	sp, #176	; 0xb0
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2288      	movs	r2, #136	; 0x88
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f004 fc8b 	bl	8006660 <memset>
  if(hi2c->Instance==I2C1)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <HAL_I2C_MspInit+0xb0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d13b      	bne.n	8001dcc <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d54:	2340      	movs	r3, #64	; 0x40
 8001d56:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4618      	mov	r0, r3
 8001d62:	f001 fcb3 	bl	80036cc <HAL_RCCEx_PeriphCLKConfig>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d6c:	f7ff ffb0 	bl	8001cd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001d76:	f043 0302 	orr.w	r3, r3, #2
 8001d7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d90:	2312      	movs	r3, #18
 8001d92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001da2:	2304      	movs	r3, #4
 8001da4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dac:	4619      	mov	r1, r3
 8001dae:	480b      	ldr	r0, [pc, #44]	; (8001ddc <HAL_I2C_MspInit+0xb8>)
 8001db0:	f000 fb54 	bl	800245c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	4a07      	ldr	r2, [pc, #28]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001dba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dcc:	bf00      	nop
 8001dce:	37b0      	adds	r7, #176	; 0xb0
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40005400 	.word	0x40005400
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	48000400 	.word	0x48000400

08001de0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <HAL_SPI_MspInit+0x7c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d128      	bne.n	8001e54 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_SPI_MspInit+0x80>)
 8001e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e06:	4a16      	ldr	r2, [pc, #88]	; (8001e60 <HAL_SPI_MspInit+0x80>)
 8001e08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_SPI_MspInit+0x80>)
 8001e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <HAL_SPI_MspInit+0x80>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	4a10      	ldr	r2, [pc, #64]	; (8001e60 <HAL_SPI_MspInit+0x80>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_SPI_MspInit+0x80>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e32:	23a0      	movs	r3, #160	; 0xa0
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e42:	2305      	movs	r3, #5
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e50:	f000 fb04 	bl	800245c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e54:	bf00      	nop
 8001e56:	3728      	adds	r7, #40	; 0x28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40013000 	.word	0x40013000
 8001e60:	40021000 	.word	0x40021000

08001e64 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d127      	bne.n	8001ed6 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	6593      	str	r3, [r2, #88]	; 0x58
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eb6:	23c0      	movs	r3, #192	; 0xc0
 8001eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001ed2:	f000 fac3 	bl	800245c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ed6:	bf00      	nop
 8001ed8:	3728      	adds	r7, #40	; 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	48000800 	.word	0x48000800

08001eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b0ac      	sub	sp, #176	; 0xb0
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	2288      	movs	r2, #136	; 0x88
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f004 fba7 	bl	8006660 <memset>
  if(huart->Instance==UART4)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a21      	ldr	r2, [pc, #132]	; (8001f9c <HAL_UART_MspInit+0xb0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d13b      	bne.n	8001f94 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001f20:	2300      	movs	r3, #0
 8001f22:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f001 fbcf 	bl	80036cc <HAL_RCCEx_PeriphCLKConfig>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f34:	f7ff fecc 	bl	8001cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f38:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <HAL_UART_MspInit+0xb4>)
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3c:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <HAL_UART_MspInit+0xb4>)
 8001f3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f42:	6593      	str	r3, [r2, #88]	; 0x58
 8001f44:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <HAL_UART_MspInit+0xb4>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <HAL_UART_MspInit+0xb4>)
 8001f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f54:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <HAL_UART_MspInit+0xb4>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5c:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_UART_MspInit+0xb4>)
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f80:	2308      	movs	r3, #8
 8001f82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f90:	f000 fa64 	bl	800245c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001f94:	bf00      	nop
 8001f96:	37b0      	adds	r7, #176	; 0xb0
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40004c00 	.word	0x40004c00
 8001fa0:	40021000 	.word	0x40021000

08001fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <NMI_Handler+0x4>

08001faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fae:	e7fe      	b.n	8001fae <HardFault_Handler+0x4>

08001fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <MemManage_Handler+0x4>

08001fb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fba:	e7fe      	b.n	8001fba <BusFault_Handler+0x4>

08001fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <UsageFault_Handler+0x4>

08001fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff0:	f000 f90a 	bl	8002208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
	return 1;
 8001ffc:	2301      	movs	r3, #1
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <_kill>:

int _kill(int pid, int sig)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002012:	f004 fadb 	bl	80065cc <__errno>
 8002016:	4603      	mov	r3, r0
 8002018:	2216      	movs	r2, #22
 800201a:	601a      	str	r2, [r3, #0]
	return -1;
 800201c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <_exit>:

void _exit (int status)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002030:	f04f 31ff 	mov.w	r1, #4294967295
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ffe7 	bl	8002008 <_kill>
	while (1) {}		/* Make sure we hang here */
 800203a:	e7fe      	b.n	800203a <_exit+0x12>

0800203c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002044:	4a14      	ldr	r2, [pc, #80]	; (8002098 <_sbrk+0x5c>)
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <_sbrk+0x60>)
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <_sbrk+0x64>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d102      	bne.n	800205e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <_sbrk+0x64>)
 800205a:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <_sbrk+0x68>)
 800205c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	429a      	cmp	r2, r3
 800206a:	d207      	bcs.n	800207c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800206c:	f004 faae 	bl	80065cc <__errno>
 8002070:	4603      	mov	r3, r0
 8002072:	220c      	movs	r2, #12
 8002074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	e009      	b.n	8002090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <_sbrk+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002082:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <_sbrk+0x64>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <_sbrk+0x64>)
 800208c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208e:	68fb      	ldr	r3, [r7, #12]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20018000 	.word	0x20018000
 800209c:	00000400 	.word	0x00000400
 80020a0:	2000012c 	.word	0x2000012c
 80020a4:	200003a0 	.word	0x200003a0

080020a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020ac:	4b15      	ldr	r3, [pc, #84]	; (8002104 <SystemInit+0x5c>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	4a14      	ldr	r2, [pc, #80]	; (8002104 <SystemInit+0x5c>)
 80020b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <SystemInit+0x60>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a11      	ldr	r2, [pc, #68]	; (8002108 <SystemInit+0x60>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <SystemInit+0x60>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <SystemInit+0x60>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a0d      	ldr	r2, [pc, #52]	; (8002108 <SystemInit+0x60>)
 80020d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80020d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80020dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <SystemInit+0x60>)
 80020e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <SystemInit+0x60>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a07      	ldr	r2, [pc, #28]	; (8002108 <SystemInit+0x60>)
 80020ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <SystemInit+0x60>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000ed00 	.word	0xe000ed00
 8002108:	40021000 	.word	0x40021000

0800210c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800210c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002144 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002110:	f7ff ffca 	bl	80020a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002114:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002116:	e003      	b.n	8002120 <LoopCopyDataInit>

08002118 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800211a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800211c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800211e:	3104      	adds	r1, #4

08002120 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002120:	480a      	ldr	r0, [pc, #40]	; (800214c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002124:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002126:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002128:	d3f6      	bcc.n	8002118 <CopyDataInit>
	ldr	r2, =_sbss
 800212a:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <LoopForever+0x12>)
	b	LoopFillZerobss
 800212c:	e002      	b.n	8002134 <LoopFillZerobss>

0800212e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800212e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002130:	f842 3b04 	str.w	r3, [r2], #4

08002134 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <LoopForever+0x16>)
	cmp	r2, r3
 8002136:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002138:	d3f9      	bcc.n	800212e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800213a:	f004 fa4d 	bl	80065d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800213e:	f7ff fc11 	bl	8001964 <main>

08002142 <LoopForever>:

LoopForever:
    b LoopForever
 8002142:	e7fe      	b.n	8002142 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002144:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002148:	08007930 	.word	0x08007930
	ldr	r0, =_sdata
 800214c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002150:	20000094 	.word	0x20000094
	ldr	r2, =_sbss
 8002154:	20000094 	.word	0x20000094
	ldr	r3, = _ebss
 8002158:	2000039c 	.word	0x2000039c

0800215c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800215c:	e7fe      	b.n	800215c <ADC1_2_IRQHandler>

0800215e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002168:	2003      	movs	r0, #3
 800216a:	f000 f943 	bl	80023f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800216e:	200f      	movs	r0, #15
 8002170:	f000 f80e 	bl	8002190 <HAL_InitTick>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	71fb      	strb	r3, [r7, #7]
 800217e:	e001      	b.n	8002184 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002180:	f7ff fdac 	bl	8001cdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002184:	79fb      	ldrb	r3, [r7, #7]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800219c:	4b17      	ldr	r3, [pc, #92]	; (80021fc <HAL_InitTick+0x6c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d023      	beq.n	80021ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021a4:	4b16      	ldr	r3, [pc, #88]	; (8002200 <HAL_InitTick+0x70>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b14      	ldr	r3, [pc, #80]	; (80021fc <HAL_InitTick+0x6c>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	4619      	mov	r1, r3
 80021ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f941 	bl	8002442 <HAL_SYSTICK_Config>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10f      	bne.n	80021e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b0f      	cmp	r3, #15
 80021ca:	d809      	bhi.n	80021e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021cc:	2200      	movs	r2, #0
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	f000 f919 	bl	800240a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021d8:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <HAL_InitTick+0x74>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	e007      	b.n	80021f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	e004      	b.n	80021f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	73fb      	strb	r3, [r7, #15]
 80021ea:	e001      	b.n	80021f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	2000001c 	.word	0x2000001c
 8002200:	20000014 	.word	0x20000014
 8002204:	20000018 	.word	0x20000018

08002208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_IncTick+0x20>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_IncTick+0x24>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4413      	add	r3, r2
 8002218:	4a04      	ldr	r2, [pc, #16]	; (800222c <HAL_IncTick+0x24>)
 800221a:	6013      	str	r3, [r2, #0]
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	2000001c 	.word	0x2000001c
 800222c:	20000388 	.word	0x20000388

08002230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return uwTick;
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <HAL_GetTick+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000388 	.word	0x20000388

08002248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002250:	f7ff ffee 	bl	8002230 <HAL_GetTick>
 8002254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d005      	beq.n	800226e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002262:	4b0a      	ldr	r3, [pc, #40]	; (800228c <HAL_Delay+0x44>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800226e:	bf00      	nop
 8002270:	f7ff ffde 	bl	8002230 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	429a      	cmp	r2, r3
 800227e:	d8f7      	bhi.n	8002270 <HAL_Delay+0x28>
  {
  }
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	2000001c 	.word	0x2000001c

08002290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022ac:	4013      	ands	r3, r2
 80022ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022c2:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	60d3      	str	r3, [r2, #12]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <__NVIC_GetPriorityGrouping+0x18>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	f003 0307 	and.w	r3, r3, #7
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	6039      	str	r1, [r7, #0]
 80022fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	2b00      	cmp	r3, #0
 8002306:	db0a      	blt.n	800231e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	490c      	ldr	r1, [pc, #48]	; (8002340 <__NVIC_SetPriority+0x4c>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	0112      	lsls	r2, r2, #4
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	440b      	add	r3, r1
 8002318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800231c:	e00a      	b.n	8002334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4908      	ldr	r1, [pc, #32]	; (8002344 <__NVIC_SetPriority+0x50>)
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	3b04      	subs	r3, #4
 800232c:	0112      	lsls	r2, r2, #4
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	440b      	add	r3, r1
 8002332:	761a      	strb	r2, [r3, #24]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000e100 	.word	0xe000e100
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f1c3 0307 	rsb	r3, r3, #7
 8002362:	2b04      	cmp	r3, #4
 8002364:	bf28      	it	cs
 8002366:	2304      	movcs	r3, #4
 8002368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3304      	adds	r3, #4
 800236e:	2b06      	cmp	r3, #6
 8002370:	d902      	bls.n	8002378 <NVIC_EncodePriority+0x30>
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3b03      	subs	r3, #3
 8002376:	e000      	b.n	800237a <NVIC_EncodePriority+0x32>
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	f04f 32ff 	mov.w	r2, #4294967295
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43da      	mvns	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	401a      	ands	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002390:	f04f 31ff 	mov.w	r1, #4294967295
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa01 f303 	lsl.w	r3, r1, r3
 800239a:	43d9      	mvns	r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	4313      	orrs	r3, r2
         );
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3724      	adds	r7, #36	; 0x24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023c0:	d301      	bcc.n	80023c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023c2:	2301      	movs	r3, #1
 80023c4:	e00f      	b.n	80023e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023c6:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <SysTick_Config+0x40>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ce:	210f      	movs	r1, #15
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295
 80023d4:	f7ff ff8e 	bl	80022f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <SysTick_Config+0x40>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023de:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <SysTick_Config+0x40>)
 80023e0:	2207      	movs	r2, #7
 80023e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	e000e010 	.word	0xe000e010

080023f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ff47 	bl	8002290 <__NVIC_SetPriorityGrouping>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800241c:	f7ff ff5c 	bl	80022d8 <__NVIC_GetPriorityGrouping>
 8002420:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68b9      	ldr	r1, [r7, #8]
 8002426:	6978      	ldr	r0, [r7, #20]
 8002428:	f7ff ff8e 	bl	8002348 <NVIC_EncodePriority>
 800242c:	4602      	mov	r2, r0
 800242e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff5d 	bl	80022f4 <__NVIC_SetPriority>
}
 800243a:	bf00      	nop
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ffb0 	bl	80023b0 <SysTick_Config>
 8002450:	4603      	mov	r3, r0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246a:	e17f      	b.n	800276c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	2101      	movs	r1, #1
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	fa01 f303 	lsl.w	r3, r1, r3
 8002478:	4013      	ands	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8171 	beq.w	8002766 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d00b      	beq.n	80024a4 <HAL_GPIO_Init+0x48>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d007      	beq.n	80024a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002498:	2b11      	cmp	r3, #17
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b12      	cmp	r3, #18
 80024a2:	d130      	bne.n	8002506 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	2203      	movs	r2, #3
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024da:	2201      	movs	r2, #1
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	091b      	lsrs	r3, r3, #4
 80024f0:	f003 0201 	and.w	r2, r3, #1
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b03      	cmp	r3, #3
 8002510:	d118      	bne.n	8002544 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002518:	2201      	movs	r2, #1
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	08db      	lsrs	r3, r3, #3
 800252e:	f003 0201 	and.w	r2, r3, #1
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	2203      	movs	r2, #3
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x128>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b12      	cmp	r3, #18
 8002582:	d123      	bne.n	80025cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	08da      	lsrs	r2, r3, #3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3208      	adds	r2, #8
 800258c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	220f      	movs	r2, #15
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	08da      	lsrs	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3208      	adds	r2, #8
 80025c6:	6939      	ldr	r1, [r7, #16]
 80025c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	2203      	movs	r2, #3
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4013      	ands	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0203 	and.w	r2, r3, #3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80ac 	beq.w	8002766 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260e:	4b5f      	ldr	r3, [pc, #380]	; (800278c <HAL_GPIO_Init+0x330>)
 8002610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002612:	4a5e      	ldr	r2, [pc, #376]	; (800278c <HAL_GPIO_Init+0x330>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6613      	str	r3, [r2, #96]	; 0x60
 800261a:	4b5c      	ldr	r3, [pc, #368]	; (800278c <HAL_GPIO_Init+0x330>)
 800261c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002626:	4a5a      	ldr	r2, [pc, #360]	; (8002790 <HAL_GPIO_Init+0x334>)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	3302      	adds	r3, #2
 800262e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002632:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	220f      	movs	r2, #15
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002650:	d025      	beq.n	800269e <HAL_GPIO_Init+0x242>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4f      	ldr	r2, [pc, #316]	; (8002794 <HAL_GPIO_Init+0x338>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01f      	beq.n	800269a <HAL_GPIO_Init+0x23e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4e      	ldr	r2, [pc, #312]	; (8002798 <HAL_GPIO_Init+0x33c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d019      	beq.n	8002696 <HAL_GPIO_Init+0x23a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4d      	ldr	r2, [pc, #308]	; (800279c <HAL_GPIO_Init+0x340>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_GPIO_Init+0x236>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4c      	ldr	r2, [pc, #304]	; (80027a0 <HAL_GPIO_Init+0x344>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00d      	beq.n	800268e <HAL_GPIO_Init+0x232>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4b      	ldr	r2, [pc, #300]	; (80027a4 <HAL_GPIO_Init+0x348>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d007      	beq.n	800268a <HAL_GPIO_Init+0x22e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4a      	ldr	r2, [pc, #296]	; (80027a8 <HAL_GPIO_Init+0x34c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d101      	bne.n	8002686 <HAL_GPIO_Init+0x22a>
 8002682:	2306      	movs	r3, #6
 8002684:	e00c      	b.n	80026a0 <HAL_GPIO_Init+0x244>
 8002686:	2307      	movs	r3, #7
 8002688:	e00a      	b.n	80026a0 <HAL_GPIO_Init+0x244>
 800268a:	2305      	movs	r3, #5
 800268c:	e008      	b.n	80026a0 <HAL_GPIO_Init+0x244>
 800268e:	2304      	movs	r3, #4
 8002690:	e006      	b.n	80026a0 <HAL_GPIO_Init+0x244>
 8002692:	2303      	movs	r3, #3
 8002694:	e004      	b.n	80026a0 <HAL_GPIO_Init+0x244>
 8002696:	2302      	movs	r3, #2
 8002698:	e002      	b.n	80026a0 <HAL_GPIO_Init+0x244>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <HAL_GPIO_Init+0x244>
 800269e:	2300      	movs	r3, #0
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	f002 0203 	and.w	r2, r2, #3
 80026a6:	0092      	lsls	r2, r2, #2
 80026a8:	4093      	lsls	r3, r2
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026b0:	4937      	ldr	r1, [pc, #220]	; (8002790 <HAL_GPIO_Init+0x334>)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	089b      	lsrs	r3, r3, #2
 80026b6:	3302      	adds	r3, #2
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026be:	4b3b      	ldr	r3, [pc, #236]	; (80027ac <HAL_GPIO_Init+0x350>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026e2:	4a32      	ldr	r2, [pc, #200]	; (80027ac <HAL_GPIO_Init+0x350>)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80026e8:	4b30      	ldr	r3, [pc, #192]	; (80027ac <HAL_GPIO_Init+0x350>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800270c:	4a27      	ldr	r2, [pc, #156]	; (80027ac <HAL_GPIO_Init+0x350>)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002712:	4b26      	ldr	r3, [pc, #152]	; (80027ac <HAL_GPIO_Init+0x350>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	43db      	mvns	r3, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4013      	ands	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002736:	4a1d      	ldr	r2, [pc, #116]	; (80027ac <HAL_GPIO_Init+0x350>)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800273c:	4b1b      	ldr	r3, [pc, #108]	; (80027ac <HAL_GPIO_Init+0x350>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	43db      	mvns	r3, r3
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002760:	4a12      	ldr	r2, [pc, #72]	; (80027ac <HAL_GPIO_Init+0x350>)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3301      	adds	r3, #1
 800276a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	fa22 f303 	lsr.w	r3, r2, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	f47f ae78 	bne.w	800246c <HAL_GPIO_Init+0x10>
  }
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	371c      	adds	r7, #28
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000
 8002790:	40010000 	.word	0x40010000
 8002794:	48000400 	.word	0x48000400
 8002798:	48000800 	.word	0x48000800
 800279c:	48000c00 	.word	0x48000c00
 80027a0:	48001000 	.word	0x48001000
 80027a4:	48001400 	.word	0x48001400
 80027a8:	48001800 	.word	0x48001800
 80027ac:	40010400 	.word	0x40010400

080027b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
 80027bc:	4613      	mov	r3, r2
 80027be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c0:	787b      	ldrb	r3, [r7, #1]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027cc:	e002      	b.n	80027d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ce:	887a      	ldrh	r2, [r7, #2]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e081      	b.n	80028f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff fa8c 	bl	8001d24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2224      	movs	r2, #36	; 0x24
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002830:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002840:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d107      	bne.n	800285a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	e006      	b.n	8002868 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002866:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d104      	bne.n	800287a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002878:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800288c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800289c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	ea42 0103 	orr.w	r1, r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	021a      	lsls	r2, r3, #8
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69d9      	ldr	r1, [r3, #28]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1a      	ldr	r2, [r3, #32]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b20      	cmp	r3, #32
 8002912:	d138      	bne.n	8002986 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800291e:	2302      	movs	r3, #2
 8002920:	e032      	b.n	8002988 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2224      	movs	r2, #36	; 0x24
 800292e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0201 	bic.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002950:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6819      	ldr	r1, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	e000      	b.n	8002988 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002986:	2302      	movs	r3, #2
  }
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b20      	cmp	r3, #32
 80029a8:	d139      	bne.n	8002a1e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e033      	b.n	8002a20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2224      	movs	r2, #36	; 0x24
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	021b      	lsls	r3, r3, #8
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	e000      	b.n	8002a20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a1e:	2302      	movs	r3, #2
  }
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40007000 	.word	0x40007000

08002a48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a56:	d130      	bne.n	8002aba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a58:	4b23      	ldr	r3, [pc, #140]	; (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a64:	d038      	beq.n	8002ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a66:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2232      	movs	r2, #50	; 0x32
 8002a7c:	fb02 f303 	mul.w	r3, r2, r3
 8002a80:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	0c9b      	lsrs	r3, r3, #18
 8002a88:	3301      	adds	r3, #1
 8002a8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a8c:	e002      	b.n	8002a94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a94:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa0:	d102      	bne.n	8002aa8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f2      	bne.n	8002a8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab4:	d110      	bne.n	8002ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e00f      	b.n	8002ada <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aba:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac6:	d007      	beq.n	8002ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ac8:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ad0:	4a05      	ldr	r2, [pc, #20]	; (8002ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ad6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40007000 	.word	0x40007000
 8002aec:	20000014 	.word	0x20000014
 8002af0:	431bde83 	.word	0x431bde83

08002af4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e3d4      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b06:	4ba1      	ldr	r3, [pc, #644]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b10:	4b9e      	ldr	r3, [pc, #632]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 80e4 	beq.w	8002cf0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <HAL_RCC_OscConfig+0x4a>
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	2b0c      	cmp	r3, #12
 8002b32:	f040 808b 	bne.w	8002c4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 8087 	bne.w	8002c4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b3e:	4b93      	ldr	r3, [pc, #588]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_RCC_OscConfig+0x62>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e3ac      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1a      	ldr	r2, [r3, #32]
 8002b5a:	4b8c      	ldr	r3, [pc, #560]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d004      	beq.n	8002b70 <HAL_RCC_OscConfig+0x7c>
 8002b66:	4b89      	ldr	r3, [pc, #548]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b6e:	e005      	b.n	8002b7c <HAL_RCC_OscConfig+0x88>
 8002b70:	4b86      	ldr	r3, [pc, #536]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b76:	091b      	lsrs	r3, r3, #4
 8002b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d223      	bcs.n	8002bc8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 fd41 	bl	800360c <RCC_SetFlashLatencyFromMSIRange>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e38d      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b94:	4b7d      	ldr	r3, [pc, #500]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a7c      	ldr	r2, [pc, #496]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002b9a:	f043 0308 	orr.w	r3, r3, #8
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	4b7a      	ldr	r3, [pc, #488]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	4977      	ldr	r1, [pc, #476]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bb2:	4b76      	ldr	r3, [pc, #472]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	4972      	ldr	r1, [pc, #456]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	604b      	str	r3, [r1, #4]
 8002bc6:	e025      	b.n	8002c14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bc8:	4b70      	ldr	r3, [pc, #448]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a6f      	ldr	r2, [pc, #444]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002bce:	f043 0308 	orr.w	r3, r3, #8
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	4b6d      	ldr	r3, [pc, #436]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	496a      	ldr	r1, [pc, #424]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002be6:	4b69      	ldr	r3, [pc, #420]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	021b      	lsls	r3, r3, #8
 8002bf4:	4965      	ldr	r1, [pc, #404]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d109      	bne.n	8002c14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fd01 	bl	800360c <RCC_SetFlashLatencyFromMSIRange>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e34d      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c14:	f000 fc36 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b5c      	ldr	r3, [pc, #368]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	495a      	ldr	r1, [pc, #360]	; (8002d90 <HAL_RCC_OscConfig+0x29c>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c30:	4a58      	ldr	r2, [pc, #352]	; (8002d94 <HAL_RCC_OscConfig+0x2a0>)
 8002c32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c34:	4b58      	ldr	r3, [pc, #352]	; (8002d98 <HAL_RCC_OscConfig+0x2a4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff faa9 	bl	8002190 <HAL_InitTick>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d052      	beq.n	8002cee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	e331      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d032      	beq.n	8002cba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c54:	4b4d      	ldr	r3, [pc, #308]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a4c      	ldr	r2, [pc, #304]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c60:	f7ff fae6 	bl	8002230 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c68:	f7ff fae2 	bl	8002230 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e31a      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c7a:	4b44      	ldr	r3, [pc, #272]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c86:	4b41      	ldr	r3, [pc, #260]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a40      	ldr	r2, [pc, #256]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002c8c:	f043 0308 	orr.w	r3, r3, #8
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b3e      	ldr	r3, [pc, #248]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	493b      	ldr	r1, [pc, #236]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca4:	4b39      	ldr	r3, [pc, #228]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	021b      	lsls	r3, r3, #8
 8002cb2:	4936      	ldr	r1, [pc, #216]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]
 8002cb8:	e01a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cba:	4b34      	ldr	r3, [pc, #208]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a33      	ldr	r2, [pc, #204]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cc6:	f7ff fab3 	bl	8002230 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cce:	f7ff faaf 	bl	8002230 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e2e7      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ce0:	4b2a      	ldr	r3, [pc, #168]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f0      	bne.n	8002cce <HAL_RCC_OscConfig+0x1da>
 8002cec:	e000      	b.n	8002cf0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d074      	beq.n	8002de6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d005      	beq.n	8002d0e <HAL_RCC_OscConfig+0x21a>
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b0c      	cmp	r3, #12
 8002d06:	d10e      	bne.n	8002d26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2b03      	cmp	r3, #3
 8002d0c:	d10b      	bne.n	8002d26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0e:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d064      	beq.n	8002de4 <HAL_RCC_OscConfig+0x2f0>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d160      	bne.n	8002de4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e2c4      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2e:	d106      	bne.n	8002d3e <HAL_RCC_OscConfig+0x24a>
 8002d30:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a15      	ldr	r2, [pc, #84]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	e01d      	b.n	8002d7a <HAL_RCC_OscConfig+0x286>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d46:	d10c      	bne.n	8002d62 <HAL_RCC_OscConfig+0x26e>
 8002d48:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a0f      	ldr	r2, [pc, #60]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0c      	ldr	r2, [pc, #48]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	e00b      	b.n	8002d7a <HAL_RCC_OscConfig+0x286>
 8002d62:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a06      	ldr	r2, [pc, #24]	; (8002d8c <HAL_RCC_OscConfig+0x298>)
 8002d74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d78:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01c      	beq.n	8002dbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d82:	f7ff fa55 	bl	8002230 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d88:	e011      	b.n	8002dae <HAL_RCC_OscConfig+0x2ba>
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	08006d44 	.word	0x08006d44
 8002d94:	20000014 	.word	0x20000014
 8002d98:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d9c:	f7ff fa48 	bl	8002230 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	; 0x64
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e280      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dae:	4baf      	ldr	r3, [pc, #700]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x2a8>
 8002dba:	e014      	b.n	8002de6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7ff fa38 	bl	8002230 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc4:	f7ff fa34 	bl	8002230 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e26c      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dd6:	4ba5      	ldr	r3, [pc, #660]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x2d0>
 8002de2:	e000      	b.n	8002de6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d060      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_OscConfig+0x310>
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2b0c      	cmp	r3, #12
 8002dfc:	d119      	bne.n	8002e32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d116      	bne.n	8002e32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e04:	4b99      	ldr	r3, [pc, #612]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCC_OscConfig+0x328>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e249      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1c:	4b93      	ldr	r3, [pc, #588]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	4990      	ldr	r1, [pc, #576]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e30:	e040      	b.n	8002eb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d023      	beq.n	8002e82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e3a:	4b8c      	ldr	r3, [pc, #560]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a8b      	ldr	r2, [pc, #556]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e46:	f7ff f9f3 	bl	8002230 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4e:	f7ff f9ef 	bl	8002230 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e227      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e60:	4b82      	ldr	r3, [pc, #520]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6c:	4b7f      	ldr	r3, [pc, #508]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	061b      	lsls	r3, r3, #24
 8002e7a:	497c      	ldr	r1, [pc, #496]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
 8002e80:	e018      	b.n	8002eb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e82:	4b7a      	ldr	r3, [pc, #488]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a79      	ldr	r2, [pc, #484]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8e:	f7ff f9cf 	bl	8002230 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e96:	f7ff f9cb 	bl	8002230 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e203      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ea8:	4b70      	ldr	r3, [pc, #448]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1f0      	bne.n	8002e96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d03c      	beq.n	8002f3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d01c      	beq.n	8002f02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec8:	4b68      	ldr	r3, [pc, #416]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ece:	4a67      	ldr	r2, [pc, #412]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed8:	f7ff f9aa 	bl	8002230 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee0:	f7ff f9a6 	bl	8002230 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e1de      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ef2:	4b5e      	ldr	r3, [pc, #376]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0ef      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x3ec>
 8002f00:	e01b      	b.n	8002f3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f02:	4b5a      	ldr	r3, [pc, #360]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f08:	4a58      	ldr	r2, [pc, #352]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002f0a:	f023 0301 	bic.w	r3, r3, #1
 8002f0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f12:	f7ff f98d 	bl	8002230 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f1a:	f7ff f989 	bl	8002230 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e1c1      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f2c:	4b4f      	ldr	r3, [pc, #316]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1ef      	bne.n	8002f1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 80a6 	beq.w	8003094 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f4c:	4b47      	ldr	r3, [pc, #284]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10d      	bne.n	8002f74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f58:	4b44      	ldr	r3, [pc, #272]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	4a43      	ldr	r2, [pc, #268]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f62:	6593      	str	r3, [r2, #88]	; 0x58
 8002f64:	4b41      	ldr	r3, [pc, #260]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f70:	2301      	movs	r3, #1
 8002f72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f74:	4b3e      	ldr	r3, [pc, #248]	; (8003070 <HAL_RCC_OscConfig+0x57c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d118      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f80:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <HAL_RCC_OscConfig+0x57c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a3a      	ldr	r2, [pc, #232]	; (8003070 <HAL_RCC_OscConfig+0x57c>)
 8002f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f8c:	f7ff f950 	bl	8002230 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f94:	f7ff f94c 	bl	8002230 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e184      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fa6:	4b32      	ldr	r3, [pc, #200]	; (8003070 <HAL_RCC_OscConfig+0x57c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d108      	bne.n	8002fcc <HAL_RCC_OscConfig+0x4d8>
 8002fba:	4b2c      	ldr	r3, [pc, #176]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc0:	4a2a      	ldr	r2, [pc, #168]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fca:	e024      	b.n	8003016 <HAL_RCC_OscConfig+0x522>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b05      	cmp	r3, #5
 8002fd2:	d110      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x502>
 8002fd4:	4b25      	ldr	r3, [pc, #148]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fda:	4a24      	ldr	r2, [pc, #144]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002fdc:	f043 0304 	orr.w	r3, r3, #4
 8002fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fe4:	4b21      	ldr	r3, [pc, #132]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fea:	4a20      	ldr	r2, [pc, #128]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ff4:	e00f      	b.n	8003016 <HAL_RCC_OscConfig+0x522>
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffc:	4a1b      	ldr	r2, [pc, #108]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003006:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_RCC_OscConfig+0x578>)
 8003008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300c:	4a17      	ldr	r2, [pc, #92]	; (800306c <HAL_RCC_OscConfig+0x578>)
 800300e:	f023 0304 	bic.w	r3, r3, #4
 8003012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d016      	beq.n	800304c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301e:	f7ff f907 	bl	8002230 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003024:	e00a      	b.n	800303c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003026:	f7ff f903 	bl	8002230 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	f241 3288 	movw	r2, #5000	; 0x1388
 8003034:	4293      	cmp	r3, r2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e139      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_RCC_OscConfig+0x578>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0ed      	beq.n	8003026 <HAL_RCC_OscConfig+0x532>
 800304a:	e01a      	b.n	8003082 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304c:	f7ff f8f0 	bl	8002230 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003052:	e00f      	b.n	8003074 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003054:	f7ff f8ec 	bl	8002230 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d906      	bls.n	8003074 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e122      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003074:	4b90      	ldr	r3, [pc, #576]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1e8      	bne.n	8003054 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003082:	7ffb      	ldrb	r3, [r7, #31]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d105      	bne.n	8003094 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003088:	4b8b      	ldr	r3, [pc, #556]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	4a8a      	ldr	r2, [pc, #552]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 800308e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003092:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8108 	beq.w	80032ae <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	f040 80d0 	bne.w	8003248 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80030a8:	4b83      	ldr	r3, [pc, #524]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f003 0203 	and.w	r2, r3, #3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d130      	bne.n	800311e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	3b01      	subs	r3, #1
 80030c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d127      	bne.n	800311e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030da:	429a      	cmp	r2, r3
 80030dc:	d11f      	bne.n	800311e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030e8:	2a07      	cmp	r2, #7
 80030ea:	bf14      	ite	ne
 80030ec:	2201      	movne	r2, #1
 80030ee:	2200      	moveq	r2, #0
 80030f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d113      	bne.n	800311e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003100:	085b      	lsrs	r3, r3, #1
 8003102:	3b01      	subs	r3, #1
 8003104:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003106:	429a      	cmp	r2, r3
 8003108:	d109      	bne.n	800311e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	3b01      	subs	r3, #1
 8003118:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d06e      	beq.n	80031fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b0c      	cmp	r3, #12
 8003122:	d069      	beq.n	80031f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003124:	4b64      	ldr	r3, [pc, #400]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003130:	4b61      	ldr	r3, [pc, #388]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0b7      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003140:	4b5d      	ldr	r3, [pc, #372]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a5c      	ldr	r2, [pc, #368]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800314a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800314c:	f7ff f870 	bl	8002230 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003154:	f7ff f86c 	bl	8002230 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e0a4      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003166:	4b54      	ldr	r3, [pc, #336]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003172:	4b51      	ldr	r3, [pc, #324]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	4b51      	ldr	r3, [pc, #324]	; (80032bc <HAL_RCC_OscConfig+0x7c8>)
 8003178:	4013      	ands	r3, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003182:	3a01      	subs	r2, #1
 8003184:	0112      	lsls	r2, r2, #4
 8003186:	4311      	orrs	r1, r2
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800318c:	0212      	lsls	r2, r2, #8
 800318e:	4311      	orrs	r1, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003194:	0852      	lsrs	r2, r2, #1
 8003196:	3a01      	subs	r2, #1
 8003198:	0552      	lsls	r2, r2, #21
 800319a:	4311      	orrs	r1, r2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031a0:	0852      	lsrs	r2, r2, #1
 80031a2:	3a01      	subs	r2, #1
 80031a4:	0652      	lsls	r2, r2, #25
 80031a6:	4311      	orrs	r1, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031ac:	0912      	lsrs	r2, r2, #4
 80031ae:	0452      	lsls	r2, r2, #17
 80031b0:	430a      	orrs	r2, r1
 80031b2:	4941      	ldr	r1, [pc, #260]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80031b8:	4b3f      	ldr	r3, [pc, #252]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a3e      	ldr	r2, [pc, #248]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 80031be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031c4:	4b3c      	ldr	r3, [pc, #240]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4a3b      	ldr	r2, [pc, #236]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 80031ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031d0:	f7ff f82e 	bl	8002230 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d8:	f7ff f82a 	bl	8002230 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e062      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ea:	4b33      	ldr	r3, [pc, #204]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031f6:	e05a      	b.n	80032ae <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e059      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031fc:	4b2e      	ldr	r3, [pc, #184]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d152      	bne.n	80032ae <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003208:	4b2b      	ldr	r3, [pc, #172]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a2a      	ldr	r2, [pc, #168]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 800320e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003212:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003214:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4a27      	ldr	r2, [pc, #156]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 800321a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800321e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003220:	f7ff f806 	bl	8002230 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003228:	f7ff f802 	bl	8002230 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e03a      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800323a:	4b1f      	ldr	r3, [pc, #124]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0x734>
 8003246:	e032      	b.n	80032ae <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	2b0c      	cmp	r3, #12
 800324c:	d02d      	beq.n	80032aa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324e:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a19      	ldr	r2, [pc, #100]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003254:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003258:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800325a:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d105      	bne.n	8003272 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003266:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 800326c:	f023 0303 	bic.w	r3, r3, #3
 8003270:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003272:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	4a10      	ldr	r2, [pc, #64]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 8003278:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800327c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003280:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003282:	f7fe ffd5 	bl	8002230 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328a:	f7fe ffd1 	bl	8002230 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e009      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_RCC_OscConfig+0x7c4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f0      	bne.n	800328a <HAL_RCC_OscConfig+0x796>
 80032a8:	e001      	b.n	80032ae <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3720      	adds	r7, #32
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40021000 	.word	0x40021000
 80032bc:	f99d808c 	.word	0xf99d808c

080032c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0c8      	b.n	8003466 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032d4:	4b66      	ldr	r3, [pc, #408]	; (8003470 <HAL_RCC_ClockConfig+0x1b0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d910      	bls.n	8003304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e2:	4b63      	ldr	r3, [pc, #396]	; (8003470 <HAL_RCC_ClockConfig+0x1b0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 0207 	bic.w	r2, r3, #7
 80032ea:	4961      	ldr	r1, [pc, #388]	; (8003470 <HAL_RCC_ClockConfig+0x1b0>)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f2:	4b5f      	ldr	r3, [pc, #380]	; (8003470 <HAL_RCC_ClockConfig+0x1b0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0b0      	b.n	8003466 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d04c      	beq.n	80033aa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d107      	bne.n	8003328 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003318:	4b56      	ldr	r3, [pc, #344]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d121      	bne.n	8003368 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e09e      	b.n	8003466 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b02      	cmp	r3, #2
 800332e:	d107      	bne.n	8003340 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003330:	4b50      	ldr	r3, [pc, #320]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d115      	bne.n	8003368 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e092      	b.n	8003466 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d107      	bne.n	8003358 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003348:	4b4a      	ldr	r3, [pc, #296]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d109      	bne.n	8003368 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e086      	b.n	8003466 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003358:	4b46      	ldr	r3, [pc, #280]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e07e      	b.n	8003466 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003368:	4b42      	ldr	r3, [pc, #264]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f023 0203 	bic.w	r2, r3, #3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	493f      	ldr	r1, [pc, #252]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800337a:	f7fe ff59 	bl	8002230 <HAL_GetTick>
 800337e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003380:	e00a      	b.n	8003398 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003382:	f7fe ff55 	bl	8002230 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e066      	b.n	8003466 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003398:	4b36      	ldr	r3, [pc, #216]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 020c 	and.w	r2, r3, #12
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d1eb      	bne.n	8003382 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d008      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b6:	4b2f      	ldr	r3, [pc, #188]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	492c      	ldr	r1, [pc, #176]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033c8:	4b29      	ldr	r3, [pc, #164]	; (8003470 <HAL_RCC_ClockConfig+0x1b0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d210      	bcs.n	80033f8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b26      	ldr	r3, [pc, #152]	; (8003470 <HAL_RCC_ClockConfig+0x1b0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 0207 	bic.w	r2, r3, #7
 80033de:	4924      	ldr	r1, [pc, #144]	; (8003470 <HAL_RCC_ClockConfig+0x1b0>)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b22      	ldr	r3, [pc, #136]	; (8003470 <HAL_RCC_ClockConfig+0x1b0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e036      	b.n	8003466 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003404:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4918      	ldr	r1, [pc, #96]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003422:	4b14      	ldr	r3, [pc, #80]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4910      	ldr	r1, [pc, #64]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003436:	f000 f825 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 800343a:	4602      	mov	r2, r0
 800343c:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <HAL_RCC_ClockConfig+0x1b4>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	490c      	ldr	r1, [pc, #48]	; (8003478 <HAL_RCC_ClockConfig+0x1b8>)
 8003448:	5ccb      	ldrb	r3, [r1, r3]
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	fa22 f303 	lsr.w	r3, r2, r3
 8003452:	4a0a      	ldr	r2, [pc, #40]	; (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003456:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7fe fe98 	bl	8002190 <HAL_InitTick>
 8003460:	4603      	mov	r3, r0
 8003462:	72fb      	strb	r3, [r7, #11]

  return status;
 8003464:	7afb      	ldrb	r3, [r7, #11]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40022000 	.word	0x40022000
 8003474:	40021000 	.word	0x40021000
 8003478:	08006d44 	.word	0x08006d44
 800347c:	20000014 	.word	0x20000014
 8003480:	20000018 	.word	0x20000018

08003484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003484:	b480      	push	{r7}
 8003486:	b089      	sub	sp, #36	; 0x24
 8003488:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	2300      	movs	r3, #0
 8003490:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003492:	4b3e      	ldr	r3, [pc, #248]	; (800358c <HAL_RCC_GetSysClockFreq+0x108>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800349c:	4b3b      	ldr	r3, [pc, #236]	; (800358c <HAL_RCC_GetSysClockFreq+0x108>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_RCC_GetSysClockFreq+0x34>
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d121      	bne.n	80034f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d11e      	bne.n	80034f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034b8:	4b34      	ldr	r3, [pc, #208]	; (800358c <HAL_RCC_GetSysClockFreq+0x108>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034c4:	4b31      	ldr	r3, [pc, #196]	; (800358c <HAL_RCC_GetSysClockFreq+0x108>)
 80034c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	61fb      	str	r3, [r7, #28]
 80034d2:	e005      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034d4:	4b2d      	ldr	r3, [pc, #180]	; (800358c <HAL_RCC_GetSysClockFreq+0x108>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034e0:	4a2b      	ldr	r2, [pc, #172]	; (8003590 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10d      	bne.n	800350c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034f4:	e00a      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d102      	bne.n	8003502 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034fc:	4b25      	ldr	r3, [pc, #148]	; (8003594 <HAL_RCC_GetSysClockFreq+0x110>)
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	e004      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	2b08      	cmp	r3, #8
 8003506:	d101      	bne.n	800350c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003508:	4b23      	ldr	r3, [pc, #140]	; (8003598 <HAL_RCC_GetSysClockFreq+0x114>)
 800350a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	2b0c      	cmp	r3, #12
 8003510:	d134      	bne.n	800357c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003512:	4b1e      	ldr	r3, [pc, #120]	; (800358c <HAL_RCC_GetSysClockFreq+0x108>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d003      	beq.n	800352a <HAL_RCC_GetSysClockFreq+0xa6>
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d003      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0xac>
 8003528:	e005      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800352a:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <HAL_RCC_GetSysClockFreq+0x110>)
 800352c:	617b      	str	r3, [r7, #20]
      break;
 800352e:	e005      	b.n	800353c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_RCC_GetSysClockFreq+0x114>)
 8003532:	617b      	str	r3, [r7, #20]
      break;
 8003534:	e002      	b.n	800353c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	617b      	str	r3, [r7, #20]
      break;
 800353a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800353c:	4b13      	ldr	r3, [pc, #76]	; (800358c <HAL_RCC_GetSysClockFreq+0x108>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	3301      	adds	r3, #1
 8003548:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <HAL_RCC_GetSysClockFreq+0x108>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	0a1b      	lsrs	r3, r3, #8
 8003550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	fb02 f203 	mul.w	r2, r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003562:	4b0a      	ldr	r3, [pc, #40]	; (800358c <HAL_RCC_GetSysClockFreq+0x108>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	0e5b      	lsrs	r3, r3, #25
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	3301      	adds	r3, #1
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	fbb2 f3f3 	udiv	r3, r2, r3
 800357a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800357c:	69bb      	ldr	r3, [r7, #24]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3724      	adds	r7, #36	; 0x24
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40021000 	.word	0x40021000
 8003590:	08006d5c 	.word	0x08006d5c
 8003594:	00f42400 	.word	0x00f42400
 8003598:	007a1200 	.word	0x007a1200

0800359c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a0:	4b03      	ldr	r3, [pc, #12]	; (80035b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035a2:	681b      	ldr	r3, [r3, #0]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	20000014 	.word	0x20000014

080035b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035b8:	f7ff fff0 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	0a1b      	lsrs	r3, r3, #8
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	4904      	ldr	r1, [pc, #16]	; (80035dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000
 80035dc:	08006d54 	.word	0x08006d54

080035e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035e4:	f7ff ffda 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035e8:	4602      	mov	r2, r0
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	0adb      	lsrs	r3, r3, #11
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	4904      	ldr	r1, [pc, #16]	; (8003608 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035f6:	5ccb      	ldrb	r3, [r1, r3]
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000
 8003608:	08006d54 	.word	0x08006d54

0800360c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003614:	2300      	movs	r3, #0
 8003616:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003618:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003624:	f7ff fa02 	bl	8002a2c <HAL_PWREx_GetVoltageRange>
 8003628:	6178      	str	r0, [r7, #20]
 800362a:	e014      	b.n	8003656 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800362c:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003630:	4a24      	ldr	r2, [pc, #144]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003636:	6593      	str	r3, [r2, #88]	; 0x58
 8003638:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003644:	f7ff f9f2 	bl	8002a2c <HAL_PWREx_GetVoltageRange>
 8003648:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800364a:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800364c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364e:	4a1d      	ldr	r2, [pc, #116]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003654:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365c:	d10b      	bne.n	8003676 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b80      	cmp	r3, #128	; 0x80
 8003662:	d919      	bls.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2ba0      	cmp	r3, #160	; 0xa0
 8003668:	d902      	bls.n	8003670 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800366a:	2302      	movs	r3, #2
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	e013      	b.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003670:	2301      	movs	r3, #1
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	e010      	b.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b80      	cmp	r3, #128	; 0x80
 800367a:	d902      	bls.n	8003682 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800367c:	2303      	movs	r3, #3
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	e00a      	b.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b80      	cmp	r3, #128	; 0x80
 8003686:	d102      	bne.n	800368e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003688:	2302      	movs	r3, #2
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	e004      	b.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b70      	cmp	r3, #112	; 0x70
 8003692:	d101      	bne.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003694:	2301      	movs	r3, #1
 8003696:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f023 0207 	bic.w	r2, r3, #7
 80036a0:	4909      	ldr	r1, [pc, #36]	; (80036c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036a8:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d001      	beq.n	80036ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40022000 	.word	0x40022000

080036cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036d4:	2300      	movs	r3, #0
 80036d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036d8:	2300      	movs	r3, #0
 80036da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d041      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036f0:	d02a      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036f6:	d824      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036fc:	d008      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003702:	d81e      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800370c:	d010      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800370e:	e018      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003710:	4b86      	ldr	r3, [pc, #536]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4a85      	ldr	r2, [pc, #532]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800371c:	e015      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3304      	adds	r3, #4
 8003722:	2100      	movs	r1, #0
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fabb 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 800372a:	4603      	mov	r3, r0
 800372c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800372e:	e00c      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3320      	adds	r3, #32
 8003734:	2100      	movs	r1, #0
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fba6 	bl	8003e88 <RCCEx_PLLSAI2_Config>
 800373c:	4603      	mov	r3, r0
 800373e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003740:	e003      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	74fb      	strb	r3, [r7, #19]
      break;
 8003746:	e000      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003748:	bf00      	nop
    }

    if(ret == HAL_OK)
 800374a:	7cfb      	ldrb	r3, [r7, #19]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10b      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003750:	4b76      	ldr	r3, [pc, #472]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003756:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800375e:	4973      	ldr	r1, [pc, #460]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003766:	e001      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003768:	7cfb      	ldrb	r3, [r7, #19]
 800376a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d041      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800377c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003780:	d02a      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003782:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003786:	d824      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003788:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800378c:	d008      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800378e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003792:	d81e      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800379c:	d010      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800379e:	e018      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037a0:	4b62      	ldr	r3, [pc, #392]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	4a61      	ldr	r2, [pc, #388]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037ac:	e015      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3304      	adds	r3, #4
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fa73 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037be:	e00c      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3320      	adds	r3, #32
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fb5e 	bl	8003e88 <RCCEx_PLLSAI2_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037d0:	e003      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	74fb      	strb	r3, [r7, #19]
      break;
 80037d6:	e000      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037da:	7cfb      	ldrb	r3, [r7, #19]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10b      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037e0:	4b52      	ldr	r3, [pc, #328]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ee:	494f      	ldr	r1, [pc, #316]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037f6:	e001      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 80a0 	beq.w	800394a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800380a:	2300      	movs	r3, #0
 800380c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800380e:	4b47      	ldr	r3, [pc, #284]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800381e:	2300      	movs	r3, #0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00d      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003824:	4b41      	ldr	r3, [pc, #260]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003828:	4a40      	ldr	r2, [pc, #256]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382e:	6593      	str	r3, [r2, #88]	; 0x58
 8003830:	4b3e      	ldr	r3, [pc, #248]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800383c:	2301      	movs	r3, #1
 800383e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003840:	4b3b      	ldr	r3, [pc, #236]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a3a      	ldr	r2, [pc, #232]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800384c:	f7fe fcf0 	bl	8002230 <HAL_GetTick>
 8003850:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003852:	e009      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003854:	f7fe fcec 	bl	8002230 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d902      	bls.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	74fb      	strb	r3, [r7, #19]
        break;
 8003866:	e005      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003868:	4b31      	ldr	r3, [pc, #196]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0ef      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003874:	7cfb      	ldrb	r3, [r7, #19]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d15c      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800387a:	4b2c      	ldr	r3, [pc, #176]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003884:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01f      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	429a      	cmp	r2, r3
 8003896:	d019      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003898:	4b24      	ldr	r3, [pc, #144]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038a4:	4b21      	ldr	r3, [pc, #132]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038aa:	4a20      	ldr	r2, [pc, #128]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038b4:	4b1d      	ldr	r3, [pc, #116]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	4a1c      	ldr	r2, [pc, #112]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038c4:	4a19      	ldr	r2, [pc, #100]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d016      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d6:	f7fe fcab 	bl	8002230 <HAL_GetTick>
 80038da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038dc:	e00b      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038de:	f7fe fca7 	bl	8002230 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d902      	bls.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	74fb      	strb	r3, [r7, #19]
            break;
 80038f4:	e006      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038f6:	4b0d      	ldr	r3, [pc, #52]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0ec      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003904:	7cfb      	ldrb	r3, [r7, #19]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10c      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800390a:	4b08      	ldr	r3, [pc, #32]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800391a:	4904      	ldr	r1, [pc, #16]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003922:	e009      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003924:	7cfb      	ldrb	r3, [r7, #19]
 8003926:	74bb      	strb	r3, [r7, #18]
 8003928:	e006      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000
 8003930:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003934:	7cfb      	ldrb	r3, [r7, #19]
 8003936:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003938:	7c7b      	ldrb	r3, [r7, #17]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d105      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800393e:	4b9e      	ldr	r3, [pc, #632]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	4a9d      	ldr	r2, [pc, #628]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003948:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003956:	4b98      	ldr	r3, [pc, #608]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395c:	f023 0203 	bic.w	r2, r3, #3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003964:	4994      	ldr	r1, [pc, #592]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003978:	4b8f      	ldr	r3, [pc, #572]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397e:	f023 020c 	bic.w	r2, r3, #12
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003986:	498c      	ldr	r1, [pc, #560]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800399a:	4b87      	ldr	r3, [pc, #540]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	4983      	ldr	r1, [pc, #524]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039bc:	4b7e      	ldr	r3, [pc, #504]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	497b      	ldr	r1, [pc, #492]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039de:	4b76      	ldr	r3, [pc, #472]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ec:	4972      	ldr	r1, [pc, #456]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a00:	4b6d      	ldr	r3, [pc, #436]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0e:	496a      	ldr	r1, [pc, #424]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a22:	4b65      	ldr	r3, [pc, #404]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a30:	4961      	ldr	r1, [pc, #388]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a44:	4b5c      	ldr	r3, [pc, #368]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a52:	4959      	ldr	r1, [pc, #356]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a66:	4b54      	ldr	r3, [pc, #336]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a74:	4950      	ldr	r1, [pc, #320]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a88:	4b4b      	ldr	r3, [pc, #300]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a96:	4948      	ldr	r1, [pc, #288]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aaa:	4b43      	ldr	r3, [pc, #268]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	493f      	ldr	r1, [pc, #252]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d028      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003acc:	4b3a      	ldr	r3, [pc, #232]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ada:	4937      	ldr	r1, [pc, #220]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aea:	d106      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aec:	4b32      	ldr	r3, [pc, #200]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	4a31      	ldr	r2, [pc, #196]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003af6:	60d3      	str	r3, [r2, #12]
 8003af8:	e011      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003afe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b02:	d10c      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3304      	adds	r3, #4
 8003b08:	2101      	movs	r1, #1
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 f8c8 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 8003b10:	4603      	mov	r3, r0
 8003b12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b14:	7cfb      	ldrb	r3, [r7, #19]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003b1a:	7cfb      	ldrb	r3, [r7, #19]
 8003b1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d028      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b2a:	4b23      	ldr	r3, [pc, #140]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b38:	491f      	ldr	r1, [pc, #124]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b48:	d106      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b4a:	4b1b      	ldr	r3, [pc, #108]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	4a1a      	ldr	r2, [pc, #104]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b54:	60d3      	str	r3, [r2, #12]
 8003b56:	e011      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b60:	d10c      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3304      	adds	r3, #4
 8003b66:	2101      	movs	r1, #1
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 f899 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b72:	7cfb      	ldrb	r3, [r7, #19]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b78:	7cfb      	ldrb	r3, [r7, #19]
 8003b7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d02b      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b96:	4908      	ldr	r1, [pc, #32]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ba6:	d109      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba8:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4a02      	ldr	r2, [pc, #8]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bb2:	60d3      	str	r3, [r2, #12]
 8003bb4:	e014      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003bb6:	bf00      	nop
 8003bb8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bc4:	d10c      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	2101      	movs	r1, #1
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 f867 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bd6:	7cfb      	ldrb	r3, [r7, #19]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003bdc:	7cfb      	ldrb	r3, [r7, #19]
 8003bde:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d02f      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bec:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bfa:	4928      	ldr	r1, [pc, #160]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c0a:	d10d      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	2102      	movs	r1, #2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 f844 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c1c:	7cfb      	ldrb	r3, [r7, #19]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d014      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	74bb      	strb	r3, [r7, #18]
 8003c26:	e011      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c30:	d10c      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3320      	adds	r3, #32
 8003c36:	2102      	movs	r1, #2
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 f925 	bl	8003e88 <RCCEx_PLLSAI2_Config>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c42:	7cfb      	ldrb	r3, [r7, #19]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c48:	7cfb      	ldrb	r3, [r7, #19]
 8003c4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c58:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c66:	490d      	ldr	r1, [pc, #52]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00b      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c7a:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c8a:	4904      	ldr	r1, [pc, #16]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c92:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40021000 	.word	0x40021000

08003ca0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cae:	4b75      	ldr	r3, [pc, #468]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d018      	beq.n	8003cec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cba:	4b72      	ldr	r3, [pc, #456]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f003 0203 	and.w	r2, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d10d      	bne.n	8003ce6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
       ||
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d009      	beq.n	8003ce6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cd2:	4b6c      	ldr	r3, [pc, #432]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	091b      	lsrs	r3, r3, #4
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d047      	beq.n	8003d76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
 8003cea:	e044      	b.n	8003d76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d018      	beq.n	8003d26 <RCCEx_PLLSAI1_Config+0x86>
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d825      	bhi.n	8003d44 <RCCEx_PLLSAI1_Config+0xa4>
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d002      	beq.n	8003d02 <RCCEx_PLLSAI1_Config+0x62>
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d009      	beq.n	8003d14 <RCCEx_PLLSAI1_Config+0x74>
 8003d00:	e020      	b.n	8003d44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d02:	4b60      	ldr	r3, [pc, #384]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d11d      	bne.n	8003d4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d12:	e01a      	b.n	8003d4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d14:	4b5b      	ldr	r3, [pc, #364]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d116      	bne.n	8003d4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d24:	e013      	b.n	8003d4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d26:	4b57      	ldr	r3, [pc, #348]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10f      	bne.n	8003d52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d32:	4b54      	ldr	r3, [pc, #336]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d42:	e006      	b.n	8003d52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
      break;
 8003d48:	e004      	b.n	8003d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d4a:	bf00      	nop
 8003d4c:	e002      	b.n	8003d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d4e:	bf00      	nop
 8003d50:	e000      	b.n	8003d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d52:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10d      	bne.n	8003d76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d5a:	4b4a      	ldr	r3, [pc, #296]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6819      	ldr	r1, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	4944      	ldr	r1, [pc, #272]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d17d      	bne.n	8003e78 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d7c:	4b41      	ldr	r3, [pc, #260]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a40      	ldr	r2, [pc, #256]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d88:	f7fe fa52 	bl	8002230 <HAL_GetTick>
 8003d8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d8e:	e009      	b.n	8003da4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d90:	f7fe fa4e 	bl	8002230 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d902      	bls.n	8003da4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	73fb      	strb	r3, [r7, #15]
        break;
 8003da2:	e005      	b.n	8003db0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003da4:	4b37      	ldr	r3, [pc, #220]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1ef      	bne.n	8003d90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d160      	bne.n	8003e78 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d111      	bne.n	8003de0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dbc:	4b31      	ldr	r3, [pc, #196]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6892      	ldr	r2, [r2, #8]
 8003dcc:	0211      	lsls	r1, r2, #8
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68d2      	ldr	r2, [r2, #12]
 8003dd2:	0912      	lsrs	r2, r2, #4
 8003dd4:	0452      	lsls	r2, r2, #17
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	492a      	ldr	r1, [pc, #168]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	610b      	str	r3, [r1, #16]
 8003dde:	e027      	b.n	8003e30 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d112      	bne.n	8003e0c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003de6:	4b27      	ldr	r3, [pc, #156]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003dee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6892      	ldr	r2, [r2, #8]
 8003df6:	0211      	lsls	r1, r2, #8
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6912      	ldr	r2, [r2, #16]
 8003dfc:	0852      	lsrs	r2, r2, #1
 8003dfe:	3a01      	subs	r2, #1
 8003e00:	0552      	lsls	r2, r2, #21
 8003e02:	430a      	orrs	r2, r1
 8003e04:	491f      	ldr	r1, [pc, #124]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	610b      	str	r3, [r1, #16]
 8003e0a:	e011      	b.n	8003e30 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e0c:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6892      	ldr	r2, [r2, #8]
 8003e1c:	0211      	lsls	r1, r2, #8
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6952      	ldr	r2, [r2, #20]
 8003e22:	0852      	lsrs	r2, r2, #1
 8003e24:	3a01      	subs	r2, #1
 8003e26:	0652      	lsls	r2, r2, #25
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	4916      	ldr	r1, [pc, #88]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e30:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a13      	ldr	r2, [pc, #76]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3c:	f7fe f9f8 	bl	8002230 <HAL_GetTick>
 8003e40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e42:	e009      	b.n	8003e58 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e44:	f7fe f9f4 	bl	8002230 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d902      	bls.n	8003e58 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	73fb      	strb	r3, [r7, #15]
          break;
 8003e56:	e005      	b.n	8003e64 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e58:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0ef      	beq.n	8003e44 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	4904      	ldr	r1, [pc, #16]	; (8003e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000

08003e88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e96:	4b6a      	ldr	r3, [pc, #424]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d018      	beq.n	8003ed4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ea2:	4b67      	ldr	r3, [pc, #412]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 0203 	and.w	r2, r3, #3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d10d      	bne.n	8003ece <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
       ||
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003eba:	4b61      	ldr	r3, [pc, #388]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	091b      	lsrs	r3, r3, #4
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
       ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d047      	beq.n	8003f5e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	73fb      	strb	r3, [r7, #15]
 8003ed2:	e044      	b.n	8003f5e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d018      	beq.n	8003f0e <RCCEx_PLLSAI2_Config+0x86>
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d825      	bhi.n	8003f2c <RCCEx_PLLSAI2_Config+0xa4>
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d002      	beq.n	8003eea <RCCEx_PLLSAI2_Config+0x62>
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d009      	beq.n	8003efc <RCCEx_PLLSAI2_Config+0x74>
 8003ee8:	e020      	b.n	8003f2c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eea:	4b55      	ldr	r3, [pc, #340]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d11d      	bne.n	8003f32 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003efa:	e01a      	b.n	8003f32 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003efc:	4b50      	ldr	r3, [pc, #320]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d116      	bne.n	8003f36 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f0c:	e013      	b.n	8003f36 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f0e:	4b4c      	ldr	r3, [pc, #304]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10f      	bne.n	8003f3a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f1a:	4b49      	ldr	r3, [pc, #292]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f2a:	e006      	b.n	8003f3a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f30:	e004      	b.n	8003f3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f32:	bf00      	nop
 8003f34:	e002      	b.n	8003f3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f36:	bf00      	nop
 8003f38:	e000      	b.n	8003f3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10d      	bne.n	8003f5e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f42:	4b3f      	ldr	r3, [pc, #252]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6819      	ldr	r1, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	430b      	orrs	r3, r1
 8003f58:	4939      	ldr	r1, [pc, #228]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d167      	bne.n	8004034 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f64:	4b36      	ldr	r3, [pc, #216]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a35      	ldr	r2, [pc, #212]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f70:	f7fe f95e 	bl	8002230 <HAL_GetTick>
 8003f74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f76:	e009      	b.n	8003f8c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f78:	f7fe f95a 	bl	8002230 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d902      	bls.n	8003f8c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	73fb      	strb	r3, [r7, #15]
        break;
 8003f8a:	e005      	b.n	8003f98 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f8c:	4b2c      	ldr	r3, [pc, #176]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1ef      	bne.n	8003f78 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d14a      	bne.n	8004034 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d111      	bne.n	8003fc8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fa4:	4b26      	ldr	r3, [pc, #152]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6892      	ldr	r2, [r2, #8]
 8003fb4:	0211      	lsls	r1, r2, #8
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68d2      	ldr	r2, [r2, #12]
 8003fba:	0912      	lsrs	r2, r2, #4
 8003fbc:	0452      	lsls	r2, r2, #17
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	491f      	ldr	r1, [pc, #124]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	614b      	str	r3, [r1, #20]
 8003fc6:	e011      	b.n	8003fec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fc8:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6892      	ldr	r2, [r2, #8]
 8003fd8:	0211      	lsls	r1, r2, #8
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6912      	ldr	r2, [r2, #16]
 8003fde:	0852      	lsrs	r2, r2, #1
 8003fe0:	3a01      	subs	r2, #1
 8003fe2:	0652      	lsls	r2, r2, #25
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	4916      	ldr	r1, [pc, #88]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fec:	4b14      	ldr	r3, [pc, #80]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a13      	ldr	r2, [pc, #76]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff8:	f7fe f91a 	bl	8002230 <HAL_GetTick>
 8003ffc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ffe:	e009      	b.n	8004014 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004000:	f7fe f916 	bl	8002230 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d902      	bls.n	8004014 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	73fb      	strb	r3, [r7, #15]
          break;
 8004012:	e005      	b.n	8004020 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004014:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0ef      	beq.n	8004000 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004026:	4b06      	ldr	r3, [pc, #24]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	4904      	ldr	r1, [pc, #16]	; (8004040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004030:	4313      	orrs	r3, r2
 8004032:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004034:	7bfb      	ldrb	r3, [r7, #15]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40021000 	.word	0x40021000

08004044 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e095      	b.n	8004182 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	2b00      	cmp	r3, #0
 800405c:	d108      	bne.n	8004070 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004066:	d009      	beq.n	800407c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	61da      	str	r2, [r3, #28]
 800406e:	e005      	b.n	800407c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fd fea2 	bl	8001de0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040bc:	d902      	bls.n	80040c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	e002      	b.n	80040ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80040c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80040d2:	d007      	beq.n	80040e4 <HAL_SPI_Init+0xa0>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040dc:	d002      	beq.n	80040e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004126:	ea42 0103 	orr.w	r1, r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	0c1b      	lsrs	r3, r3, #16
 8004140:	f003 0204 	and.w	r2, r3, #4
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004160:	ea42 0103 	orr.w	r1, r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b088      	sub	sp, #32
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	603b      	str	r3, [r7, #0]
 8004196:	4613      	mov	r3, r2
 8004198:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_SPI_Transmit+0x22>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e158      	b.n	800445e <HAL_SPI_Transmit+0x2d4>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041b4:	f7fe f83c 	bl	8002230 <HAL_GetTick>
 80041b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d002      	beq.n	80041d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041ca:	2302      	movs	r3, #2
 80041cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041ce:	e13d      	b.n	800444c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <HAL_SPI_Transmit+0x52>
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041e0:	e134      	b.n	800444c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2203      	movs	r2, #3
 80041e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	88fa      	ldrh	r2, [r7, #6]
 80041fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	88fa      	ldrh	r2, [r7, #6]
 8004200:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800422c:	d10f      	bne.n	800424e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800423c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800424c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004258:	2b40      	cmp	r3, #64	; 0x40
 800425a:	d007      	beq.n	800426c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800426a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004274:	d94b      	bls.n	800430e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_SPI_Transmit+0xfa>
 800427e:	8afb      	ldrh	r3, [r7, #22]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d13e      	bne.n	8004302 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	881a      	ldrh	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	1c9a      	adds	r2, r3, #2
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042a8:	e02b      	b.n	8004302 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d112      	bne.n	80042de <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	881a      	ldrh	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c8:	1c9a      	adds	r2, r3, #2
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042dc:	e011      	b.n	8004302 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042de:	f7fd ffa7 	bl	8002230 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d803      	bhi.n	80042f6 <HAL_SPI_Transmit+0x16c>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f4:	d102      	bne.n	80042fc <HAL_SPI_Transmit+0x172>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d102      	bne.n	8004302 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004300:	e0a4      	b.n	800444c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1ce      	bne.n	80042aa <HAL_SPI_Transmit+0x120>
 800430c:	e07c      	b.n	8004408 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_SPI_Transmit+0x192>
 8004316:	8afb      	ldrh	r3, [r7, #22]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d170      	bne.n	80043fe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b01      	cmp	r3, #1
 8004324:	d912      	bls.n	800434c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432a:	881a      	ldrh	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004336:	1c9a      	adds	r2, r3, #2
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b02      	subs	r3, #2
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	87da      	strh	r2, [r3, #62]	; 0x3e
 800434a:	e058      	b.n	80043fe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	7812      	ldrb	r2, [r2, #0]
 8004358:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004368:	b29b      	uxth	r3, r3
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004372:	e044      	b.n	80043fe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b02      	cmp	r3, #2
 8004380:	d12b      	bne.n	80043da <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b01      	cmp	r3, #1
 800438a:	d912      	bls.n	80043b2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	881a      	ldrh	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	1c9a      	adds	r2, r3, #2
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b02      	subs	r3, #2
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043b0:	e025      	b.n	80043fe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	330c      	adds	r3, #12
 80043bc:	7812      	ldrb	r2, [r2, #0]
 80043be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043d8:	e011      	b.n	80043fe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043da:	f7fd ff29 	bl	8002230 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d803      	bhi.n	80043f2 <HAL_SPI_Transmit+0x268>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f0:	d102      	bne.n	80043f8 <HAL_SPI_Transmit+0x26e>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d102      	bne.n	80043fe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043fc:	e026      	b.n	800444c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1b5      	bne.n	8004374 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	6839      	ldr	r1, [r7, #0]
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 f945 	bl	800469c <SPI_EndRxTxTransaction>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10a      	bne.n	800443c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004426:	2300      	movs	r3, #0
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	77fb      	strb	r3, [r7, #31]
 8004448:	e000      	b.n	800444c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800444a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800445c:	7ffb      	ldrb	r3, [r7, #31]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3720      	adds	r7, #32
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	4613      	mov	r3, r2
 8004476:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004478:	f7fd feda 	bl	8002230 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	4413      	add	r3, r2
 8004486:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004488:	f7fd fed2 	bl	8002230 <HAL_GetTick>
 800448c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800448e:	4b39      	ldr	r3, [pc, #228]	; (8004574 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	015b      	lsls	r3, r3, #5
 8004494:	0d1b      	lsrs	r3, r3, #20
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	fb02 f303 	mul.w	r3, r2, r3
 800449c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800449e:	e054      	b.n	800454a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a6:	d050      	beq.n	800454a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044a8:	f7fd fec2 	bl	8002230 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d902      	bls.n	80044be <SPI_WaitFlagStateUntilTimeout+0x56>
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d13d      	bne.n	800453a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044d6:	d111      	bne.n	80044fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044e0:	d004      	beq.n	80044ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ea:	d107      	bne.n	80044fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004504:	d10f      	bne.n	8004526 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004524:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e017      	b.n	800456a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	3b01      	subs	r3, #1
 8004548:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4013      	ands	r3, r2
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	429a      	cmp	r2, r3
 8004558:	bf0c      	ite	eq
 800455a:	2301      	moveq	r3, #1
 800455c:	2300      	movne	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	429a      	cmp	r2, r3
 8004566:	d19b      	bne.n	80044a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3720      	adds	r7, #32
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20000014 	.word	0x20000014

08004578 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004586:	f7fd fe53 	bl	8002230 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458e:	1a9b      	subs	r3, r3, r2
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	4413      	add	r3, r2
 8004594:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004596:	f7fd fe4b 	bl	8002230 <HAL_GetTick>
 800459a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800459c:	4b3e      	ldr	r3, [pc, #248]	; (8004698 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	00da      	lsls	r2, r3, #3
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	0d1b      	lsrs	r3, r3, #20
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80045b4:	e062      	b.n	800467c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80045bc:	d109      	bne.n	80045d2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d106      	bne.n	80045d2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80045d0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d8:	d050      	beq.n	800467c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045da:	f7fd fe29 	bl	8002230 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d902      	bls.n	80045f0 <SPI_WaitFifoStateUntilTimeout+0x78>
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d13d      	bne.n	800466c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004608:	d111      	bne.n	800462e <SPI_WaitFifoStateUntilTimeout+0xb6>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004612:	d004      	beq.n	800461e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461c:	d107      	bne.n	800462e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800462c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004636:	d10f      	bne.n	8004658 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004656:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e010      	b.n	800468e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	3b01      	subs	r3, #1
 800467a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	4013      	ands	r3, r2
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	429a      	cmp	r2, r3
 800468a:	d194      	bne.n	80045b6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3720      	adds	r7, #32
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20000014 	.word	0x20000014

0800469c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af02      	add	r7, sp, #8
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f7ff ff5f 	bl	8004578 <SPI_WaitFifoStateUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d007      	beq.n	80046d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c4:	f043 0220 	orr.w	r2, r3, #32
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e027      	b.n	8004720 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2200      	movs	r2, #0
 80046d8:	2180      	movs	r1, #128	; 0x80
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff fec4 	bl	8004468 <SPI_WaitFlagStateUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d007      	beq.n	80046f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ea:	f043 0220 	orr.w	r2, r3, #32
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e014      	b.n	8004720 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f7ff ff38 	bl	8004578 <SPI_WaitFifoStateUntilTimeout>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d007      	beq.n	800471e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004712:	f043 0220 	orr.w	r2, r3, #32
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e000      	b.n	8004720 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e097      	b.n	800486c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d106      	bne.n	8004756 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7fd fb87 	bl	8001e64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2202      	movs	r2, #2
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800476c:	f023 0307 	bic.w	r3, r3, #7
 8004770:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3304      	adds	r3, #4
 800477a:	4619      	mov	r1, r3
 800477c:	4610      	mov	r0, r2
 800477e:	f000 f907 	bl	8004990 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047aa:	f023 0303 	bic.w	r3, r3, #3
 80047ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	021b      	lsls	r3, r3, #8
 80047ba:	4313      	orrs	r3, r2
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80047c8:	f023 030c 	bic.w	r3, r3, #12
 80047cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	021b      	lsls	r3, r3, #8
 80047e4:	4313      	orrs	r3, r2
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	011a      	lsls	r2, r3, #4
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	031b      	lsls	r3, r3, #12
 80047f8:	4313      	orrs	r3, r2
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004806:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800480e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	4313      	orrs	r3, r2
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004884:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800488c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004894:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800489c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d110      	bne.n	80048c6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d102      	bne.n	80048b0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80048aa:	7b7b      	ldrb	r3, [r7, #13]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d001      	beq.n	80048b4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e069      	b.n	8004988 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048c4:	e031      	b.n	800492a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d110      	bne.n	80048ee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80048cc:	7bbb      	ldrb	r3, [r7, #14]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d102      	bne.n	80048d8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80048d2:	7b3b      	ldrb	r3, [r7, #12]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d001      	beq.n	80048dc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e055      	b.n	8004988 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048ec:	e01d      	b.n	800492a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d108      	bne.n	8004906 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80048f4:	7bbb      	ldrb	r3, [r7, #14]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d105      	bne.n	8004906 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048fa:	7b7b      	ldrb	r3, [r7, #13]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d102      	bne.n	8004906 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004900:	7b3b      	ldrb	r3, [r7, #12]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d001      	beq.n	800490a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e03e      	b.n	8004988 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2202      	movs	r2, #2
 800490e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2202      	movs	r2, #2
 800491e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_TIM_Encoder_Start+0xc4>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b04      	cmp	r3, #4
 8004934:	d008      	beq.n	8004948 <HAL_TIM_Encoder_Start+0xd4>
 8004936:	e00f      	b.n	8004958 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2201      	movs	r2, #1
 800493e:	2100      	movs	r1, #0
 8004940:	4618      	mov	r0, r3
 8004942:	f000 f8bf 	bl	8004ac4 <TIM_CCxChannelCmd>
      break;
 8004946:	e016      	b.n	8004976 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2201      	movs	r2, #1
 800494e:	2104      	movs	r1, #4
 8004950:	4618      	mov	r0, r3
 8004952:	f000 f8b7 	bl	8004ac4 <TIM_CCxChannelCmd>
      break;
 8004956:	e00e      	b.n	8004976 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2201      	movs	r2, #1
 800495e:	2100      	movs	r1, #0
 8004960:	4618      	mov	r0, r3
 8004962:	f000 f8af 	bl	8004ac4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2201      	movs	r2, #1
 800496c:	2104      	movs	r1, #4
 800496e:	4618      	mov	r0, r3
 8004970:	f000 f8a8 	bl	8004ac4 <TIM_CCxChannelCmd>
      break;
 8004974:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0201 	orr.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a40      	ldr	r2, [pc, #256]	; (8004aa4 <TIM_Base_SetConfig+0x114>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d013      	beq.n	80049d0 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ae:	d00f      	beq.n	80049d0 <TIM_Base_SetConfig+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a3d      	ldr	r2, [pc, #244]	; (8004aa8 <TIM_Base_SetConfig+0x118>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00b      	beq.n	80049d0 <TIM_Base_SetConfig+0x40>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a3c      	ldr	r2, [pc, #240]	; (8004aac <TIM_Base_SetConfig+0x11c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d007      	beq.n	80049d0 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a3b      	ldr	r2, [pc, #236]	; (8004ab0 <TIM_Base_SetConfig+0x120>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d003      	beq.n	80049d0 <TIM_Base_SetConfig+0x40>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a3a      	ldr	r2, [pc, #232]	; (8004ab4 <TIM_Base_SetConfig+0x124>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d108      	bne.n	80049e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a2f      	ldr	r2, [pc, #188]	; (8004aa4 <TIM_Base_SetConfig+0x114>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01f      	beq.n	8004a2a <TIM_Base_SetConfig+0x9a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f0:	d01b      	beq.n	8004a2a <TIM_Base_SetConfig+0x9a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2c      	ldr	r2, [pc, #176]	; (8004aa8 <TIM_Base_SetConfig+0x118>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d017      	beq.n	8004a2a <TIM_Base_SetConfig+0x9a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a2b      	ldr	r2, [pc, #172]	; (8004aac <TIM_Base_SetConfig+0x11c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d013      	beq.n	8004a2a <TIM_Base_SetConfig+0x9a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a2a      	ldr	r2, [pc, #168]	; (8004ab0 <TIM_Base_SetConfig+0x120>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00f      	beq.n	8004a2a <TIM_Base_SetConfig+0x9a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a29      	ldr	r2, [pc, #164]	; (8004ab4 <TIM_Base_SetConfig+0x124>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00b      	beq.n	8004a2a <TIM_Base_SetConfig+0x9a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a28      	ldr	r2, [pc, #160]	; (8004ab8 <TIM_Base_SetConfig+0x128>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d007      	beq.n	8004a2a <TIM_Base_SetConfig+0x9a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a27      	ldr	r2, [pc, #156]	; (8004abc <TIM_Base_SetConfig+0x12c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d003      	beq.n	8004a2a <TIM_Base_SetConfig+0x9a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a26      	ldr	r2, [pc, #152]	; (8004ac0 <TIM_Base_SetConfig+0x130>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d108      	bne.n	8004a3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a10      	ldr	r2, [pc, #64]	; (8004aa4 <TIM_Base_SetConfig+0x114>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00f      	beq.n	8004a88 <TIM_Base_SetConfig+0xf8>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a12      	ldr	r2, [pc, #72]	; (8004ab4 <TIM_Base_SetConfig+0x124>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d00b      	beq.n	8004a88 <TIM_Base_SetConfig+0xf8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a11      	ldr	r2, [pc, #68]	; (8004ab8 <TIM_Base_SetConfig+0x128>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d007      	beq.n	8004a88 <TIM_Base_SetConfig+0xf8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a10      	ldr	r2, [pc, #64]	; (8004abc <TIM_Base_SetConfig+0x12c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d003      	beq.n	8004a88 <TIM_Base_SetConfig+0xf8>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a0f      	ldr	r2, [pc, #60]	; (8004ac0 <TIM_Base_SetConfig+0x130>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d103      	bne.n	8004a90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	615a      	str	r2, [r3, #20]
}
 8004a96:	bf00      	nop
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40012c00 	.word	0x40012c00
 8004aa8:	40000400 	.word	0x40000400
 8004aac:	40000800 	.word	0x40000800
 8004ab0:	40000c00 	.word	0x40000c00
 8004ab4:	40013400 	.word	0x40013400
 8004ab8:	40014000 	.word	0x40014000
 8004abc:	40014400 	.word	0x40014400
 8004ac0:	40014800 	.word	0x40014800

08004ac4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a1a      	ldr	r2, [r3, #32]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	401a      	ands	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a1a      	ldr	r2, [r3, #32]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f003 031f 	and.w	r3, r3, #31
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	fa01 f303 	lsl.w	r3, r1, r3
 8004afc:	431a      	orrs	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	621a      	str	r2, [r3, #32]
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
	...

08004b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e068      	b.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a2e      	ldr	r2, [pc, #184]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d004      	beq.n	8004b5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a2d      	ldr	r2, [pc, #180]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d108      	bne.n	8004b6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a1e      	ldr	r2, [pc, #120]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d01d      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9a:	d018      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a1b      	ldr	r2, [pc, #108]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d013      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a1a      	ldr	r2, [pc, #104]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00e      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a18      	ldr	r2, [pc, #96]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d009      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d004      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a14      	ldr	r2, [pc, #80]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d10c      	bne.n	8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	40012c00 	.word	0x40012c00
 8004c0c:	40013400 	.word	0x40013400
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40000800 	.word	0x40000800
 8004c18:	40000c00 	.word	0x40000c00
 8004c1c:	40014000 	.word	0x40014000

08004c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e040      	b.n	8004cb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fd f952 	bl	8001eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2224      	movs	r2, #36	; 0x24
 8004c4c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 0201 	bic.w	r2, r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f82c 	bl	8004cbc <UART_SetConfig>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e022      	b.n	8004cb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 faaa 	bl	80051d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fb31 	bl	8005314 <UART_CheckIdleState>
 8004cb2:	4603      	mov	r3, r0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cbc:	b5b0      	push	{r4, r5, r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4bad      	ldr	r3, [pc, #692]	; (8004f9c <UART_SetConfig+0x2e0>)
 8004ce8:	4013      	ands	r3, r2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	69f9      	ldr	r1, [r7, #28]
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4aa2      	ldr	r2, [pc, #648]	; (8004fa0 <UART_SetConfig+0x2e4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d004      	beq.n	8004d24 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69fa      	ldr	r2, [r7, #28]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a99      	ldr	r2, [pc, #612]	; (8004fa4 <UART_SetConfig+0x2e8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d121      	bne.n	8004d86 <UART_SetConfig+0xca>
 8004d42:	4b99      	ldr	r3, [pc, #612]	; (8004fa8 <UART_SetConfig+0x2ec>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d48:	f003 0303 	and.w	r3, r3, #3
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d817      	bhi.n	8004d80 <UART_SetConfig+0xc4>
 8004d50:	a201      	add	r2, pc, #4	; (adr r2, 8004d58 <UART_SetConfig+0x9c>)
 8004d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d56:	bf00      	nop
 8004d58:	08004d69 	.word	0x08004d69
 8004d5c:	08004d75 	.word	0x08004d75
 8004d60:	08004d6f 	.word	0x08004d6f
 8004d64:	08004d7b 	.word	0x08004d7b
 8004d68:	2301      	movs	r3, #1
 8004d6a:	76fb      	strb	r3, [r7, #27]
 8004d6c:	e0e7      	b.n	8004f3e <UART_SetConfig+0x282>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	76fb      	strb	r3, [r7, #27]
 8004d72:	e0e4      	b.n	8004f3e <UART_SetConfig+0x282>
 8004d74:	2304      	movs	r3, #4
 8004d76:	76fb      	strb	r3, [r7, #27]
 8004d78:	e0e1      	b.n	8004f3e <UART_SetConfig+0x282>
 8004d7a:	2308      	movs	r3, #8
 8004d7c:	76fb      	strb	r3, [r7, #27]
 8004d7e:	e0de      	b.n	8004f3e <UART_SetConfig+0x282>
 8004d80:	2310      	movs	r3, #16
 8004d82:	76fb      	strb	r3, [r7, #27]
 8004d84:	e0db      	b.n	8004f3e <UART_SetConfig+0x282>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a88      	ldr	r2, [pc, #544]	; (8004fac <UART_SetConfig+0x2f0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d132      	bne.n	8004df6 <UART_SetConfig+0x13a>
 8004d90:	4b85      	ldr	r3, [pc, #532]	; (8004fa8 <UART_SetConfig+0x2ec>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d96:	f003 030c 	and.w	r3, r3, #12
 8004d9a:	2b0c      	cmp	r3, #12
 8004d9c:	d828      	bhi.n	8004df0 <UART_SetConfig+0x134>
 8004d9e:	a201      	add	r2, pc, #4	; (adr r2, 8004da4 <UART_SetConfig+0xe8>)
 8004da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da4:	08004dd9 	.word	0x08004dd9
 8004da8:	08004df1 	.word	0x08004df1
 8004dac:	08004df1 	.word	0x08004df1
 8004db0:	08004df1 	.word	0x08004df1
 8004db4:	08004de5 	.word	0x08004de5
 8004db8:	08004df1 	.word	0x08004df1
 8004dbc:	08004df1 	.word	0x08004df1
 8004dc0:	08004df1 	.word	0x08004df1
 8004dc4:	08004ddf 	.word	0x08004ddf
 8004dc8:	08004df1 	.word	0x08004df1
 8004dcc:	08004df1 	.word	0x08004df1
 8004dd0:	08004df1 	.word	0x08004df1
 8004dd4:	08004deb 	.word	0x08004deb
 8004dd8:	2300      	movs	r3, #0
 8004dda:	76fb      	strb	r3, [r7, #27]
 8004ddc:	e0af      	b.n	8004f3e <UART_SetConfig+0x282>
 8004dde:	2302      	movs	r3, #2
 8004de0:	76fb      	strb	r3, [r7, #27]
 8004de2:	e0ac      	b.n	8004f3e <UART_SetConfig+0x282>
 8004de4:	2304      	movs	r3, #4
 8004de6:	76fb      	strb	r3, [r7, #27]
 8004de8:	e0a9      	b.n	8004f3e <UART_SetConfig+0x282>
 8004dea:	2308      	movs	r3, #8
 8004dec:	76fb      	strb	r3, [r7, #27]
 8004dee:	e0a6      	b.n	8004f3e <UART_SetConfig+0x282>
 8004df0:	2310      	movs	r3, #16
 8004df2:	76fb      	strb	r3, [r7, #27]
 8004df4:	e0a3      	b.n	8004f3e <UART_SetConfig+0x282>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a6d      	ldr	r2, [pc, #436]	; (8004fb0 <UART_SetConfig+0x2f4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d120      	bne.n	8004e42 <UART_SetConfig+0x186>
 8004e00:	4b69      	ldr	r3, [pc, #420]	; (8004fa8 <UART_SetConfig+0x2ec>)
 8004e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e0a:	2b30      	cmp	r3, #48	; 0x30
 8004e0c:	d013      	beq.n	8004e36 <UART_SetConfig+0x17a>
 8004e0e:	2b30      	cmp	r3, #48	; 0x30
 8004e10:	d814      	bhi.n	8004e3c <UART_SetConfig+0x180>
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	d009      	beq.n	8004e2a <UART_SetConfig+0x16e>
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d810      	bhi.n	8004e3c <UART_SetConfig+0x180>
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <UART_SetConfig+0x168>
 8004e1e:	2b10      	cmp	r3, #16
 8004e20:	d006      	beq.n	8004e30 <UART_SetConfig+0x174>
 8004e22:	e00b      	b.n	8004e3c <UART_SetConfig+0x180>
 8004e24:	2300      	movs	r3, #0
 8004e26:	76fb      	strb	r3, [r7, #27]
 8004e28:	e089      	b.n	8004f3e <UART_SetConfig+0x282>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	76fb      	strb	r3, [r7, #27]
 8004e2e:	e086      	b.n	8004f3e <UART_SetConfig+0x282>
 8004e30:	2304      	movs	r3, #4
 8004e32:	76fb      	strb	r3, [r7, #27]
 8004e34:	e083      	b.n	8004f3e <UART_SetConfig+0x282>
 8004e36:	2308      	movs	r3, #8
 8004e38:	76fb      	strb	r3, [r7, #27]
 8004e3a:	e080      	b.n	8004f3e <UART_SetConfig+0x282>
 8004e3c:	2310      	movs	r3, #16
 8004e3e:	76fb      	strb	r3, [r7, #27]
 8004e40:	e07d      	b.n	8004f3e <UART_SetConfig+0x282>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a5b      	ldr	r2, [pc, #364]	; (8004fb4 <UART_SetConfig+0x2f8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d120      	bne.n	8004e8e <UART_SetConfig+0x1d2>
 8004e4c:	4b56      	ldr	r3, [pc, #344]	; (8004fa8 <UART_SetConfig+0x2ec>)
 8004e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e56:	2bc0      	cmp	r3, #192	; 0xc0
 8004e58:	d013      	beq.n	8004e82 <UART_SetConfig+0x1c6>
 8004e5a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e5c:	d814      	bhi.n	8004e88 <UART_SetConfig+0x1cc>
 8004e5e:	2b80      	cmp	r3, #128	; 0x80
 8004e60:	d009      	beq.n	8004e76 <UART_SetConfig+0x1ba>
 8004e62:	2b80      	cmp	r3, #128	; 0x80
 8004e64:	d810      	bhi.n	8004e88 <UART_SetConfig+0x1cc>
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d002      	beq.n	8004e70 <UART_SetConfig+0x1b4>
 8004e6a:	2b40      	cmp	r3, #64	; 0x40
 8004e6c:	d006      	beq.n	8004e7c <UART_SetConfig+0x1c0>
 8004e6e:	e00b      	b.n	8004e88 <UART_SetConfig+0x1cc>
 8004e70:	2300      	movs	r3, #0
 8004e72:	76fb      	strb	r3, [r7, #27]
 8004e74:	e063      	b.n	8004f3e <UART_SetConfig+0x282>
 8004e76:	2302      	movs	r3, #2
 8004e78:	76fb      	strb	r3, [r7, #27]
 8004e7a:	e060      	b.n	8004f3e <UART_SetConfig+0x282>
 8004e7c:	2304      	movs	r3, #4
 8004e7e:	76fb      	strb	r3, [r7, #27]
 8004e80:	e05d      	b.n	8004f3e <UART_SetConfig+0x282>
 8004e82:	2308      	movs	r3, #8
 8004e84:	76fb      	strb	r3, [r7, #27]
 8004e86:	e05a      	b.n	8004f3e <UART_SetConfig+0x282>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	76fb      	strb	r3, [r7, #27]
 8004e8c:	e057      	b.n	8004f3e <UART_SetConfig+0x282>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a49      	ldr	r2, [pc, #292]	; (8004fb8 <UART_SetConfig+0x2fc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d125      	bne.n	8004ee4 <UART_SetConfig+0x228>
 8004e98:	4b43      	ldr	r3, [pc, #268]	; (8004fa8 <UART_SetConfig+0x2ec>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ea6:	d017      	beq.n	8004ed8 <UART_SetConfig+0x21c>
 8004ea8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eac:	d817      	bhi.n	8004ede <UART_SetConfig+0x222>
 8004eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb2:	d00b      	beq.n	8004ecc <UART_SetConfig+0x210>
 8004eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb8:	d811      	bhi.n	8004ede <UART_SetConfig+0x222>
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <UART_SetConfig+0x20a>
 8004ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec2:	d006      	beq.n	8004ed2 <UART_SetConfig+0x216>
 8004ec4:	e00b      	b.n	8004ede <UART_SetConfig+0x222>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	76fb      	strb	r3, [r7, #27]
 8004eca:	e038      	b.n	8004f3e <UART_SetConfig+0x282>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	76fb      	strb	r3, [r7, #27]
 8004ed0:	e035      	b.n	8004f3e <UART_SetConfig+0x282>
 8004ed2:	2304      	movs	r3, #4
 8004ed4:	76fb      	strb	r3, [r7, #27]
 8004ed6:	e032      	b.n	8004f3e <UART_SetConfig+0x282>
 8004ed8:	2308      	movs	r3, #8
 8004eda:	76fb      	strb	r3, [r7, #27]
 8004edc:	e02f      	b.n	8004f3e <UART_SetConfig+0x282>
 8004ede:	2310      	movs	r3, #16
 8004ee0:	76fb      	strb	r3, [r7, #27]
 8004ee2:	e02c      	b.n	8004f3e <UART_SetConfig+0x282>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a2d      	ldr	r2, [pc, #180]	; (8004fa0 <UART_SetConfig+0x2e4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d125      	bne.n	8004f3a <UART_SetConfig+0x27e>
 8004eee:	4b2e      	ldr	r3, [pc, #184]	; (8004fa8 <UART_SetConfig+0x2ec>)
 8004ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ef8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004efc:	d017      	beq.n	8004f2e <UART_SetConfig+0x272>
 8004efe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f02:	d817      	bhi.n	8004f34 <UART_SetConfig+0x278>
 8004f04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f08:	d00b      	beq.n	8004f22 <UART_SetConfig+0x266>
 8004f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f0e:	d811      	bhi.n	8004f34 <UART_SetConfig+0x278>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <UART_SetConfig+0x260>
 8004f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f18:	d006      	beq.n	8004f28 <UART_SetConfig+0x26c>
 8004f1a:	e00b      	b.n	8004f34 <UART_SetConfig+0x278>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	76fb      	strb	r3, [r7, #27]
 8004f20:	e00d      	b.n	8004f3e <UART_SetConfig+0x282>
 8004f22:	2302      	movs	r3, #2
 8004f24:	76fb      	strb	r3, [r7, #27]
 8004f26:	e00a      	b.n	8004f3e <UART_SetConfig+0x282>
 8004f28:	2304      	movs	r3, #4
 8004f2a:	76fb      	strb	r3, [r7, #27]
 8004f2c:	e007      	b.n	8004f3e <UART_SetConfig+0x282>
 8004f2e:	2308      	movs	r3, #8
 8004f30:	76fb      	strb	r3, [r7, #27]
 8004f32:	e004      	b.n	8004f3e <UART_SetConfig+0x282>
 8004f34:	2310      	movs	r3, #16
 8004f36:	76fb      	strb	r3, [r7, #27]
 8004f38:	e001      	b.n	8004f3e <UART_SetConfig+0x282>
 8004f3a:	2310      	movs	r3, #16
 8004f3c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a17      	ldr	r2, [pc, #92]	; (8004fa0 <UART_SetConfig+0x2e4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	f040 8087 	bne.w	8005058 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f4a:	7efb      	ldrb	r3, [r7, #27]
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d837      	bhi.n	8004fc0 <UART_SetConfig+0x304>
 8004f50:	a201      	add	r2, pc, #4	; (adr r2, 8004f58 <UART_SetConfig+0x29c>)
 8004f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f56:	bf00      	nop
 8004f58:	08004f7d 	.word	0x08004f7d
 8004f5c:	08004fc1 	.word	0x08004fc1
 8004f60:	08004f85 	.word	0x08004f85
 8004f64:	08004fc1 	.word	0x08004fc1
 8004f68:	08004f8b 	.word	0x08004f8b
 8004f6c:	08004fc1 	.word	0x08004fc1
 8004f70:	08004fc1 	.word	0x08004fc1
 8004f74:	08004fc1 	.word	0x08004fc1
 8004f78:	08004f93 	.word	0x08004f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f7c:	f7fe fb1a 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8004f80:	6178      	str	r0, [r7, #20]
        break;
 8004f82:	e022      	b.n	8004fca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f84:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <UART_SetConfig+0x300>)
 8004f86:	617b      	str	r3, [r7, #20]
        break;
 8004f88:	e01f      	b.n	8004fca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f8a:	f7fe fa7b 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8004f8e:	6178      	str	r0, [r7, #20]
        break;
 8004f90:	e01b      	b.n	8004fca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f96:	617b      	str	r3, [r7, #20]
        break;
 8004f98:	e017      	b.n	8004fca <UART_SetConfig+0x30e>
 8004f9a:	bf00      	nop
 8004f9c:	efff69f3 	.word	0xefff69f3
 8004fa0:	40008000 	.word	0x40008000
 8004fa4:	40013800 	.word	0x40013800
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	40004400 	.word	0x40004400
 8004fb0:	40004800 	.word	0x40004800
 8004fb4:	40004c00 	.word	0x40004c00
 8004fb8:	40005000 	.word	0x40005000
 8004fbc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	76bb      	strb	r3, [r7, #26]
        break;
 8004fc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 80f1 	beq.w	80051b4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	4413      	add	r3, r2
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d305      	bcc.n	8004fee <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d902      	bls.n	8004ff4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	76bb      	strb	r3, [r7, #26]
 8004ff2:	e0df      	b.n	80051b4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f04f 0100 	mov.w	r1, #0
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	020b      	lsls	r3, r1, #8
 8005006:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800500a:	0202      	lsls	r2, r0, #8
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	6849      	ldr	r1, [r1, #4]
 8005010:	0849      	lsrs	r1, r1, #1
 8005012:	4608      	mov	r0, r1
 8005014:	f04f 0100 	mov.w	r1, #0
 8005018:	1814      	adds	r4, r2, r0
 800501a:	eb43 0501 	adc.w	r5, r3, r1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	461a      	mov	r2, r3
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	4620      	mov	r0, r4
 800502a:	4629      	mov	r1, r5
 800502c:	f7fb f8de 	bl	80001ec <__aeabi_uldivmod>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4613      	mov	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800503e:	d308      	bcc.n	8005052 <UART_SetConfig+0x396>
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005046:	d204      	bcs.n	8005052 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	60da      	str	r2, [r3, #12]
 8005050:	e0b0      	b.n	80051b4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	76bb      	strb	r3, [r7, #26]
 8005056:	e0ad      	b.n	80051b4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005060:	d15c      	bne.n	800511c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005062:	7efb      	ldrb	r3, [r7, #27]
 8005064:	2b08      	cmp	r3, #8
 8005066:	d828      	bhi.n	80050ba <UART_SetConfig+0x3fe>
 8005068:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <UART_SetConfig+0x3b4>)
 800506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506e:	bf00      	nop
 8005070:	08005095 	.word	0x08005095
 8005074:	0800509d 	.word	0x0800509d
 8005078:	080050a5 	.word	0x080050a5
 800507c:	080050bb 	.word	0x080050bb
 8005080:	080050ab 	.word	0x080050ab
 8005084:	080050bb 	.word	0x080050bb
 8005088:	080050bb 	.word	0x080050bb
 800508c:	080050bb 	.word	0x080050bb
 8005090:	080050b3 	.word	0x080050b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005094:	f7fe fa8e 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8005098:	6178      	str	r0, [r7, #20]
        break;
 800509a:	e013      	b.n	80050c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800509c:	f7fe faa0 	bl	80035e0 <HAL_RCC_GetPCLK2Freq>
 80050a0:	6178      	str	r0, [r7, #20]
        break;
 80050a2:	e00f      	b.n	80050c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050a4:	4b49      	ldr	r3, [pc, #292]	; (80051cc <UART_SetConfig+0x510>)
 80050a6:	617b      	str	r3, [r7, #20]
        break;
 80050a8:	e00c      	b.n	80050c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050aa:	f7fe f9eb 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 80050ae:	6178      	str	r0, [r7, #20]
        break;
 80050b0:	e008      	b.n	80050c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050b6:	617b      	str	r3, [r7, #20]
        break;
 80050b8:	e004      	b.n	80050c4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	76bb      	strb	r3, [r7, #26]
        break;
 80050c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d074      	beq.n	80051b4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	005a      	lsls	r2, r3, #1
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	085b      	lsrs	r3, r3, #1
 80050d4:	441a      	add	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	fbb2 f3f3 	udiv	r3, r2, r3
 80050de:	b29b      	uxth	r3, r3
 80050e0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	2b0f      	cmp	r3, #15
 80050e6:	d916      	bls.n	8005116 <UART_SetConfig+0x45a>
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ee:	d212      	bcs.n	8005116 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f023 030f 	bic.w	r3, r3, #15
 80050f8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	085b      	lsrs	r3, r3, #1
 80050fe:	b29b      	uxth	r3, r3
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	b29a      	uxth	r2, r3
 8005106:	89fb      	ldrh	r3, [r7, #14]
 8005108:	4313      	orrs	r3, r2
 800510a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	89fa      	ldrh	r2, [r7, #14]
 8005112:	60da      	str	r2, [r3, #12]
 8005114:	e04e      	b.n	80051b4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	76bb      	strb	r3, [r7, #26]
 800511a:	e04b      	b.n	80051b4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800511c:	7efb      	ldrb	r3, [r7, #27]
 800511e:	2b08      	cmp	r3, #8
 8005120:	d827      	bhi.n	8005172 <UART_SetConfig+0x4b6>
 8005122:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <UART_SetConfig+0x46c>)
 8005124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005128:	0800514d 	.word	0x0800514d
 800512c:	08005155 	.word	0x08005155
 8005130:	0800515d 	.word	0x0800515d
 8005134:	08005173 	.word	0x08005173
 8005138:	08005163 	.word	0x08005163
 800513c:	08005173 	.word	0x08005173
 8005140:	08005173 	.word	0x08005173
 8005144:	08005173 	.word	0x08005173
 8005148:	0800516b 	.word	0x0800516b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800514c:	f7fe fa32 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8005150:	6178      	str	r0, [r7, #20]
        break;
 8005152:	e013      	b.n	800517c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005154:	f7fe fa44 	bl	80035e0 <HAL_RCC_GetPCLK2Freq>
 8005158:	6178      	str	r0, [r7, #20]
        break;
 800515a:	e00f      	b.n	800517c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800515c:	4b1b      	ldr	r3, [pc, #108]	; (80051cc <UART_SetConfig+0x510>)
 800515e:	617b      	str	r3, [r7, #20]
        break;
 8005160:	e00c      	b.n	800517c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005162:	f7fe f98f 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8005166:	6178      	str	r0, [r7, #20]
        break;
 8005168:	e008      	b.n	800517c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800516a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800516e:	617b      	str	r3, [r7, #20]
        break;
 8005170:	e004      	b.n	800517c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	76bb      	strb	r3, [r7, #26]
        break;
 800517a:	bf00      	nop
    }

    if (pclk != 0U)
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d018      	beq.n	80051b4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	085a      	lsrs	r2, r3, #1
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	441a      	add	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	fbb2 f3f3 	udiv	r3, r2, r3
 8005194:	b29b      	uxth	r3, r3
 8005196:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b0f      	cmp	r3, #15
 800519c:	d908      	bls.n	80051b0 <UART_SetConfig+0x4f4>
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a4:	d204      	bcs.n	80051b0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	60da      	str	r2, [r3, #12]
 80051ae:	e001      	b.n	80051b4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80051c0:	7ebb      	ldrb	r3, [r7, #26]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3720      	adds	r7, #32
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bdb0      	pop	{r4, r5, r7, pc}
 80051ca:	bf00      	nop
 80051cc:	00f42400 	.word	0x00f42400

080051d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d01a      	beq.n	80052e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ce:	d10a      	bne.n	80052e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	605a      	str	r2, [r3, #4]
  }
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af02      	add	r7, sp, #8
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005324:	f7fc ff84 	bl	8002230 <HAL_GetTick>
 8005328:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b08      	cmp	r3, #8
 8005336:	d10e      	bne.n	8005356 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005338:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f82d 	bl	80053a6 <UART_WaitOnFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e023      	b.n	800539e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b04      	cmp	r3, #4
 8005362:	d10e      	bne.n	8005382 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005364:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f817 	bl	80053a6 <UART_WaitOnFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e00d      	b.n	800539e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2220      	movs	r2, #32
 8005386:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2220      	movs	r2, #32
 800538c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b084      	sub	sp, #16
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	60b9      	str	r1, [r7, #8]
 80053b0:	603b      	str	r3, [r7, #0]
 80053b2:	4613      	mov	r3, r2
 80053b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b6:	e05e      	b.n	8005476 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053be:	d05a      	beq.n	8005476 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c0:	f7fc ff36 	bl	8002230 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d302      	bcc.n	80053d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d11b      	bne.n	800540e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053e4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0201 	bic.w	r2, r2, #1
 80053f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2220      	movs	r2, #32
 80053fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2220      	movs	r2, #32
 8005400:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e043      	b.n	8005496 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	d02c      	beq.n	8005476 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800542a:	d124      	bne.n	8005476 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005434:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005444:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0201 	bic.w	r2, r2, #1
 8005454:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2220      	movs	r2, #32
 800545a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2220      	movs	r2, #32
 8005466:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e00f      	b.n	8005496 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69da      	ldr	r2, [r3, #28]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4013      	ands	r3, r2
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	429a      	cmp	r2, r3
 8005484:	bf0c      	ite	eq
 8005486:	2301      	moveq	r3, #1
 8005488:	2300      	movne	r3, #0
 800548a:	b2db      	uxtb	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	429a      	cmp	r2, r3
 8005492:	d091      	beq.n	80053b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800549e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80054a0:	2400      	movs	r4, #0
 80054a2:	2310      	movs	r3, #16
 80054a4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80054a8:	6803      	ldr	r3, [r0, #0]
 80054aa:	9400      	str	r4, [sp, #0]
 80054ac:	699e      	ldr	r6, [r3, #24]
 80054ae:	f88d 4004 	strb.w	r4, [sp, #4]
 80054b2:	4615      	mov	r5, r2
 80054b4:	466b      	mov	r3, sp
 80054b6:	6812      	ldr	r2, [r2, #0]
 80054b8:	47b0      	blx	r6
 80054ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80054be:	f003 0306 	and.w	r3, r3, #6
 80054c2:	2b06      	cmp	r3, #6
 80054c4:	bf03      	ittte	eq
 80054c6:	9b00      	ldreq	r3, [sp, #0]
 80054c8:	602b      	streq	r3, [r5, #0]
 80054ca:	2001      	moveq	r0, #1
 80054cc:	4620      	movne	r0, r4
 80054ce:	b004      	add	sp, #16
 80054d0:	bd70      	pop	{r4, r5, r6, pc}

080054d2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80054d2:	9800      	ldr	r0, [sp, #0]
 80054d4:	4290      	cmp	r0, r2
 80054d6:	bf14      	ite	ne
 80054d8:	2001      	movne	r0, #1
 80054da:	2006      	moveq	r0, #6
 80054dc:	4770      	bx	lr
	...

080054e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80054e0:	b510      	push	{r4, lr}
 80054e2:	4b03      	ldr	r3, [pc, #12]	; (80054f0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80054e4:	6003      	str	r3, [r0, #0]
 80054e6:	4604      	mov	r4, r0
 80054e8:	f000 fca3 	bl	8005e32 <_ZNSt9type_infoD1Ev>
 80054ec:	4620      	mov	r0, r4
 80054ee:	bd10      	pop	{r4, pc}
 80054f0:	08006dc4 	.word	0x08006dc4

080054f4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80054f4:	b510      	push	{r4, lr}
 80054f6:	4604      	mov	r4, r0
 80054f8:	f7ff fff2 	bl	80054e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80054fc:	4620      	mov	r0, r4
 80054fe:	2108      	movs	r1, #8
 8005500:	f000 f842 	bl	8005588 <_ZdlPvj>
 8005504:	4620      	mov	r0, r4
 8005506:	bd10      	pop	{r4, pc}

08005508 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8005508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800550c:	461f      	mov	r7, r3
 800550e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8005512:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005516:	4598      	cmp	r8, r3
 8005518:	4606      	mov	r6, r0
 800551a:	4615      	mov	r5, r2
 800551c:	d107      	bne.n	800552e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800551e:	9907      	ldr	r1, [sp, #28]
 8005520:	f000 fc8a 	bl	8005e38 <_ZNKSt9type_infoeqERKS_>
 8005524:	b118      	cbz	r0, 800552e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8005526:	7165      	strb	r5, [r4, #5]
 8005528:	2000      	movs	r0, #0
 800552a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800552e:	4639      	mov	r1, r7
 8005530:	4630      	mov	r0, r6
 8005532:	f000 fc81 	bl	8005e38 <_ZNKSt9type_infoeqERKS_>
 8005536:	2800      	cmp	r0, #0
 8005538:	d0f6      	beq.n	8005528 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 800553a:	2301      	movs	r3, #1
 800553c:	f8c4 8000 	str.w	r8, [r4]
 8005540:	7125      	strb	r5, [r4, #4]
 8005542:	71a3      	strb	r3, [r4, #6]
 8005544:	e7f0      	b.n	8005528 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08005546 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8005546:	b538      	push	{r3, r4, r5, lr}
 8005548:	4615      	mov	r5, r2
 800554a:	461c      	mov	r4, r3
 800554c:	f000 fc74 	bl	8005e38 <_ZNKSt9type_infoeqERKS_>
 8005550:	b120      	cbz	r0, 800555c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8005552:	2308      	movs	r3, #8
 8005554:	60e3      	str	r3, [r4, #12]
 8005556:	2306      	movs	r3, #6
 8005558:	6025      	str	r5, [r4, #0]
 800555a:	7123      	strb	r3, [r4, #4]
 800555c:	bd38      	pop	{r3, r4, r5, pc}

0800555e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800555e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005560:	4605      	mov	r5, r0
 8005562:	460c      	mov	r4, r1
 8005564:	9201      	str	r2, [sp, #4]
 8005566:	461e      	mov	r6, r3
 8005568:	f000 fc66 	bl	8005e38 <_ZNKSt9type_infoeqERKS_>
 800556c:	b950      	cbnz	r0, 8005584 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800556e:	2e03      	cmp	r6, #3
 8005570:	d808      	bhi.n	8005584 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	9a01      	ldr	r2, [sp, #4]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	4629      	mov	r1, r5
 800557a:	4620      	mov	r0, r4
 800557c:	b002      	add	sp, #8
 800557e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005582:	4718      	bx	r3
 8005584:	b002      	add	sp, #8
 8005586:	bd70      	pop	{r4, r5, r6, pc}

08005588 <_ZdlPvj>:
 8005588:	f000 befc 	b.w	8006384 <_ZdlPv>

0800558c <_ZdaPvj>:
 800558c:	f000 befc 	b.w	8006388 <_ZdaPv>

08005590 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	4c08      	ldr	r4, [pc, #32]	; (80055b4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8005594:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8005598:	4628      	mov	r0, r5
 800559a:	60e5      	str	r5, [r4, #12]
 800559c:	f001 f842 	bl	8006624 <malloc>
 80055a0:	60a0      	str	r0, [r4, #8]
 80055a2:	b910      	cbnz	r0, 80055aa <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 80055a4:	60e0      	str	r0, [r4, #12]
 80055a6:	6060      	str	r0, [r4, #4]
 80055a8:	bd38      	pop	{r3, r4, r5, pc}
 80055aa:	2300      	movs	r3, #0
 80055ac:	6060      	str	r0, [r4, #4]
 80055ae:	6005      	str	r5, [r0, #0]
 80055b0:	6043      	str	r3, [r0, #4]
 80055b2:	e7f9      	b.n	80055a8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 80055b4:	20000130 	.word	0x20000130

080055b8 <__cxa_end_cleanup>:
 80055b8:	b41e      	push	{r1, r2, r3, r4}
 80055ba:	f000 f89c 	bl	80056f6 <__gnu_end_cleanup>
 80055be:	bc1e      	pop	{r1, r2, r3, r4}
 80055c0:	f7fb fcf8 	bl	8000fb4 <_Unwind_Resume>

080055c4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80055c4:	7803      	ldrb	r3, [r0, #0]
 80055c6:	2b47      	cmp	r3, #71	; 0x47
 80055c8:	d117      	bne.n	80055fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80055ca:	7843      	ldrb	r3, [r0, #1]
 80055cc:	2b4e      	cmp	r3, #78	; 0x4e
 80055ce:	d114      	bne.n	80055fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80055d0:	7883      	ldrb	r3, [r0, #2]
 80055d2:	2b55      	cmp	r3, #85	; 0x55
 80055d4:	d111      	bne.n	80055fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80055d6:	78c3      	ldrb	r3, [r0, #3]
 80055d8:	2b43      	cmp	r3, #67	; 0x43
 80055da:	d10e      	bne.n	80055fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80055dc:	7903      	ldrb	r3, [r0, #4]
 80055de:	2b43      	cmp	r3, #67	; 0x43
 80055e0:	d10b      	bne.n	80055fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80055e2:	7943      	ldrb	r3, [r0, #5]
 80055e4:	2b2b      	cmp	r3, #43	; 0x2b
 80055e6:	d108      	bne.n	80055fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80055e8:	7983      	ldrb	r3, [r0, #6]
 80055ea:	2b2b      	cmp	r3, #43	; 0x2b
 80055ec:	d105      	bne.n	80055fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80055ee:	79c0      	ldrb	r0, [r0, #7]
 80055f0:	2801      	cmp	r0, #1
 80055f2:	bf8c      	ite	hi
 80055f4:	2000      	movhi	r0, #0
 80055f6:	2001      	movls	r0, #1
 80055f8:	4770      	bx	lr
 80055fa:	2000      	movs	r0, #0
 80055fc:	4770      	bx	lr
	...

08005600 <__cxa_type_match>:
 8005600:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005604:	461d      	mov	r5, r3
 8005606:	7803      	ldrb	r3, [r0, #0]
 8005608:	2b47      	cmp	r3, #71	; 0x47
 800560a:	460e      	mov	r6, r1
 800560c:	4602      	mov	r2, r0
 800560e:	79c1      	ldrb	r1, [r0, #7]
 8005610:	d113      	bne.n	800563a <__cxa_type_match+0x3a>
 8005612:	7843      	ldrb	r3, [r0, #1]
 8005614:	2b4e      	cmp	r3, #78	; 0x4e
 8005616:	d110      	bne.n	800563a <__cxa_type_match+0x3a>
 8005618:	7883      	ldrb	r3, [r0, #2]
 800561a:	2b55      	cmp	r3, #85	; 0x55
 800561c:	d10d      	bne.n	800563a <__cxa_type_match+0x3a>
 800561e:	78c3      	ldrb	r3, [r0, #3]
 8005620:	2b43      	cmp	r3, #67	; 0x43
 8005622:	d10a      	bne.n	800563a <__cxa_type_match+0x3a>
 8005624:	7903      	ldrb	r3, [r0, #4]
 8005626:	2b46      	cmp	r3, #70	; 0x46
 8005628:	d107      	bne.n	800563a <__cxa_type_match+0x3a>
 800562a:	7943      	ldrb	r3, [r0, #5]
 800562c:	2b4f      	cmp	r3, #79	; 0x4f
 800562e:	d104      	bne.n	800563a <__cxa_type_match+0x3a>
 8005630:	7983      	ldrb	r3, [r0, #6]
 8005632:	2b52      	cmp	r3, #82	; 0x52
 8005634:	d101      	bne.n	800563a <__cxa_type_match+0x3a>
 8005636:	2900      	cmp	r1, #0
 8005638:	d031      	beq.n	800569e <__cxa_type_match+0x9e>
 800563a:	4610      	mov	r0, r2
 800563c:	f7ff ffc2 	bl	80055c4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005640:	f080 0001 	eor.w	r0, r0, #1
 8005644:	b2c0      	uxtb	r0, r0
 8005646:	2300      	movs	r3, #0
 8005648:	2400      	movs	r4, #0
 800564a:	9401      	str	r4, [sp, #4]
 800564c:	bb53      	cbnz	r3, 80056a4 <__cxa_type_match+0xa4>
 800564e:	bb58      	cbnz	r0, 80056a8 <__cxa_type_match+0xa8>
 8005650:	2901      	cmp	r1, #1
 8005652:	bf0a      	itet	eq
 8005654:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8005658:	f1a2 0320 	subne.w	r3, r2, #32
 800565c:	3b78      	subeq	r3, #120	; 0x78
 800565e:	2901      	cmp	r1, #1
 8005660:	bf08      	it	eq
 8005662:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8005666:	681c      	ldr	r4, [r3, #0]
 8005668:	bf18      	it	ne
 800566a:	3258      	addne	r2, #88	; 0x58
 800566c:	9201      	str	r2, [sp, #4]
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	4620      	mov	r0, r4
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	4798      	blx	r3
 8005676:	b1c8      	cbz	r0, 80056ac <__cxa_type_match+0xac>
 8005678:	9b01      	ldr	r3, [sp, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	2702      	movs	r7, #2
 8005680:	6833      	ldr	r3, [r6, #0]
 8005682:	aa01      	add	r2, sp, #4
 8005684:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8005688:	4621      	mov	r1, r4
 800568a:	2301      	movs	r3, #1
 800568c:	4630      	mov	r0, r6
 800568e:	47c0      	blx	r8
 8005690:	b170      	cbz	r0, 80056b0 <__cxa_type_match+0xb0>
 8005692:	9b01      	ldr	r3, [sp, #4]
 8005694:	602b      	str	r3, [r5, #0]
 8005696:	4638      	mov	r0, r7
 8005698:	b002      	add	sp, #8
 800569a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800569e:	2301      	movs	r3, #1
 80056a0:	4608      	mov	r0, r1
 80056a2:	e7d1      	b.n	8005648 <__cxa_type_match+0x48>
 80056a4:	4c03      	ldr	r4, [pc, #12]	; (80056b4 <__cxa_type_match+0xb4>)
 80056a6:	e7e2      	b.n	800566e <__cxa_type_match+0x6e>
 80056a8:	4c03      	ldr	r4, [pc, #12]	; (80056b8 <__cxa_type_match+0xb8>)
 80056aa:	e7e0      	b.n	800566e <__cxa_type_match+0x6e>
 80056ac:	2701      	movs	r7, #1
 80056ae:	e7e7      	b.n	8005680 <__cxa_type_match+0x80>
 80056b0:	4607      	mov	r7, r0
 80056b2:	e7f0      	b.n	8005696 <__cxa_type_match+0x96>
 80056b4:	08006de8 	.word	0x08006de8
 80056b8:	08006df0 	.word	0x08006df0

080056bc <__cxa_begin_cleanup>:
 80056bc:	b510      	push	{r4, lr}
 80056be:	4604      	mov	r4, r0
 80056c0:	f000 f87c 	bl	80057bc <__cxa_get_globals>
 80056c4:	4602      	mov	r2, r0
 80056c6:	4620      	mov	r0, r4
 80056c8:	f1a4 0120 	sub.w	r1, r4, #32
 80056cc:	f7ff ff7a 	bl	80055c4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80056d0:	b160      	cbz	r0, 80056ec <__cxa_begin_cleanup+0x30>
 80056d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80056d6:	3301      	adds	r3, #1
 80056d8:	2b01      	cmp	r3, #1
 80056da:	f844 3c04 	str.w	r3, [r4, #-4]
 80056de:	d103      	bne.n	80056e8 <__cxa_begin_cleanup+0x2c>
 80056e0:	6893      	ldr	r3, [r2, #8]
 80056e2:	f844 3c08 	str.w	r3, [r4, #-8]
 80056e6:	6091      	str	r1, [r2, #8]
 80056e8:	2001      	movs	r0, #1
 80056ea:	bd10      	pop	{r4, pc}
 80056ec:	6893      	ldr	r3, [r2, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0f9      	beq.n	80056e6 <__cxa_begin_cleanup+0x2a>
 80056f2:	f000 faf5 	bl	8005ce0 <_ZSt9terminatev>

080056f6 <__gnu_end_cleanup>:
 80056f6:	b510      	push	{r4, lr}
 80056f8:	f000 f860 	bl	80057bc <__cxa_get_globals>
 80056fc:	6882      	ldr	r2, [r0, #8]
 80056fe:	4601      	mov	r1, r0
 8005700:	b90a      	cbnz	r2, 8005706 <__gnu_end_cleanup+0x10>
 8005702:	f000 faed 	bl	8005ce0 <_ZSt9terminatev>
 8005706:	f102 0420 	add.w	r4, r2, #32
 800570a:	4620      	mov	r0, r4
 800570c:	f7ff ff5a 	bl	80055c4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005710:	b140      	cbz	r0, 8005724 <__gnu_end_cleanup+0x2e>
 8005712:	69d3      	ldr	r3, [r2, #28]
 8005714:	3b01      	subs	r3, #1
 8005716:	61d3      	str	r3, [r2, #28]
 8005718:	b913      	cbnz	r3, 8005720 <__gnu_end_cleanup+0x2a>
 800571a:	6990      	ldr	r0, [r2, #24]
 800571c:	6088      	str	r0, [r1, #8]
 800571e:	6193      	str	r3, [r2, #24]
 8005720:	4620      	mov	r0, r4
 8005722:	bd10      	pop	{r4, pc}
 8005724:	6088      	str	r0, [r1, #8]
 8005726:	e7fb      	b.n	8005720 <__gnu_end_cleanup+0x2a>

08005728 <__cxa_throw_bad_array_new_length>:
 8005728:	b508      	push	{r3, lr}
 800572a:	f000 ff3a 	bl	80065a2 <abort>

0800572e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800572e:	7803      	ldrb	r3, [r0, #0]
 8005730:	2b47      	cmp	r3, #71	; 0x47
 8005732:	d117      	bne.n	8005764 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005734:	7843      	ldrb	r3, [r0, #1]
 8005736:	2b4e      	cmp	r3, #78	; 0x4e
 8005738:	d114      	bne.n	8005764 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800573a:	7883      	ldrb	r3, [r0, #2]
 800573c:	2b55      	cmp	r3, #85	; 0x55
 800573e:	d111      	bne.n	8005764 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005740:	78c3      	ldrb	r3, [r0, #3]
 8005742:	2b43      	cmp	r3, #67	; 0x43
 8005744:	d10e      	bne.n	8005764 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005746:	7903      	ldrb	r3, [r0, #4]
 8005748:	2b43      	cmp	r3, #67	; 0x43
 800574a:	d10b      	bne.n	8005764 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800574c:	7943      	ldrb	r3, [r0, #5]
 800574e:	2b2b      	cmp	r3, #43	; 0x2b
 8005750:	d108      	bne.n	8005764 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005752:	7983      	ldrb	r3, [r0, #6]
 8005754:	2b2b      	cmp	r3, #43	; 0x2b
 8005756:	d105      	bne.n	8005764 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005758:	79c0      	ldrb	r0, [r0, #7]
 800575a:	2801      	cmp	r0, #1
 800575c:	bf8c      	ite	hi
 800575e:	2000      	movhi	r0, #0
 8005760:	2001      	movls	r0, #1
 8005762:	4770      	bx	lr
 8005764:	2000      	movs	r0, #0
 8005766:	4770      	bx	lr

08005768 <__cxa_begin_catch>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	4604      	mov	r4, r0
 800576c:	f000 f826 	bl	80057bc <__cxa_get_globals>
 8005770:	6805      	ldr	r5, [r0, #0]
 8005772:	4602      	mov	r2, r0
 8005774:	4620      	mov	r0, r4
 8005776:	f1a4 0120 	sub.w	r1, r4, #32
 800577a:	f7ff ffd8 	bl	800572e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800577e:	b928      	cbnz	r0, 800578c <__cxa_begin_catch+0x24>
 8005780:	b10d      	cbz	r5, 8005786 <__cxa_begin_catch+0x1e>
 8005782:	f000 faad 	bl	8005ce0 <_ZSt9terminatev>
 8005786:	6011      	str	r1, [r2, #0]
 8005788:	4628      	mov	r0, r5
 800578a:	bd38      	pop	{r3, r4, r5, pc}
 800578c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	bfb4      	ite	lt
 8005794:	f1c3 0301 	rsblt	r3, r3, #1
 8005798:	3301      	addge	r3, #1
 800579a:	f844 3c0c 	str.w	r3, [r4, #-12]
 800579e:	6853      	ldr	r3, [r2, #4]
 80057a0:	428d      	cmp	r5, r1
 80057a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80057a6:	6053      	str	r3, [r2, #4]
 80057a8:	4620      	mov	r0, r4
 80057aa:	bf1c      	itt	ne
 80057ac:	f844 5c10 	strne.w	r5, [r4, #-16]
 80057b0:	6011      	strne	r1, [r2, #0]
 80057b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80057b4:	f7fb f84e 	bl	8000854 <_Unwind_Complete>
 80057b8:	e7e6      	b.n	8005788 <__cxa_begin_catch+0x20>
	...

080057bc <__cxa_get_globals>:
 80057bc:	4800      	ldr	r0, [pc, #0]	; (80057c0 <__cxa_get_globals+0x4>)
 80057be:	4770      	bx	lr
 80057c0:	20000140 	.word	0x20000140

080057c4 <_ZL12read_uleb128PKhPm>:
 80057c4:	b530      	push	{r4, r5, lr}
 80057c6:	2300      	movs	r3, #0
 80057c8:	461a      	mov	r2, r3
 80057ca:	f810 5b01 	ldrb.w	r5, [r0], #1
 80057ce:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 80057d2:	4094      	lsls	r4, r2
 80057d4:	4323      	orrs	r3, r4
 80057d6:	062c      	lsls	r4, r5, #24
 80057d8:	f102 0207 	add.w	r2, r2, #7
 80057dc:	d4f5      	bmi.n	80057ca <_ZL12read_uleb128PKhPm+0x6>
 80057de:	600b      	str	r3, [r1, #0]
 80057e0:	bd30      	pop	{r4, r5, pc}

080057e2 <_ZL12read_sleb128PKhPl>:
 80057e2:	b530      	push	{r4, r5, lr}
 80057e4:	2300      	movs	r3, #0
 80057e6:	461a      	mov	r2, r3
 80057e8:	f810 4b01 	ldrb.w	r4, [r0], #1
 80057ec:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 80057f0:	4095      	lsls	r5, r2
 80057f2:	432b      	orrs	r3, r5
 80057f4:	0625      	lsls	r5, r4, #24
 80057f6:	f102 0207 	add.w	r2, r2, #7
 80057fa:	d4f5      	bmi.n	80057e8 <_ZL12read_sleb128PKhPl+0x6>
 80057fc:	2a1f      	cmp	r2, #31
 80057fe:	d806      	bhi.n	800580e <_ZL12read_sleb128PKhPl+0x2c>
 8005800:	0664      	lsls	r4, r4, #25
 8005802:	bf42      	ittt	mi
 8005804:	f04f 34ff 	movmi.w	r4, #4294967295
 8005808:	fa04 f202 	lslmi.w	r2, r4, r2
 800580c:	4313      	orrmi	r3, r2
 800580e:	600b      	str	r3, [r1, #0]
 8005810:	bd30      	pop	{r4, r5, pc}

08005812 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8005812:	2850      	cmp	r0, #80	; 0x50
 8005814:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005818:	4606      	mov	r6, r0
 800581a:	4688      	mov	r8, r1
 800581c:	4615      	mov	r5, r2
 800581e:	461f      	mov	r7, r3
 8005820:	d108      	bne.n	8005834 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 8005822:	3203      	adds	r2, #3
 8005824:	f022 0003 	bic.w	r0, r2, #3
 8005828:	f850 4b04 	ldr.w	r4, [r0], #4
 800582c:	603c      	str	r4, [r7, #0]
 800582e:	b002      	add	sp, #8
 8005830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005834:	f000 030f 	and.w	r3, r0, #15
 8005838:	2b0c      	cmp	r3, #12
 800583a:	d82e      	bhi.n	800589a <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 800583c:	e8df f003 	tbb	[pc, r3]
 8005840:	251d0725 	.word	0x251d0725
 8005844:	2d2d2d29 	.word	0x2d2d2d29
 8005848:	2521182d 	.word	0x2521182d
 800584c:	29          	.byte	0x29
 800584d:	00          	.byte	0x00
 800584e:	a901      	add	r1, sp, #4
 8005850:	4628      	mov	r0, r5
 8005852:	f7ff ffb7 	bl	80057c4 <_ZL12read_uleb128PKhPm>
 8005856:	9c01      	ldr	r4, [sp, #4]
 8005858:	2c00      	cmp	r4, #0
 800585a:	d0e7      	beq.n	800582c <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 800585c:	f006 0370 	and.w	r3, r6, #112	; 0x70
 8005860:	2b10      	cmp	r3, #16
 8005862:	bf08      	it	eq
 8005864:	46a8      	moveq	r8, r5
 8005866:	4444      	add	r4, r8
 8005868:	0633      	lsls	r3, r6, #24
 800586a:	bf48      	it	mi
 800586c:	6824      	ldrmi	r4, [r4, #0]
 800586e:	e7dd      	b.n	800582c <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8005870:	a901      	add	r1, sp, #4
 8005872:	4628      	mov	r0, r5
 8005874:	f7ff ffb5 	bl	80057e2 <_ZL12read_sleb128PKhPl>
 8005878:	e7ed      	b.n	8005856 <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 800587a:	4628      	mov	r0, r5
 800587c:	f830 4b02 	ldrh.w	r4, [r0], #2
 8005880:	e7ea      	b.n	8005858 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8005882:	4628      	mov	r0, r5
 8005884:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8005888:	e7e6      	b.n	8005858 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800588a:	4628      	mov	r0, r5
 800588c:	f850 4b04 	ldr.w	r4, [r0], #4
 8005890:	e7e2      	b.n	8005858 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8005892:	4628      	mov	r0, r5
 8005894:	f850 4b08 	ldr.w	r4, [r0], #8
 8005898:	e7de      	b.n	8005858 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800589a:	f000 fe82 	bl	80065a2 <abort>

0800589e <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 800589e:	b508      	push	{r3, lr}
 80058a0:	4603      	mov	r3, r0
 80058a2:	2bff      	cmp	r3, #255	; 0xff
 80058a4:	4608      	mov	r0, r1
 80058a6:	d010      	beq.n	80058ca <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 80058a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80058ac:	2a30      	cmp	r2, #48	; 0x30
 80058ae:	d012      	beq.n	80058d6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 80058b0:	d807      	bhi.n	80058c2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 80058b2:	2a20      	cmp	r2, #32
 80058b4:	d00b      	beq.n	80058ce <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 80058b6:	d802      	bhi.n	80058be <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 80058b8:	f013 0f60 	tst.w	r3, #96	; 0x60
 80058bc:	d005      	beq.n	80058ca <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 80058be:	f000 fe70 	bl	80065a2 <abort>
 80058c2:	2a40      	cmp	r2, #64	; 0x40
 80058c4:	d00b      	beq.n	80058de <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 80058c6:	2a50      	cmp	r2, #80	; 0x50
 80058c8:	d1f9      	bne.n	80058be <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 80058ca:	2000      	movs	r0, #0
 80058cc:	bd08      	pop	{r3, pc}
 80058ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80058d2:	f001 b9d4 	b.w	8006c7e <_Unwind_GetTextRelBase>
 80058d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80058da:	f001 b9cd 	b.w	8006c78 <_Unwind_GetDataRelBase>
 80058de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80058e2:	f7fb bd3f 	b.w	8001364 <_Unwind_GetRegionStart>

080058e6 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 80058e6:	b513      	push	{r0, r1, r4, lr}
 80058e8:	460c      	mov	r4, r1
 80058ea:	4601      	mov	r1, r0
 80058ec:	4620      	mov	r0, r4
 80058ee:	e9cd 3200 	strd	r3, r2, [sp]
 80058f2:	f7ff ffd4 	bl	800589e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80058f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80058fa:	4601      	mov	r1, r0
 80058fc:	4620      	mov	r0, r4
 80058fe:	b002      	add	sp, #8
 8005900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005904:	f7ff bf85 	b.w	8005812 <_ZL28read_encoded_value_with_basehjPKhPj>

08005908 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8005908:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800590a:	460c      	mov	r4, r1
 800590c:	4615      	mov	r5, r2
 800590e:	4606      	mov	r6, r0
 8005910:	b328      	cbz	r0, 800595e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 8005912:	f7fb fd27 	bl	8001364 <_Unwind_GetRegionStart>
 8005916:	4603      	mov	r3, r0
 8005918:	4620      	mov	r0, r4
 800591a:	602b      	str	r3, [r5, #0]
 800591c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005920:	29ff      	cmp	r1, #255	; 0xff
 8005922:	d01e      	beq.n	8005962 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 8005924:	4602      	mov	r2, r0
 8005926:	1d2b      	adds	r3, r5, #4
 8005928:	4630      	mov	r0, r6
 800592a:	f7ff ffdc 	bl	80058e6 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800592e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005932:	752b      	strb	r3, [r5, #20]
 8005934:	2bff      	cmp	r3, #255	; 0xff
 8005936:	d016      	beq.n	8005966 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 8005938:	2310      	movs	r3, #16
 800593a:	752b      	strb	r3, [r5, #20]
 800593c:	a901      	add	r1, sp, #4
 800593e:	f7ff ff41 	bl	80057c4 <_ZL12read_uleb128PKhPm>
 8005942:	9b01      	ldr	r3, [sp, #4]
 8005944:	4403      	add	r3, r0
 8005946:	60eb      	str	r3, [r5, #12]
 8005948:	f810 3b01 	ldrb.w	r3, [r0], #1
 800594c:	756b      	strb	r3, [r5, #21]
 800594e:	a901      	add	r1, sp, #4
 8005950:	f7ff ff38 	bl	80057c4 <_ZL12read_uleb128PKhPm>
 8005954:	9b01      	ldr	r3, [sp, #4]
 8005956:	4403      	add	r3, r0
 8005958:	612b      	str	r3, [r5, #16]
 800595a:	b002      	add	sp, #8
 800595c:	bd70      	pop	{r4, r5, r6, pc}
 800595e:	4603      	mov	r3, r0
 8005960:	e7da      	b.n	8005918 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 8005962:	606b      	str	r3, [r5, #4]
 8005964:	e7e3      	b.n	800592e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 8005966:	2300      	movs	r3, #0
 8005968:	e7ed      	b.n	8005946 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

0800596a <_Unwind_GetGR>:
 800596a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800596c:	ab03      	add	r3, sp, #12
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	2300      	movs	r3, #0
 8005972:	460a      	mov	r2, r1
 8005974:	4619      	mov	r1, r3
 8005976:	f7fa ff75 	bl	8000864 <_Unwind_VRS_Get>
 800597a:	9803      	ldr	r0, [sp, #12]
 800597c:	b005      	add	sp, #20
 800597e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005984 <__gxx_personality_v0>:
 8005984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005988:	b091      	sub	sp, #68	; 0x44
 800598a:	2300      	movs	r3, #0
 800598c:	9305      	str	r3, [sp, #20]
 800598e:	f000 0303 	and.w	r3, r0, #3
 8005992:	2b01      	cmp	r3, #1
 8005994:	4606      	mov	r6, r0
 8005996:	460c      	mov	r4, r1
 8005998:	4617      	mov	r7, r2
 800599a:	d00e      	beq.n	80059ba <__gxx_personality_v0+0x36>
 800599c:	2b02      	cmp	r3, #2
 800599e:	d003      	beq.n	80059a8 <__gxx_personality_v0+0x24>
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d13b      	bne.n	8005a1c <__gxx_personality_v0+0x98>
 80059a4:	0701      	lsls	r1, r0, #28
 80059a6:	d53b      	bpl.n	8005a20 <__gxx_personality_v0+0x9c>
 80059a8:	4639      	mov	r1, r7
 80059aa:	4620      	mov	r0, r4
 80059ac:	f7fb fcc4 	bl	8001338 <__gnu_unwind_frame>
 80059b0:	b390      	cbz	r0, 8005a18 <__gxx_personality_v0+0x94>
 80059b2:	2009      	movs	r0, #9
 80059b4:	b011      	add	sp, #68	; 0x44
 80059b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ba:	0702      	lsls	r2, r0, #28
 80059bc:	d406      	bmi.n	80059cc <__gxx_personality_v0+0x48>
 80059be:	6a0d      	ldr	r5, [r1, #32]
 80059c0:	4638      	mov	r0, r7
 80059c2:	210d      	movs	r1, #13
 80059c4:	f7ff ffd1 	bl	800596a <_Unwind_GetGR>
 80059c8:	4285      	cmp	r5, r0
 80059ca:	d02b      	beq.n	8005a24 <__gxx_personality_v0+0xa0>
 80059cc:	2002      	movs	r0, #2
 80059ce:	2300      	movs	r3, #0
 80059d0:	f006 0608 	and.w	r6, r6, #8
 80059d4:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 80059d8:	4306      	orrs	r6, r0
 80059da:	f8cd a000 	str.w	sl, [sp]
 80059de:	220c      	movs	r2, #12
 80059e0:	4619      	mov	r1, r3
 80059e2:	4638      	mov	r0, r7
 80059e4:	940a      	str	r4, [sp, #40]	; 0x28
 80059e6:	f7fa ff61 	bl	80008ac <_Unwind_VRS_Set>
 80059ea:	2e06      	cmp	r6, #6
 80059ec:	d11c      	bne.n	8005a28 <__gxx_personality_v0+0xa4>
 80059ee:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 80059f2:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 80059f6:	f1b8 0f00 	cmp.w	r8, #0
 80059fa:	bf0c      	ite	eq
 80059fc:	f04f 0b01 	moveq.w	fp, #1
 8005a00:	f04f 0b03 	movne.w	fp, #3
 8005a04:	f016 0608 	ands.w	r6, r6, #8
 8005a08:	f000 810c 	beq.w	8005c24 <__gxx_personality_v0+0x2a0>
 8005a0c:	f1bb 0f01 	cmp.w	fp, #1
 8005a10:	f040 8104 	bne.w	8005c1c <__gxx_personality_v0+0x298>
 8005a14:	f000 f964 	bl	8005ce0 <_ZSt9terminatev>
 8005a18:	2008      	movs	r0, #8
 8005a1a:	e7cb      	b.n	80059b4 <__gxx_personality_v0+0x30>
 8005a1c:	f000 fdc1 	bl	80065a2 <abort>
 8005a20:	2001      	movs	r0, #1
 8005a22:	e7d4      	b.n	80059ce <__gxx_personality_v0+0x4a>
 8005a24:	2006      	movs	r0, #6
 8005a26:	e7d2      	b.n	80059ce <__gxx_personality_v0+0x4a>
 8005a28:	4638      	mov	r0, r7
 8005a2a:	f7fb fca1 	bl	8001370 <_Unwind_GetLanguageSpecificData>
 8005a2e:	4681      	mov	r9, r0
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d0b9      	beq.n	80059a8 <__gxx_personality_v0+0x24>
 8005a34:	4652      	mov	r2, sl
 8005a36:	4601      	mov	r1, r0
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f7ff ff65 	bl	8005908 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8005a3e:	4639      	mov	r1, r7
 8005a40:	4605      	mov	r5, r0
 8005a42:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8005a46:	f7ff ff2a 	bl	800589e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8005a4a:	210f      	movs	r1, #15
 8005a4c:	900c      	str	r0, [sp, #48]	; 0x30
 8005a4e:	4638      	mov	r0, r7
 8005a50:	f7ff ff8b 	bl	800596a <_Unwind_GetGR>
 8005a54:	f020 0801 	bic.w	r8, r0, #1
 8005a58:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a5e:	42ab      	cmp	r3, r5
 8005a60:	f240 80c4 	bls.w	8005bec <__gxx_personality_v0+0x268>
 8005a64:	462a      	mov	r2, r5
 8005a66:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8005a6a:	ab06      	add	r3, sp, #24
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	f7ff ff3a 	bl	80058e6 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8005a72:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8005a76:	4602      	mov	r2, r0
 8005a78:	ab07      	add	r3, sp, #28
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	f7ff ff33 	bl	80058e6 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8005a80:	ab08      	add	r3, sp, #32
 8005a82:	4602      	mov	r2, r0
 8005a84:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8005a88:	2000      	movs	r0, #0
 8005a8a:	f7ff ff2c 	bl	80058e6 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8005a8e:	a909      	add	r1, sp, #36	; 0x24
 8005a90:	f7ff fe98 	bl	80057c4 <_ZL12read_uleb128PKhPm>
 8005a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a96:	9a06      	ldr	r2, [sp, #24]
 8005a98:	4413      	add	r3, r2
 8005a9a:	4543      	cmp	r3, r8
 8005a9c:	4605      	mov	r5, r0
 8005a9e:	d901      	bls.n	8005aa4 <__gxx_personality_v0+0x120>
 8005aa0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005aa2:	e7db      	b.n	8005a5c <__gxx_personality_v0+0xd8>
 8005aa4:	9a07      	ldr	r2, [sp, #28]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	4543      	cmp	r3, r8
 8005aaa:	d9d7      	bls.n	8005a5c <__gxx_personality_v0+0xd8>
 8005aac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ab0:	f1b8 0f00 	cmp.w	r8, #0
 8005ab4:	d001      	beq.n	8005aba <__gxx_personality_v0+0x136>
 8005ab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ab8:	4498      	add	r8, r3
 8005aba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005abc:	b115      	cbz	r5, 8005ac4 <__gxx_personality_v0+0x140>
 8005abe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005ac0:	3d01      	subs	r5, #1
 8005ac2:	4405      	add	r5, r0
 8005ac4:	f1b8 0f00 	cmp.w	r8, #0
 8005ac8:	f43f af6e 	beq.w	80059a8 <__gxx_personality_v0+0x24>
 8005acc:	2d00      	cmp	r5, #0
 8005ace:	f000 80f7 	beq.w	8005cc0 <__gxx_personality_v0+0x33c>
 8005ad2:	f016 0308 	ands.w	r3, r6, #8
 8005ad6:	9302      	str	r3, [sp, #8]
 8005ad8:	d034      	beq.n	8005b44 <__gxx_personality_v0+0x1c0>
 8005ada:	2347      	movs	r3, #71	; 0x47
 8005adc:	7023      	strb	r3, [r4, #0]
 8005ade:	234e      	movs	r3, #78	; 0x4e
 8005ae0:	7063      	strb	r3, [r4, #1]
 8005ae2:	2355      	movs	r3, #85	; 0x55
 8005ae4:	70a3      	strb	r3, [r4, #2]
 8005ae6:	2343      	movs	r3, #67	; 0x43
 8005ae8:	70e3      	strb	r3, [r4, #3]
 8005aea:	2346      	movs	r3, #70	; 0x46
 8005aec:	7123      	strb	r3, [r4, #4]
 8005aee:	234f      	movs	r3, #79	; 0x4f
 8005af0:	7163      	strb	r3, [r4, #5]
 8005af2:	2352      	movs	r3, #82	; 0x52
 8005af4:	71a3      	strb	r3, [r4, #6]
 8005af6:	2300      	movs	r3, #0
 8005af8:	71e3      	strb	r3, [r4, #7]
 8005afa:	f04f 0b00 	mov.w	fp, #0
 8005afe:	a907      	add	r1, sp, #28
 8005b00:	4628      	mov	r0, r5
 8005b02:	f7ff fe6e 	bl	80057e2 <_ZL12read_sleb128PKhPl>
 8005b06:	a908      	add	r1, sp, #32
 8005b08:	9003      	str	r0, [sp, #12]
 8005b0a:	f7ff fe6a 	bl	80057e2 <_ZL12read_sleb128PKhPl>
 8005b0e:	9907      	ldr	r1, [sp, #28]
 8005b10:	2900      	cmp	r1, #0
 8005b12:	d068      	beq.n	8005be6 <__gxx_personality_v0+0x262>
 8005b14:	dd3a      	ble.n	8005b8c <__gxx_personality_v0+0x208>
 8005b16:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8005b1a:	28ff      	cmp	r0, #255	; 0xff
 8005b1c:	d032      	beq.n	8005b84 <__gxx_personality_v0+0x200>
 8005b1e:	f000 0307 	and.w	r3, r0, #7
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	f63f af7a 	bhi.w	8005a1c <__gxx_personality_v0+0x98>
 8005b28:	a201      	add	r2, pc, #4	; (adr r2, 8005b30 <__gxx_personality_v0+0x1ac>)
 8005b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2e:	bf00      	nop
 8005b30:	08005b89 	.word	0x08005b89
 8005b34:	08005a1d 	.word	0x08005a1d
 8005b38:	08005b57 	.word	0x08005b57
 8005b3c:	08005b89 	.word	0x08005b89
 8005b40:	08005b81 	.word	0x08005b81
 8005b44:	79e3      	ldrb	r3, [r4, #7]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	bf0c      	ite	eq
 8005b4a:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8005b4e:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8005b52:	9305      	str	r3, [sp, #20]
 8005b54:	e7d1      	b.n	8005afa <__gxx_personality_v0+0x176>
 8005b56:	2502      	movs	r5, #2
 8005b58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b5a:	ab09      	add	r3, sp, #36	; 0x24
 8005b5c:	fb05 2211 	mls	r2, r5, r1, r2
 8005b60:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b62:	f7ff fe56 	bl	8005812 <_ZL28read_encoded_value_with_basehjPKhPj>
 8005b66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b68:	b131      	cbz	r1, 8005b78 <__gxx_personality_v0+0x1f4>
 8005b6a:	b37c      	cbz	r4, 8005bcc <__gxx_personality_v0+0x248>
 8005b6c:	ab05      	add	r3, sp, #20
 8005b6e:	2200      	movs	r2, #0
 8005b70:	4620      	mov	r0, r4
 8005b72:	f7ff fd45 	bl	8005600 <__cxa_type_match>
 8005b76:	b348      	cbz	r0, 8005bcc <__gxx_personality_v0+0x248>
 8005b78:	9d07      	ldr	r5, [sp, #28]
 8005b7a:	f04f 0b03 	mov.w	fp, #3
 8005b7e:	e039      	b.n	8005bf4 <__gxx_personality_v0+0x270>
 8005b80:	2508      	movs	r5, #8
 8005b82:	e7e9      	b.n	8005b58 <__gxx_personality_v0+0x1d4>
 8005b84:	2500      	movs	r5, #0
 8005b86:	e7e7      	b.n	8005b58 <__gxx_personality_v0+0x1d4>
 8005b88:	2504      	movs	r5, #4
 8005b8a:	e7e5      	b.n	8005b58 <__gxx_personality_v0+0x1d4>
 8005b8c:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 8005b90:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 8005b94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b96:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 8005b9a:	313f      	adds	r1, #63	; 0x3f
 8005b9c:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8005ba0:	b1dc      	cbz	r4, 8005bda <__gxx_personality_v0+0x256>
 8005ba2:	9a02      	ldr	r2, [sp, #8]
 8005ba4:	b9ca      	cbnz	r2, 8005bda <__gxx_personality_v0+0x256>
 8005ba6:	9b05      	ldr	r3, [sp, #20]
 8005ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8005baa:	3d04      	subs	r5, #4
 8005bac:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8005bb0:	b141      	cbz	r1, 8005bc4 <__gxx_personality_v0+0x240>
 8005bb2:	ab09      	add	r3, sp, #36	; 0x24
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	4429      	add	r1, r5
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f7ff fd21 	bl	8005600 <__cxa_type_match>
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	d0f4      	beq.n	8005bac <__gxx_personality_v0+0x228>
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	f081 0101 	eor.w	r1, r1, #1
 8005bc8:	2900      	cmp	r1, #0
 8005bca:	d1d5      	bne.n	8005b78 <__gxx_personality_v0+0x1f4>
 8005bcc:	9d08      	ldr	r5, [sp, #32]
 8005bce:	2d00      	cmp	r5, #0
 8005bd0:	d072      	beq.n	8005cb8 <__gxx_personality_v0+0x334>
 8005bd2:	9b03      	ldr	r3, [sp, #12]
 8005bd4:	442b      	add	r3, r5
 8005bd6:	461d      	mov	r5, r3
 8005bd8:	e791      	b.n	8005afe <__gxx_personality_v0+0x17a>
 8005bda:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8005bde:	fab1 f181 	clz	r1, r1
 8005be2:	0949      	lsrs	r1, r1, #5
 8005be4:	e7f0      	b.n	8005bc8 <__gxx_personality_v0+0x244>
 8005be6:	f04f 0b01 	mov.w	fp, #1
 8005bea:	e7ef      	b.n	8005bcc <__gxx_personality_v0+0x248>
 8005bec:	2500      	movs	r5, #0
 8005bee:	46a8      	mov	r8, r5
 8005bf0:	f04f 0b01 	mov.w	fp, #1
 8005bf4:	07f3      	lsls	r3, r6, #31
 8005bf6:	f57f af05 	bpl.w	8005a04 <__gxx_personality_v0+0x80>
 8005bfa:	f1bb 0f02 	cmp.w	fp, #2
 8005bfe:	f43f aed3 	beq.w	80059a8 <__gxx_personality_v0+0x24>
 8005c02:	210d      	movs	r1, #13
 8005c04:	4638      	mov	r0, r7
 8005c06:	9e05      	ldr	r6, [sp, #20]
 8005c08:	f7ff feaf 	bl	800596a <_Unwind_GetGR>
 8005c0c:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 8005c10:	e9c4 0608 	strd	r0, r6, [r4, #32]
 8005c14:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8005c18:	2006      	movs	r0, #6
 8005c1a:	e6cb      	b.n	80059b4 <__gxx_personality_v0+0x30>
 8005c1c:	2d00      	cmp	r5, #0
 8005c1e:	da22      	bge.n	8005c66 <__gxx_personality_v0+0x2e2>
 8005c20:	f000 f870 	bl	8005d04 <_ZSt10unexpectedv>
 8005c24:	f1bb 0f01 	cmp.w	fp, #1
 8005c28:	d102      	bne.n	8005c30 <__gxx_personality_v0+0x2ac>
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f000 fbcb 	bl	80063c6 <__cxa_call_terminate>
 8005c30:	2d00      	cmp	r5, #0
 8005c32:	da18      	bge.n	8005c66 <__gxx_personality_v0+0x2e2>
 8005c34:	4652      	mov	r2, sl
 8005c36:	4649      	mov	r1, r9
 8005c38:	4638      	mov	r0, r7
 8005c3a:	f7ff fe65 	bl	8005908 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8005c3e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8005c42:	4639      	mov	r1, r7
 8005c44:	f7ff fe2b 	bl	800589e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8005c48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c4a:	900c      	str	r0, [sp, #48]	; 0x30
 8005c4c:	43eb      	mvns	r3, r5
 8005c4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005c52:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 8005c56:	b10a      	cbz	r2, 8005c5c <__gxx_personality_v0+0x2d8>
 8005c58:	3601      	adds	r6, #1
 8005c5a:	e7fa      	b.n	8005c52 <__gxx_personality_v0+0x2ce>
 8005c5c:	2204      	movs	r2, #4
 8005c5e:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 8005c62:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8005c66:	2300      	movs	r3, #0
 8005c68:	ae09      	add	r6, sp, #36	; 0x24
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	9600      	str	r6, [sp, #0]
 8005c70:	4638      	mov	r0, r7
 8005c72:	9409      	str	r4, [sp, #36]	; 0x24
 8005c74:	f7fa fe1a 	bl	80008ac <_Unwind_VRS_Set>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	9600      	str	r6, [sp, #0]
 8005c80:	4638      	mov	r0, r7
 8005c82:	9509      	str	r5, [sp, #36]	; 0x24
 8005c84:	f7fa fe12 	bl	80008ac <_Unwind_VRS_Set>
 8005c88:	210f      	movs	r1, #15
 8005c8a:	4638      	mov	r0, r7
 8005c8c:	f7ff fe6d 	bl	800596a <_Unwind_GetGR>
 8005c90:	f000 0001 	and.w	r0, r0, #1
 8005c94:	ea40 0008 	orr.w	r0, r0, r8
 8005c98:	2300      	movs	r3, #0
 8005c9a:	9009      	str	r0, [sp, #36]	; 0x24
 8005c9c:	9600      	str	r6, [sp, #0]
 8005c9e:	220f      	movs	r2, #15
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4638      	mov	r0, r7
 8005ca4:	f7fa fe02 	bl	80008ac <_Unwind_VRS_Set>
 8005ca8:	f1bb 0f02 	cmp.w	fp, #2
 8005cac:	d102      	bne.n	8005cb4 <__gxx_personality_v0+0x330>
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f7ff fd04 	bl	80056bc <__cxa_begin_cleanup>
 8005cb4:	2007      	movs	r0, #7
 8005cb6:	e67d      	b.n	80059b4 <__gxx_personality_v0+0x30>
 8005cb8:	f1bb 0f00 	cmp.w	fp, #0
 8005cbc:	f43f ae74 	beq.w	80059a8 <__gxx_personality_v0+0x24>
 8005cc0:	f04f 0b02 	mov.w	fp, #2
 8005cc4:	e796      	b.n	8005bf4 <__gxx_personality_v0+0x270>
 8005cc6:	bf00      	nop

08005cc8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005cc8:	b508      	push	{r3, lr}
 8005cca:	4780      	blx	r0
 8005ccc:	f000 fc69 	bl	80065a2 <abort>

08005cd0 <_ZSt13get_terminatev>:
 8005cd0:	4b02      	ldr	r3, [pc, #8]	; (8005cdc <_ZSt13get_terminatev+0xc>)
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	f3bf 8f5b 	dmb	ish
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	20000024 	.word	0x20000024

08005ce0 <_ZSt9terminatev>:
 8005ce0:	b508      	push	{r3, lr}
 8005ce2:	f7ff fff5 	bl	8005cd0 <_ZSt13get_terminatev>
 8005ce6:	f7ff ffef 	bl	8005cc8 <_ZN10__cxxabiv111__terminateEPFvvE>

08005cea <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8005cea:	b508      	push	{r3, lr}
 8005cec:	4780      	blx	r0
 8005cee:	f7ff fff7 	bl	8005ce0 <_ZSt9terminatev>
	...

08005cf4 <_ZSt14get_unexpectedv>:
 8005cf4:	4b02      	ldr	r3, [pc, #8]	; (8005d00 <_ZSt14get_unexpectedv+0xc>)
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	f3bf 8f5b 	dmb	ish
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	20000020 	.word	0x20000020

08005d04 <_ZSt10unexpectedv>:
 8005d04:	b508      	push	{r3, lr}
 8005d06:	f7ff fff5 	bl	8005cf4 <_ZSt14get_unexpectedv>
 8005d0a:	f7ff ffee 	bl	8005cea <_ZN10__cxxabiv112__unexpectedEPFvvE>

08005d0e <_Znwj>:
 8005d0e:	2801      	cmp	r0, #1
 8005d10:	bf38      	it	cc
 8005d12:	2001      	movcc	r0, #1
 8005d14:	b510      	push	{r4, lr}
 8005d16:	4604      	mov	r4, r0
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f000 fc83 	bl	8006624 <malloc>
 8005d1e:	b930      	cbnz	r0, 8005d2e <_Znwj+0x20>
 8005d20:	f000 fb74 	bl	800640c <_ZSt15get_new_handlerv>
 8005d24:	b908      	cbnz	r0, 8005d2a <_Znwj+0x1c>
 8005d26:	f000 fc3c 	bl	80065a2 <abort>
 8005d2a:	4780      	blx	r0
 8005d2c:	e7f4      	b.n	8005d18 <_Znwj+0xa>
 8005d2e:	bd10      	pop	{r4, pc}

08005d30 <_Znaj>:
 8005d30:	f7ff bfed 	b.w	8005d0e <_Znwj>

08005d34 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8005d34:	b510      	push	{r4, lr}
 8005d36:	4b03      	ldr	r3, [pc, #12]	; (8005d44 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8005d38:	6003      	str	r3, [r0, #0]
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	f7ff fbd0 	bl	80054e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005d40:	4620      	mov	r0, r4
 8005d42:	bd10      	pop	{r4, pc}
 8005d44:	08006e78 	.word	0x08006e78

08005d48 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8005d48:	b510      	push	{r4, lr}
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	f7ff fff2 	bl	8005d34 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8005d50:	4620      	mov	r0, r4
 8005d52:	210c      	movs	r1, #12
 8005d54:	f7ff fc18 	bl	8005588 <_ZdlPvj>
 8005d58:	4620      	mov	r0, r4
 8005d5a:	bd10      	pop	{r4, pc}

08005d5c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8005d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d5e:	9f08      	ldr	r7, [sp, #32]
 8005d60:	4297      	cmp	r7, r2
 8005d62:	4605      	mov	r5, r0
 8005d64:	460e      	mov	r6, r1
 8005d66:	4614      	mov	r4, r2
 8005d68:	d00a      	beq.n	8005d80 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8005d6a:	68a8      	ldr	r0, [r5, #8]
 8005d6c:	6802      	ldr	r2, [r0, #0]
 8005d6e:	9708      	str	r7, [sp, #32]
 8005d70:	6a15      	ldr	r5, [r2, #32]
 8005d72:	4631      	mov	r1, r6
 8005d74:	4622      	mov	r2, r4
 8005d76:	46ac      	mov	ip, r5
 8005d78:	b003      	add	sp, #12
 8005d7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005d7e:	4760      	bx	ip
 8005d80:	4619      	mov	r1, r3
 8005d82:	9301      	str	r3, [sp, #4]
 8005d84:	f000 f858 	bl	8005e38 <_ZNKSt9type_infoeqERKS_>
 8005d88:	9b01      	ldr	r3, [sp, #4]
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	d0ed      	beq.n	8005d6a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8005d8e:	2006      	movs	r0, #6
 8005d90:	b003      	add	sp, #12
 8005d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8005d94:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d98:	460d      	mov	r5, r1
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8005da0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8005da4:	4681      	mov	r9, r0
 8005da6:	4617      	mov	r7, r2
 8005da8:	4698      	mov	r8, r3
 8005daa:	f000 f845 	bl	8005e38 <_ZNKSt9type_infoeqERKS_>
 8005dae:	b190      	cbz	r0, 8005dd6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8005db0:	2d00      	cmp	r5, #0
 8005db2:	6034      	str	r4, [r6, #0]
 8005db4:	7137      	strb	r7, [r6, #4]
 8005db6:	db09      	blt.n	8005dcc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8005db8:	1961      	adds	r1, r4, r5
 8005dba:	458a      	cmp	sl, r1
 8005dbc:	bf0c      	ite	eq
 8005dbe:	2106      	moveq	r1, #6
 8005dc0:	2101      	movne	r1, #1
 8005dc2:	71b1      	strb	r1, [r6, #6]
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	b001      	add	sp, #4
 8005dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dcc:	3502      	adds	r5, #2
 8005dce:	d1f9      	bne.n	8005dc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	71b3      	strb	r3, [r6, #6]
 8005dd4:	e7f6      	b.n	8005dc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005dd6:	4554      	cmp	r4, sl
 8005dd8:	d106      	bne.n	8005de8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8005dda:	4659      	mov	r1, fp
 8005ddc:	4648      	mov	r0, r9
 8005dde:	f000 f82b 	bl	8005e38 <_ZNKSt9type_infoeqERKS_>
 8005de2:	b108      	cbz	r0, 8005de8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8005de4:	7177      	strb	r7, [r6, #5]
 8005de6:	e7ed      	b.n	8005dc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005de8:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8005dec:	6803      	ldr	r3, [r0, #0]
 8005dee:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8005df2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8005df6:	69dc      	ldr	r4, [r3, #28]
 8005df8:	463a      	mov	r2, r7
 8005dfa:	4643      	mov	r3, r8
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	46a4      	mov	ip, r4
 8005e00:	b001      	add	sp, #4
 8005e02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e06:	4760      	bx	ip

08005e08 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8005e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0c:	4607      	mov	r7, r0
 8005e0e:	460c      	mov	r4, r1
 8005e10:	4615      	mov	r5, r2
 8005e12:	461e      	mov	r6, r3
 8005e14:	f7ff fb97 	bl	8005546 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8005e18:	b948      	cbnz	r0, 8005e2e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8005e1a:	68b8      	ldr	r0, [r7, #8]
 8005e1c:	6803      	ldr	r3, [r0, #0]
 8005e1e:	699f      	ldr	r7, [r3, #24]
 8005e20:	462a      	mov	r2, r5
 8005e22:	4633      	mov	r3, r6
 8005e24:	4621      	mov	r1, r4
 8005e26:	46bc      	mov	ip, r7
 8005e28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e2c:	4760      	bx	ip
 8005e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e32 <_ZNSt9type_infoD1Ev>:
 8005e32:	4770      	bx	lr

08005e34 <_ZNKSt9type_info14__is_pointer_pEv>:
 8005e34:	2000      	movs	r0, #0
 8005e36:	4770      	bx	lr

08005e38 <_ZNKSt9type_infoeqERKS_>:
 8005e38:	4281      	cmp	r1, r0
 8005e3a:	b508      	push	{r3, lr}
 8005e3c:	d00e      	beq.n	8005e5c <_ZNKSt9type_infoeqERKS_+0x24>
 8005e3e:	6840      	ldr	r0, [r0, #4]
 8005e40:	7803      	ldrb	r3, [r0, #0]
 8005e42:	2b2a      	cmp	r3, #42	; 0x2a
 8005e44:	d00c      	beq.n	8005e60 <_ZNKSt9type_infoeqERKS_+0x28>
 8005e46:	6849      	ldr	r1, [r1, #4]
 8005e48:	780b      	ldrb	r3, [r1, #0]
 8005e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e4c:	bf08      	it	eq
 8005e4e:	3101      	addeq	r1, #1
 8005e50:	f7fa f9ba 	bl	80001c8 <strcmp>
 8005e54:	fab0 f080 	clz	r0, r0
 8005e58:	0940      	lsrs	r0, r0, #5
 8005e5a:	bd08      	pop	{r3, pc}
 8005e5c:	2001      	movs	r0, #1
 8005e5e:	e7fc      	b.n	8005e5a <_ZNKSt9type_infoeqERKS_+0x22>
 8005e60:	2000      	movs	r0, #0
 8005e62:	e7fa      	b.n	8005e5a <_ZNKSt9type_infoeqERKS_+0x22>

08005e64 <_ZNSaIcEC1Ev>:
 8005e64:	4770      	bx	lr

08005e66 <_ZNSaIcED1Ev>:
 8005e66:	4770      	bx	lr

08005e68 <_ZNSs7_M_copyEPcPKcj>:
 8005e68:	2a01      	cmp	r2, #1
 8005e6a:	b430      	push	{r4, r5}
 8005e6c:	d103      	bne.n	8005e76 <_ZNSs7_M_copyEPcPKcj+0xe>
 8005e6e:	780b      	ldrb	r3, [r1, #0]
 8005e70:	7003      	strb	r3, [r0, #0]
 8005e72:	bc30      	pop	{r4, r5}
 8005e74:	4770      	bx	lr
 8005e76:	2a00      	cmp	r2, #0
 8005e78:	d0fb      	beq.n	8005e72 <_ZNSs7_M_copyEPcPKcj+0xa>
 8005e7a:	bc30      	pop	{r4, r5}
 8005e7c:	f000 bbe2 	b.w	8006644 <memcpy>

08005e80 <_ZNSs13_S_copy_charsEPcPKcS1_>:
 8005e80:	b508      	push	{r3, lr}
 8005e82:	1a52      	subs	r2, r2, r1
 8005e84:	f7ff fff0 	bl	8005e68 <_ZNSs7_M_copyEPcPKcj>
 8005e88:	bd08      	pop	{r3, pc}
	...

08005e8c <_ZNSs4_Rep26_M_set_length_and_sharableEj>:
 8005e8c:	4b04      	ldr	r3, [pc, #16]	; (8005ea0 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x14>)
 8005e8e:	4298      	cmp	r0, r3
 8005e90:	d004      	beq.n	8005e9c <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x10>
 8005e92:	6001      	str	r1, [r0, #0]
 8005e94:	4401      	add	r1, r0
 8005e96:	2300      	movs	r3, #0
 8005e98:	6083      	str	r3, [r0, #8]
 8005e9a:	730b      	strb	r3, [r1, #12]
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	2000014c 	.word	0x2000014c

08005ea4 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 8005ea4:	4b15      	ldr	r3, [pc, #84]	; (8005efc <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8005ea6:	4298      	cmp	r0, r3
 8005ea8:	b510      	push	{r4, lr}
 8005eaa:	4604      	mov	r4, r0
 8005eac:	d902      	bls.n	8005eb4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x10>
 8005eae:	4814      	ldr	r0, [pc, #80]	; (8005f00 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x5c>)
 8005eb0:	f000 f8e6 	bl	8006080 <_ZSt20__throw_length_errorPKc>
 8005eb4:	4288      	cmp	r0, r1
 8005eb6:	d903      	bls.n	8005ec0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x1c>
 8005eb8:	004b      	lsls	r3, r1, #1
 8005eba:	4298      	cmp	r0, r3
 8005ebc:	bf38      	it	cc
 8005ebe:	461c      	movcc	r4, r3
 8005ec0:	f104 031d 	add.w	r3, r4, #29
 8005ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec8:	f104 000d 	add.w	r0, r4, #13
 8005ecc:	d90c      	bls.n	8005ee8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8005ece:	428c      	cmp	r4, r1
 8005ed0:	d90a      	bls.n	8005ee8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8005ed2:	480a      	ldr	r0, [pc, #40]	; (8005efc <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8005ed4:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8005ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005edc:	1ae4      	subs	r4, r4, r3
 8005ede:	4284      	cmp	r4, r0
 8005ee0:	bf28      	it	cs
 8005ee2:	4604      	movcs	r4, r0
 8005ee4:	f104 000d 	add.w	r0, r4, #13
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	da01      	bge.n	8005ef0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x4c>
 8005eec:	f000 f8c2 	bl	8006074 <_ZSt17__throw_bad_allocv>
 8005ef0:	f7ff ff0d 	bl	8005d0e <_Znwj>
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	6044      	str	r4, [r0, #4]
 8005ef8:	6082      	str	r2, [r0, #8]
 8005efa:	bd10      	pop	{r4, pc}
 8005efc:	3ffffffc 	.word	0x3ffffffc
 8005f00:	08006eb1 	.word	0x08006eb1

08005f04 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
 8005f04:	4288      	cmp	r0, r1
 8005f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	460d      	mov	r5, r1
 8005f0e:	d018      	beq.n	8005f42 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x3e>
 8005f10:	b1a0      	cbz	r0, 8005f3c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x38>
 8005f12:	eba1 0800 	sub.w	r8, r1, r0
 8005f16:	4640      	mov	r0, r8
 8005f18:	2100      	movs	r1, #0
 8005f1a:	f7ff ffc3 	bl	8005ea4 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 8005f1e:	f100 070c 	add.w	r7, r0, #12
 8005f22:	4606      	mov	r6, r0
 8005f24:	4621      	mov	r1, r4
 8005f26:	4638      	mov	r0, r7
 8005f28:	462a      	mov	r2, r5
 8005f2a:	f7ff ffa9 	bl	8005e80 <_ZNSs13_S_copy_charsEPcPKcS1_>
 8005f2e:	4641      	mov	r1, r8
 8005f30:	4630      	mov	r0, r6
 8005f32:	f7ff ffab 	bl	8005e8c <_ZNSs4_Rep26_M_set_length_and_sharableEj>
 8005f36:	4638      	mov	r0, r7
 8005f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f3c:	4802      	ldr	r0, [pc, #8]	; (8005f48 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x44>)
 8005f3e:	f000 f89c 	bl	800607a <_ZSt19__throw_logic_errorPKc>
 8005f42:	4f02      	ldr	r7, [pc, #8]	; (8005f4c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x48>)
 8005f44:	e7f7      	b.n	8005f36 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x32>
 8005f46:	bf00      	nop
 8005f48:	08006ec9 	.word	0x08006ec9
 8005f4c:	20000158 	.word	0x20000158

08005f50 <_ZNSsC1EPKcjRKSaIcE>:
 8005f50:	b510      	push	{r4, lr}
 8005f52:	4604      	mov	r4, r0
 8005f54:	4608      	mov	r0, r1
 8005f56:	4611      	mov	r1, r2
 8005f58:	4401      	add	r1, r0
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f04f 0300 	mov.w	r3, #0
 8005f60:	f7ff ffd0 	bl	8005f04 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 8005f64:	6020      	str	r0, [r4, #0]
 8005f66:	4620      	mov	r0, r4
 8005f68:	bd10      	pop	{r4, pc}
	...

08005f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8005f6c:	4b18      	ldr	r3, [pc, #96]	; (8005fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	07d1      	lsls	r1, r2, #31
 8005f72:	bf5c      	itt	pl
 8005f74:	2201      	movpl	r2, #1
 8005f76:	601a      	strpl	r2, [r3, #0]
 8005f78:	4b16      	ldr	r3, [pc, #88]	; (8005fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	07d2      	lsls	r2, r2, #31
 8005f7e:	bf5c      	itt	pl
 8005f80:	2201      	movpl	r2, #1
 8005f82:	601a      	strpl	r2, [r3, #0]
 8005f84:	4b14      	ldr	r3, [pc, #80]	; (8005fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	07d0      	lsls	r0, r2, #31
 8005f8a:	bf5c      	itt	pl
 8005f8c:	2201      	movpl	r2, #1
 8005f8e:	601a      	strpl	r2, [r3, #0]
 8005f90:	4b12      	ldr	r3, [pc, #72]	; (8005fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	07d1      	lsls	r1, r2, #31
 8005f96:	bf5c      	itt	pl
 8005f98:	2201      	movpl	r2, #1
 8005f9a:	601a      	strpl	r2, [r3, #0]
 8005f9c:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	07d2      	lsls	r2, r2, #31
 8005fa2:	bf5c      	itt	pl
 8005fa4:	2201      	movpl	r2, #1
 8005fa6:	601a      	strpl	r2, [r3, #0]
 8005fa8:	4b0e      	ldr	r3, [pc, #56]	; (8005fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	07d0      	lsls	r0, r2, #31
 8005fae:	bf5c      	itt	pl
 8005fb0:	2201      	movpl	r2, #1
 8005fb2:	601a      	strpl	r2, [r3, #0]
 8005fb4:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	07d1      	lsls	r1, r2, #31
 8005fba:	bf5c      	itt	pl
 8005fbc:	2201      	movpl	r2, #1
 8005fbe:	601a      	strpl	r2, [r3, #0]
 8005fc0:	4b0a      	ldr	r3, [pc, #40]	; (8005fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	07d2      	lsls	r2, r2, #31
 8005fc6:	bf5c      	itt	pl
 8005fc8:	2201      	movpl	r2, #1
 8005fca:	601a      	strpl	r2, [r3, #0]
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	20000178 	.word	0x20000178
 8005fd4:	20000174 	.word	0x20000174
 8005fd8:	20000170 	.word	0x20000170
 8005fdc:	2000016c 	.word	0x2000016c
 8005fe0:	20000168 	.word	0x20000168
 8005fe4:	20000164 	.word	0x20000164
 8005fe8:	20000160 	.word	0x20000160
 8005fec:	2000015c 	.word	0x2000015c

08005ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8005ff0:	4b18      	ldr	r3, [pc, #96]	; (8006054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	07d1      	lsls	r1, r2, #31
 8005ff6:	bf5c      	itt	pl
 8005ff8:	2201      	movpl	r2, #1
 8005ffa:	601a      	strpl	r2, [r3, #0]
 8005ffc:	4b16      	ldr	r3, [pc, #88]	; (8006058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	07d2      	lsls	r2, r2, #31
 8006002:	bf5c      	itt	pl
 8006004:	2201      	movpl	r2, #1
 8006006:	601a      	strpl	r2, [r3, #0]
 8006008:	4b14      	ldr	r3, [pc, #80]	; (800605c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	07d0      	lsls	r0, r2, #31
 800600e:	bf5c      	itt	pl
 8006010:	2201      	movpl	r2, #1
 8006012:	601a      	strpl	r2, [r3, #0]
 8006014:	4b12      	ldr	r3, [pc, #72]	; (8006060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	07d1      	lsls	r1, r2, #31
 800601a:	bf5c      	itt	pl
 800601c:	2201      	movpl	r2, #1
 800601e:	601a      	strpl	r2, [r3, #0]
 8006020:	4b10      	ldr	r3, [pc, #64]	; (8006064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	07d2      	lsls	r2, r2, #31
 8006026:	bf5c      	itt	pl
 8006028:	2201      	movpl	r2, #1
 800602a:	601a      	strpl	r2, [r3, #0]
 800602c:	4b0e      	ldr	r3, [pc, #56]	; (8006068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	07d0      	lsls	r0, r2, #31
 8006032:	bf5c      	itt	pl
 8006034:	2201      	movpl	r2, #1
 8006036:	601a      	strpl	r2, [r3, #0]
 8006038:	4b0c      	ldr	r3, [pc, #48]	; (800606c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	07d1      	lsls	r1, r2, #31
 800603e:	bf5c      	itt	pl
 8006040:	2201      	movpl	r2, #1
 8006042:	601a      	strpl	r2, [r3, #0]
 8006044:	4b0a      	ldr	r3, [pc, #40]	; (8006070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	07d2      	lsls	r2, r2, #31
 800604a:	bf5c      	itt	pl
 800604c:	2201      	movpl	r2, #1
 800604e:	601a      	strpl	r2, [r3, #0]
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	20000198 	.word	0x20000198
 8006058:	20000194 	.word	0x20000194
 800605c:	20000190 	.word	0x20000190
 8006060:	2000018c 	.word	0x2000018c
 8006064:	20000188 	.word	0x20000188
 8006068:	20000184 	.word	0x20000184
 800606c:	20000180 	.word	0x20000180
 8006070:	2000017c 	.word	0x2000017c

08006074 <_ZSt17__throw_bad_allocv>:
 8006074:	b508      	push	{r3, lr}
 8006076:	f000 fa94 	bl	80065a2 <abort>

0800607a <_ZSt19__throw_logic_errorPKc>:
 800607a:	b508      	push	{r3, lr}
 800607c:	f000 fa91 	bl	80065a2 <abort>

08006080 <_ZSt20__throw_length_errorPKc>:
 8006080:	b508      	push	{r3, lr}
 8006082:	f000 fa8e 	bl	80065a2 <abort>

08006086 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8006086:	b10a      	cbz	r2, 800608c <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8006088:	f000 badc 	b.w	8006644 <memcpy>
 800608c:	4770      	bx	lr
	...

08006090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8006090:	4b24      	ldr	r3, [pc, #144]	; (8006124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	07d0      	lsls	r0, r2, #31
 8006096:	bf5c      	itt	pl
 8006098:	2201      	movpl	r2, #1
 800609a:	601a      	strpl	r2, [r3, #0]
 800609c:	4b22      	ldr	r3, [pc, #136]	; (8006128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	07d1      	lsls	r1, r2, #31
 80060a2:	bf5c      	itt	pl
 80060a4:	2201      	movpl	r2, #1
 80060a6:	601a      	strpl	r2, [r3, #0]
 80060a8:	4b20      	ldr	r3, [pc, #128]	; (800612c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	07d2      	lsls	r2, r2, #31
 80060ae:	bf5c      	itt	pl
 80060b0:	2201      	movpl	r2, #1
 80060b2:	601a      	strpl	r2, [r3, #0]
 80060b4:	4b1e      	ldr	r3, [pc, #120]	; (8006130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	07d0      	lsls	r0, r2, #31
 80060ba:	bf5c      	itt	pl
 80060bc:	2201      	movpl	r2, #1
 80060be:	601a      	strpl	r2, [r3, #0]
 80060c0:	4b1c      	ldr	r3, [pc, #112]	; (8006134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	07d1      	lsls	r1, r2, #31
 80060c6:	bf5c      	itt	pl
 80060c8:	2201      	movpl	r2, #1
 80060ca:	601a      	strpl	r2, [r3, #0]
 80060cc:	4b1a      	ldr	r3, [pc, #104]	; (8006138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	07d2      	lsls	r2, r2, #31
 80060d2:	bf5c      	itt	pl
 80060d4:	2201      	movpl	r2, #1
 80060d6:	601a      	strpl	r2, [r3, #0]
 80060d8:	4b18      	ldr	r3, [pc, #96]	; (800613c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	07d0      	lsls	r0, r2, #31
 80060de:	bf5c      	itt	pl
 80060e0:	2201      	movpl	r2, #1
 80060e2:	601a      	strpl	r2, [r3, #0]
 80060e4:	4b16      	ldr	r3, [pc, #88]	; (8006140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	07d1      	lsls	r1, r2, #31
 80060ea:	bf5c      	itt	pl
 80060ec:	2201      	movpl	r2, #1
 80060ee:	601a      	strpl	r2, [r3, #0]
 80060f0:	4b14      	ldr	r3, [pc, #80]	; (8006144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	07d2      	lsls	r2, r2, #31
 80060f6:	bf5c      	itt	pl
 80060f8:	2201      	movpl	r2, #1
 80060fa:	601a      	strpl	r2, [r3, #0]
 80060fc:	4b12      	ldr	r3, [pc, #72]	; (8006148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	07d0      	lsls	r0, r2, #31
 8006102:	bf5c      	itt	pl
 8006104:	2201      	movpl	r2, #1
 8006106:	601a      	strpl	r2, [r3, #0]
 8006108:	4b10      	ldr	r3, [pc, #64]	; (800614c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	07d1      	lsls	r1, r2, #31
 800610e:	bf5c      	itt	pl
 8006110:	2201      	movpl	r2, #1
 8006112:	601a      	strpl	r2, [r3, #0]
 8006114:	4b0e      	ldr	r3, [pc, #56]	; (8006150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	07d2      	lsls	r2, r2, #31
 800611a:	bf5c      	itt	pl
 800611c:	2201      	movpl	r2, #1
 800611e:	601a      	strpl	r2, [r3, #0]
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	200001c8 	.word	0x200001c8
 8006128:	200001c4 	.word	0x200001c4
 800612c:	200001c0 	.word	0x200001c0
 8006130:	200001bc 	.word	0x200001bc
 8006134:	200001b8 	.word	0x200001b8
 8006138:	200001b4 	.word	0x200001b4
 800613c:	200001b0 	.word	0x200001b0
 8006140:	200001ac 	.word	0x200001ac
 8006144:	200001a8 	.word	0x200001a8
 8006148:	200001a4 	.word	0x200001a4
 800614c:	200001a0 	.word	0x200001a0
 8006150:	2000019c 	.word	0x2000019c

08006154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8006154:	b508      	push	{r3, lr}
 8006156:	680b      	ldr	r3, [r1, #0]
 8006158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800615c:	d302      	bcc.n	8006164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800615e:	480d      	ldr	r0, [pc, #52]	; (8006194 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8006160:	f7ff ff8e 	bl	8006080 <_ZSt20__throw_length_errorPKc>
 8006164:	4293      	cmp	r3, r2
 8006166:	d90b      	bls.n	8006180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8006168:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800616c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8006170:	d206      	bcs.n	8006180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8006172:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006176:	bf2a      	itet	cs
 8006178:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800617c:	6008      	strcc	r0, [r1, #0]
 800617e:	600b      	strcs	r3, [r1, #0]
 8006180:	6808      	ldr	r0, [r1, #0]
 8006182:	3001      	adds	r0, #1
 8006184:	d501      	bpl.n	800618a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8006186:	f7ff ff75 	bl	8006074 <_ZSt17__throw_bad_allocv>
 800618a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800618e:	f7ff bdbe 	b.w	8005d0e <_Znwj>
 8006192:	bf00      	nop
 8006194:	08006ef3 	.word	0x08006ef3

08006198 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8006198:	f850 3b08 	ldr.w	r3, [r0], #8
 800619c:	4283      	cmp	r3, r0
 800619e:	d002      	beq.n	80061a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 b8ef 	b.w	8006384 <_ZdlPv>
 80061a6:	4770      	bx	lr

080061a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80061a8:	2a01      	cmp	r2, #1
 80061aa:	b510      	push	{r4, lr}
 80061ac:	d102      	bne.n	80061b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80061ae:	780a      	ldrb	r2, [r1, #0]
 80061b0:	7002      	strb	r2, [r0, #0]
 80061b2:	bd10      	pop	{r4, pc}
 80061b4:	f7ff ff67 	bl	8006086 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80061b8:	e7fb      	b.n	80061b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080061ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80061ba:	b508      	push	{r3, lr}
 80061bc:	1a52      	subs	r2, r2, r1
 80061be:	f7ff fff3 	bl	80061a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80061c2:	bd08      	pop	{r3, pc}

080061c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80061c4:	b508      	push	{r3, lr}
 80061c6:	1a52      	subs	r2, r2, r1
 80061c8:	f7ff ffee 	bl	80061a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80061cc:	bd08      	pop	{r3, pc}

080061ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80061ce:	b510      	push	{r4, lr}
 80061d0:	4604      	mov	r4, r0
 80061d2:	f7ff ffe1 	bl	8006198 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80061d6:	4620      	mov	r0, r4
 80061d8:	bd10      	pop	{r4, pc}

080061da <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 80061da:	6840      	ldr	r0, [r0, #4]
 80061dc:	4770      	bx	lr

080061de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80061de:	6800      	ldr	r0, [r0, #0]
 80061e0:	4770      	bx	lr
	...

080061e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 80061e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061e6:	4604      	mov	r4, r0
 80061e8:	4616      	mov	r6, r2
 80061ea:	460d      	mov	r5, r1
 80061ec:	b919      	cbnz	r1, 80061f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80061ee:	b112      	cbz	r2, 80061f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80061f0:	480d      	ldr	r0, [pc, #52]	; (8006228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 80061f2:	f7ff ff42 	bl	800607a <_ZSt19__throw_logic_errorPKc>
 80061f6:	1b73      	subs	r3, r6, r5
 80061f8:	2b0f      	cmp	r3, #15
 80061fa:	9301      	str	r3, [sp, #4]
 80061fc:	d907      	bls.n	800620e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 80061fe:	2200      	movs	r2, #0
 8006200:	a901      	add	r1, sp, #4
 8006202:	4620      	mov	r0, r4
 8006204:	f7ff ffa6 	bl	8006154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006208:	9b01      	ldr	r3, [sp, #4]
 800620a:	6020      	str	r0, [r4, #0]
 800620c:	60a3      	str	r3, [r4, #8]
 800620e:	4632      	mov	r2, r6
 8006210:	4629      	mov	r1, r5
 8006212:	6820      	ldr	r0, [r4, #0]
 8006214:	f7ff ffd1 	bl	80061ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8006218:	9b01      	ldr	r3, [sp, #4]
 800621a:	6822      	ldr	r2, [r4, #0]
 800621c:	6063      	str	r3, [r4, #4]
 800621e:	2100      	movs	r1, #0
 8006220:	54d1      	strb	r1, [r2, r3]
 8006222:	b002      	add	sp, #8
 8006224:	bd70      	pop	{r4, r5, r6, pc}
 8006226:	bf00      	nop
 8006228:	08006f0b 	.word	0x08006f0b

0800622c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	f100 0308 	add.w	r3, r0, #8
 8006232:	6003      	str	r3, [r0, #0]
 8006234:	e9d1 5200 	ldrd	r5, r2, [r1]
 8006238:	4604      	mov	r4, r0
 800623a:	f04f 0300 	mov.w	r3, #0
 800623e:	442a      	add	r2, r5
 8006240:	4629      	mov	r1, r5
 8006242:	f7ff ffcf 	bl	80061e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8006246:	4620      	mov	r0, r4
 8006248:	bd38      	pop	{r3, r4, r5, pc}
	...

0800624c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800624c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800624e:	4604      	mov	r4, r0
 8006250:	4616      	mov	r6, r2
 8006252:	460d      	mov	r5, r1
 8006254:	b919      	cbnz	r1, 800625e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8006256:	b112      	cbz	r2, 800625e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8006258:	480d      	ldr	r0, [pc, #52]	; (8006290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800625a:	f7ff ff0e 	bl	800607a <_ZSt19__throw_logic_errorPKc>
 800625e:	1b73      	subs	r3, r6, r5
 8006260:	2b0f      	cmp	r3, #15
 8006262:	9301      	str	r3, [sp, #4]
 8006264:	d907      	bls.n	8006276 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8006266:	2200      	movs	r2, #0
 8006268:	a901      	add	r1, sp, #4
 800626a:	4620      	mov	r0, r4
 800626c:	f7ff ff72 	bl	8006154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006270:	9b01      	ldr	r3, [sp, #4]
 8006272:	6020      	str	r0, [r4, #0]
 8006274:	60a3      	str	r3, [r4, #8]
 8006276:	4632      	mov	r2, r6
 8006278:	4629      	mov	r1, r5
 800627a:	6820      	ldr	r0, [r4, #0]
 800627c:	f7ff ffa2 	bl	80061c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8006280:	9b01      	ldr	r3, [sp, #4]
 8006282:	6822      	ldr	r2, [r4, #0]
 8006284:	6063      	str	r3, [r4, #4]
 8006286:	2100      	movs	r1, #0
 8006288:	54d1      	strb	r1, [r2, r3]
 800628a:	b002      	add	sp, #8
 800628c:	bd70      	pop	{r4, r5, r6, pc}
 800628e:	bf00      	nop
 8006290:	08006f0b 	.word	0x08006f0b

08006294 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	f100 0308 	add.w	r3, r0, #8
 800629a:	4604      	mov	r4, r0
 800629c:	6003      	str	r3, [r0, #0]
 800629e:	460d      	mov	r5, r1
 80062a0:	b159      	cbz	r1, 80062ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80062a2:	4608      	mov	r0, r1
 80062a4:	f7f9 ff9a 	bl	80001dc <strlen>
 80062a8:	182a      	adds	r2, r5, r0
 80062aa:	4620      	mov	r0, r4
 80062ac:	f04f 0300 	mov.w	r3, #0
 80062b0:	4629      	mov	r1, r5
 80062b2:	f7ff ffcb 	bl	800624c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80062b6:	4620      	mov	r0, r4
 80062b8:	bd38      	pop	{r3, r4, r5, pc}
 80062ba:	f04f 32ff 	mov.w	r2, #4294967295
 80062be:	e7f4      	b.n	80062aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080062c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80062c0:	4b24      	ldr	r3, [pc, #144]	; (8006354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	07d0      	lsls	r0, r2, #31
 80062c6:	bf5c      	itt	pl
 80062c8:	2201      	movpl	r2, #1
 80062ca:	601a      	strpl	r2, [r3, #0]
 80062cc:	4b22      	ldr	r3, [pc, #136]	; (8006358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	07d1      	lsls	r1, r2, #31
 80062d2:	bf5c      	itt	pl
 80062d4:	2201      	movpl	r2, #1
 80062d6:	601a      	strpl	r2, [r3, #0]
 80062d8:	4b20      	ldr	r3, [pc, #128]	; (800635c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	07d2      	lsls	r2, r2, #31
 80062de:	bf5c      	itt	pl
 80062e0:	2201      	movpl	r2, #1
 80062e2:	601a      	strpl	r2, [r3, #0]
 80062e4:	4b1e      	ldr	r3, [pc, #120]	; (8006360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	07d0      	lsls	r0, r2, #31
 80062ea:	bf5c      	itt	pl
 80062ec:	2201      	movpl	r2, #1
 80062ee:	601a      	strpl	r2, [r3, #0]
 80062f0:	4b1c      	ldr	r3, [pc, #112]	; (8006364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	07d1      	lsls	r1, r2, #31
 80062f6:	bf5c      	itt	pl
 80062f8:	2201      	movpl	r2, #1
 80062fa:	601a      	strpl	r2, [r3, #0]
 80062fc:	4b1a      	ldr	r3, [pc, #104]	; (8006368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	07d2      	lsls	r2, r2, #31
 8006302:	bf5c      	itt	pl
 8006304:	2201      	movpl	r2, #1
 8006306:	601a      	strpl	r2, [r3, #0]
 8006308:	4b18      	ldr	r3, [pc, #96]	; (800636c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	07d0      	lsls	r0, r2, #31
 800630e:	bf5c      	itt	pl
 8006310:	2201      	movpl	r2, #1
 8006312:	601a      	strpl	r2, [r3, #0]
 8006314:	4b16      	ldr	r3, [pc, #88]	; (8006370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	07d1      	lsls	r1, r2, #31
 800631a:	bf5c      	itt	pl
 800631c:	2201      	movpl	r2, #1
 800631e:	601a      	strpl	r2, [r3, #0]
 8006320:	4b14      	ldr	r3, [pc, #80]	; (8006374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	07d2      	lsls	r2, r2, #31
 8006326:	bf5c      	itt	pl
 8006328:	2201      	movpl	r2, #1
 800632a:	601a      	strpl	r2, [r3, #0]
 800632c:	4b12      	ldr	r3, [pc, #72]	; (8006378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	07d0      	lsls	r0, r2, #31
 8006332:	bf5c      	itt	pl
 8006334:	2201      	movpl	r2, #1
 8006336:	601a      	strpl	r2, [r3, #0]
 8006338:	4b10      	ldr	r3, [pc, #64]	; (800637c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	07d1      	lsls	r1, r2, #31
 800633e:	bf5c      	itt	pl
 8006340:	2201      	movpl	r2, #1
 8006342:	601a      	strpl	r2, [r3, #0]
 8006344:	4b0e      	ldr	r3, [pc, #56]	; (8006380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	07d2      	lsls	r2, r2, #31
 800634a:	bf5c      	itt	pl
 800634c:	2201      	movpl	r2, #1
 800634e:	601a      	strpl	r2, [r3, #0]
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	200001f8 	.word	0x200001f8
 8006358:	200001f4 	.word	0x200001f4
 800635c:	200001f0 	.word	0x200001f0
 8006360:	200001ec 	.word	0x200001ec
 8006364:	200001e8 	.word	0x200001e8
 8006368:	200001e4 	.word	0x200001e4
 800636c:	200001e0 	.word	0x200001e0
 8006370:	200001dc 	.word	0x200001dc
 8006374:	200001d8 	.word	0x200001d8
 8006378:	200001d4 	.word	0x200001d4
 800637c:	200001d0 	.word	0x200001d0
 8006380:	200001cc 	.word	0x200001cc

08006384 <_ZdlPv>:
 8006384:	f000 b956 	b.w	8006634 <free>

08006388 <_ZdaPv>:
 8006388:	f7ff bffc 	b.w	8006384 <_ZdlPv>

0800638c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800638c:	7803      	ldrb	r3, [r0, #0]
 800638e:	2b47      	cmp	r3, #71	; 0x47
 8006390:	d117      	bne.n	80063c2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006392:	7843      	ldrb	r3, [r0, #1]
 8006394:	2b4e      	cmp	r3, #78	; 0x4e
 8006396:	d114      	bne.n	80063c2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006398:	7883      	ldrb	r3, [r0, #2]
 800639a:	2b55      	cmp	r3, #85	; 0x55
 800639c:	d111      	bne.n	80063c2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800639e:	78c3      	ldrb	r3, [r0, #3]
 80063a0:	2b43      	cmp	r3, #67	; 0x43
 80063a2:	d10e      	bne.n	80063c2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80063a4:	7903      	ldrb	r3, [r0, #4]
 80063a6:	2b43      	cmp	r3, #67	; 0x43
 80063a8:	d10b      	bne.n	80063c2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80063aa:	7943      	ldrb	r3, [r0, #5]
 80063ac:	2b2b      	cmp	r3, #43	; 0x2b
 80063ae:	d108      	bne.n	80063c2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80063b0:	7983      	ldrb	r3, [r0, #6]
 80063b2:	2b2b      	cmp	r3, #43	; 0x2b
 80063b4:	d105      	bne.n	80063c2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80063b6:	79c0      	ldrb	r0, [r0, #7]
 80063b8:	2801      	cmp	r0, #1
 80063ba:	bf8c      	ite	hi
 80063bc:	2000      	movhi	r0, #0
 80063be:	2001      	movls	r0, #1
 80063c0:	4770      	bx	lr
 80063c2:	2000      	movs	r0, #0
 80063c4:	4770      	bx	lr

080063c6 <__cxa_call_terminate>:
 80063c6:	b510      	push	{r4, lr}
 80063c8:	4604      	mov	r4, r0
 80063ca:	b148      	cbz	r0, 80063e0 <__cxa_call_terminate+0x1a>
 80063cc:	f7ff f9cc 	bl	8005768 <__cxa_begin_catch>
 80063d0:	4620      	mov	r0, r4
 80063d2:	f7ff ffdb 	bl	800638c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80063d6:	b118      	cbz	r0, 80063e0 <__cxa_call_terminate+0x1a>
 80063d8:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80063dc:	f7ff fc74 	bl	8005cc8 <_ZN10__cxxabiv111__terminateEPFvvE>
 80063e0:	f7ff fc7e 	bl	8005ce0 <_ZSt9terminatev>

080063e4 <__cxa_call_unexpected>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4602      	mov	r2, r0
 80063e8:	f7ff ffd0 	bl	800638c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80063ec:	b140      	cbz	r0, 8006400 <__cxa_call_unexpected+0x1c>
 80063ee:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80063f2:	2500      	movs	r5, #0
 80063f4:	4610      	mov	r0, r2
 80063f6:	f7ff f9b7 	bl	8005768 <__cxa_begin_catch>
 80063fa:	b125      	cbz	r5, 8006406 <__cxa_call_unexpected+0x22>
 80063fc:	f7ff fc82 	bl	8005d04 <_ZSt10unexpectedv>
 8006400:	4604      	mov	r4, r0
 8006402:	2501      	movs	r5, #1
 8006404:	e7f6      	b.n	80063f4 <__cxa_call_unexpected+0x10>
 8006406:	4620      	mov	r0, r4
 8006408:	f7ff fc6f 	bl	8005cea <_ZN10__cxxabiv112__unexpectedEPFvvE>

0800640c <_ZSt15get_new_handlerv>:
 800640c:	4b02      	ldr	r3, [pc, #8]	; (8006418 <_ZSt15get_new_handlerv+0xc>)
 800640e:	6818      	ldr	r0, [r3, #0]
 8006410:	f3bf 8f5b 	dmb	ish
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	200001fc 	.word	0x200001fc

0800641c <_ZNK12_GLOBAL__N_122generic_error_category4nameEv>:
 800641c:	4800      	ldr	r0, [pc, #0]	; (8006420 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv+0x4>)
 800641e:	4770      	bx	lr
 8006420:	08006f35 	.word	0x08006f35

08006424 <_ZNK12_GLOBAL__N_121system_error_category4nameEv>:
 8006424:	4800      	ldr	r0, [pc, #0]	; (8006428 <_ZNK12_GLOBAL__N_121system_error_category4nameEv+0x4>)
 8006426:	4770      	bx	lr
 8006428:	0800734f 	.word	0x0800734f

0800642c <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi>:
 800642c:	2a74      	cmp	r2, #116	; 0x74
 800642e:	dc22      	bgt.n	8006476 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x4a>
 8006430:	2a57      	cmp	r2, #87	; 0x57
 8006432:	dc0b      	bgt.n	800644c <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x20>
 8006434:	2a4d      	cmp	r2, #77	; 0x4d
 8006436:	dc28      	bgt.n	800648a <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 8006438:	2a3b      	cmp	r2, #59	; 0x3b
 800643a:	dc0d      	bgt.n	8006458 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x2c>
 800643c:	2a24      	cmp	r2, #36	; 0x24
 800643e:	dc16      	bgt.n	800646e <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x42>
 8006440:	2a0f      	cmp	r2, #15
 8006442:	dc10      	bgt.n	8006466 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3a>
 8006444:	1e53      	subs	r3, r2, #1
 8006446:	2b0d      	cmp	r3, #13
 8006448:	d81f      	bhi.n	800648a <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 800644a:	e00c      	b.n	8006466 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3a>
 800644c:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8006450:	2101      	movs	r1, #1
 8006452:	4099      	lsls	r1, r3
 8006454:	4b0e      	ldr	r3, [pc, #56]	; (8006490 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x64>)
 8006456:	e015      	b.n	8006484 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x58>
 8006458:	f1a2 013c 	sub.w	r1, r2, #60	; 0x3c
 800645c:	2301      	movs	r3, #1
 800645e:	408b      	lsls	r3, r1
 8006460:	490c      	ldr	r1, [pc, #48]	; (8006494 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x68>)
 8006462:	420b      	tst	r3, r1
 8006464:	d011      	beq.n	800648a <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 8006466:	4b0c      	ldr	r3, [pc, #48]	; (8006498 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x6c>)
 8006468:	6002      	str	r2, [r0, #0]
 800646a:	6043      	str	r3, [r0, #4]
 800646c:	4770      	bx	lr
 800646e:	f1a2 032d 	sub.w	r3, r2, #45	; 0x2d
 8006472:	2b01      	cmp	r3, #1
 8006474:	e7e8      	b.n	8006448 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x1c>
 8006476:	f1a2 0376 	sub.w	r3, r2, #118	; 0x76
 800647a:	2b18      	cmp	r3, #24
 800647c:	d805      	bhi.n	800648a <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 800647e:	2101      	movs	r1, #1
 8006480:	4099      	lsls	r1, r3
 8006482:	4b06      	ldr	r3, [pc, #24]	; (800649c <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x70>)
 8006484:	400b      	ands	r3, r1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1ed      	bne.n	8006466 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3a>
 800648a:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x74>)
 800648c:	6002      	str	r2, [r0, #0]
 800648e:	e7ec      	b.n	800646a <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3e>
 8006490:	1fbf009d 	.word	0x1fbf009d
 8006494:	0002088f 	.word	0x0002088f
 8006498:	2000002c 	.word	0x2000002c
 800649c:	01f107bf 	.word	0x01f107bf
 80064a0:	20000028 	.word	0x20000028

080064a4 <_ZNKSt3_V214error_category23default_error_conditionEi>:
 80064a4:	e9c0 2100 	strd	r2, r1, [r0]
 80064a8:	4770      	bx	lr

080064aa <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition>:
 80064aa:	b513      	push	{r0, r1, r4, lr}
 80064ac:	6803      	ldr	r3, [r0, #0]
 80064ae:	4614      	mov	r4, r2
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	460a      	mov	r2, r1
 80064b4:	4601      	mov	r1, r0
 80064b6:	4668      	mov	r0, sp
 80064b8:	4798      	blx	r3
 80064ba:	6863      	ldr	r3, [r4, #4]
 80064bc:	9a01      	ldr	r2, [sp, #4]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d106      	bne.n	80064d0 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x26>
 80064c2:	9800      	ldr	r0, [sp, #0]
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	1ac3      	subs	r3, r0, r3
 80064c8:	4258      	negs	r0, r3
 80064ca:	4158      	adcs	r0, r3
 80064cc:	b002      	add	sp, #8
 80064ce:	bd10      	pop	{r4, pc}
 80064d0:	2000      	movs	r0, #0
 80064d2:	e7fb      	b.n	80064cc <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x22>

080064d4 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei>:
 80064d4:	684b      	ldr	r3, [r1, #4]
 80064d6:	4283      	cmp	r3, r0
 80064d8:	d104      	bne.n	80064e4 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei+0x10>
 80064da:	6808      	ldr	r0, [r1, #0]
 80064dc:	1a83      	subs	r3, r0, r2
 80064de:	4258      	negs	r0, r3
 80064e0:	4158      	adcs	r0, r3
 80064e2:	4770      	bx	lr
 80064e4:	2000      	movs	r0, #0
 80064e6:	4770      	bx	lr

080064e8 <_ZN12_GLOBAL__N_121system_error_categoryD1Ev>:
 80064e8:	4770      	bx	lr

080064ea <_ZN12_GLOBAL__N_122generic_error_categoryD1Ev>:
 80064ea:	4770      	bx	lr

080064ec <_ZN12_GLOBAL__N_121system_error_categoryD0Ev>:
 80064ec:	b510      	push	{r4, lr}
 80064ee:	4604      	mov	r4, r0
 80064f0:	f7ff ff48 	bl	8006384 <_ZdlPv>
 80064f4:	4620      	mov	r0, r4
 80064f6:	bd10      	pop	{r4, pc}

080064f8 <_ZN12_GLOBAL__N_122generic_error_categoryD0Ev>:
 80064f8:	b510      	push	{r4, lr}
 80064fa:	4604      	mov	r4, r0
 80064fc:	f7ff ff42 	bl	8006384 <_ZdlPv>
 8006500:	4620      	mov	r0, r4
 8006502:	bd10      	pop	{r4, pc}

08006504 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei>:
 8006504:	b510      	push	{r4, lr}
 8006506:	680b      	ldr	r3, [r1, #0]
 8006508:	b086      	sub	sp, #24
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	4604      	mov	r4, r0
 800650e:	4668      	mov	r0, sp
 8006510:	4798      	blx	r3
 8006512:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006516:	4620      	mov	r0, r4
 8006518:	f000 f83b 	bl	8006592 <_ZNSt12__cow_stringC1EPKcj>
 800651c:	4668      	mov	r0, sp
 800651e:	f7ff fe3b 	bl	8006198 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006522:	4620      	mov	r0, r4
 8006524:	b006      	add	sp, #24
 8006526:	bd10      	pop	{r4, pc}

08006528 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei>:
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	4604      	mov	r4, r0
 800652c:	4610      	mov	r0, r2
 800652e:	f000 fb8b 	bl	8006c48 <strerror>
 8006532:	f104 0308 	add.w	r3, r4, #8
 8006536:	6023      	str	r3, [r4, #0]
 8006538:	4605      	mov	r5, r0
 800653a:	b150      	cbz	r0, 8006552 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x2a>
 800653c:	f7f9 fe4e 	bl	80001dc <strlen>
 8006540:	182a      	adds	r2, r5, r0
 8006542:	4620      	mov	r0, r4
 8006544:	f04f 0300 	mov.w	r3, #0
 8006548:	4629      	mov	r1, r5
 800654a:	f7ff fe7f 	bl	800624c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800654e:	4620      	mov	r0, r4
 8006550:	bd38      	pop	{r3, r4, r5, pc}
 8006552:	f04f 32ff 	mov.w	r2, #4294967295
 8006556:	e7f4      	b.n	8006542 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x1a>

08006558 <_GLOBAL__sub_I__ZSt20__throw_system_errori>:
 8006558:	b508      	push	{r3, lr}
 800655a:	4a06      	ldr	r2, [pc, #24]	; (8006574 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x1c>)
 800655c:	4906      	ldr	r1, [pc, #24]	; (8006578 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x20>)
 800655e:	4807      	ldr	r0, [pc, #28]	; (800657c <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x24>)
 8006560:	f000 f812 	bl	8006588 <__aeabi_atexit>
 8006564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006568:	4a02      	ldr	r2, [pc, #8]	; (8006574 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x1c>)
 800656a:	4905      	ldr	r1, [pc, #20]	; (8006580 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x28>)
 800656c:	4805      	ldr	r0, [pc, #20]	; (8006584 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x2c>)
 800656e:	f000 b80b 	b.w	8006588 <__aeabi_atexit>
 8006572:	bf00      	nop
 8006574:	20000000 	.word	0x20000000
 8006578:	080064eb 	.word	0x080064eb
 800657c:	2000002c 	.word	0x2000002c
 8006580:	080064e9 	.word	0x080064e9
 8006584:	20000028 	.word	0x20000028

08006588 <__aeabi_atexit>:
 8006588:	460b      	mov	r3, r1
 800658a:	4601      	mov	r1, r0
 800658c:	4618      	mov	r0, r3
 800658e:	f000 b80f 	b.w	80065b0 <__cxa_atexit>

08006592 <_ZNSt12__cow_stringC1EPKcj>:
 8006592:	b513      	push	{r0, r1, r4, lr}
 8006594:	ab01      	add	r3, sp, #4
 8006596:	4604      	mov	r4, r0
 8006598:	f7ff fcda 	bl	8005f50 <_ZNSsC1EPKcjRKSaIcE>
 800659c:	4620      	mov	r0, r4
 800659e:	b002      	add	sp, #8
 80065a0:	bd10      	pop	{r4, pc}

080065a2 <abort>:
 80065a2:	b508      	push	{r3, lr}
 80065a4:	2006      	movs	r0, #6
 80065a6:	f000 f945 	bl	8006834 <raise>
 80065aa:	2001      	movs	r0, #1
 80065ac:	f7fb fd3c 	bl	8002028 <_exit>

080065b0 <__cxa_atexit>:
 80065b0:	b510      	push	{r4, lr}
 80065b2:	4c05      	ldr	r4, [pc, #20]	; (80065c8 <__cxa_atexit+0x18>)
 80065b4:	4613      	mov	r3, r2
 80065b6:	b12c      	cbz	r4, 80065c4 <__cxa_atexit+0x14>
 80065b8:	460a      	mov	r2, r1
 80065ba:	4601      	mov	r1, r0
 80065bc:	2002      	movs	r0, #2
 80065be:	f3af 8000 	nop.w
 80065c2:	bd10      	pop	{r4, pc}
 80065c4:	4620      	mov	r0, r4
 80065c6:	e7fc      	b.n	80065c2 <__cxa_atexit+0x12>
 80065c8:	00000000 	.word	0x00000000

080065cc <__errno>:
 80065cc:	4b01      	ldr	r3, [pc, #4]	; (80065d4 <__errno+0x8>)
 80065ce:	6818      	ldr	r0, [r3, #0]
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	20000030 	.word	0x20000030

080065d8 <__libc_init_array>:
 80065d8:	b570      	push	{r4, r5, r6, lr}
 80065da:	4d0d      	ldr	r5, [pc, #52]	; (8006610 <__libc_init_array+0x38>)
 80065dc:	4c0d      	ldr	r4, [pc, #52]	; (8006614 <__libc_init_array+0x3c>)
 80065de:	1b64      	subs	r4, r4, r5
 80065e0:	10a4      	asrs	r4, r4, #2
 80065e2:	2600      	movs	r6, #0
 80065e4:	42a6      	cmp	r6, r4
 80065e6:	d109      	bne.n	80065fc <__libc_init_array+0x24>
 80065e8:	4d0b      	ldr	r5, [pc, #44]	; (8006618 <__libc_init_array+0x40>)
 80065ea:	4c0c      	ldr	r4, [pc, #48]	; (800661c <__libc_init_array+0x44>)
 80065ec:	f000 fb4a 	bl	8006c84 <_init>
 80065f0:	1b64      	subs	r4, r4, r5
 80065f2:	10a4      	asrs	r4, r4, #2
 80065f4:	2600      	movs	r6, #0
 80065f6:	42a6      	cmp	r6, r4
 80065f8:	d105      	bne.n	8006606 <__libc_init_array+0x2e>
 80065fa:	bd70      	pop	{r4, r5, r6, pc}
 80065fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006600:	4798      	blx	r3
 8006602:	3601      	adds	r6, #1
 8006604:	e7ee      	b.n	80065e4 <__libc_init_array+0xc>
 8006606:	f855 3b04 	ldr.w	r3, [r5], #4
 800660a:	4798      	blx	r3
 800660c:	3601      	adds	r6, #1
 800660e:	e7f2      	b.n	80065f6 <__libc_init_array+0x1e>
 8006610:	0800790c 	.word	0x0800790c
 8006614:	0800790c 	.word	0x0800790c
 8006618:	0800790c 	.word	0x0800790c
 800661c:	0800792c 	.word	0x0800792c

08006620 <__retarget_lock_acquire_recursive>:
 8006620:	4770      	bx	lr

08006622 <__retarget_lock_release_recursive>:
 8006622:	4770      	bx	lr

08006624 <malloc>:
 8006624:	4b02      	ldr	r3, [pc, #8]	; (8006630 <malloc+0xc>)
 8006626:	4601      	mov	r1, r0
 8006628:	6818      	ldr	r0, [r3, #0]
 800662a:	f000 b871 	b.w	8006710 <_malloc_r>
 800662e:	bf00      	nop
 8006630:	20000030 	.word	0x20000030

08006634 <free>:
 8006634:	4b02      	ldr	r3, [pc, #8]	; (8006640 <free+0xc>)
 8006636:	4601      	mov	r1, r0
 8006638:	6818      	ldr	r0, [r3, #0]
 800663a:	f000 b819 	b.w	8006670 <_free_r>
 800663e:	bf00      	nop
 8006640:	20000030 	.word	0x20000030

08006644 <memcpy>:
 8006644:	440a      	add	r2, r1
 8006646:	4291      	cmp	r1, r2
 8006648:	f100 33ff 	add.w	r3, r0, #4294967295
 800664c:	d100      	bne.n	8006650 <memcpy+0xc>
 800664e:	4770      	bx	lr
 8006650:	b510      	push	{r4, lr}
 8006652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800665a:	4291      	cmp	r1, r2
 800665c:	d1f9      	bne.n	8006652 <memcpy+0xe>
 800665e:	bd10      	pop	{r4, pc}

08006660 <memset>:
 8006660:	4402      	add	r2, r0
 8006662:	4603      	mov	r3, r0
 8006664:	4293      	cmp	r3, r2
 8006666:	d100      	bne.n	800666a <memset+0xa>
 8006668:	4770      	bx	lr
 800666a:	f803 1b01 	strb.w	r1, [r3], #1
 800666e:	e7f9      	b.n	8006664 <memset+0x4>

08006670 <_free_r>:
 8006670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006672:	2900      	cmp	r1, #0
 8006674:	d048      	beq.n	8006708 <_free_r+0x98>
 8006676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800667a:	9001      	str	r0, [sp, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	f1a1 0404 	sub.w	r4, r1, #4
 8006682:	bfb8      	it	lt
 8006684:	18e4      	addlt	r4, r4, r3
 8006686:	f000 faeb 	bl	8006c60 <__malloc_lock>
 800668a:	4a20      	ldr	r2, [pc, #128]	; (800670c <_free_r+0x9c>)
 800668c:	9801      	ldr	r0, [sp, #4]
 800668e:	6813      	ldr	r3, [r2, #0]
 8006690:	4615      	mov	r5, r2
 8006692:	b933      	cbnz	r3, 80066a2 <_free_r+0x32>
 8006694:	6063      	str	r3, [r4, #4]
 8006696:	6014      	str	r4, [r2, #0]
 8006698:	b003      	add	sp, #12
 800669a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800669e:	f000 bae5 	b.w	8006c6c <__malloc_unlock>
 80066a2:	42a3      	cmp	r3, r4
 80066a4:	d90b      	bls.n	80066be <_free_r+0x4e>
 80066a6:	6821      	ldr	r1, [r4, #0]
 80066a8:	1862      	adds	r2, r4, r1
 80066aa:	4293      	cmp	r3, r2
 80066ac:	bf04      	itt	eq
 80066ae:	681a      	ldreq	r2, [r3, #0]
 80066b0:	685b      	ldreq	r3, [r3, #4]
 80066b2:	6063      	str	r3, [r4, #4]
 80066b4:	bf04      	itt	eq
 80066b6:	1852      	addeq	r2, r2, r1
 80066b8:	6022      	streq	r2, [r4, #0]
 80066ba:	602c      	str	r4, [r5, #0]
 80066bc:	e7ec      	b.n	8006698 <_free_r+0x28>
 80066be:	461a      	mov	r2, r3
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	b10b      	cbz	r3, 80066c8 <_free_r+0x58>
 80066c4:	42a3      	cmp	r3, r4
 80066c6:	d9fa      	bls.n	80066be <_free_r+0x4e>
 80066c8:	6811      	ldr	r1, [r2, #0]
 80066ca:	1855      	adds	r5, r2, r1
 80066cc:	42a5      	cmp	r5, r4
 80066ce:	d10b      	bne.n	80066e8 <_free_r+0x78>
 80066d0:	6824      	ldr	r4, [r4, #0]
 80066d2:	4421      	add	r1, r4
 80066d4:	1854      	adds	r4, r2, r1
 80066d6:	42a3      	cmp	r3, r4
 80066d8:	6011      	str	r1, [r2, #0]
 80066da:	d1dd      	bne.n	8006698 <_free_r+0x28>
 80066dc:	681c      	ldr	r4, [r3, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	6053      	str	r3, [r2, #4]
 80066e2:	4421      	add	r1, r4
 80066e4:	6011      	str	r1, [r2, #0]
 80066e6:	e7d7      	b.n	8006698 <_free_r+0x28>
 80066e8:	d902      	bls.n	80066f0 <_free_r+0x80>
 80066ea:	230c      	movs	r3, #12
 80066ec:	6003      	str	r3, [r0, #0]
 80066ee:	e7d3      	b.n	8006698 <_free_r+0x28>
 80066f0:	6825      	ldr	r5, [r4, #0]
 80066f2:	1961      	adds	r1, r4, r5
 80066f4:	428b      	cmp	r3, r1
 80066f6:	bf04      	itt	eq
 80066f8:	6819      	ldreq	r1, [r3, #0]
 80066fa:	685b      	ldreq	r3, [r3, #4]
 80066fc:	6063      	str	r3, [r4, #4]
 80066fe:	bf04      	itt	eq
 8006700:	1949      	addeq	r1, r1, r5
 8006702:	6021      	streq	r1, [r4, #0]
 8006704:	6054      	str	r4, [r2, #4]
 8006706:	e7c7      	b.n	8006698 <_free_r+0x28>
 8006708:	b003      	add	sp, #12
 800670a:	bd30      	pop	{r4, r5, pc}
 800670c:	20000200 	.word	0x20000200

08006710 <_malloc_r>:
 8006710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006712:	1ccd      	adds	r5, r1, #3
 8006714:	f025 0503 	bic.w	r5, r5, #3
 8006718:	3508      	adds	r5, #8
 800671a:	2d0c      	cmp	r5, #12
 800671c:	bf38      	it	cc
 800671e:	250c      	movcc	r5, #12
 8006720:	2d00      	cmp	r5, #0
 8006722:	4606      	mov	r6, r0
 8006724:	db01      	blt.n	800672a <_malloc_r+0x1a>
 8006726:	42a9      	cmp	r1, r5
 8006728:	d903      	bls.n	8006732 <_malloc_r+0x22>
 800672a:	230c      	movs	r3, #12
 800672c:	6033      	str	r3, [r6, #0]
 800672e:	2000      	movs	r0, #0
 8006730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006732:	f000 fa95 	bl	8006c60 <__malloc_lock>
 8006736:	4921      	ldr	r1, [pc, #132]	; (80067bc <_malloc_r+0xac>)
 8006738:	680a      	ldr	r2, [r1, #0]
 800673a:	4614      	mov	r4, r2
 800673c:	b99c      	cbnz	r4, 8006766 <_malloc_r+0x56>
 800673e:	4f20      	ldr	r7, [pc, #128]	; (80067c0 <_malloc_r+0xb0>)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	b923      	cbnz	r3, 800674e <_malloc_r+0x3e>
 8006744:	4621      	mov	r1, r4
 8006746:	4630      	mov	r0, r6
 8006748:	f000 f83c 	bl	80067c4 <_sbrk_r>
 800674c:	6038      	str	r0, [r7, #0]
 800674e:	4629      	mov	r1, r5
 8006750:	4630      	mov	r0, r6
 8006752:	f000 f837 	bl	80067c4 <_sbrk_r>
 8006756:	1c43      	adds	r3, r0, #1
 8006758:	d123      	bne.n	80067a2 <_malloc_r+0x92>
 800675a:	230c      	movs	r3, #12
 800675c:	6033      	str	r3, [r6, #0]
 800675e:	4630      	mov	r0, r6
 8006760:	f000 fa84 	bl	8006c6c <__malloc_unlock>
 8006764:	e7e3      	b.n	800672e <_malloc_r+0x1e>
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	1b5b      	subs	r3, r3, r5
 800676a:	d417      	bmi.n	800679c <_malloc_r+0x8c>
 800676c:	2b0b      	cmp	r3, #11
 800676e:	d903      	bls.n	8006778 <_malloc_r+0x68>
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	441c      	add	r4, r3
 8006774:	6025      	str	r5, [r4, #0]
 8006776:	e004      	b.n	8006782 <_malloc_r+0x72>
 8006778:	6863      	ldr	r3, [r4, #4]
 800677a:	42a2      	cmp	r2, r4
 800677c:	bf0c      	ite	eq
 800677e:	600b      	streq	r3, [r1, #0]
 8006780:	6053      	strne	r3, [r2, #4]
 8006782:	4630      	mov	r0, r6
 8006784:	f000 fa72 	bl	8006c6c <__malloc_unlock>
 8006788:	f104 000b 	add.w	r0, r4, #11
 800678c:	1d23      	adds	r3, r4, #4
 800678e:	f020 0007 	bic.w	r0, r0, #7
 8006792:	1ac2      	subs	r2, r0, r3
 8006794:	d0cc      	beq.n	8006730 <_malloc_r+0x20>
 8006796:	1a1b      	subs	r3, r3, r0
 8006798:	50a3      	str	r3, [r4, r2]
 800679a:	e7c9      	b.n	8006730 <_malloc_r+0x20>
 800679c:	4622      	mov	r2, r4
 800679e:	6864      	ldr	r4, [r4, #4]
 80067a0:	e7cc      	b.n	800673c <_malloc_r+0x2c>
 80067a2:	1cc4      	adds	r4, r0, #3
 80067a4:	f024 0403 	bic.w	r4, r4, #3
 80067a8:	42a0      	cmp	r0, r4
 80067aa:	d0e3      	beq.n	8006774 <_malloc_r+0x64>
 80067ac:	1a21      	subs	r1, r4, r0
 80067ae:	4630      	mov	r0, r6
 80067b0:	f000 f808 	bl	80067c4 <_sbrk_r>
 80067b4:	3001      	adds	r0, #1
 80067b6:	d1dd      	bne.n	8006774 <_malloc_r+0x64>
 80067b8:	e7cf      	b.n	800675a <_malloc_r+0x4a>
 80067ba:	bf00      	nop
 80067bc:	20000200 	.word	0x20000200
 80067c0:	20000204 	.word	0x20000204

080067c4 <_sbrk_r>:
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	4d06      	ldr	r5, [pc, #24]	; (80067e0 <_sbrk_r+0x1c>)
 80067c8:	2300      	movs	r3, #0
 80067ca:	4604      	mov	r4, r0
 80067cc:	4608      	mov	r0, r1
 80067ce:	602b      	str	r3, [r5, #0]
 80067d0:	f7fb fc34 	bl	800203c <_sbrk>
 80067d4:	1c43      	adds	r3, r0, #1
 80067d6:	d102      	bne.n	80067de <_sbrk_r+0x1a>
 80067d8:	682b      	ldr	r3, [r5, #0]
 80067da:	b103      	cbz	r3, 80067de <_sbrk_r+0x1a>
 80067dc:	6023      	str	r3, [r4, #0]
 80067de:	bd38      	pop	{r3, r4, r5, pc}
 80067e0:	20000398 	.word	0x20000398

080067e4 <_raise_r>:
 80067e4:	291f      	cmp	r1, #31
 80067e6:	b538      	push	{r3, r4, r5, lr}
 80067e8:	4604      	mov	r4, r0
 80067ea:	460d      	mov	r5, r1
 80067ec:	d904      	bls.n	80067f8 <_raise_r+0x14>
 80067ee:	2316      	movs	r3, #22
 80067f0:	6003      	str	r3, [r0, #0]
 80067f2:	f04f 30ff 	mov.w	r0, #4294967295
 80067f6:	bd38      	pop	{r3, r4, r5, pc}
 80067f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80067fa:	b112      	cbz	r2, 8006802 <_raise_r+0x1e>
 80067fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006800:	b94b      	cbnz	r3, 8006816 <_raise_r+0x32>
 8006802:	4620      	mov	r0, r4
 8006804:	f000 f830 	bl	8006868 <_getpid_r>
 8006808:	462a      	mov	r2, r5
 800680a:	4601      	mov	r1, r0
 800680c:	4620      	mov	r0, r4
 800680e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006812:	f000 b817 	b.w	8006844 <_kill_r>
 8006816:	2b01      	cmp	r3, #1
 8006818:	d00a      	beq.n	8006830 <_raise_r+0x4c>
 800681a:	1c59      	adds	r1, r3, #1
 800681c:	d103      	bne.n	8006826 <_raise_r+0x42>
 800681e:	2316      	movs	r3, #22
 8006820:	6003      	str	r3, [r0, #0]
 8006822:	2001      	movs	r0, #1
 8006824:	e7e7      	b.n	80067f6 <_raise_r+0x12>
 8006826:	2400      	movs	r4, #0
 8006828:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800682c:	4628      	mov	r0, r5
 800682e:	4798      	blx	r3
 8006830:	2000      	movs	r0, #0
 8006832:	e7e0      	b.n	80067f6 <_raise_r+0x12>

08006834 <raise>:
 8006834:	4b02      	ldr	r3, [pc, #8]	; (8006840 <raise+0xc>)
 8006836:	4601      	mov	r1, r0
 8006838:	6818      	ldr	r0, [r3, #0]
 800683a:	f7ff bfd3 	b.w	80067e4 <_raise_r>
 800683e:	bf00      	nop
 8006840:	20000030 	.word	0x20000030

08006844 <_kill_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	4d07      	ldr	r5, [pc, #28]	; (8006864 <_kill_r+0x20>)
 8006848:	2300      	movs	r3, #0
 800684a:	4604      	mov	r4, r0
 800684c:	4608      	mov	r0, r1
 800684e:	4611      	mov	r1, r2
 8006850:	602b      	str	r3, [r5, #0]
 8006852:	f7fb fbd9 	bl	8002008 <_kill>
 8006856:	1c43      	adds	r3, r0, #1
 8006858:	d102      	bne.n	8006860 <_kill_r+0x1c>
 800685a:	682b      	ldr	r3, [r5, #0]
 800685c:	b103      	cbz	r3, 8006860 <_kill_r+0x1c>
 800685e:	6023      	str	r3, [r4, #0]
 8006860:	bd38      	pop	{r3, r4, r5, pc}
 8006862:	bf00      	nop
 8006864:	20000398 	.word	0x20000398

08006868 <_getpid_r>:
 8006868:	f7fb bbc6 	b.w	8001ff8 <_getpid>

0800686c <strcpy>:
 800686c:	4603      	mov	r3, r0
 800686e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006872:	f803 2b01 	strb.w	r2, [r3], #1
 8006876:	2a00      	cmp	r2, #0
 8006878:	d1f9      	bne.n	800686e <strcpy+0x2>
 800687a:	4770      	bx	lr

0800687c <_strerror_r>:
 800687c:	b510      	push	{r4, lr}
 800687e:	4604      	mov	r4, r0
 8006880:	4608      	mov	r0, r1
 8006882:	4611      	mov	r1, r2
 8006884:	288e      	cmp	r0, #142	; 0x8e
 8006886:	f200 812f 	bhi.w	8006ae8 <_strerror_r+0x26c>
 800688a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800688e:	0138      	.short	0x0138
 8006890:	0091008f 	.word	0x0091008f
 8006894:	00950093 	.word	0x00950093
 8006898:	00990097 	.word	0x00990097
 800689c:	009d009b 	.word	0x009d009b
 80068a0:	00a300a1 	.word	0x00a300a1
 80068a4:	00a900a7 	.word	0x00a900a7
 80068a8:	00ad00ab 	.word	0x00ad00ab
 80068ac:	00af012d 	.word	0x00af012d
 80068b0:	00b300b1 	.word	0x00b300b1
 80068b4:	00b700b5 	.word	0x00b700b5
 80068b8:	00bf00bd 	.word	0x00bf00bd
 80068bc:	00c700c5 	.word	0x00c700c5
 80068c0:	00cb00c9 	.word	0x00cb00c9
 80068c4:	00d100cd 	.word	0x00d100cd
 80068c8:	00d700d5 	.word	0x00d700d5
 80068cc:	00db00d9 	.word	0x00db00d9
 80068d0:	00df00dd 	.word	0x00df00dd
 80068d4:	00e300e1 	.word	0x00e300e1
 80068d8:	012d012d 	.word	0x012d012d
 80068dc:	012d012d 	.word	0x012d012d
 80068e0:	012d012d 	.word	0x012d012d
 80068e4:	012d012d 	.word	0x012d012d
 80068e8:	00eb00e7 	.word	0x00eb00e7
 80068ec:	012d012d 	.word	0x012d012d
 80068f0:	012d012d 	.word	0x012d012d
 80068f4:	012d012d 	.word	0x012d012d
 80068f8:	012d012d 	.word	0x012d012d
 80068fc:	012d012d 	.word	0x012d012d
 8006900:	012d012d 	.word	0x012d012d
 8006904:	00ed012d 	.word	0x00ed012d
 8006908:	00ef0107 	.word	0x00ef0107
 800690c:	012d00f1 	.word	0x012d00f1
 8006910:	012d012d 	.word	0x012d012d
 8006914:	012d00f3 	.word	0x012d00f3
 8006918:	012d012d 	.word	0x012d012d
 800691c:	012d00f5 	.word	0x012d00f5
 8006920:	00f9012d 	.word	0x00f9012d
 8006924:	012d012d 	.word	0x012d012d
 8006928:	012d00fb 	.word	0x012d00fb
 800692c:	012d012d 	.word	0x012d012d
 8006930:	012d012d 	.word	0x012d012d
 8006934:	012d012d 	.word	0x012d012d
 8006938:	012d012d 	.word	0x012d012d
 800693c:	00fd012d 	.word	0x00fd012d
 8006940:	00ff012d 	.word	0x00ff012d
 8006944:	01030101 	.word	0x01030101
 8006948:	012d012d 	.word	0x012d012d
 800694c:	012d0125 	.word	0x012d0125
 8006950:	012d012d 	.word	0x012d012d
 8006954:	012d012d 	.word	0x012d012d
 8006958:	012d012d 	.word	0x012d012d
 800695c:	0113012d 	.word	0x0113012d
 8006960:	01090105 	.word	0x01090105
 8006964:	010d010b 	.word	0x010d010b
 8006968:	012d010f 	.word	0x012d010f
 800696c:	01150111 	.word	0x01150111
 8006970:	00e90119 	.word	0x00e90119
 8006974:	012b00c1 	.word	0x012b00c1
 8006978:	00cf00b9 	.word	0x00cf00b9
 800697c:	009f00bb 	.word	0x009f00bb
 8006980:	012900a5 	.word	0x012900a5
 8006984:	012d00f7 	.word	0x012d00f7
 8006988:	00c30117 	.word	0x00c30117
 800698c:	011b011d 	.word	0x011b011d
 8006990:	012d012d 	.word	0x012d012d
 8006994:	012d012d 	.word	0x012d012d
 8006998:	00d3012d 	.word	0x00d3012d
 800699c:	012d012d 	.word	0x012d012d
 80069a0:	00e5012d 	.word	0x00e5012d
 80069a4:	011f0127 	.word	0x011f0127
 80069a8:	01230121 	.word	0x01230121
 80069ac:	4855      	ldr	r0, [pc, #340]	; (8006b04 <_strerror_r+0x288>)
 80069ae:	bd10      	pop	{r4, pc}
 80069b0:	4855      	ldr	r0, [pc, #340]	; (8006b08 <_strerror_r+0x28c>)
 80069b2:	e7fc      	b.n	80069ae <_strerror_r+0x132>
 80069b4:	4855      	ldr	r0, [pc, #340]	; (8006b0c <_strerror_r+0x290>)
 80069b6:	e7fa      	b.n	80069ae <_strerror_r+0x132>
 80069b8:	4855      	ldr	r0, [pc, #340]	; (8006b10 <_strerror_r+0x294>)
 80069ba:	e7f8      	b.n	80069ae <_strerror_r+0x132>
 80069bc:	4855      	ldr	r0, [pc, #340]	; (8006b14 <_strerror_r+0x298>)
 80069be:	e7f6      	b.n	80069ae <_strerror_r+0x132>
 80069c0:	4855      	ldr	r0, [pc, #340]	; (8006b18 <_strerror_r+0x29c>)
 80069c2:	e7f4      	b.n	80069ae <_strerror_r+0x132>
 80069c4:	4855      	ldr	r0, [pc, #340]	; (8006b1c <_strerror_r+0x2a0>)
 80069c6:	e7f2      	b.n	80069ae <_strerror_r+0x132>
 80069c8:	4855      	ldr	r0, [pc, #340]	; (8006b20 <_strerror_r+0x2a4>)
 80069ca:	e7f0      	b.n	80069ae <_strerror_r+0x132>
 80069cc:	4855      	ldr	r0, [pc, #340]	; (8006b24 <_strerror_r+0x2a8>)
 80069ce:	e7ee      	b.n	80069ae <_strerror_r+0x132>
 80069d0:	4855      	ldr	r0, [pc, #340]	; (8006b28 <_strerror_r+0x2ac>)
 80069d2:	e7ec      	b.n	80069ae <_strerror_r+0x132>
 80069d4:	4855      	ldr	r0, [pc, #340]	; (8006b2c <_strerror_r+0x2b0>)
 80069d6:	e7ea      	b.n	80069ae <_strerror_r+0x132>
 80069d8:	4855      	ldr	r0, [pc, #340]	; (8006b30 <_strerror_r+0x2b4>)
 80069da:	e7e8      	b.n	80069ae <_strerror_r+0x132>
 80069dc:	4855      	ldr	r0, [pc, #340]	; (8006b34 <_strerror_r+0x2b8>)
 80069de:	e7e6      	b.n	80069ae <_strerror_r+0x132>
 80069e0:	4855      	ldr	r0, [pc, #340]	; (8006b38 <_strerror_r+0x2bc>)
 80069e2:	e7e4      	b.n	80069ae <_strerror_r+0x132>
 80069e4:	4855      	ldr	r0, [pc, #340]	; (8006b3c <_strerror_r+0x2c0>)
 80069e6:	e7e2      	b.n	80069ae <_strerror_r+0x132>
 80069e8:	4855      	ldr	r0, [pc, #340]	; (8006b40 <_strerror_r+0x2c4>)
 80069ea:	e7e0      	b.n	80069ae <_strerror_r+0x132>
 80069ec:	4855      	ldr	r0, [pc, #340]	; (8006b44 <_strerror_r+0x2c8>)
 80069ee:	e7de      	b.n	80069ae <_strerror_r+0x132>
 80069f0:	4855      	ldr	r0, [pc, #340]	; (8006b48 <_strerror_r+0x2cc>)
 80069f2:	e7dc      	b.n	80069ae <_strerror_r+0x132>
 80069f4:	4855      	ldr	r0, [pc, #340]	; (8006b4c <_strerror_r+0x2d0>)
 80069f6:	e7da      	b.n	80069ae <_strerror_r+0x132>
 80069f8:	4855      	ldr	r0, [pc, #340]	; (8006b50 <_strerror_r+0x2d4>)
 80069fa:	e7d8      	b.n	80069ae <_strerror_r+0x132>
 80069fc:	4855      	ldr	r0, [pc, #340]	; (8006b54 <_strerror_r+0x2d8>)
 80069fe:	e7d6      	b.n	80069ae <_strerror_r+0x132>
 8006a00:	4855      	ldr	r0, [pc, #340]	; (8006b58 <_strerror_r+0x2dc>)
 8006a02:	e7d4      	b.n	80069ae <_strerror_r+0x132>
 8006a04:	4855      	ldr	r0, [pc, #340]	; (8006b5c <_strerror_r+0x2e0>)
 8006a06:	e7d2      	b.n	80069ae <_strerror_r+0x132>
 8006a08:	4855      	ldr	r0, [pc, #340]	; (8006b60 <_strerror_r+0x2e4>)
 8006a0a:	e7d0      	b.n	80069ae <_strerror_r+0x132>
 8006a0c:	4855      	ldr	r0, [pc, #340]	; (8006b64 <_strerror_r+0x2e8>)
 8006a0e:	e7ce      	b.n	80069ae <_strerror_r+0x132>
 8006a10:	4855      	ldr	r0, [pc, #340]	; (8006b68 <_strerror_r+0x2ec>)
 8006a12:	e7cc      	b.n	80069ae <_strerror_r+0x132>
 8006a14:	4855      	ldr	r0, [pc, #340]	; (8006b6c <_strerror_r+0x2f0>)
 8006a16:	e7ca      	b.n	80069ae <_strerror_r+0x132>
 8006a18:	4855      	ldr	r0, [pc, #340]	; (8006b70 <_strerror_r+0x2f4>)
 8006a1a:	e7c8      	b.n	80069ae <_strerror_r+0x132>
 8006a1c:	4855      	ldr	r0, [pc, #340]	; (8006b74 <_strerror_r+0x2f8>)
 8006a1e:	e7c6      	b.n	80069ae <_strerror_r+0x132>
 8006a20:	4855      	ldr	r0, [pc, #340]	; (8006b78 <_strerror_r+0x2fc>)
 8006a22:	e7c4      	b.n	80069ae <_strerror_r+0x132>
 8006a24:	4855      	ldr	r0, [pc, #340]	; (8006b7c <_strerror_r+0x300>)
 8006a26:	e7c2      	b.n	80069ae <_strerror_r+0x132>
 8006a28:	4855      	ldr	r0, [pc, #340]	; (8006b80 <_strerror_r+0x304>)
 8006a2a:	e7c0      	b.n	80069ae <_strerror_r+0x132>
 8006a2c:	4855      	ldr	r0, [pc, #340]	; (8006b84 <_strerror_r+0x308>)
 8006a2e:	e7be      	b.n	80069ae <_strerror_r+0x132>
 8006a30:	4855      	ldr	r0, [pc, #340]	; (8006b88 <_strerror_r+0x30c>)
 8006a32:	e7bc      	b.n	80069ae <_strerror_r+0x132>
 8006a34:	4855      	ldr	r0, [pc, #340]	; (8006b8c <_strerror_r+0x310>)
 8006a36:	e7ba      	b.n	80069ae <_strerror_r+0x132>
 8006a38:	4855      	ldr	r0, [pc, #340]	; (8006b90 <_strerror_r+0x314>)
 8006a3a:	e7b8      	b.n	80069ae <_strerror_r+0x132>
 8006a3c:	4855      	ldr	r0, [pc, #340]	; (8006b94 <_strerror_r+0x318>)
 8006a3e:	e7b6      	b.n	80069ae <_strerror_r+0x132>
 8006a40:	4855      	ldr	r0, [pc, #340]	; (8006b98 <_strerror_r+0x31c>)
 8006a42:	e7b4      	b.n	80069ae <_strerror_r+0x132>
 8006a44:	4855      	ldr	r0, [pc, #340]	; (8006b9c <_strerror_r+0x320>)
 8006a46:	e7b2      	b.n	80069ae <_strerror_r+0x132>
 8006a48:	4855      	ldr	r0, [pc, #340]	; (8006ba0 <_strerror_r+0x324>)
 8006a4a:	e7b0      	b.n	80069ae <_strerror_r+0x132>
 8006a4c:	4855      	ldr	r0, [pc, #340]	; (8006ba4 <_strerror_r+0x328>)
 8006a4e:	e7ae      	b.n	80069ae <_strerror_r+0x132>
 8006a50:	4855      	ldr	r0, [pc, #340]	; (8006ba8 <_strerror_r+0x32c>)
 8006a52:	e7ac      	b.n	80069ae <_strerror_r+0x132>
 8006a54:	4855      	ldr	r0, [pc, #340]	; (8006bac <_strerror_r+0x330>)
 8006a56:	e7aa      	b.n	80069ae <_strerror_r+0x132>
 8006a58:	4855      	ldr	r0, [pc, #340]	; (8006bb0 <_strerror_r+0x334>)
 8006a5a:	e7a8      	b.n	80069ae <_strerror_r+0x132>
 8006a5c:	4855      	ldr	r0, [pc, #340]	; (8006bb4 <_strerror_r+0x338>)
 8006a5e:	e7a6      	b.n	80069ae <_strerror_r+0x132>
 8006a60:	4855      	ldr	r0, [pc, #340]	; (8006bb8 <_strerror_r+0x33c>)
 8006a62:	e7a4      	b.n	80069ae <_strerror_r+0x132>
 8006a64:	4855      	ldr	r0, [pc, #340]	; (8006bbc <_strerror_r+0x340>)
 8006a66:	e7a2      	b.n	80069ae <_strerror_r+0x132>
 8006a68:	4855      	ldr	r0, [pc, #340]	; (8006bc0 <_strerror_r+0x344>)
 8006a6a:	e7a0      	b.n	80069ae <_strerror_r+0x132>
 8006a6c:	4855      	ldr	r0, [pc, #340]	; (8006bc4 <_strerror_r+0x348>)
 8006a6e:	e79e      	b.n	80069ae <_strerror_r+0x132>
 8006a70:	4855      	ldr	r0, [pc, #340]	; (8006bc8 <_strerror_r+0x34c>)
 8006a72:	e79c      	b.n	80069ae <_strerror_r+0x132>
 8006a74:	4855      	ldr	r0, [pc, #340]	; (8006bcc <_strerror_r+0x350>)
 8006a76:	e79a      	b.n	80069ae <_strerror_r+0x132>
 8006a78:	4855      	ldr	r0, [pc, #340]	; (8006bd0 <_strerror_r+0x354>)
 8006a7a:	e798      	b.n	80069ae <_strerror_r+0x132>
 8006a7c:	4855      	ldr	r0, [pc, #340]	; (8006bd4 <_strerror_r+0x358>)
 8006a7e:	e796      	b.n	80069ae <_strerror_r+0x132>
 8006a80:	4855      	ldr	r0, [pc, #340]	; (8006bd8 <_strerror_r+0x35c>)
 8006a82:	e794      	b.n	80069ae <_strerror_r+0x132>
 8006a84:	4855      	ldr	r0, [pc, #340]	; (8006bdc <_strerror_r+0x360>)
 8006a86:	e792      	b.n	80069ae <_strerror_r+0x132>
 8006a88:	4855      	ldr	r0, [pc, #340]	; (8006be0 <_strerror_r+0x364>)
 8006a8a:	e790      	b.n	80069ae <_strerror_r+0x132>
 8006a8c:	4855      	ldr	r0, [pc, #340]	; (8006be4 <_strerror_r+0x368>)
 8006a8e:	e78e      	b.n	80069ae <_strerror_r+0x132>
 8006a90:	4855      	ldr	r0, [pc, #340]	; (8006be8 <_strerror_r+0x36c>)
 8006a92:	e78c      	b.n	80069ae <_strerror_r+0x132>
 8006a94:	4855      	ldr	r0, [pc, #340]	; (8006bec <_strerror_r+0x370>)
 8006a96:	e78a      	b.n	80069ae <_strerror_r+0x132>
 8006a98:	4855      	ldr	r0, [pc, #340]	; (8006bf0 <_strerror_r+0x374>)
 8006a9a:	e788      	b.n	80069ae <_strerror_r+0x132>
 8006a9c:	4855      	ldr	r0, [pc, #340]	; (8006bf4 <_strerror_r+0x378>)
 8006a9e:	e786      	b.n	80069ae <_strerror_r+0x132>
 8006aa0:	4855      	ldr	r0, [pc, #340]	; (8006bf8 <_strerror_r+0x37c>)
 8006aa2:	e784      	b.n	80069ae <_strerror_r+0x132>
 8006aa4:	4855      	ldr	r0, [pc, #340]	; (8006bfc <_strerror_r+0x380>)
 8006aa6:	e782      	b.n	80069ae <_strerror_r+0x132>
 8006aa8:	4855      	ldr	r0, [pc, #340]	; (8006c00 <_strerror_r+0x384>)
 8006aaa:	e780      	b.n	80069ae <_strerror_r+0x132>
 8006aac:	4855      	ldr	r0, [pc, #340]	; (8006c04 <_strerror_r+0x388>)
 8006aae:	e77e      	b.n	80069ae <_strerror_r+0x132>
 8006ab0:	4855      	ldr	r0, [pc, #340]	; (8006c08 <_strerror_r+0x38c>)
 8006ab2:	e77c      	b.n	80069ae <_strerror_r+0x132>
 8006ab4:	4855      	ldr	r0, [pc, #340]	; (8006c0c <_strerror_r+0x390>)
 8006ab6:	e77a      	b.n	80069ae <_strerror_r+0x132>
 8006ab8:	4855      	ldr	r0, [pc, #340]	; (8006c10 <_strerror_r+0x394>)
 8006aba:	e778      	b.n	80069ae <_strerror_r+0x132>
 8006abc:	4855      	ldr	r0, [pc, #340]	; (8006c14 <_strerror_r+0x398>)
 8006abe:	e776      	b.n	80069ae <_strerror_r+0x132>
 8006ac0:	4855      	ldr	r0, [pc, #340]	; (8006c18 <_strerror_r+0x39c>)
 8006ac2:	e774      	b.n	80069ae <_strerror_r+0x132>
 8006ac4:	4855      	ldr	r0, [pc, #340]	; (8006c1c <_strerror_r+0x3a0>)
 8006ac6:	e772      	b.n	80069ae <_strerror_r+0x132>
 8006ac8:	4855      	ldr	r0, [pc, #340]	; (8006c20 <_strerror_r+0x3a4>)
 8006aca:	e770      	b.n	80069ae <_strerror_r+0x132>
 8006acc:	4855      	ldr	r0, [pc, #340]	; (8006c24 <_strerror_r+0x3a8>)
 8006ace:	e76e      	b.n	80069ae <_strerror_r+0x132>
 8006ad0:	4855      	ldr	r0, [pc, #340]	; (8006c28 <_strerror_r+0x3ac>)
 8006ad2:	e76c      	b.n	80069ae <_strerror_r+0x132>
 8006ad4:	4855      	ldr	r0, [pc, #340]	; (8006c2c <_strerror_r+0x3b0>)
 8006ad6:	e76a      	b.n	80069ae <_strerror_r+0x132>
 8006ad8:	4855      	ldr	r0, [pc, #340]	; (8006c30 <_strerror_r+0x3b4>)
 8006ada:	e768      	b.n	80069ae <_strerror_r+0x132>
 8006adc:	4855      	ldr	r0, [pc, #340]	; (8006c34 <_strerror_r+0x3b8>)
 8006ade:	e766      	b.n	80069ae <_strerror_r+0x132>
 8006ae0:	4855      	ldr	r0, [pc, #340]	; (8006c38 <_strerror_r+0x3bc>)
 8006ae2:	e764      	b.n	80069ae <_strerror_r+0x132>
 8006ae4:	4855      	ldr	r0, [pc, #340]	; (8006c3c <_strerror_r+0x3c0>)
 8006ae6:	e762      	b.n	80069ae <_strerror_r+0x132>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	bf14      	ite	ne
 8006aec:	461a      	movne	r2, r3
 8006aee:	4622      	moveq	r2, r4
 8006af0:	f000 f8b4 	bl	8006c5c <_user_strerror>
 8006af4:	4b52      	ldr	r3, [pc, #328]	; (8006c40 <_strerror_r+0x3c4>)
 8006af6:	2800      	cmp	r0, #0
 8006af8:	bf08      	it	eq
 8006afa:	4618      	moveq	r0, r3
 8006afc:	e757      	b.n	80069ae <_strerror_r+0x132>
 8006afe:	4851      	ldr	r0, [pc, #324]	; (8006c44 <_strerror_r+0x3c8>)
 8006b00:	e755      	b.n	80069ae <_strerror_r+0x132>
 8006b02:	bf00      	nop
 8006b04:	0800707c 	.word	0x0800707c
 8006b08:	08007086 	.word	0x08007086
 8006b0c:	080070a0 	.word	0x080070a0
 8006b10:	080070b0 	.word	0x080070b0
 8006b14:	080070c8 	.word	0x080070c8
 8006b18:	080070d2 	.word	0x080070d2
 8006b1c:	080070ec 	.word	0x080070ec
 8006b20:	080070fe 	.word	0x080070fe
 8006b24:	08007110 	.word	0x08007110
 8006b28:	08007129 	.word	0x08007129
 8006b2c:	08007139 	.word	0x08007139
 8006b30:	08007145 	.word	0x08007145
 8006b34:	08007162 	.word	0x08007162
 8006b38:	08007174 	.word	0x08007174
 8006b3c:	08007185 	.word	0x08007185
 8006b40:	08007197 	.word	0x08007197
 8006b44:	080071a3 	.word	0x080071a3
 8006b48:	080071bb 	.word	0x080071bb
 8006b4c:	080071c7 	.word	0x080071c7
 8006b50:	080071d9 	.word	0x080071d9
 8006b54:	080071e8 	.word	0x080071e8
 8006b58:	080071f8 	.word	0x080071f8
 8006b5c:	08007205 	.word	0x08007205
 8006b60:	08007224 	.word	0x08007224
 8006b64:	08007233 	.word	0x08007233
 8006b68:	08007244 	.word	0x08007244
 8006b6c:	08007268 	.word	0x08007268
 8006b70:	08007286 	.word	0x08007286
 8006b74:	080072a4 	.word	0x080072a4
 8006b78:	080072c4 	.word	0x080072c4
 8006b7c:	080072db 	.word	0x080072db
 8006b80:	080072ea 	.word	0x080072ea
 8006b84:	080072f9 	.word	0x080072f9
 8006b88:	0800730d 	.word	0x0800730d
 8006b8c:	08007325 	.word	0x08007325
 8006b90:	08007333 	.word	0x08007333
 8006b94:	08007340 	.word	0x08007340
 8006b98:	08007356 	.word	0x08007356
 8006b9c:	08007365 	.word	0x08007365
 8006ba0:	08007371 	.word	0x08007371
 8006ba4:	080073a0 	.word	0x080073a0
 8006ba8:	080073b1 	.word	0x080073b1
 8006bac:	080073cc 	.word	0x080073cc
 8006bb0:	080073df 	.word	0x080073df
 8006bb4:	080073f5 	.word	0x080073f5
 8006bb8:	080073fe 	.word	0x080073fe
 8006bbc:	08007415 	.word	0x08007415
 8006bc0:	0800741d 	.word	0x0800741d
 8006bc4:	0800742a 	.word	0x0800742a
 8006bc8:	0800743f 	.word	0x0800743f
 8006bcc:	08007453 	.word	0x08007453
 8006bd0:	0800746b 	.word	0x0800746b
 8006bd4:	0800747a 	.word	0x0800747a
 8006bd8:	0800748b 	.word	0x0800748b
 8006bdc:	0800749e 	.word	0x0800749e
 8006be0:	080074aa 	.word	0x080074aa
 8006be4:	080074c3 	.word	0x080074c3
 8006be8:	080074d7 	.word	0x080074d7
 8006bec:	080074f2 	.word	0x080074f2
 8006bf0:	0800750a 	.word	0x0800750a
 8006bf4:	08007524 	.word	0x08007524
 8006bf8:	0800752c 	.word	0x0800752c
 8006bfc:	0800755c 	.word	0x0800755c
 8006c00:	0800757b 	.word	0x0800757b
 8006c04:	0800759a 	.word	0x0800759a
 8006c08:	080075b1 	.word	0x080075b1
 8006c0c:	080075c4 	.word	0x080075c4
 8006c10:	080075dd 	.word	0x080075dd
 8006c14:	080075f4 	.word	0x080075f4
 8006c18:	0800760a 	.word	0x0800760a
 8006c1c:	0800762b 	.word	0x0800762b
 8006c20:	08007643 	.word	0x08007643
 8006c24:	0800765f 	.word	0x0800765f
 8006c28:	08007672 	.word	0x08007672
 8006c2c:	08007688 	.word	0x08007688
 8006c30:	0800769c 	.word	0x0800769c
 8006c34:	080076be 	.word	0x080076be
 8006c38:	080076e4 	.word	0x080076e4
 8006c3c:	080076f5 	.word	0x080076f5
 8006c40:	0800752b 	.word	0x0800752b
 8006c44:	0800770a 	.word	0x0800770a

08006c48 <strerror>:
 8006c48:	4601      	mov	r1, r0
 8006c4a:	4803      	ldr	r0, [pc, #12]	; (8006c58 <strerror+0x10>)
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	6800      	ldr	r0, [r0, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	f7ff be13 	b.w	800687c <_strerror_r>
 8006c56:	bf00      	nop
 8006c58:	20000030 	.word	0x20000030

08006c5c <_user_strerror>:
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	4770      	bx	lr

08006c60 <__malloc_lock>:
 8006c60:	4801      	ldr	r0, [pc, #4]	; (8006c68 <__malloc_lock+0x8>)
 8006c62:	f7ff bcdd 	b.w	8006620 <__retarget_lock_acquire_recursive>
 8006c66:	bf00      	nop
 8006c68:	2000038c 	.word	0x2000038c

08006c6c <__malloc_unlock>:
 8006c6c:	4801      	ldr	r0, [pc, #4]	; (8006c74 <__malloc_unlock+0x8>)
 8006c6e:	f7ff bcd8 	b.w	8006622 <__retarget_lock_release_recursive>
 8006c72:	bf00      	nop
 8006c74:	2000038c 	.word	0x2000038c

08006c78 <_Unwind_GetDataRelBase>:
 8006c78:	b508      	push	{r3, lr}
 8006c7a:	f7ff fc92 	bl	80065a2 <abort>

08006c7e <_Unwind_GetTextRelBase>:
 8006c7e:	b508      	push	{r3, lr}
 8006c80:	f7ff fffa 	bl	8006c78 <_Unwind_GetDataRelBase>

08006c84 <_init>:
 8006c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c86:	bf00      	nop
 8006c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8a:	bc08      	pop	{r3}
 8006c8c:	469e      	mov	lr, r3
 8006c8e:	4770      	bx	lr

08006c90 <_fini>:
 8006c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c92:	bf00      	nop
 8006c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c96:	bc08      	pop	{r3}
 8006c98:	469e      	mov	lr, r3
 8006c9a:	4770      	bx	lr
