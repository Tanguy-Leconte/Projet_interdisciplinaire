
Projet_5A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002218  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080023a0  080023a0  000123a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023e0  080023e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080023e0  080023e0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023e0  080023e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023e0  080023e0  000123e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023e4  080023e4  000123e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080023f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080023f4  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a683  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000188e  00000000  00000000  0002a6bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  0002bf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000868  00000000  00000000  0002c880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000027e7  00000000  00000000  0002d0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a97d  00000000  00000000  0002f8cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0f86  00000000  00000000  0003a24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011b1d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002470  00000000  00000000  0011b228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002388 	.word	0x08002388

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002388 	.word	0x08002388

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9b1 	bl	8000532 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f805 	bl	80001de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f888 	bl	80002e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d8:	f000 f848 	bl	800026c <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001dc:	e7fe      	b.n	80001dc <main+0x14>

080001de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001de:	b580      	push	{r7, lr}
 80001e0:	b096      	sub	sp, #88	; 0x58
 80001e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	2244      	movs	r2, #68	; 0x44
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f002 f8c3 	bl	8002378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f2:	463b      	mov	r3, r7
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
 80001fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000200:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000204:	f000 fdce 	bl	8000da4 <HAL_PWREx_ControlVoltageScaling>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800020e:	f000 f883 	bl	8000318 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000212:	2310      	movs	r3, #16
 8000214:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800021e:	2360      	movs	r3, #96	; 0x60
 8000220:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000222:	2300      	movs	r3, #0
 8000224:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000226:	f107 0314 	add.w	r3, r7, #20
 800022a:	4618      	mov	r0, r3
 800022c:	f000 fe10 	bl	8000e50 <HAL_RCC_OscConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000236:	f000 f86f 	bl	8000318 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023a:	230f      	movs	r3, #15
 800023c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800023e:	2300      	movs	r3, #0
 8000240:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800024e:	463b      	mov	r3, r7
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f001 f9e2 	bl	800161c <HAL_RCC_ClockConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800025e:	f000 f85b 	bl	8000318 <Error_Handler>
  }
}
 8000262:	bf00      	nop
 8000264:	3758      	adds	r7, #88	; 0x58
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <MX_I2C1_Init+0x74>)
 8000272:	4a1c      	ldr	r2, [pc, #112]	; (80002e4 <MX_I2C1_Init+0x78>)
 8000274:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000276:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <MX_I2C1_Init+0x74>)
 8000278:	f640 6214 	movw	r2, #3604	; 0xe14
 800027c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800027e:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <MX_I2C1_Init+0x74>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000284:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <MX_I2C1_Init+0x74>)
 8000286:	2201      	movs	r2, #1
 8000288:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <MX_I2C1_Init+0x74>)
 800028c:	2200      	movs	r2, #0
 800028e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000290:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <MX_I2C1_Init+0x74>)
 8000292:	2200      	movs	r2, #0
 8000294:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000296:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_I2C1_Init+0x74>)
 8000298:	2200      	movs	r2, #0
 800029a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <MX_I2C1_Init+0x74>)
 800029e:	2200      	movs	r2, #0
 80002a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002a2:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <MX_I2C1_Init+0x74>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <MX_I2C1_Init+0x74>)
 80002aa:	f000 fc47 	bl	8000b3c <HAL_I2C_Init>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002b4:	f000 f830 	bl	8000318 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002b8:	2100      	movs	r1, #0
 80002ba:	4809      	ldr	r0, [pc, #36]	; (80002e0 <MX_I2C1_Init+0x74>)
 80002bc:	f000 fccd 	bl	8000c5a <HAL_I2CEx_ConfigAnalogFilter>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80002c6:	f000 f827 	bl	8000318 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002ca:	2100      	movs	r1, #0
 80002cc:	4804      	ldr	r0, [pc, #16]	; (80002e0 <MX_I2C1_Init+0x74>)
 80002ce:	f000 fd0f 	bl	8000cf0 <HAL_I2CEx_ConfigDigitalFilter>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80002d8:	f000 f81e 	bl	8000318 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000028 	.word	0x20000028
 80002e4:	40005400 	.word	0x40005400

080002e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <MX_GPIO_Init+0x2c>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f2:	4a08      	ldr	r2, [pc, #32]	; (8000314 <MX_GPIO_Init+0x2c>)
 80002f4:	f043 0302 	orr.w	r3, r3, #2
 80002f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <MX_GPIO_Init+0x2c>)
 80002fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fe:	f003 0302 	and.w	r3, r3, #2
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]

}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40021000 	.word	0x40021000

08000318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800031c:	b672      	cpsid	i
}
 800031e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000320:	e7fe      	b.n	8000320 <Error_Handler+0x8>
	...

08000324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <HAL_MspInit+0x44>)
 800032c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800032e:	4a0e      	ldr	r2, [pc, #56]	; (8000368 <HAL_MspInit+0x44>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6613      	str	r3, [r2, #96]	; 0x60
 8000336:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <HAL_MspInit+0x44>)
 8000338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800033a:	f003 0301 	and.w	r3, r3, #1
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000342:	4b09      	ldr	r3, [pc, #36]	; (8000368 <HAL_MspInit+0x44>)
 8000344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000346:	4a08      	ldr	r2, [pc, #32]	; (8000368 <HAL_MspInit+0x44>)
 8000348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800034c:	6593      	str	r3, [r2, #88]	; 0x58
 800034e:	4b06      	ldr	r3, [pc, #24]	; (8000368 <HAL_MspInit+0x44>)
 8000350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000356:	603b      	str	r3, [r7, #0]
 8000358:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000

0800036c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b0ac      	sub	sp, #176	; 0xb0
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000374:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]
 8000380:	60da      	str	r2, [r3, #12]
 8000382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000384:	f107 0314 	add.w	r3, r7, #20
 8000388:	2288      	movs	r2, #136	; 0x88
 800038a:	2100      	movs	r1, #0
 800038c:	4618      	mov	r0, r3
 800038e:	f001 fff3 	bl	8002378 <memset>
  if(hi2c->Instance==I2C1)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a21      	ldr	r2, [pc, #132]	; (800041c <HAL_I2C_MspInit+0xb0>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d13b      	bne.n	8000414 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800039c:	2340      	movs	r3, #64	; 0x40
 800039e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a4:	f107 0314 	add.w	r3, r7, #20
 80003a8:	4618      	mov	r0, r3
 80003aa:	f001 fb05 	bl	80019b8 <HAL_RCCEx_PeriphCLKConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80003b4:	f7ff ffb0 	bl	8000318 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b8:	4b19      	ldr	r3, [pc, #100]	; (8000420 <HAL_I2C_MspInit+0xb4>)
 80003ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003bc:	4a18      	ldr	r2, [pc, #96]	; (8000420 <HAL_I2C_MspInit+0xb4>)
 80003be:	f043 0302 	orr.w	r3, r3, #2
 80003c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003c4:	4b16      	ldr	r3, [pc, #88]	; (8000420 <HAL_I2C_MspInit+0xb4>)
 80003c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c8:	f003 0302 	and.w	r3, r3, #2
 80003cc:	613b      	str	r3, [r7, #16]
 80003ce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80003d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80003d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003d8:	2312      	movs	r3, #18
 80003da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003e4:	2303      	movs	r3, #3
 80003e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80003ea:	2304      	movs	r3, #4
 80003ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80003f4:	4619      	mov	r1, r3
 80003f6:	480b      	ldr	r0, [pc, #44]	; (8000424 <HAL_I2C_MspInit+0xb8>)
 80003f8:	f000 f9f6 	bl	80007e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003fc:	4b08      	ldr	r3, [pc, #32]	; (8000420 <HAL_I2C_MspInit+0xb4>)
 80003fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000400:	4a07      	ldr	r2, [pc, #28]	; (8000420 <HAL_I2C_MspInit+0xb4>)
 8000402:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000406:	6593      	str	r3, [r2, #88]	; 0x58
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <HAL_I2C_MspInit+0xb4>)
 800040a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800040c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000410:	60fb      	str	r3, [r7, #12]
 8000412:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000414:	bf00      	nop
 8000416:	37b0      	adds	r7, #176	; 0xb0
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40005400 	.word	0x40005400
 8000420:	40021000 	.word	0x40021000
 8000424:	48000400 	.word	0x48000400

08000428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800042c:	e7fe      	b.n	800042c <NMI_Handler+0x4>

0800042e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <HardFault_Handler+0x4>

08000434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <MemManage_Handler+0x4>

0800043a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <BusFault_Handler+0x4>

08000440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <UsageFault_Handler+0x4>

08000446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr

08000462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000474:	f000 f8b2 	bl	80005dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}

0800047c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <SystemInit+0x5c>)
 8000482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000486:	4a14      	ldr	r2, [pc, #80]	; (80004d8 <SystemInit+0x5c>)
 8000488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800048c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000490:	4b12      	ldr	r3, [pc, #72]	; (80004dc <SystemInit+0x60>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a11      	ldr	r2, [pc, #68]	; (80004dc <SystemInit+0x60>)
 8000496:	f043 0301 	orr.w	r3, r3, #1
 800049a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <SystemInit+0x60>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <SystemInit+0x60>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a0d      	ldr	r2, [pc, #52]	; (80004dc <SystemInit+0x60>)
 80004a8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80004ac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80004b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80004b2:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <SystemInit+0x60>)
 80004b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <SystemInit+0x60>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a07      	ldr	r2, [pc, #28]	; (80004dc <SystemInit+0x60>)
 80004c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80004c6:	4b05      	ldr	r3, [pc, #20]	; (80004dc <SystemInit+0x60>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	e000ed00 	.word	0xe000ed00
 80004dc:	40021000 	.word	0x40021000

080004e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000518 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004e4:	f7ff ffca 	bl	800047c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004ea:	e003      	b.n	80004f4 <LoopCopyDataInit>

080004ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004ec:	4b0b      	ldr	r3, [pc, #44]	; (800051c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80004ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004f2:	3104      	adds	r1, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004f4:	480a      	ldr	r0, [pc, #40]	; (8000520 <LoopForever+0xa>)
	ldr	r3, =_edata
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <LoopForever+0xe>)
	adds	r2, r0, r1
 80004f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004fc:	d3f6      	bcc.n	80004ec <CopyDataInit>
	ldr	r2, =_sbss
 80004fe:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000500:	e002      	b.n	8000508 <LoopFillZerobss>

08000502 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000502:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000504:	f842 3b04 	str.w	r3, [r2], #4

08000508 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <LoopForever+0x16>)
	cmp	r2, r3
 800050a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800050c:	d3f9      	bcc.n	8000502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800050e:	f001 ff0f 	bl	8002330 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000512:	f7ff fe59 	bl	80001c8 <main>

08000516 <LoopForever>:

LoopForever:
    b LoopForever
 8000516:	e7fe      	b.n	8000516 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000518:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800051c:	080023e8 	.word	0x080023e8
	ldr	r0, =_sdata
 8000520:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000524:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000528:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800052c:	20000078 	.word	0x20000078

08000530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC1_2_IRQHandler>

08000532 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b082      	sub	sp, #8
 8000536:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000538:	2300      	movs	r3, #0
 800053a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f91f 	bl	8000780 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000542:	200f      	movs	r0, #15
 8000544:	f000 f80e 	bl	8000564 <HAL_InitTick>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d002      	beq.n	8000554 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800054e:	2301      	movs	r3, #1
 8000550:	71fb      	strb	r3, [r7, #7]
 8000552:	e001      	b.n	8000558 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000554:	f7ff fee6 	bl	8000324 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000558:	79fb      	ldrb	r3, [r7, #7]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800056c:	2300      	movs	r3, #0
 800056e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000570:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <HAL_InitTick+0x6c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d023      	beq.n	80005c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <HAL_InitTick+0x70>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <HAL_InitTick+0x6c>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4619      	mov	r1, r3
 8000582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000586:	fbb3 f3f1 	udiv	r3, r3, r1
 800058a:	fbb2 f3f3 	udiv	r3, r2, r3
 800058e:	4618      	mov	r0, r3
 8000590:	f000 f91d 	bl	80007ce <HAL_SYSTICK_Config>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d10f      	bne.n	80005ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b0f      	cmp	r3, #15
 800059e:	d809      	bhi.n	80005b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a0:	2200      	movs	r2, #0
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	f04f 30ff 	mov.w	r0, #4294967295
 80005a8:	f000 f8f5 	bl	8000796 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005ac:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <HAL_InitTick+0x74>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6013      	str	r3, [r2, #0]
 80005b2:	e007      	b.n	80005c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005b4:	2301      	movs	r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]
 80005b8:	e004      	b.n	80005c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	73fb      	strb	r3, [r7, #15]
 80005be:	e001      	b.n	80005c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005c0:	2301      	movs	r3, #1
 80005c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000008 	.word	0x20000008
 80005d4:	20000000 	.word	0x20000000
 80005d8:	20000004 	.word	0x20000004

080005dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <HAL_IncTick+0x20>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <HAL_IncTick+0x24>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4413      	add	r3, r2
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <HAL_IncTick+0x24>)
 80005ee:	6013      	str	r3, [r2, #0]
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000074 	.word	0x20000074

08000604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return uwTick;
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <HAL_GetTick+0x14>)
 800060a:	681b      	ldr	r3, [r3, #0]
}
 800060c:	4618      	mov	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000074 	.word	0x20000074

0800061c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f003 0307 	and.w	r3, r3, #7
 800062a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000638:	4013      	ands	r3, r2
 800063a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064e:	4a04      	ldr	r2, [pc, #16]	; (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	60d3      	str	r3, [r2, #12]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <__NVIC_GetPriorityGrouping+0x18>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	0a1b      	lsrs	r3, r3, #8
 800066e:	f003 0307 	and.w	r3, r3, #7
}
 8000672:	4618      	mov	r0, r3
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	db0a      	blt.n	80006aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	490c      	ldr	r1, [pc, #48]	; (80006cc <__NVIC_SetPriority+0x4c>)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	0112      	lsls	r2, r2, #4
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	440b      	add	r3, r1
 80006a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a8:	e00a      	b.n	80006c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4908      	ldr	r1, [pc, #32]	; (80006d0 <__NVIC_SetPriority+0x50>)
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	f003 030f 	and.w	r3, r3, #15
 80006b6:	3b04      	subs	r3, #4
 80006b8:	0112      	lsls	r2, r2, #4
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	440b      	add	r3, r1
 80006be:	761a      	strb	r2, [r3, #24]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000e100 	.word	0xe000e100
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	f1c3 0307 	rsb	r3, r3, #7
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	bf28      	it	cs
 80006f2:	2304      	movcs	r3, #4
 80006f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3304      	adds	r3, #4
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d902      	bls.n	8000704 <NVIC_EncodePriority+0x30>
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3b03      	subs	r3, #3
 8000702:	e000      	b.n	8000706 <NVIC_EncodePriority+0x32>
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	f04f 32ff 	mov.w	r2, #4294967295
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	43da      	mvns	r2, r3
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	401a      	ands	r2, r3
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800071c:	f04f 31ff 	mov.w	r1, #4294967295
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	43d9      	mvns	r1, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	4313      	orrs	r3, r2
         );
}
 800072e:	4618      	mov	r0, r3
 8000730:	3724      	adds	r7, #36	; 0x24
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3b01      	subs	r3, #1
 8000748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800074c:	d301      	bcc.n	8000752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800074e:	2301      	movs	r3, #1
 8000750:	e00f      	b.n	8000772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <SysTick_Config+0x40>)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800075a:	210f      	movs	r1, #15
 800075c:	f04f 30ff 	mov.w	r0, #4294967295
 8000760:	f7ff ff8e 	bl	8000680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <SysTick_Config+0x40>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SysTick_Config+0x40>)
 800076c:	2207      	movs	r2, #7
 800076e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	e000e010 	.word	0xe000e010

08000780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff47 	bl	800061c <__NVIC_SetPriorityGrouping>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b086      	sub	sp, #24
 800079a:	af00      	add	r7, sp, #0
 800079c:	4603      	mov	r3, r0
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
 80007a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007a8:	f7ff ff5c 	bl	8000664 <__NVIC_GetPriorityGrouping>
 80007ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	68b9      	ldr	r1, [r7, #8]
 80007b2:	6978      	ldr	r0, [r7, #20]
 80007b4:	f7ff ff8e 	bl	80006d4 <NVIC_EncodePriority>
 80007b8:	4602      	mov	r2, r0
 80007ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff5d 	bl	8000680 <__NVIC_SetPriority>
}
 80007c6:	bf00      	nop
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff ffb0 	bl	800073c <SysTick_Config>
 80007dc:	4603      	mov	r3, r0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b087      	sub	sp, #28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007f6:	e17f      	b.n	8000af8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	2101      	movs	r1, #1
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	fa01 f303 	lsl.w	r3, r1, r3
 8000804:	4013      	ands	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2b00      	cmp	r3, #0
 800080c:	f000 8171 	beq.w	8000af2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d00b      	beq.n	8000830 <HAL_GPIO_Init+0x48>
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	2b02      	cmp	r3, #2
 800081e:	d007      	beq.n	8000830 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000824:	2b11      	cmp	r3, #17
 8000826:	d003      	beq.n	8000830 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	2b12      	cmp	r3, #18
 800082e:	d130      	bne.n	8000892 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	2203      	movs	r2, #3
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	43db      	mvns	r3, r3
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	4013      	ands	r3, r2
 8000846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	68da      	ldr	r2, [r3, #12]
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	4313      	orrs	r3, r2
 8000858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	693a      	ldr	r2, [r7, #16]
 800085e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000866:	2201      	movs	r2, #1
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	43db      	mvns	r3, r3
 8000870:	693a      	ldr	r2, [r7, #16]
 8000872:	4013      	ands	r3, r2
 8000874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	091b      	lsrs	r3, r3, #4
 800087c:	f003 0201 	and.w	r2, r3, #1
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	4313      	orrs	r3, r2
 800088a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	f003 0303 	and.w	r3, r3, #3
 800089a:	2b03      	cmp	r3, #3
 800089c:	d118      	bne.n	80008d0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008a4:	2201      	movs	r2, #1
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4013      	ands	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	08db      	lsrs	r3, r3, #3
 80008ba:	f003 0201 	and.w	r2, r3, #1
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2203      	movs	r2, #3
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4013      	ands	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d003      	beq.n	8000910 <HAL_GPIO_Init+0x128>
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	2b12      	cmp	r3, #18
 800090e:	d123      	bne.n	8000958 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	08da      	lsrs	r2, r3, #3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3208      	adds	r2, #8
 8000918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800091c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	f003 0307 	and.w	r3, r3, #7
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	220f      	movs	r2, #15
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4013      	ands	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	691a      	ldr	r2, [r3, #16]
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4313      	orrs	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	08da      	lsrs	r2, r3, #3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3208      	adds	r2, #8
 8000952:	6939      	ldr	r1, [r7, #16]
 8000954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	2203      	movs	r2, #3
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4013      	ands	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 0203 	and.w	r2, r3, #3
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4313      	orrs	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	2b00      	cmp	r3, #0
 8000996:	f000 80ac 	beq.w	8000af2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b5f      	ldr	r3, [pc, #380]	; (8000b18 <HAL_GPIO_Init+0x330>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099e:	4a5e      	ldr	r2, [pc, #376]	; (8000b18 <HAL_GPIO_Init+0x330>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6613      	str	r3, [r2, #96]	; 0x60
 80009a6:	4b5c      	ldr	r3, [pc, #368]	; (8000b18 <HAL_GPIO_Init+0x330>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009b2:	4a5a      	ldr	r2, [pc, #360]	; (8000b1c <HAL_GPIO_Init+0x334>)
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	089b      	lsrs	r3, r3, #2
 80009b8:	3302      	adds	r3, #2
 80009ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	220f      	movs	r2, #15
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4013      	ands	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009dc:	d025      	beq.n	8000a2a <HAL_GPIO_Init+0x242>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a4f      	ldr	r2, [pc, #316]	; (8000b20 <HAL_GPIO_Init+0x338>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d01f      	beq.n	8000a26 <HAL_GPIO_Init+0x23e>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a4e      	ldr	r2, [pc, #312]	; (8000b24 <HAL_GPIO_Init+0x33c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d019      	beq.n	8000a22 <HAL_GPIO_Init+0x23a>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a4d      	ldr	r2, [pc, #308]	; (8000b28 <HAL_GPIO_Init+0x340>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d013      	beq.n	8000a1e <HAL_GPIO_Init+0x236>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a4c      	ldr	r2, [pc, #304]	; (8000b2c <HAL_GPIO_Init+0x344>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d00d      	beq.n	8000a1a <HAL_GPIO_Init+0x232>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a4b      	ldr	r2, [pc, #300]	; (8000b30 <HAL_GPIO_Init+0x348>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d007      	beq.n	8000a16 <HAL_GPIO_Init+0x22e>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a4a      	ldr	r2, [pc, #296]	; (8000b34 <HAL_GPIO_Init+0x34c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_GPIO_Init+0x22a>
 8000a0e:	2306      	movs	r3, #6
 8000a10:	e00c      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a12:	2307      	movs	r3, #7
 8000a14:	e00a      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a16:	2305      	movs	r3, #5
 8000a18:	e008      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	e006      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a1e:	2303      	movs	r3, #3
 8000a20:	e004      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a22:	2302      	movs	r3, #2
 8000a24:	e002      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a26:	2301      	movs	r3, #1
 8000a28:	e000      	b.n	8000a2c <HAL_GPIO_Init+0x244>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	f002 0203 	and.w	r2, r2, #3
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	4093      	lsls	r3, r2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a3c:	4937      	ldr	r1, [pc, #220]	; (8000b1c <HAL_GPIO_Init+0x334>)
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	089b      	lsrs	r3, r3, #2
 8000a42:	3302      	adds	r3, #2
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a4a:	4b3b      	ldr	r3, [pc, #236]	; (8000b38 <HAL_GPIO_Init+0x350>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a6e:	4a32      	ldr	r2, [pc, #200]	; (8000b38 <HAL_GPIO_Init+0x350>)
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a74:	4b30      	ldr	r3, [pc, #192]	; (8000b38 <HAL_GPIO_Init+0x350>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a98:	4a27      	ldr	r2, [pc, #156]	; (8000b38 <HAL_GPIO_Init+0x350>)
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a9e:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <HAL_GPIO_Init+0x350>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ac2:	4a1d      	ldr	r2, [pc, #116]	; (8000b38 <HAL_GPIO_Init+0x350>)
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <HAL_GPIO_Init+0x350>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000aec:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <HAL_GPIO_Init+0x350>)
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa22 f303 	lsr.w	r3, r2, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f47f ae78 	bne.w	80007f8 <HAL_GPIO_Init+0x10>
  }
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	371c      	adds	r7, #28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010000 	.word	0x40010000
 8000b20:	48000400 	.word	0x48000400
 8000b24:	48000800 	.word	0x48000800
 8000b28:	48000c00 	.word	0x48000c00
 8000b2c:	48001000 	.word	0x48001000
 8000b30:	48001400 	.word	0x48001400
 8000b34:	48001800 	.word	0x48001800
 8000b38:	40010400 	.word	0x40010400

08000b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d101      	bne.n	8000b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e081      	b.n	8000c52 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d106      	bne.n	8000b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff fc02 	bl	800036c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2224      	movs	r2, #36	; 0x24
 8000b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f022 0201 	bic.w	r2, r2, #1
 8000b7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	689a      	ldr	r2, [r3, #8]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d107      	bne.n	8000bb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	689a      	ldr	r2, [r3, #8]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	e006      	b.n	8000bc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	689a      	ldr	r2, [r3, #8]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000bc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d104      	bne.n	8000bd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	6812      	ldr	r2, [r2, #0]
 8000be0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000be8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	68da      	ldr	r2, [r3, #12]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000bf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	691a      	ldr	r2, [r3, #16]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	ea42 0103 	orr.w	r1, r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	021a      	lsls	r2, r3, #8
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	430a      	orrs	r2, r1
 8000c12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	69d9      	ldr	r1, [r3, #28]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a1a      	ldr	r2, [r3, #32]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	430a      	orrs	r2, r1
 8000c22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f042 0201 	orr.w	r2, r2, #1
 8000c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2220      	movs	r2, #32
 8000c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b20      	cmp	r3, #32
 8000c6e:	d138      	bne.n	8000ce2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d101      	bne.n	8000c7e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	e032      	b.n	8000ce4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2201      	movs	r2, #1
 8000c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2224      	movs	r2, #36	; 0x24
 8000c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0201 	bic.w	r2, r2, #1
 8000c9c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000cac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	6819      	ldr	r1, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f042 0201 	orr.w	r2, r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2220      	movs	r2, #32
 8000cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e000      	b.n	8000ce4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000ce2:	2302      	movs	r3, #2
  }
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b20      	cmp	r3, #32
 8000d04:	d139      	bne.n	8000d7a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d101      	bne.n	8000d14 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000d10:	2302      	movs	r3, #2
 8000d12:	e033      	b.n	8000d7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2224      	movs	r2, #36	; 0x24
 8000d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 0201 	bic.w	r2, r2, #1
 8000d32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d42:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	021b      	lsls	r3, r3, #8
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f042 0201 	orr.w	r2, r2, #1
 8000d64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2220      	movs	r2, #32
 8000d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	e000      	b.n	8000d7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000d7a:	2302      	movs	r3, #2
  }
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40007000 	.word	0x40007000

08000da4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000db2:	d130      	bne.n	8000e16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000db4:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dc0:	d038      	beq.n	8000e34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dca:	4a1e      	ldr	r2, [pc, #120]	; (8000e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2232      	movs	r2, #50	; 0x32
 8000dd8:	fb02 f303 	mul.w	r3, r2, r3
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dde:	fba2 2303 	umull	r2, r3, r2, r3
 8000de2:	0c9b      	lsrs	r3, r3, #18
 8000de4:	3301      	adds	r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000de8:	e002      	b.n	8000df0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df0:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dfc:	d102      	bne.n	8000e04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1f2      	bne.n	8000dea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e10:	d110      	bne.n	8000e34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e00f      	b.n	8000e36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e22:	d007      	beq.n	8000e34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e2c:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	40007000 	.word	0x40007000
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	431bde83 	.word	0x431bde83

08000e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e3d4      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e62:	4ba1      	ldr	r3, [pc, #644]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f003 030c 	and.w	r3, r3, #12
 8000e6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e6c:	4b9e      	ldr	r3, [pc, #632]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0310 	and.w	r3, r3, #16
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 80e4 	beq.w	800104c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d007      	beq.n	8000e9a <HAL_RCC_OscConfig+0x4a>
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	2b0c      	cmp	r3, #12
 8000e8e:	f040 808b 	bne.w	8000fa8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	f040 8087 	bne.w	8000fa8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e9a:	4b93      	ldr	r3, [pc, #588]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d005      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x62>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e3ac      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a1a      	ldr	r2, [r3, #32]
 8000eb6:	4b8c      	ldr	r3, [pc, #560]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d004      	beq.n	8000ecc <HAL_RCC_OscConfig+0x7c>
 8000ec2:	4b89      	ldr	r3, [pc, #548]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eca:	e005      	b.n	8000ed8 <HAL_RCC_OscConfig+0x88>
 8000ecc:	4b86      	ldr	r3, [pc, #536]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ed2:	091b      	lsrs	r3, r3, #4
 8000ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d223      	bcs.n	8000f24 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fd09 	bl	80018f8 <RCC_SetFlashLatencyFromMSIRange>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e38d      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ef0:	4b7d      	ldr	r3, [pc, #500]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a7c      	ldr	r2, [pc, #496]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000ef6:	f043 0308 	orr.w	r3, r3, #8
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b7a      	ldr	r3, [pc, #488]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	4977      	ldr	r1, [pc, #476]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f0e:	4b76      	ldr	r3, [pc, #472]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	4972      	ldr	r1, [pc, #456]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	604b      	str	r3, [r1, #4]
 8000f22:	e025      	b.n	8000f70 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f24:	4b70      	ldr	r3, [pc, #448]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a6f      	ldr	r2, [pc, #444]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000f2a:	f043 0308 	orr.w	r3, r3, #8
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	4b6d      	ldr	r3, [pc, #436]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	496a      	ldr	r1, [pc, #424]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f42:	4b69      	ldr	r3, [pc, #420]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	021b      	lsls	r3, r3, #8
 8000f50:	4965      	ldr	r1, [pc, #404]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000f52:	4313      	orrs	r3, r2
 8000f54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d109      	bne.n	8000f70 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 fcc9 	bl	80018f8 <RCC_SetFlashLatencyFromMSIRange>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e34d      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f70:	f000 fc36 	bl	80017e0 <HAL_RCC_GetSysClockFreq>
 8000f74:	4602      	mov	r2, r0
 8000f76:	4b5c      	ldr	r3, [pc, #368]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	091b      	lsrs	r3, r3, #4
 8000f7c:	f003 030f 	and.w	r3, r3, #15
 8000f80:	495a      	ldr	r1, [pc, #360]	; (80010ec <HAL_RCC_OscConfig+0x29c>)
 8000f82:	5ccb      	ldrb	r3, [r1, r3]
 8000f84:	f003 031f 	and.w	r3, r3, #31
 8000f88:	fa22 f303 	lsr.w	r3, r2, r3
 8000f8c:	4a58      	ldr	r2, [pc, #352]	; (80010f0 <HAL_RCC_OscConfig+0x2a0>)
 8000f8e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f90:	4b58      	ldr	r3, [pc, #352]	; (80010f4 <HAL_RCC_OscConfig+0x2a4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fae5 	bl	8000564 <HAL_InitTick>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d052      	beq.n	800104a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	e331      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d032      	beq.n	8001016 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fb0:	4b4d      	ldr	r3, [pc, #308]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a4c      	ldr	r2, [pc, #304]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fb22 	bl	8000604 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fc4:	f7ff fb1e 	bl	8000604 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e31a      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fd6:	4b44      	ldr	r3, [pc, #272]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0f0      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fe2:	4b41      	ldr	r3, [pc, #260]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a40      	ldr	r2, [pc, #256]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000fe8:	f043 0308 	orr.w	r3, r3, #8
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	4b3e      	ldr	r3, [pc, #248]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	493b      	ldr	r1, [pc, #236]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001000:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69db      	ldr	r3, [r3, #28]
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	4936      	ldr	r1, [pc, #216]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8001010:	4313      	orrs	r3, r2
 8001012:	604b      	str	r3, [r1, #4]
 8001014:	e01a      	b.n	800104c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001016:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a33      	ldr	r2, [pc, #204]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001022:	f7ff faef 	bl	8000604 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800102a:	f7ff faeb 	bl	8000604 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e2e7      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1f0      	bne.n	800102a <HAL_RCC_OscConfig+0x1da>
 8001048:	e000      	b.n	800104c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800104a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b00      	cmp	r3, #0
 8001056:	d074      	beq.n	8001142 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	2b08      	cmp	r3, #8
 800105c:	d005      	beq.n	800106a <HAL_RCC_OscConfig+0x21a>
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	2b0c      	cmp	r3, #12
 8001062:	d10e      	bne.n	8001082 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	2b03      	cmp	r3, #3
 8001068:	d10b      	bne.n	8001082 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d064      	beq.n	8001140 <HAL_RCC_OscConfig+0x2f0>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d160      	bne.n	8001140 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e2c4      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800108a:	d106      	bne.n	800109a <HAL_RCC_OscConfig+0x24a>
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a15      	ldr	r2, [pc, #84]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 8001092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	e01d      	b.n	80010d6 <HAL_RCC_OscConfig+0x286>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010a2:	d10c      	bne.n	80010be <HAL_RCC_OscConfig+0x26e>
 80010a4:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0f      	ldr	r2, [pc, #60]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 80010aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 80010b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	e00b      	b.n	80010d6 <HAL_RCC_OscConfig+0x286>
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 80010c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_RCC_OscConfig+0x298>)
 80010d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d01c      	beq.n	8001118 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010de:	f7ff fa91 	bl	8000604 <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010e4:	e011      	b.n	800110a <HAL_RCC_OscConfig+0x2ba>
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000
 80010ec:	080023a0 	.word	0x080023a0
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fa84 	bl	8000604 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e280      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800110a:	4baf      	ldr	r3, [pc, #700]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0x2a8>
 8001116:	e014      	b.n	8001142 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001118:	f7ff fa74 	bl	8000604 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fa70 	bl	8000604 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e26c      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0x2d0>
 800113e:	e000      	b.n	8001142 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d060      	beq.n	8001210 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	2b04      	cmp	r3, #4
 8001152:	d005      	beq.n	8001160 <HAL_RCC_OscConfig+0x310>
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	2b0c      	cmp	r3, #12
 8001158:	d119      	bne.n	800118e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d116      	bne.n	800118e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001160:	4b99      	ldr	r3, [pc, #612]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001168:	2b00      	cmp	r3, #0
 800116a:	d005      	beq.n	8001178 <HAL_RCC_OscConfig+0x328>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e249      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001178:	4b93      	ldr	r3, [pc, #588]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	061b      	lsls	r3, r3, #24
 8001186:	4990      	ldr	r1, [pc, #576]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 8001188:	4313      	orrs	r3, r2
 800118a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800118c:	e040      	b.n	8001210 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d023      	beq.n	80011de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001196:	4b8c      	ldr	r3, [pc, #560]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a8b      	ldr	r2, [pc, #556]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 800119c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a2:	f7ff fa2f 	bl	8000604 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011aa:	f7ff fa2b 	bl	8000604 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e227      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011bc:	4b82      	ldr	r3, [pc, #520]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f0      	beq.n	80011aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c8:	4b7f      	ldr	r3, [pc, #508]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	061b      	lsls	r3, r3, #24
 80011d6:	497c      	ldr	r1, [pc, #496]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	604b      	str	r3, [r1, #4]
 80011dc:	e018      	b.n	8001210 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011de:	4b7a      	ldr	r3, [pc, #488]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a79      	ldr	r2, [pc, #484]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 80011e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ea:	f7ff fa0b 	bl	8000604 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f2:	f7ff fa07 	bl	8000604 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e203      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001204:	4b70      	ldr	r3, [pc, #448]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f0      	bne.n	80011f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	2b00      	cmp	r3, #0
 800121a:	d03c      	beq.n	8001296 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d01c      	beq.n	800125e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001224:	4b68      	ldr	r3, [pc, #416]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 8001226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800122a:	4a67      	ldr	r2, [pc, #412]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001234:	f7ff f9e6 	bl	8000604 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800123c:	f7ff f9e2 	bl	8000604 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e1de      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800124e:	4b5e      	ldr	r3, [pc, #376]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 8001250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0ef      	beq.n	800123c <HAL_RCC_OscConfig+0x3ec>
 800125c:	e01b      	b.n	8001296 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800125e:	4b5a      	ldr	r3, [pc, #360]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 8001260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 8001266:	f023 0301 	bic.w	r3, r3, #1
 800126a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126e:	f7ff f9c9 	bl	8000604 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001276:	f7ff f9c5 	bl	8000604 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e1c1      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001288:	4b4f      	ldr	r3, [pc, #316]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 800128a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1ef      	bne.n	8001276 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 80a6 	beq.w	80013f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012a8:	4b47      	ldr	r3, [pc, #284]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 80012aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10d      	bne.n	80012d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b4:	4b44      	ldr	r3, [pc, #272]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 80012b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b8:	4a43      	ldr	r2, [pc, #268]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 80012ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012be:	6593      	str	r3, [r2, #88]	; 0x58
 80012c0:	4b41      	ldr	r3, [pc, #260]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 80012c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012cc:	2301      	movs	r3, #1
 80012ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012d0:	4b3e      	ldr	r3, [pc, #248]	; (80013cc <HAL_RCC_OscConfig+0x57c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d118      	bne.n	800130e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012dc:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <HAL_RCC_OscConfig+0x57c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a3a      	ldr	r2, [pc, #232]	; (80013cc <HAL_RCC_OscConfig+0x57c>)
 80012e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e8:	f7ff f98c 	bl	8000604 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f0:	f7ff f988 	bl	8000604 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e184      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001302:	4b32      	ldr	r3, [pc, #200]	; (80013cc <HAL_RCC_OscConfig+0x57c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d108      	bne.n	8001328 <HAL_RCC_OscConfig+0x4d8>
 8001316:	4b2c      	ldr	r3, [pc, #176]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 8001318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800131c:	4a2a      	ldr	r2, [pc, #168]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001326:	e024      	b.n	8001372 <HAL_RCC_OscConfig+0x522>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b05      	cmp	r3, #5
 800132e:	d110      	bne.n	8001352 <HAL_RCC_OscConfig+0x502>
 8001330:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 8001332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001336:	4a24      	ldr	r2, [pc, #144]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001340:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 8001342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001346:	4a20      	ldr	r2, [pc, #128]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001350:	e00f      	b.n	8001372 <HAL_RCC_OscConfig+0x522>
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 8001354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001358:	4a1b      	ldr	r2, [pc, #108]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 800135a:	f023 0301 	bic.w	r3, r3, #1
 800135e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 8001364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001368:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 800136a:	f023 0304 	bic.w	r3, r3, #4
 800136e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d016      	beq.n	80013a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137a:	f7ff f943 	bl	8000604 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001380:	e00a      	b.n	8001398 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001382:	f7ff f93f 	bl	8000604 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001390:	4293      	cmp	r3, r2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e139      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_RCC_OscConfig+0x578>)
 800139a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0ed      	beq.n	8001382 <HAL_RCC_OscConfig+0x532>
 80013a6:	e01a      	b.n	80013de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a8:	f7ff f92c 	bl	8000604 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013ae:	e00f      	b.n	80013d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b0:	f7ff f928 	bl	8000604 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80013be:	4293      	cmp	r3, r2
 80013c0:	d906      	bls.n	80013d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e122      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013d0:	4b90      	ldr	r3, [pc, #576]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 80013d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1e8      	bne.n	80013b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013de:	7ffb      	ldrb	r3, [r7, #31]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d105      	bne.n	80013f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e4:	4b8b      	ldr	r3, [pc, #556]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 80013e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e8:	4a8a      	ldr	r2, [pc, #552]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 80013ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 8108 	beq.w	800160a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fe:	2b02      	cmp	r3, #2
 8001400:	f040 80d0 	bne.w	80015a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001404:	4b83      	ldr	r3, [pc, #524]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f003 0203 	and.w	r2, r3, #3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001414:	429a      	cmp	r2, r3
 8001416:	d130      	bne.n	800147a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	3b01      	subs	r3, #1
 8001424:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001426:	429a      	cmp	r2, r3
 8001428:	d127      	bne.n	800147a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001434:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001436:	429a      	cmp	r2, r3
 8001438:	d11f      	bne.n	800147a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001444:	2a07      	cmp	r2, #7
 8001446:	bf14      	ite	ne
 8001448:	2201      	movne	r2, #1
 800144a:	2200      	moveq	r2, #0
 800144c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800144e:	4293      	cmp	r3, r2
 8001450:	d113      	bne.n	800147a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800145c:	085b      	lsrs	r3, r3, #1
 800145e:	3b01      	subs	r3, #1
 8001460:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001462:	429a      	cmp	r2, r3
 8001464:	d109      	bne.n	800147a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	085b      	lsrs	r3, r3, #1
 8001472:	3b01      	subs	r3, #1
 8001474:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001476:	429a      	cmp	r2, r3
 8001478:	d06e      	beq.n	8001558 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	2b0c      	cmp	r3, #12
 800147e:	d069      	beq.n	8001554 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001480:	4b64      	ldr	r3, [pc, #400]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d105      	bne.n	8001498 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800148c:	4b61      	ldr	r3, [pc, #388]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0b7      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800149c:	4b5d      	ldr	r3, [pc, #372]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a5c      	ldr	r2, [pc, #368]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 80014a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014a8:	f7ff f8ac 	bl	8000604 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff f8a8 	bl	8000604 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e0a4      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014c2:	4b54      	ldr	r3, [pc, #336]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ce:	4b51      	ldr	r3, [pc, #324]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	4b51      	ldr	r3, [pc, #324]	; (8001618 <HAL_RCC_OscConfig+0x7c8>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014de:	3a01      	subs	r2, #1
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	4311      	orrs	r1, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014e8:	0212      	lsls	r2, r2, #8
 80014ea:	4311      	orrs	r1, r2
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014f0:	0852      	lsrs	r2, r2, #1
 80014f2:	3a01      	subs	r2, #1
 80014f4:	0552      	lsls	r2, r2, #21
 80014f6:	4311      	orrs	r1, r2
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014fc:	0852      	lsrs	r2, r2, #1
 80014fe:	3a01      	subs	r2, #1
 8001500:	0652      	lsls	r2, r2, #25
 8001502:	4311      	orrs	r1, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001508:	0912      	lsrs	r2, r2, #4
 800150a:	0452      	lsls	r2, r2, #17
 800150c:	430a      	orrs	r2, r1
 800150e:	4941      	ldr	r1, [pc, #260]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 8001510:	4313      	orrs	r3, r2
 8001512:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001514:	4b3f      	ldr	r3, [pc, #252]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a3e      	ldr	r2, [pc, #248]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 800151a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800151e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001520:	4b3c      	ldr	r3, [pc, #240]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	4a3b      	ldr	r2, [pc, #236]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 8001526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800152a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800152c:	f7ff f86a 	bl	8000604 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001534:	f7ff f866 	bl	8000604 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e062      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001546:	4b33      	ldr	r3, [pc, #204]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001552:	e05a      	b.n	800160a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e059      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001558:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d152      	bne.n	800160a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001564:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a2a      	ldr	r2, [pc, #168]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 800156a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800156e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001570:	4b28      	ldr	r3, [pc, #160]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	4a27      	ldr	r2, [pc, #156]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 8001576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800157a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800157c:	f7ff f842 	bl	8000604 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001584:	f7ff f83e 	bl	8000604 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e03a      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0x734>
 80015a2:	e032      	b.n	800160a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b0c      	cmp	r3, #12
 80015a8:	d02d      	beq.n	8001606 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015aa:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a19      	ldr	r2, [pc, #100]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 80015b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015b4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d105      	bne.n	80015ce <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	4a13      	ldr	r2, [pc, #76]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 80015c8:	f023 0303 	bic.w	r3, r3, #3
 80015cc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	4a10      	ldr	r2, [pc, #64]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 80015d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80015d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015dc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015de:	f7ff f811 	bl	8000604 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff f80d 	bl	8000604 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e009      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_RCC_OscConfig+0x7c4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f0      	bne.n	80015e6 <HAL_RCC_OscConfig+0x796>
 8001604:	e001      	b.n	800160a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3720      	adds	r7, #32
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40021000 	.word	0x40021000
 8001618:	f99d808c 	.word	0xf99d808c

0800161c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0c8      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001630:	4b66      	ldr	r3, [pc, #408]	; (80017cc <HAL_RCC_ClockConfig+0x1b0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d910      	bls.n	8001660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163e:	4b63      	ldr	r3, [pc, #396]	; (80017cc <HAL_RCC_ClockConfig+0x1b0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f023 0207 	bic.w	r2, r3, #7
 8001646:	4961      	ldr	r1, [pc, #388]	; (80017cc <HAL_RCC_ClockConfig+0x1b0>)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	4313      	orrs	r3, r2
 800164c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800164e:	4b5f      	ldr	r3, [pc, #380]	; (80017cc <HAL_RCC_ClockConfig+0x1b0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d001      	beq.n	8001660 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e0b0      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	d04c      	beq.n	8001706 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d107      	bne.n	8001684 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001674:	4b56      	ldr	r3, [pc, #344]	; (80017d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d121      	bne.n	80016c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e09e      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b02      	cmp	r3, #2
 800168a:	d107      	bne.n	800169c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800168c:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <HAL_RCC_ClockConfig+0x1b4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d115      	bne.n	80016c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e092      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016a4:	4b4a      	ldr	r3, [pc, #296]	; (80017d0 <HAL_RCC_ClockConfig+0x1b4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d109      	bne.n	80016c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e086      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b4:	4b46      	ldr	r3, [pc, #280]	; (80017d0 <HAL_RCC_ClockConfig+0x1b4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e07e      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016c4:	4b42      	ldr	r3, [pc, #264]	; (80017d0 <HAL_RCC_ClockConfig+0x1b4>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f023 0203 	bic.w	r2, r3, #3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	493f      	ldr	r1, [pc, #252]	; (80017d0 <HAL_RCC_ClockConfig+0x1b4>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016d6:	f7fe ff95 	bl	8000604 <HAL_GetTick>
 80016da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016de:	f7fe ff91 	bl	8000604 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e066      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f4:	4b36      	ldr	r3, [pc, #216]	; (80017d0 <HAL_RCC_ClockConfig+0x1b4>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 020c 	and.w	r2, r3, #12
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	429a      	cmp	r2, r3
 8001704:	d1eb      	bne.n	80016de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d008      	beq.n	8001724 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001712:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	492c      	ldr	r1, [pc, #176]	; (80017d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001720:	4313      	orrs	r3, r2
 8001722:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001724:	4b29      	ldr	r3, [pc, #164]	; (80017cc <HAL_RCC_ClockConfig+0x1b0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d210      	bcs.n	8001754 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b26      	ldr	r3, [pc, #152]	; (80017cc <HAL_RCC_ClockConfig+0x1b0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 0207 	bic.w	r2, r3, #7
 800173a:	4924      	ldr	r1, [pc, #144]	; (80017cc <HAL_RCC_ClockConfig+0x1b0>)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <HAL_RCC_ClockConfig+0x1b0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d001      	beq.n	8001754 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e036      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d008      	beq.n	8001772 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	4918      	ldr	r1, [pc, #96]	; (80017d0 <HAL_RCC_ClockConfig+0x1b4>)
 800176e:	4313      	orrs	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d009      	beq.n	8001792 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4910      	ldr	r1, [pc, #64]	; (80017d0 <HAL_RCC_ClockConfig+0x1b4>)
 800178e:	4313      	orrs	r3, r2
 8001790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001792:	f000 f825 	bl	80017e0 <HAL_RCC_GetSysClockFreq>
 8001796:	4602      	mov	r2, r0
 8001798:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_RCC_ClockConfig+0x1b4>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	091b      	lsrs	r3, r3, #4
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	490c      	ldr	r1, [pc, #48]	; (80017d4 <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	5ccb      	ldrb	r3, [r1, r3]
 80017a6:	f003 031f 	and.w	r3, r3, #31
 80017aa:	fa22 f303 	lsr.w	r3, r2, r3
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fed4 	bl	8000564 <HAL_InitTick>
 80017bc:	4603      	mov	r3, r0
 80017be:	72fb      	strb	r3, [r7, #11]

  return status;
 80017c0:	7afb      	ldrb	r3, [r7, #11]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40022000 	.word	0x40022000
 80017d0:	40021000 	.word	0x40021000
 80017d4:	080023a0 	.word	0x080023a0
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000004 	.word	0x20000004

080017e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ee:	4b3e      	ldr	r3, [pc, #248]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017f8:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0x34>
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	2b0c      	cmp	r3, #12
 800180c:	d121      	bne.n	8001852 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d11e      	bne.n	8001852 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001814:	4b34      	ldr	r3, [pc, #208]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d107      	bne.n	8001830 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001820:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	f003 030f 	and.w	r3, r3, #15
 800182c:	61fb      	str	r3, [r7, #28]
 800182e:	e005      	b.n	800183c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001830:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800183c:	4a2b      	ldr	r2, [pc, #172]	; (80018ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001844:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10d      	bne.n	8001868 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	2b04      	cmp	r3, #4
 8001856:	d102      	bne.n	800185e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001858:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	e004      	b.n	8001868 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	2b08      	cmp	r3, #8
 8001862:	d101      	bne.n	8001868 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001864:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001866:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	2b0c      	cmp	r3, #12
 800186c:	d134      	bne.n	80018d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800186e:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d003      	beq.n	8001886 <HAL_RCC_GetSysClockFreq+0xa6>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b03      	cmp	r3, #3
 8001882:	d003      	beq.n	800188c <HAL_RCC_GetSysClockFreq+0xac>
 8001884:	e005      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001888:	617b      	str	r3, [r7, #20]
      break;
 800188a:	e005      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800188e:	617b      	str	r3, [r7, #20]
      break;
 8001890:	e002      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	617b      	str	r3, [r7, #20]
      break;
 8001896:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	3301      	adds	r3, #1
 80018a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	0a1b      	lsrs	r3, r3, #8
 80018ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	fb02 f203 	mul.w	r2, r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	0e5b      	lsrs	r3, r3, #25
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	3301      	adds	r3, #1
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80018d8:	69bb      	ldr	r3, [r7, #24]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000
 80018ec:	080023b0 	.word	0x080023b0
 80018f0:	00f42400 	.word	0x00f42400
 80018f4:	007a1200 	.word	0x007a1200

080018f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001910:	f7ff fa3a 	bl	8000d88 <HAL_PWREx_GetVoltageRange>
 8001914:	6178      	str	r0, [r7, #20]
 8001916:	e014      	b.n	8001942 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	4a24      	ldr	r2, [pc, #144]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800191e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001922:	6593      	str	r3, [r2, #88]	; 0x58
 8001924:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001930:	f7ff fa2a 	bl	8000d88 <HAL_PWREx_GetVoltageRange>
 8001934:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	4a1d      	ldr	r2, [pc, #116]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800193c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001940:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001948:	d10b      	bne.n	8001962 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b80      	cmp	r3, #128	; 0x80
 800194e:	d919      	bls.n	8001984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2ba0      	cmp	r3, #160	; 0xa0
 8001954:	d902      	bls.n	800195c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001956:	2302      	movs	r3, #2
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	e013      	b.n	8001984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800195c:	2301      	movs	r3, #1
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	e010      	b.n	8001984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b80      	cmp	r3, #128	; 0x80
 8001966:	d902      	bls.n	800196e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001968:	2303      	movs	r3, #3
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	e00a      	b.n	8001984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b80      	cmp	r3, #128	; 0x80
 8001972:	d102      	bne.n	800197a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001974:	2302      	movs	r3, #2
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	e004      	b.n	8001984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b70      	cmp	r3, #112	; 0x70
 800197e:	d101      	bne.n	8001984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001980:	2301      	movs	r3, #1
 8001982:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f023 0207 	bic.w	r2, r3, #7
 800198c:	4909      	ldr	r1, [pc, #36]	; (80019b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d001      	beq.n	80019a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40022000 	.word	0x40022000

080019b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80019c0:	2300      	movs	r3, #0
 80019c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80019c4:	2300      	movs	r3, #0
 80019c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d041      	beq.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80019dc:	d02a      	beq.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80019de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80019e2:	d824      	bhi.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80019e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80019e8:	d008      	beq.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80019ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80019ee:	d81e      	bhi.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00a      	beq.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80019f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019f8:	d010      	beq.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80019fa:	e018      	b.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80019fc:	4b86      	ldr	r3, [pc, #536]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	4a85      	ldr	r2, [pc, #532]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a06:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001a08:	e015      	b.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fabb 	bl	8001f8c <RCCEx_PLLSAI1_Config>
 8001a16:	4603      	mov	r3, r0
 8001a18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001a1a:	e00c      	b.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3320      	adds	r3, #32
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 fba6 	bl	8002174 <RCCEx_PLLSAI2_Config>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001a2c:	e003      	b.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	74fb      	strb	r3, [r7, #19]
      break;
 8001a32:	e000      	b.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001a36:	7cfb      	ldrb	r3, [r7, #19]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10b      	bne.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a3c:	4b76      	ldr	r3, [pc, #472]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a4a:	4973      	ldr	r1, [pc, #460]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001a52:	e001      	b.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a54:	7cfb      	ldrb	r3, [r7, #19]
 8001a56:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d041      	beq.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001a6c:	d02a      	beq.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001a6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001a72:	d824      	bhi.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001a74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a78:	d008      	beq.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001a7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a7e:	d81e      	bhi.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00a      	beq.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a88:	d010      	beq.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001a8a:	e018      	b.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001a8c:	4b62      	ldr	r3, [pc, #392]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4a61      	ldr	r2, [pc, #388]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a96:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001a98:	e015      	b.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 fa73 	bl	8001f8c <RCCEx_PLLSAI1_Config>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001aaa:	e00c      	b.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3320      	adds	r3, #32
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 fb5e 	bl	8002174 <RCCEx_PLLSAI2_Config>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001abc:	e003      	b.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	74fb      	strb	r3, [r7, #19]
      break;
 8001ac2:	e000      	b.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ac6:	7cfb      	ldrb	r3, [r7, #19]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10b      	bne.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001acc:	4b52      	ldr	r3, [pc, #328]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ada:	494f      	ldr	r1, [pc, #316]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ae2:	e001      	b.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ae4:	7cfb      	ldrb	r3, [r7, #19]
 8001ae6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80a0 	beq.w	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001afa:	4b47      	ldr	r3, [pc, #284]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00d      	beq.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b10:	4b41      	ldr	r3, [pc, #260]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	4a40      	ldr	r2, [pc, #256]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b1c:	4b3e      	ldr	r3, [pc, #248]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b2c:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a3a      	ldr	r2, [pc, #232]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b38:	f7fe fd64 	bl	8000604 <HAL_GetTick>
 8001b3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001b3e:	e009      	b.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b40:	f7fe fd60 	bl	8000604 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d902      	bls.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	74fb      	strb	r3, [r7, #19]
        break;
 8001b52:	e005      	b.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001b54:	4b31      	ldr	r3, [pc, #196]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0ef      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001b60:	7cfb      	ldrb	r3, [r7, #19]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d15c      	bne.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b66:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d01f      	beq.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d019      	beq.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b84:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b90:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b96:	4a20      	ldr	r2, [pc, #128]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba6:	4a1c      	ldr	r2, [pc, #112]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001bb0:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d016      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc2:	f7fe fd1f 	bl	8000604 <HAL_GetTick>
 8001bc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc8:	e00b      	b.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7fe fd1b 	bl	8000604 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d902      	bls.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	74fb      	strb	r3, [r7, #19]
            break;
 8001be0:	e006      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0ec      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001bf0:	7cfb      	ldrb	r3, [r7, #19]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10c      	bne.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c06:	4904      	ldr	r1, [pc, #16]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001c0e:	e009      	b.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c10:	7cfb      	ldrb	r3, [r7, #19]
 8001c12:	74bb      	strb	r3, [r7, #18]
 8001c14:	e006      	b.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c20:	7cfb      	ldrb	r3, [r7, #19]
 8001c22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c24:	7c7b      	ldrb	r3, [r7, #17]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d105      	bne.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c2a:	4b9e      	ldr	r3, [pc, #632]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	4a9d      	ldr	r2, [pc, #628]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00a      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c42:	4b98      	ldr	r3, [pc, #608]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c48:	f023 0203 	bic.w	r2, r3, #3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c50:	4994      	ldr	r1, [pc, #592]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00a      	beq.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c64:	4b8f      	ldr	r3, [pc, #572]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6a:	f023 020c 	bic.w	r2, r3, #12
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c72:	498c      	ldr	r1, [pc, #560]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00a      	beq.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c86:	4b87      	ldr	r3, [pc, #540]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	4983      	ldr	r1, [pc, #524]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00a      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ca8:	4b7e      	ldr	r3, [pc, #504]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	497b      	ldr	r1, [pc, #492]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00a      	beq.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001cca:	4b76      	ldr	r3, [pc, #472]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd8:	4972      	ldr	r1, [pc, #456]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0320 	and.w	r3, r3, #32
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00a      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cec:	4b6d      	ldr	r3, [pc, #436]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	496a      	ldr	r1, [pc, #424]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00a      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d0e:	4b65      	ldr	r3, [pc, #404]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1c:	4961      	ldr	r1, [pc, #388]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00a      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001d30:	4b5c      	ldr	r3, [pc, #368]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3e:	4959      	ldr	r1, [pc, #356]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00a      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d52:	4b54      	ldr	r3, [pc, #336]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d60:	4950      	ldr	r1, [pc, #320]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00a      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d74:	4b4b      	ldr	r3, [pc, #300]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d82:	4948      	ldr	r1, [pc, #288]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00a      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d96:	4b43      	ldr	r3, [pc, #268]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	493f      	ldr	r1, [pc, #252]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d028      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001db8:	4b3a      	ldr	r3, [pc, #232]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dc6:	4937      	ldr	r1, [pc, #220]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001dd6:	d106      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001dd8:	4b32      	ldr	r3, [pc, #200]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4a31      	ldr	r2, [pc, #196]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001de2:	60d3      	str	r3, [r2, #12]
 8001de4:	e011      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001dee:	d10c      	bne.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3304      	adds	r3, #4
 8001df4:	2101      	movs	r1, #1
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f8c8 	bl	8001f8c <RCCEx_PLLSAI1_Config>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001e00:	7cfb      	ldrb	r3, [r7, #19]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8001e06:	7cfb      	ldrb	r3, [r7, #19]
 8001e08:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d028      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e16:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e24:	491f      	ldr	r1, [pc, #124]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e34:	d106      	bne.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e36:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	4a1a      	ldr	r2, [pc, #104]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e40:	60d3      	str	r3, [r2, #12]
 8001e42:	e011      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3304      	adds	r3, #4
 8001e52:	2101      	movs	r1, #1
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 f899 	bl	8001f8c <RCCEx_PLLSAI1_Config>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e5e:	7cfb      	ldrb	r3, [r7, #19]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8001e64:	7cfb      	ldrb	r3, [r7, #19]
 8001e66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d02b      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e82:	4908      	ldr	r1, [pc, #32]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e92:	d109      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4a02      	ldr	r2, [pc, #8]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e9e:	60d3      	str	r3, [r2, #12]
 8001ea0:	e014      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 f867 	bl	8001f8c <RCCEx_PLLSAI1_Config>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001ec2:	7cfb      	ldrb	r3, [r7, #19]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8001ec8:	7cfb      	ldrb	r3, [r7, #19]
 8001eca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d02f      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ede:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ee6:	4928      	ldr	r1, [pc, #160]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ef6:	d10d      	bne.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3304      	adds	r3, #4
 8001efc:	2102      	movs	r1, #2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f844 	bl	8001f8c <RCCEx_PLLSAI1_Config>
 8001f04:	4603      	mov	r3, r0
 8001f06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f08:	7cfb      	ldrb	r3, [r7, #19]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d014      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001f0e:	7cfb      	ldrb	r3, [r7, #19]
 8001f10:	74bb      	strb	r3, [r7, #18]
 8001f12:	e011      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3320      	adds	r3, #32
 8001f22:	2102      	movs	r1, #2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 f925 	bl	8002174 <RCCEx_PLLSAI2_Config>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f2e:	7cfb      	ldrb	r3, [r7, #19]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001f34:	7cfb      	ldrb	r3, [r7, #19]
 8001f36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00a      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001f44:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f52:	490d      	ldr	r1, [pc, #52]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00b      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f76:	4904      	ldr	r1, [pc, #16]	; (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001f7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40021000 	.word	0x40021000

08001f8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f9a:	4b75      	ldr	r3, [pc, #468]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d018      	beq.n	8001fd8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001fa6:	4b72      	ldr	r3, [pc, #456]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f003 0203 	and.w	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d10d      	bne.n	8001fd2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
       ||
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001fbe:	4b6c      	ldr	r3, [pc, #432]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	091b      	lsrs	r3, r3, #4
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
       ||
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d047      	beq.n	8002062 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
 8001fd6:	e044      	b.n	8002062 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d018      	beq.n	8002012 <RCCEx_PLLSAI1_Config+0x86>
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d825      	bhi.n	8002030 <RCCEx_PLLSAI1_Config+0xa4>
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d002      	beq.n	8001fee <RCCEx_PLLSAI1_Config+0x62>
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d009      	beq.n	8002000 <RCCEx_PLLSAI1_Config+0x74>
 8001fec:	e020      	b.n	8002030 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001fee:	4b60      	ldr	r3, [pc, #384]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d11d      	bne.n	8002036 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ffe:	e01a      	b.n	8002036 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002000:	4b5b      	ldr	r3, [pc, #364]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d116      	bne.n	800203a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002010:	e013      	b.n	800203a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002012:	4b57      	ldr	r3, [pc, #348]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10f      	bne.n	800203e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800201e:	4b54      	ldr	r3, [pc, #336]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d109      	bne.n	800203e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800202e:	e006      	b.n	800203e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
      break;
 8002034:	e004      	b.n	8002040 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002036:	bf00      	nop
 8002038:	e002      	b.n	8002040 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800203a:	bf00      	nop
 800203c:	e000      	b.n	8002040 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800203e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10d      	bne.n	8002062 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002046:	4b4a      	ldr	r3, [pc, #296]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6819      	ldr	r1, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	3b01      	subs	r3, #1
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	430b      	orrs	r3, r1
 800205c:	4944      	ldr	r1, [pc, #272]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 800205e:	4313      	orrs	r3, r2
 8002060:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d17d      	bne.n	8002164 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002068:	4b41      	ldr	r3, [pc, #260]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a40      	ldr	r2, [pc, #256]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 800206e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002072:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002074:	f7fe fac6 	bl	8000604 <HAL_GetTick>
 8002078:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800207a:	e009      	b.n	8002090 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800207c:	f7fe fac2 	bl	8000604 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d902      	bls.n	8002090 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	73fb      	strb	r3, [r7, #15]
        break;
 800208e:	e005      	b.n	800209c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002090:	4b37      	ldr	r3, [pc, #220]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1ef      	bne.n	800207c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d160      	bne.n	8002164 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d111      	bne.n	80020cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020a8:	4b31      	ldr	r3, [pc, #196]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80020b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6892      	ldr	r2, [r2, #8]
 80020b8:	0211      	lsls	r1, r2, #8
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68d2      	ldr	r2, [r2, #12]
 80020be:	0912      	lsrs	r2, r2, #4
 80020c0:	0452      	lsls	r2, r2, #17
 80020c2:	430a      	orrs	r2, r1
 80020c4:	492a      	ldr	r1, [pc, #168]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	610b      	str	r3, [r1, #16]
 80020ca:	e027      	b.n	800211c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d112      	bne.n	80020f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020d2:	4b27      	ldr	r3, [pc, #156]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80020da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6892      	ldr	r2, [r2, #8]
 80020e2:	0211      	lsls	r1, r2, #8
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6912      	ldr	r2, [r2, #16]
 80020e8:	0852      	lsrs	r2, r2, #1
 80020ea:	3a01      	subs	r2, #1
 80020ec:	0552      	lsls	r2, r2, #21
 80020ee:	430a      	orrs	r2, r1
 80020f0:	491f      	ldr	r1, [pc, #124]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	610b      	str	r3, [r1, #16]
 80020f6:	e011      	b.n	800211c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020f8:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002100:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6892      	ldr	r2, [r2, #8]
 8002108:	0211      	lsls	r1, r2, #8
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6952      	ldr	r2, [r2, #20]
 800210e:	0852      	lsrs	r2, r2, #1
 8002110:	3a01      	subs	r2, #1
 8002112:	0652      	lsls	r2, r2, #25
 8002114:	430a      	orrs	r2, r1
 8002116:	4916      	ldr	r1, [pc, #88]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002118:	4313      	orrs	r3, r2
 800211a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800211c:	4b14      	ldr	r3, [pc, #80]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a13      	ldr	r2, [pc, #76]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002122:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002126:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002128:	f7fe fa6c 	bl	8000604 <HAL_GetTick>
 800212c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800212e:	e009      	b.n	8002144 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002130:	f7fe fa68 	bl	8000604 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d902      	bls.n	8002144 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	73fb      	strb	r3, [r7, #15]
          break;
 8002142:	e005      	b.n	8002150 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002144:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0ef      	beq.n	8002130 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d106      	bne.n	8002164 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	4904      	ldr	r1, [pc, #16]	; (8002170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002160:	4313      	orrs	r3, r2
 8002162:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002164:	7bfb      	ldrb	r3, [r7, #15]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000

08002174 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002182:	4b6a      	ldr	r3, [pc, #424]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d018      	beq.n	80021c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800218e:	4b67      	ldr	r3, [pc, #412]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f003 0203 	and.w	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d10d      	bne.n	80021ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
       ||
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80021a6:	4b61      	ldr	r3, [pc, #388]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
       ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d047      	beq.n	800224a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	73fb      	strb	r3, [r7, #15]
 80021be:	e044      	b.n	800224a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d018      	beq.n	80021fa <RCCEx_PLLSAI2_Config+0x86>
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d825      	bhi.n	8002218 <RCCEx_PLLSAI2_Config+0xa4>
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d002      	beq.n	80021d6 <RCCEx_PLLSAI2_Config+0x62>
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d009      	beq.n	80021e8 <RCCEx_PLLSAI2_Config+0x74>
 80021d4:	e020      	b.n	8002218 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80021d6:	4b55      	ldr	r3, [pc, #340]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d11d      	bne.n	800221e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e6:	e01a      	b.n	800221e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80021e8:	4b50      	ldr	r3, [pc, #320]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d116      	bne.n	8002222 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f8:	e013      	b.n	8002222 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80021fa:	4b4c      	ldr	r3, [pc, #304]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10f      	bne.n	8002226 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002206:	4b49      	ldr	r3, [pc, #292]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002216:	e006      	b.n	8002226 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
      break;
 800221c:	e004      	b.n	8002228 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800221e:	bf00      	nop
 8002220:	e002      	b.n	8002228 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002222:	bf00      	nop
 8002224:	e000      	b.n	8002228 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002226:	bf00      	nop
    }

    if(status == HAL_OK)
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10d      	bne.n	800224a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800222e:	4b3f      	ldr	r3, [pc, #252]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6819      	ldr	r1, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	430b      	orrs	r3, r1
 8002244:	4939      	ldr	r1, [pc, #228]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002246:	4313      	orrs	r3, r2
 8002248:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d167      	bne.n	8002320 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002250:	4b36      	ldr	r3, [pc, #216]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a35      	ldr	r2, [pc, #212]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800225a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800225c:	f7fe f9d2 	bl	8000604 <HAL_GetTick>
 8002260:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002262:	e009      	b.n	8002278 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002264:	f7fe f9ce 	bl	8000604 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d902      	bls.n	8002278 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	73fb      	strb	r3, [r7, #15]
        break;
 8002276:	e005      	b.n	8002284 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002278:	4b2c      	ldr	r3, [pc, #176]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1ef      	bne.n	8002264 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d14a      	bne.n	8002320 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d111      	bne.n	80022b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002290:	4b26      	ldr	r3, [pc, #152]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6892      	ldr	r2, [r2, #8]
 80022a0:	0211      	lsls	r1, r2, #8
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68d2      	ldr	r2, [r2, #12]
 80022a6:	0912      	lsrs	r2, r2, #4
 80022a8:	0452      	lsls	r2, r2, #17
 80022aa:	430a      	orrs	r2, r1
 80022ac:	491f      	ldr	r1, [pc, #124]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	614b      	str	r3, [r1, #20]
 80022b2:	e011      	b.n	80022d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80022bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6892      	ldr	r2, [r2, #8]
 80022c4:	0211      	lsls	r1, r2, #8
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6912      	ldr	r2, [r2, #16]
 80022ca:	0852      	lsrs	r2, r2, #1
 80022cc:	3a01      	subs	r2, #1
 80022ce:	0652      	lsls	r2, r2, #25
 80022d0:	430a      	orrs	r2, r1
 80022d2:	4916      	ldr	r1, [pc, #88]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80022d8:	4b14      	ldr	r3, [pc, #80]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a13      	ldr	r2, [pc, #76]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 80022de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e4:	f7fe f98e 	bl	8000604 <HAL_GetTick>
 80022e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80022ea:	e009      	b.n	8002300 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80022ec:	f7fe f98a 	bl	8000604 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d902      	bls.n	8002300 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	73fb      	strb	r3, [r7, #15]
          break;
 80022fe:	e005      	b.n	800230c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002300:	4b0a      	ldr	r3, [pc, #40]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0ef      	beq.n	80022ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	4904      	ldr	r1, [pc, #16]	; (800232c <RCCEx_PLLSAI2_Config+0x1b8>)
 800231c:	4313      	orrs	r3, r2
 800231e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000

08002330 <__libc_init_array>:
 8002330:	b570      	push	{r4, r5, r6, lr}
 8002332:	4d0d      	ldr	r5, [pc, #52]	; (8002368 <__libc_init_array+0x38>)
 8002334:	4c0d      	ldr	r4, [pc, #52]	; (800236c <__libc_init_array+0x3c>)
 8002336:	1b64      	subs	r4, r4, r5
 8002338:	10a4      	asrs	r4, r4, #2
 800233a:	2600      	movs	r6, #0
 800233c:	42a6      	cmp	r6, r4
 800233e:	d109      	bne.n	8002354 <__libc_init_array+0x24>
 8002340:	4d0b      	ldr	r5, [pc, #44]	; (8002370 <__libc_init_array+0x40>)
 8002342:	4c0c      	ldr	r4, [pc, #48]	; (8002374 <__libc_init_array+0x44>)
 8002344:	f000 f820 	bl	8002388 <_init>
 8002348:	1b64      	subs	r4, r4, r5
 800234a:	10a4      	asrs	r4, r4, #2
 800234c:	2600      	movs	r6, #0
 800234e:	42a6      	cmp	r6, r4
 8002350:	d105      	bne.n	800235e <__libc_init_array+0x2e>
 8002352:	bd70      	pop	{r4, r5, r6, pc}
 8002354:	f855 3b04 	ldr.w	r3, [r5], #4
 8002358:	4798      	blx	r3
 800235a:	3601      	adds	r6, #1
 800235c:	e7ee      	b.n	800233c <__libc_init_array+0xc>
 800235e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002362:	4798      	blx	r3
 8002364:	3601      	adds	r6, #1
 8002366:	e7f2      	b.n	800234e <__libc_init_array+0x1e>
 8002368:	080023e0 	.word	0x080023e0
 800236c:	080023e0 	.word	0x080023e0
 8002370:	080023e0 	.word	0x080023e0
 8002374:	080023e4 	.word	0x080023e4

08002378 <memset>:
 8002378:	4402      	add	r2, r0
 800237a:	4603      	mov	r3, r0
 800237c:	4293      	cmp	r3, r2
 800237e:	d100      	bne.n	8002382 <memset+0xa>
 8002380:	4770      	bx	lr
 8002382:	f803 1b01 	strb.w	r1, [r3], #1
 8002386:	e7f9      	b.n	800237c <memset+0x4>

08002388 <_init>:
 8002388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800238a:	bf00      	nop
 800238c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800238e:	bc08      	pop	{r3}
 8002390:	469e      	mov	lr, r3
 8002392:	4770      	bx	lr

08002394 <_fini>:
 8002394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002396:	bf00      	nop
 8002398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800239a:	bc08      	pop	{r3}
 800239c:	469e      	mov	lr, r3
 800239e:	4770      	bx	lr
