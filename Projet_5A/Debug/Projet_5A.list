
Projet_5A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a88  08006a30  08006a30  00016a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000078  080074b8  080074b8  000174b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000110  08007530  08007530  00017530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007640  08007640  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000001c  08007640  08007640  00017640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800765c  0800765c  0001765c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08007660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000094  080076f4  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  080076f4  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000291db  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004594  00000000  00000000  0004929f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  0004d838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  0004e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000066a8  00000000  00000000  0004f648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016768  00000000  00000000  00055cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8592  00000000  00000000  0006c458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001649ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ead8  00000000  00000000  00164a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006a18 	.word	0x08006a18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08006a18 	.word	0x08006a18

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f001 b8c0 	b.w	8001384 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <selfrel_offset31>:
 80004e0:	6803      	ldr	r3, [r0, #0]
 80004e2:	005a      	lsls	r2, r3, #1
 80004e4:	bf4c      	ite	mi
 80004e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80004ea:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80004ee:	4418      	add	r0, r3
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <search_EIT_table>:
 80004f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80004f8:	b329      	cbz	r1, 8000546 <search_EIT_table+0x52>
 80004fa:	1e4f      	subs	r7, r1, #1
 80004fc:	4604      	mov	r4, r0
 80004fe:	4615      	mov	r5, r2
 8000500:	463e      	mov	r6, r7
 8000502:	f04f 0800 	mov.w	r8, #0
 8000506:	eb08 0106 	add.w	r1, r8, r6
 800050a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800050e:	1049      	asrs	r1, r1, #1
 8000510:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000514:	4648      	mov	r0, r9
 8000516:	f7ff ffe3 	bl	80004e0 <selfrel_offset31>
 800051a:	4603      	mov	r3, r0
 800051c:	00c8      	lsls	r0, r1, #3
 800051e:	3008      	adds	r0, #8
 8000520:	428f      	cmp	r7, r1
 8000522:	4420      	add	r0, r4
 8000524:	d009      	beq.n	800053a <search_EIT_table+0x46>
 8000526:	42ab      	cmp	r3, r5
 8000528:	d809      	bhi.n	800053e <search_EIT_table+0x4a>
 800052a:	f7ff ffd9 	bl	80004e0 <selfrel_offset31>
 800052e:	3801      	subs	r0, #1
 8000530:	42a8      	cmp	r0, r5
 8000532:	d20a      	bcs.n	800054a <search_EIT_table+0x56>
 8000534:	f101 0801 	add.w	r8, r1, #1
 8000538:	e7e5      	b.n	8000506 <search_EIT_table+0x12>
 800053a:	42ab      	cmp	r3, r5
 800053c:	d905      	bls.n	800054a <search_EIT_table+0x56>
 800053e:	4588      	cmp	r8, r1
 8000540:	d001      	beq.n	8000546 <search_EIT_table+0x52>
 8000542:	1e4e      	subs	r6, r1, #1
 8000544:	e7df      	b.n	8000506 <search_EIT_table+0x12>
 8000546:	f04f 0900 	mov.w	r9, #0
 800054a:	4648      	mov	r0, r9
 800054c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000550 <__gnu_unwind_get_pr_addr>:
 8000550:	2801      	cmp	r0, #1
 8000552:	d007      	beq.n	8000564 <__gnu_unwind_get_pr_addr+0x14>
 8000554:	2802      	cmp	r0, #2
 8000556:	d007      	beq.n	8000568 <__gnu_unwind_get_pr_addr+0x18>
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <__gnu_unwind_get_pr_addr+0x1c>)
 800055a:	2800      	cmp	r0, #0
 800055c:	bf0c      	ite	eq
 800055e:	4618      	moveq	r0, r3
 8000560:	2000      	movne	r0, #0
 8000562:	4770      	bx	lr
 8000564:	4802      	ldr	r0, [pc, #8]	; (8000570 <__gnu_unwind_get_pr_addr+0x20>)
 8000566:	4770      	bx	lr
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <__gnu_unwind_get_pr_addr+0x24>)
 800056a:	4770      	bx	lr
 800056c:	08000c15 	.word	0x08000c15
 8000570:	08000c19 	.word	0x08000c19
 8000574:	08000c1d 	.word	0x08000c1d

08000578 <get_eit_entry>:
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	4b23      	ldr	r3, [pc, #140]	; (8000608 <get_eit_entry+0x90>)
 800057c:	b083      	sub	sp, #12
 800057e:	4604      	mov	r4, r0
 8000580:	1e8d      	subs	r5, r1, #2
 8000582:	b33b      	cbz	r3, 80005d4 <get_eit_entry+0x5c>
 8000584:	a901      	add	r1, sp, #4
 8000586:	4628      	mov	r0, r5
 8000588:	f3af 8000 	nop.w
 800058c:	b1e8      	cbz	r0, 80005ca <get_eit_entry+0x52>
 800058e:	9901      	ldr	r1, [sp, #4]
 8000590:	462a      	mov	r2, r5
 8000592:	f7ff ffaf 	bl	80004f4 <search_EIT_table>
 8000596:	4601      	mov	r1, r0
 8000598:	b1b8      	cbz	r0, 80005ca <get_eit_entry+0x52>
 800059a:	f7ff ffa1 	bl	80004e0 <selfrel_offset31>
 800059e:	684b      	ldr	r3, [r1, #4]
 80005a0:	64a0      	str	r0, [r4, #72]	; 0x48
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d02b      	beq.n	80005fe <get_eit_entry+0x86>
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	f101 0004 	add.w	r0, r1, #4
 80005ac:	db23      	blt.n	80005f6 <get_eit_entry+0x7e>
 80005ae:	f7ff ff97 	bl	80004e0 <selfrel_offset31>
 80005b2:	2300      	movs	r3, #0
 80005b4:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80005b8:	6803      	ldr	r3, [r0, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db10      	blt.n	80005e0 <get_eit_entry+0x68>
 80005be:	f7ff ff8f 	bl	80004e0 <selfrel_offset31>
 80005c2:	6120      	str	r0, [r4, #16]
 80005c4:	2000      	movs	r0, #0
 80005c6:	b003      	add	sp, #12
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	2300      	movs	r3, #0
 80005cc:	2009      	movs	r0, #9
 80005ce:	6123      	str	r3, [r4, #16]
 80005d0:	b003      	add	sp, #12
 80005d2:	bd30      	pop	{r4, r5, pc}
 80005d4:	490d      	ldr	r1, [pc, #52]	; (800060c <get_eit_entry+0x94>)
 80005d6:	480e      	ldr	r0, [pc, #56]	; (8000610 <get_eit_entry+0x98>)
 80005d8:	1a09      	subs	r1, r1, r0
 80005da:	10c9      	asrs	r1, r1, #3
 80005dc:	9101      	str	r1, [sp, #4]
 80005de:	e7d7      	b.n	8000590 <get_eit_entry+0x18>
 80005e0:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80005e4:	f7ff ffb4 	bl	8000550 <__gnu_unwind_get_pr_addr>
 80005e8:	2800      	cmp	r0, #0
 80005ea:	6120      	str	r0, [r4, #16]
 80005ec:	bf14      	ite	ne
 80005ee:	2000      	movne	r0, #0
 80005f0:	2009      	moveq	r0, #9
 80005f2:	b003      	add	sp, #12
 80005f4:	bd30      	pop	{r4, r5, pc}
 80005f6:	2301      	movs	r3, #1
 80005f8:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80005fc:	e7dc      	b.n	80005b8 <get_eit_entry+0x40>
 80005fe:	2300      	movs	r3, #0
 8000600:	6123      	str	r3, [r4, #16]
 8000602:	2005      	movs	r0, #5
 8000604:	e7df      	b.n	80005c6 <get_eit_entry+0x4e>
 8000606:	bf00      	nop
 8000608:	00000000 	.word	0x00000000
 800060c:	08007640 	.word	0x08007640
 8000610:	08007530 	.word	0x08007530

08000614 <restore_non_core_regs>:
 8000614:	6803      	ldr	r3, [r0, #0]
 8000616:	07da      	lsls	r2, r3, #31
 8000618:	b510      	push	{r4, lr}
 800061a:	4604      	mov	r4, r0
 800061c:	d406      	bmi.n	800062c <restore_non_core_regs+0x18>
 800061e:	079b      	lsls	r3, r3, #30
 8000620:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000624:	d509      	bpl.n	800063a <restore_non_core_regs+0x26>
 8000626:	f000 fc4b 	bl	8000ec0 <__gnu_Unwind_Restore_VFP_D>
 800062a:	6823      	ldr	r3, [r4, #0]
 800062c:	0759      	lsls	r1, r3, #29
 800062e:	d509      	bpl.n	8000644 <restore_non_core_regs+0x30>
 8000630:	071a      	lsls	r2, r3, #28
 8000632:	d50e      	bpl.n	8000652 <restore_non_core_regs+0x3e>
 8000634:	06db      	lsls	r3, r3, #27
 8000636:	d513      	bpl.n	8000660 <restore_non_core_regs+0x4c>
 8000638:	bd10      	pop	{r4, pc}
 800063a:	f000 fc39 	bl	8000eb0 <__gnu_Unwind_Restore_VFP>
 800063e:	6823      	ldr	r3, [r4, #0]
 8000640:	0759      	lsls	r1, r3, #29
 8000642:	d4f5      	bmi.n	8000630 <restore_non_core_regs+0x1c>
 8000644:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000648:	f000 fc42 	bl	8000ed0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800064c:	6823      	ldr	r3, [r4, #0]
 800064e:	071a      	lsls	r2, r3, #28
 8000650:	d4f0      	bmi.n	8000634 <restore_non_core_regs+0x20>
 8000652:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000656:	f000 fc43 	bl	8000ee0 <__gnu_Unwind_Restore_WMMXD>
 800065a:	6823      	ldr	r3, [r4, #0]
 800065c:	06db      	lsls	r3, r3, #27
 800065e:	d4eb      	bmi.n	8000638 <restore_non_core_regs+0x24>
 8000660:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000668:	f000 bc7e 	b.w	8000f68 <__gnu_Unwind_Restore_WMMXC>

0800066c <_Unwind_decode_typeinfo_ptr.isra.0>:
 800066c:	4603      	mov	r3, r0
 800066e:	6800      	ldr	r0, [r0, #0]
 8000670:	b100      	cbz	r0, 8000674 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 8000672:	4418      	add	r0, r3
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__gnu_unwind_24bit.isra.0>:
 8000678:	2009      	movs	r0, #9
 800067a:	4770      	bx	lr

0800067c <_Unwind_DebugHook>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <unwind_phase2>:
 8000680:	b570      	push	{r4, r5, r6, lr}
 8000682:	4604      	mov	r4, r0
 8000684:	460e      	mov	r6, r1
 8000686:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000688:	4620      	mov	r0, r4
 800068a:	f7ff ff75 	bl	8000578 <get_eit_entry>
 800068e:	4605      	mov	r5, r0
 8000690:	b988      	cbnz	r0, 80006b6 <unwind_phase2+0x36>
 8000692:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000694:	6163      	str	r3, [r4, #20]
 8000696:	4632      	mov	r2, r6
 8000698:	6923      	ldr	r3, [r4, #16]
 800069a:	4621      	mov	r1, r4
 800069c:	2001      	movs	r0, #1
 800069e:	4798      	blx	r3
 80006a0:	2808      	cmp	r0, #8
 80006a2:	d0f0      	beq.n	8000686 <unwind_phase2+0x6>
 80006a4:	2807      	cmp	r0, #7
 80006a6:	d106      	bne.n	80006b6 <unwind_phase2+0x36>
 80006a8:	4628      	mov	r0, r5
 80006aa:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80006ac:	f7ff ffe6 	bl	800067c <_Unwind_DebugHook>
 80006b0:	1d30      	adds	r0, r6, #4
 80006b2:	f000 fbf1 	bl	8000e98 <__restore_core_regs>
 80006b6:	f005 fe2c 	bl	8006312 <abort>
 80006ba:	bf00      	nop

080006bc <unwind_phase2_forced>:
 80006bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006c0:	1d0d      	adds	r5, r1, #4
 80006c2:	4606      	mov	r6, r0
 80006c4:	4614      	mov	r4, r2
 80006c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c8:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80006cc:	f10d 0c0c 	add.w	ip, sp, #12
 80006d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006e4:	ad02      	add	r5, sp, #8
 80006e6:	68f7      	ldr	r7, [r6, #12]
 80006e8:	f8d6 8018 	ldr.w	r8, [r6, #24]
 80006ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80006f0:	2300      	movs	r3, #0
 80006f2:	602b      	str	r3, [r5, #0]
 80006f4:	e021      	b.n	800073a <unwind_phase2_forced+0x7e>
 80006f6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80006f8:	6173      	str	r3, [r6, #20]
 80006fa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80006fe:	4629      	mov	r1, r5
 8000700:	a87a      	add	r0, sp, #488	; 0x1e8
 8000702:	f005 fe57 	bl	80063b4 <memcpy>
 8000706:	6933      	ldr	r3, [r6, #16]
 8000708:	aa7a      	add	r2, sp, #488	; 0x1e8
 800070a:	4631      	mov	r1, r6
 800070c:	4650      	mov	r0, sl
 800070e:	4798      	blx	r3
 8000710:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000712:	e9cd 5800 	strd	r5, r8, [sp]
 8000716:	4621      	mov	r1, r4
 8000718:	646b      	str	r3, [r5, #68]	; 0x44
 800071a:	4681      	mov	r9, r0
 800071c:	4633      	mov	r3, r6
 800071e:	4632      	mov	r2, r6
 8000720:	2001      	movs	r0, #1
 8000722:	47b8      	blx	r7
 8000724:	4604      	mov	r4, r0
 8000726:	b9e8      	cbnz	r0, 8000764 <unwind_phase2_forced+0xa8>
 8000728:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800072c:	a97a      	add	r1, sp, #488	; 0x1e8
 800072e:	4628      	mov	r0, r5
 8000730:	f005 fe40 	bl	80063b4 <memcpy>
 8000734:	f1b9 0f08 	cmp.w	r9, #8
 8000738:	d11b      	bne.n	8000772 <unwind_phase2_forced+0xb6>
 800073a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800073c:	4630      	mov	r0, r6
 800073e:	f7ff ff1b 	bl	8000578 <get_eit_entry>
 8000742:	3409      	adds	r4, #9
 8000744:	fa5f fa84 	uxtb.w	sl, r4
 8000748:	4681      	mov	r9, r0
 800074a:	2800      	cmp	r0, #0
 800074c:	d0d3      	beq.n	80006f6 <unwind_phase2_forced+0x3a>
 800074e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000750:	f04a 0110 	orr.w	r1, sl, #16
 8000754:	e9cd 5800 	strd	r5, r8, [sp]
 8000758:	4632      	mov	r2, r6
 800075a:	646b      	str	r3, [r5, #68]	; 0x44
 800075c:	2001      	movs	r0, #1
 800075e:	4633      	mov	r3, r6
 8000760:	47b8      	blx	r7
 8000762:	b108      	cbz	r0, 8000768 <unwind_phase2_forced+0xac>
 8000764:	f04f 0909 	mov.w	r9, #9
 8000768:	4648      	mov	r0, r9
 800076a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800076e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000772:	f1b9 0f07 	cmp.w	r9, #7
 8000776:	d1f5      	bne.n	8000764 <unwind_phase2_forced+0xa8>
 8000778:	4620      	mov	r0, r4
 800077a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800077c:	f7ff ff7e 	bl	800067c <_Unwind_DebugHook>
 8000780:	a803      	add	r0, sp, #12
 8000782:	f000 fb89 	bl	8000e98 <__restore_core_regs>
 8000786:	bf00      	nop

08000788 <_Unwind_GetCFA>:
 8000788:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800078a:	4770      	bx	lr

0800078c <__gnu_Unwind_RaiseException>:
 800078c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000790:	640b      	str	r3, [r1, #64]	; 0x40
 8000792:	1d0e      	adds	r6, r1, #4
 8000794:	460f      	mov	r7, r1
 8000796:	4605      	mov	r5, r0
 8000798:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800079a:	b0f9      	sub	sp, #484	; 0x1e4
 800079c:	ac01      	add	r4, sp, #4
 800079e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007ac:	f04f 36ff 	mov.w	r6, #4294967295
 80007b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80007b4:	9600      	str	r6, [sp, #0]
 80007b6:	e006      	b.n	80007c6 <__gnu_Unwind_RaiseException+0x3a>
 80007b8:	692b      	ldr	r3, [r5, #16]
 80007ba:	466a      	mov	r2, sp
 80007bc:	4629      	mov	r1, r5
 80007be:	4798      	blx	r3
 80007c0:	2808      	cmp	r0, #8
 80007c2:	4604      	mov	r4, r0
 80007c4:	d108      	bne.n	80007d8 <__gnu_Unwind_RaiseException+0x4c>
 80007c6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80007c8:	4628      	mov	r0, r5
 80007ca:	f7ff fed5 	bl	8000578 <get_eit_entry>
 80007ce:	2800      	cmp	r0, #0
 80007d0:	d0f2      	beq.n	80007b8 <__gnu_Unwind_RaiseException+0x2c>
 80007d2:	2009      	movs	r0, #9
 80007d4:	b079      	add	sp, #484	; 0x1e4
 80007d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d8:	4668      	mov	r0, sp
 80007da:	f7ff ff1b 	bl	8000614 <restore_non_core_regs>
 80007de:	2c06      	cmp	r4, #6
 80007e0:	d1f7      	bne.n	80007d2 <__gnu_Unwind_RaiseException+0x46>
 80007e2:	4639      	mov	r1, r7
 80007e4:	4628      	mov	r0, r5
 80007e6:	f7ff ff4b 	bl	8000680 <unwind_phase2>
 80007ea:	bf00      	nop

080007ec <__gnu_Unwind_ForcedUnwind>:
 80007ec:	b430      	push	{r4, r5}
 80007ee:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80007f0:	60c1      	str	r1, [r0, #12]
 80007f2:	6182      	str	r2, [r0, #24]
 80007f4:	4619      	mov	r1, r3
 80007f6:	641d      	str	r5, [r3, #64]	; 0x40
 80007f8:	2200      	movs	r2, #0
 80007fa:	bc30      	pop	{r4, r5}
 80007fc:	e75e      	b.n	80006bc <unwind_phase2_forced>
 80007fe:	bf00      	nop

08000800 <__gnu_Unwind_Resume>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	68c6      	ldr	r6, [r0, #12]
 8000804:	6943      	ldr	r3, [r0, #20]
 8000806:	640b      	str	r3, [r1, #64]	; 0x40
 8000808:	b9ae      	cbnz	r6, 8000836 <__gnu_Unwind_Resume+0x36>
 800080a:	6903      	ldr	r3, [r0, #16]
 800080c:	460a      	mov	r2, r1
 800080e:	4604      	mov	r4, r0
 8000810:	460d      	mov	r5, r1
 8000812:	4601      	mov	r1, r0
 8000814:	2002      	movs	r0, #2
 8000816:	4798      	blx	r3
 8000818:	2807      	cmp	r0, #7
 800081a:	d005      	beq.n	8000828 <__gnu_Unwind_Resume+0x28>
 800081c:	2808      	cmp	r0, #8
 800081e:	d10f      	bne.n	8000840 <__gnu_Unwind_Resume+0x40>
 8000820:	4629      	mov	r1, r5
 8000822:	4620      	mov	r0, r4
 8000824:	f7ff ff2c 	bl	8000680 <unwind_phase2>
 8000828:	4630      	mov	r0, r6
 800082a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800082c:	f7ff ff26 	bl	800067c <_Unwind_DebugHook>
 8000830:	1d28      	adds	r0, r5, #4
 8000832:	f000 fb31 	bl	8000e98 <__restore_core_regs>
 8000836:	2201      	movs	r2, #1
 8000838:	f7ff ff40 	bl	80006bc <unwind_phase2_forced>
 800083c:	f005 fd69 	bl	8006312 <abort>
 8000840:	f005 fd67 	bl	8006312 <abort>

08000844 <__gnu_Unwind_Resume_or_Rethrow>:
 8000844:	68c2      	ldr	r2, [r0, #12]
 8000846:	b11a      	cbz	r2, 8000850 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000848:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800084a:	640a      	str	r2, [r1, #64]	; 0x40
 800084c:	2200      	movs	r2, #0
 800084e:	e735      	b.n	80006bc <unwind_phase2_forced>
 8000850:	e79c      	b.n	800078c <__gnu_Unwind_RaiseException>
 8000852:	bf00      	nop

08000854 <_Unwind_Complete>:
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop

08000858 <_Unwind_DeleteException>:
 8000858:	6883      	ldr	r3, [r0, #8]
 800085a:	4601      	mov	r1, r0
 800085c:	b10b      	cbz	r3, 8000862 <_Unwind_DeleteException+0xa>
 800085e:	2001      	movs	r0, #1
 8000860:	4718      	bx	r3
 8000862:	4770      	bx	lr

08000864 <_Unwind_VRS_Get>:
 8000864:	2901      	cmp	r1, #1
 8000866:	d012      	beq.n	800088e <_Unwind_VRS_Get+0x2a>
 8000868:	d809      	bhi.n	800087e <_Unwind_VRS_Get+0x1a>
 800086a:	b973      	cbnz	r3, 800088a <_Unwind_VRS_Get+0x26>
 800086c:	2a0f      	cmp	r2, #15
 800086e:	d80c      	bhi.n	800088a <_Unwind_VRS_Get+0x26>
 8000870:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000874:	4618      	mov	r0, r3
 8000876:	6853      	ldr	r3, [r2, #4]
 8000878:	9a00      	ldr	r2, [sp, #0]
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	4770      	bx	lr
 800087e:	3903      	subs	r1, #3
 8000880:	2901      	cmp	r1, #1
 8000882:	bf94      	ite	ls
 8000884:	2001      	movls	r0, #1
 8000886:	2002      	movhi	r0, #2
 8000888:	4770      	bx	lr
 800088a:	2002      	movs	r0, #2
 800088c:	4770      	bx	lr
 800088e:	4608      	mov	r0, r1
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <_Unwind_GetGR>:
 8000894:	b510      	push	{r4, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	2300      	movs	r3, #0
 800089a:	ac03      	add	r4, sp, #12
 800089c:	460a      	mov	r2, r1
 800089e:	9400      	str	r4, [sp, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	f7ff ffdf 	bl	8000864 <_Unwind_VRS_Get>
 80008a6:	9803      	ldr	r0, [sp, #12]
 80008a8:	b004      	add	sp, #16
 80008aa:	bd10      	pop	{r4, pc}

080008ac <_Unwind_VRS_Set>:
 80008ac:	2901      	cmp	r1, #1
 80008ae:	d012      	beq.n	80008d6 <_Unwind_VRS_Set+0x2a>
 80008b0:	d809      	bhi.n	80008c6 <_Unwind_VRS_Set+0x1a>
 80008b2:	b973      	cbnz	r3, 80008d2 <_Unwind_VRS_Set+0x26>
 80008b4:	2a0f      	cmp	r2, #15
 80008b6:	d80c      	bhi.n	80008d2 <_Unwind_VRS_Set+0x26>
 80008b8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80008bc:	9a00      	ldr	r2, [sp, #0]
 80008be:	6812      	ldr	r2, [r2, #0]
 80008c0:	6042      	str	r2, [r0, #4]
 80008c2:	4618      	mov	r0, r3
 80008c4:	4770      	bx	lr
 80008c6:	3903      	subs	r1, #3
 80008c8:	2901      	cmp	r1, #1
 80008ca:	bf94      	ite	ls
 80008cc:	2001      	movls	r0, #1
 80008ce:	2002      	movhi	r0, #2
 80008d0:	4770      	bx	lr
 80008d2:	2002      	movs	r0, #2
 80008d4:	4770      	bx	lr
 80008d6:	4608      	mov	r0, r1
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <_Unwind_SetGR>:
 80008dc:	b510      	push	{r4, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	2300      	movs	r3, #0
 80008e2:	ac03      	add	r4, sp, #12
 80008e4:	9203      	str	r2, [sp, #12]
 80008e6:	9400      	str	r4, [sp, #0]
 80008e8:	460a      	mov	r2, r1
 80008ea:	4619      	mov	r1, r3
 80008ec:	f7ff ffde 	bl	80008ac <_Unwind_VRS_Set>
 80008f0:	b004      	add	sp, #16
 80008f2:	bd10      	pop	{r4, pc}

080008f4 <__gnu_Unwind_Backtrace>:
 80008f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80008f8:	6413      	str	r3, [r2, #64]	; 0x40
 80008fa:	1d15      	adds	r5, r2, #4
 80008fc:	468c      	mov	ip, r1
 80008fe:	4606      	mov	r6, r0
 8000900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000902:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000906:	ac17      	add	r4, sp, #92	; 0x5c
 8000908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800090a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800090c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800090e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000910:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000912:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000916:	f04f 37ff 	mov.w	r7, #4294967295
 800091a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800091e:	4665      	mov	r5, ip
 8000920:	9716      	str	r7, [sp, #88]	; 0x58
 8000922:	e010      	b.n	8000946 <__gnu_Unwind_Backtrace+0x52>
 8000924:	f7ff ffda 	bl	80008dc <_Unwind_SetGR>
 8000928:	4629      	mov	r1, r5
 800092a:	a816      	add	r0, sp, #88	; 0x58
 800092c:	47b0      	blx	r6
 800092e:	4603      	mov	r3, r0
 8000930:	aa16      	add	r2, sp, #88	; 0x58
 8000932:	4669      	mov	r1, sp
 8000934:	2008      	movs	r0, #8
 8000936:	b983      	cbnz	r3, 800095a <__gnu_Unwind_Backtrace+0x66>
 8000938:	9b04      	ldr	r3, [sp, #16]
 800093a:	4798      	blx	r3
 800093c:	2805      	cmp	r0, #5
 800093e:	4604      	mov	r4, r0
 8000940:	d00c      	beq.n	800095c <__gnu_Unwind_Backtrace+0x68>
 8000942:	2809      	cmp	r0, #9
 8000944:	d009      	beq.n	800095a <__gnu_Unwind_Backtrace+0x66>
 8000946:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000948:	4668      	mov	r0, sp
 800094a:	f7ff fe15 	bl	8000578 <get_eit_entry>
 800094e:	4603      	mov	r3, r0
 8000950:	466a      	mov	r2, sp
 8000952:	210c      	movs	r1, #12
 8000954:	a816      	add	r0, sp, #88	; 0x58
 8000956:	2b00      	cmp	r3, #0
 8000958:	d0e4      	beq.n	8000924 <__gnu_Unwind_Backtrace+0x30>
 800095a:	2409      	movs	r4, #9
 800095c:	a816      	add	r0, sp, #88	; 0x58
 800095e:	f7ff fe59 	bl	8000614 <restore_non_core_regs>
 8000962:	4620      	mov	r0, r4
 8000964:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800096a:	bf00      	nop

0800096c <__gnu_unwind_pr_common>:
 800096c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000970:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000972:	b089      	sub	sp, #36	; 0x24
 8000974:	460d      	mov	r5, r1
 8000976:	f854 1b04 	ldr.w	r1, [r4], #4
 800097a:	9406      	str	r4, [sp, #24]
 800097c:	4617      	mov	r7, r2
 800097e:	f000 0803 	and.w	r8, r0, #3
 8000982:	461e      	mov	r6, r3
 8000984:	2b00      	cmp	r3, #0
 8000986:	d079      	beq.n	8000a7c <__gnu_unwind_pr_common+0x110>
 8000988:	0c0b      	lsrs	r3, r1, #16
 800098a:	b2da      	uxtb	r2, r3
 800098c:	0409      	lsls	r1, r1, #16
 800098e:	f88d 301d 	strb.w	r3, [sp, #29]
 8000992:	2302      	movs	r3, #2
 8000994:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000998:	9105      	str	r1, [sp, #20]
 800099a:	f88d 301c 	strb.w	r3, [sp, #28]
 800099e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80009a0:	f1b8 0f02 	cmp.w	r8, #2
 80009a4:	bf08      	it	eq
 80009a6:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80009a8:	f013 0301 	ands.w	r3, r3, #1
 80009ac:	d00c      	beq.n	80009c8 <__gnu_unwind_pr_common+0x5c>
 80009ae:	4638      	mov	r0, r7
 80009b0:	a905      	add	r1, sp, #20
 80009b2:	f000 fb73 	bl	800109c <__gnu_unwind_execute>
 80009b6:	b918      	cbnz	r0, 80009c0 <__gnu_unwind_pr_common+0x54>
 80009b8:	2008      	movs	r0, #8
 80009ba:	b009      	add	sp, #36	; 0x24
 80009bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009c0:	2009      	movs	r0, #9
 80009c2:	b009      	add	sp, #36	; 0x24
 80009c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009c8:	f8d4 a000 	ldr.w	sl, [r4]
 80009cc:	f1ba 0f00 	cmp.w	sl, #0
 80009d0:	d0ed      	beq.n	80009ae <__gnu_unwind_pr_common+0x42>
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	f000 0308 	and.w	r3, r0, #8
 80009d8:	9302      	str	r3, [sp, #8]
 80009da:	2e02      	cmp	r6, #2
 80009dc:	d04a      	beq.n	8000a74 <__gnu_unwind_pr_common+0x108>
 80009de:	f8b4 a000 	ldrh.w	sl, [r4]
 80009e2:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80009e6:	3404      	adds	r4, #4
 80009e8:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80009ea:	f029 0b01 	bic.w	fp, r9, #1
 80009ee:	210f      	movs	r1, #15
 80009f0:	4638      	mov	r0, r7
 80009f2:	4493      	add	fp, r2
 80009f4:	f7ff ff4e 	bl	8000894 <_Unwind_GetGR>
 80009f8:	4583      	cmp	fp, r0
 80009fa:	d839      	bhi.n	8000a70 <__gnu_unwind_pr_common+0x104>
 80009fc:	f02a 0201 	bic.w	r2, sl, #1
 8000a00:	445a      	add	r2, fp
 8000a02:	4282      	cmp	r2, r0
 8000a04:	bf94      	ite	ls
 8000a06:	2000      	movls	r0, #0
 8000a08:	2001      	movhi	r0, #1
 8000a0a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	f00a 0a01 	and.w	sl, sl, #1
 8000a16:	ea43 030a 	orr.w	r3, r3, sl
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d049      	beq.n	8000ab2 <__gnu_unwind_pr_common+0x146>
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d032      	beq.n	8000a88 <__gnu_unwind_pr_common+0x11c>
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1cc      	bne.n	80009c0 <__gnu_unwind_pr_common+0x54>
 8000a26:	f1b8 0f00 	cmp.w	r8, #0
 8000a2a:	d002      	beq.n	8000a32 <__gnu_unwind_pr_common+0xc6>
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	f040 80cd 	bne.w	8000bcc <__gnu_unwind_pr_common+0x260>
 8000a32:	3404      	adds	r4, #4
 8000a34:	f8d4 a000 	ldr.w	sl, [r4]
 8000a38:	f1ba 0f00 	cmp.w	sl, #0
 8000a3c:	d1cd      	bne.n	80009da <__gnu_unwind_pr_common+0x6e>
 8000a3e:	a905      	add	r1, sp, #20
 8000a40:	4638      	mov	r0, r7
 8000a42:	f000 fb2b 	bl	800109c <__gnu_unwind_execute>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	d1ba      	bne.n	80009c0 <__gnu_unwind_pr_common+0x54>
 8000a4a:	9b01      	ldr	r3, [sp, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d0b3      	beq.n	80009b8 <__gnu_unwind_pr_common+0x4c>
 8000a50:	210f      	movs	r1, #15
 8000a52:	4638      	mov	r0, r7
 8000a54:	f7ff ff1e 	bl	8000894 <_Unwind_GetGR>
 8000a58:	210e      	movs	r1, #14
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	4638      	mov	r0, r7
 8000a5e:	f7ff ff3d 	bl	80008dc <_Unwind_SetGR>
 8000a62:	4638      	mov	r0, r7
 8000a64:	4a6a      	ldr	r2, [pc, #424]	; (8000c10 <__gnu_unwind_pr_common+0x2a4>)
 8000a66:	210f      	movs	r1, #15
 8000a68:	f7ff ff38 	bl	80008dc <_Unwind_SetGR>
 8000a6c:	2007      	movs	r0, #7
 8000a6e:	e7a8      	b.n	80009c2 <__gnu_unwind_pr_common+0x56>
 8000a70:	2000      	movs	r0, #0
 8000a72:	e7ca      	b.n	8000a0a <__gnu_unwind_pr_common+0x9e>
 8000a74:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000a78:	3408      	adds	r4, #8
 8000a7a:	e7b5      	b.n	80009e8 <__gnu_unwind_pr_common+0x7c>
 8000a7c:	0209      	lsls	r1, r1, #8
 8000a7e:	2303      	movs	r3, #3
 8000a80:	9105      	str	r1, [sp, #20]
 8000a82:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000a86:	e78a      	b.n	800099e <__gnu_unwind_pr_common+0x32>
 8000a88:	6823      	ldr	r3, [r4, #0]
 8000a8a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8000a8e:	f1b8 0f00 	cmp.w	r8, #0
 8000a92:	d145      	bne.n	8000b20 <__gnu_unwind_pr_common+0x1b4>
 8000a94:	b128      	cbz	r0, 8000aa2 <__gnu_unwind_pr_common+0x136>
 8000a96:	9a02      	ldr	r2, [sp, #8]
 8000a98:	2a00      	cmp	r2, #0
 8000a9a:	d05c      	beq.n	8000b56 <__gnu_unwind_pr_common+0x1ea>
 8000a9c:	f1bb 0f00 	cmp.w	fp, #0
 8000aa0:	d074      	beq.n	8000b8c <__gnu_unwind_pr_common+0x220>
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	da00      	bge.n	8000aa8 <__gnu_unwind_pr_common+0x13c>
 8000aa6:	3404      	adds	r4, #4
 8000aa8:	f10b 0b01 	add.w	fp, fp, #1
 8000aac:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000ab0:	e7c0      	b.n	8000a34 <__gnu_unwind_pr_common+0xc8>
 8000ab2:	f1b8 0f00 	cmp.w	r8, #0
 8000ab6:	d119      	bne.n	8000aec <__gnu_unwind_pr_common+0x180>
 8000ab8:	b1b0      	cbz	r0, 8000ae8 <__gnu_unwind_pr_common+0x17c>
 8000aba:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000abe:	1c99      	adds	r1, r3, #2
 8000ac0:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000ac4:	f43f af7c 	beq.w	80009c0 <__gnu_unwind_pr_common+0x54>
 8000ac8:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000acc:	3301      	adds	r3, #1
 8000ace:	9104      	str	r1, [sp, #16]
 8000ad0:	f000 8090 	beq.w	8000bf4 <__gnu_unwind_pr_common+0x288>
 8000ad4:	1d20      	adds	r0, r4, #4
 8000ad6:	f7ff fdc9 	bl	800066c <_Unwind_decode_typeinfo_ptr.isra.0>
 8000ada:	ab04      	add	r3, sp, #16
 8000adc:	4601      	mov	r1, r0
 8000ade:	4628      	mov	r0, r5
 8000ae0:	f004 fb8e 	bl	8005200 <__cxa_type_match>
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	d15b      	bne.n	8000ba0 <__gnu_unwind_pr_common+0x234>
 8000ae8:	3408      	adds	r4, #8
 8000aea:	e7a3      	b.n	8000a34 <__gnu_unwind_pr_common+0xc8>
 8000aec:	210d      	movs	r1, #13
 8000aee:	4638      	mov	r0, r7
 8000af0:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000af4:	f7ff fece 	bl	8000894 <_Unwind_GetGR>
 8000af8:	4581      	cmp	r9, r0
 8000afa:	d1f5      	bne.n	8000ae8 <__gnu_unwind_pr_common+0x17c>
 8000afc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000afe:	429c      	cmp	r4, r3
 8000b00:	d1f2      	bne.n	8000ae8 <__gnu_unwind_pr_common+0x17c>
 8000b02:	4620      	mov	r0, r4
 8000b04:	f7ff fcec 	bl	80004e0 <selfrel_offset31>
 8000b08:	210f      	movs	r1, #15
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	4638      	mov	r0, r7
 8000b0e:	f7ff fee5 	bl	80008dc <_Unwind_SetGR>
 8000b12:	4638      	mov	r0, r7
 8000b14:	462a      	mov	r2, r5
 8000b16:	2100      	movs	r1, #0
 8000b18:	f7ff fee0 	bl	80008dc <_Unwind_SetGR>
 8000b1c:	2007      	movs	r0, #7
 8000b1e:	e750      	b.n	80009c2 <__gnu_unwind_pr_common+0x56>
 8000b20:	210d      	movs	r1, #13
 8000b22:	4638      	mov	r0, r7
 8000b24:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000b28:	f7ff feb4 	bl	8000894 <_Unwind_GetGR>
 8000b2c:	4581      	cmp	r9, r0
 8000b2e:	d001      	beq.n	8000b34 <__gnu_unwind_pr_common+0x1c8>
 8000b30:	6823      	ldr	r3, [r4, #0]
 8000b32:	e7b6      	b.n	8000aa2 <__gnu_unwind_pr_common+0x136>
 8000b34:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b36:	429c      	cmp	r4, r3
 8000b38:	d1fa      	bne.n	8000b30 <__gnu_unwind_pr_common+0x1c4>
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
 8000b42:	18a3      	adds	r3, r4, r2
 8000b44:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000b48:	636b      	str	r3, [r5, #52]	; 0x34
 8000b4a:	6823      	ldr	r3, [r4, #0]
 8000b4c:	428b      	cmp	r3, r1
 8000b4e:	db59      	blt.n	8000c04 <__gnu_unwind_pr_common+0x298>
 8000b50:	2301      	movs	r3, #1
 8000b52:	9301      	str	r3, [sp, #4]
 8000b54:	e7a8      	b.n	8000aa8 <__gnu_unwind_pr_common+0x13c>
 8000b56:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000b5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b5e:	f104 0a04 	add.w	sl, r4, #4
 8000b62:	46b0      	mov	r8, r6
 8000b64:	4691      	mov	r9, r2
 8000b66:	461e      	mov	r6, r3
 8000b68:	e00d      	b.n	8000b86 <__gnu_unwind_pr_common+0x21a>
 8000b6a:	9604      	str	r6, [sp, #16]
 8000b6c:	f7ff fd7e 	bl	800066c <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b70:	ab04      	add	r3, sp, #16
 8000b72:	4601      	mov	r1, r0
 8000b74:	2200      	movs	r2, #0
 8000b76:	4628      	mov	r0, r5
 8000b78:	f004 fb42 	bl	8005200 <__cxa_type_match>
 8000b7c:	f109 0901 	add.w	r9, r9, #1
 8000b80:	f10a 0a04 	add.w	sl, sl, #4
 8000b84:	b9e8      	cbnz	r0, 8000bc2 <__gnu_unwind_pr_common+0x256>
 8000b86:	45d9      	cmp	r9, fp
 8000b88:	4650      	mov	r0, sl
 8000b8a:	d1ee      	bne.n	8000b6a <__gnu_unwind_pr_common+0x1fe>
 8000b8c:	4638      	mov	r0, r7
 8000b8e:	210d      	movs	r1, #13
 8000b90:	f7ff fe80 	bl	8000894 <_Unwind_GetGR>
 8000b94:	9b04      	ldr	r3, [sp, #16]
 8000b96:	6228      	str	r0, [r5, #32]
 8000b98:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8000b9c:	2006      	movs	r0, #6
 8000b9e:	e710      	b.n	80009c2 <__gnu_unwind_pr_common+0x56>
 8000ba0:	4681      	mov	r9, r0
 8000ba2:	210d      	movs	r1, #13
 8000ba4:	4638      	mov	r0, r7
 8000ba6:	f7ff fe75 	bl	8000894 <_Unwind_GetGR>
 8000baa:	f1b9 0f02 	cmp.w	r9, #2
 8000bae:	6228      	str	r0, [r5, #32]
 8000bb0:	d125      	bne.n	8000bfe <__gnu_unwind_pr_common+0x292>
 8000bb2:	462b      	mov	r3, r5
 8000bb4:	9a04      	ldr	r2, [sp, #16]
 8000bb6:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000bba:	626b      	str	r3, [r5, #36]	; 0x24
 8000bbc:	62ac      	str	r4, [r5, #40]	; 0x28
 8000bbe:	2006      	movs	r0, #6
 8000bc0:	e6ff      	b.n	80009c2 <__gnu_unwind_pr_common+0x56>
 8000bc2:	4646      	mov	r6, r8
 8000bc4:	6823      	ldr	r3, [r4, #0]
 8000bc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000bca:	e76a      	b.n	8000aa2 <__gnu_unwind_pr_common+0x136>
 8000bcc:	4620      	mov	r0, r4
 8000bce:	f7ff fc87 	bl	80004e0 <selfrel_offset31>
 8000bd2:	3404      	adds	r4, #4
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	63ac      	str	r4, [r5, #56]	; 0x38
 8000bd8:	4628      	mov	r0, r5
 8000bda:	4614      	mov	r4, r2
 8000bdc:	f004 fb6e 	bl	80052bc <__cxa_begin_cleanup>
 8000be0:	2800      	cmp	r0, #0
 8000be2:	f43f aeed 	beq.w	80009c0 <__gnu_unwind_pr_common+0x54>
 8000be6:	4638      	mov	r0, r7
 8000be8:	4622      	mov	r2, r4
 8000bea:	210f      	movs	r1, #15
 8000bec:	f7ff fe76 	bl	80008dc <_Unwind_SetGR>
 8000bf0:	2007      	movs	r0, #7
 8000bf2:	e6e6      	b.n	80009c2 <__gnu_unwind_pr_common+0x56>
 8000bf4:	4638      	mov	r0, r7
 8000bf6:	210d      	movs	r1, #13
 8000bf8:	f7ff fe4c 	bl	8000894 <_Unwind_GetGR>
 8000bfc:	6228      	str	r0, [r5, #32]
 8000bfe:	9b04      	ldr	r3, [sp, #16]
 8000c00:	626b      	str	r3, [r5, #36]	; 0x24
 8000c02:	e7db      	b.n	8000bbc <__gnu_unwind_pr_common+0x250>
 8000c04:	f10b 0001 	add.w	r0, fp, #1
 8000c08:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c0c:	e77a      	b.n	8000b04 <__gnu_unwind_pr_common+0x198>
 8000c0e:	bf00      	nop
 8000c10:	08006155 	.word	0x08006155

08000c14 <__aeabi_unwind_cpp_pr0>:
 8000c14:	2300      	movs	r3, #0
 8000c16:	e6a9      	b.n	800096c <__gnu_unwind_pr_common>

08000c18 <__aeabi_unwind_cpp_pr1>:
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e6a7      	b.n	800096c <__gnu_unwind_pr_common>

08000c1c <__aeabi_unwind_cpp_pr2>:
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	e6a5      	b.n	800096c <__gnu_unwind_pr_common>

08000c20 <_Unwind_VRS_Pop>:
 8000c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c24:	4606      	mov	r6, r0
 8000c26:	b0c3      	sub	sp, #268	; 0x10c
 8000c28:	4615      	mov	r5, r2
 8000c2a:	461c      	mov	r4, r3
 8000c2c:	2904      	cmp	r1, #4
 8000c2e:	f200 80b9 	bhi.w	8000da4 <_Unwind_VRS_Pop+0x184>
 8000c32:	e8df f001 	tbb	[pc, r1]
 8000c36:	539a      	.short	0x539a
 8000c38:	29b7      	.short	0x29b7
 8000c3a:	03          	.byte	0x03
 8000c3b:	00          	.byte	0x00
 8000c3c:	2c00      	cmp	r4, #0
 8000c3e:	f040 80b1 	bne.w	8000da4 <_Unwind_VRS_Pop+0x184>
 8000c42:	2a10      	cmp	r2, #16
 8000c44:	f200 80ae 	bhi.w	8000da4 <_Unwind_VRS_Pop+0x184>
 8000c48:	6803      	ldr	r3, [r0, #0]
 8000c4a:	06d8      	lsls	r0, r3, #27
 8000c4c:	f100 80f3 	bmi.w	8000e36 <_Unwind_VRS_Pop+0x216>
 8000c50:	af20      	add	r7, sp, #128	; 0x80
 8000c52:	4638      	mov	r0, r7
 8000c54:	f000 f992 	bl	8000f7c <__gnu_Unwind_Save_WMMXC>
 8000c58:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	2401      	movs	r4, #1
 8000c5e:	fa04 f203 	lsl.w	r2, r4, r3
 8000c62:	422a      	tst	r2, r5
 8000c64:	4601      	mov	r1, r0
 8000c66:	d004      	beq.n	8000c72 <_Unwind_VRS_Pop+0x52>
 8000c68:	f851 2b04 	ldr.w	r2, [r1], #4
 8000c6c:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8000c70:	4608      	mov	r0, r1
 8000c72:	3301      	adds	r3, #1
 8000c74:	2b04      	cmp	r3, #4
 8000c76:	d1f2      	bne.n	8000c5e <_Unwind_VRS_Pop+0x3e>
 8000c78:	63b0      	str	r0, [r6, #56]	; 0x38
 8000c7a:	4638      	mov	r0, r7
 8000c7c:	f000 f974 	bl	8000f68 <__gnu_Unwind_Restore_WMMXC>
 8000c80:	2000      	movs	r0, #0
 8000c82:	b043      	add	sp, #268	; 0x10c
 8000c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c88:	2c03      	cmp	r4, #3
 8000c8a:	f040 808b 	bne.w	8000da4 <_Unwind_VRS_Pop+0x184>
 8000c8e:	b294      	uxth	r4, r2
 8000c90:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000c94:	2b10      	cmp	r3, #16
 8000c96:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000c9a:	f200 8083 	bhi.w	8000da4 <_Unwind_VRS_Pop+0x184>
 8000c9e:	6803      	ldr	r3, [r0, #0]
 8000ca0:	071f      	lsls	r7, r3, #28
 8000ca2:	f100 80d0 	bmi.w	8000e46 <_Unwind_VRS_Pop+0x226>
 8000ca6:	af20      	add	r7, sp, #128	; 0x80
 8000ca8:	4638      	mov	r0, r7
 8000caa:	f000 f93b 	bl	8000f24 <__gnu_Unwind_Save_WMMXD>
 8000cae:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000cb2:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 8000cb4:	b154      	cbz	r4, 8000ccc <_Unwind_VRS_Pop+0xac>
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	1ae8      	subs	r0, r5, r3
 8000cba:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000cbe:	00e4      	lsls	r4, r4, #3
 8000cc0:	581a      	ldr	r2, [r3, r0]
 8000cc2:	f843 2b04 	str.w	r2, [r3], #4
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d1fa      	bne.n	8000cc0 <_Unwind_VRS_Pop+0xa0>
 8000cca:	4425      	add	r5, r4
 8000ccc:	4638      	mov	r0, r7
 8000cce:	63b5      	str	r5, [r6, #56]	; 0x38
 8000cd0:	f000 f906 	bl	8000ee0 <__gnu_Unwind_Restore_WMMXD>
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	b043      	add	sp, #268	; 0x10c
 8000cd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cdc:	2c01      	cmp	r4, #1
 8000cde:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000ce2:	b295      	uxth	r5, r2
 8000ce4:	d05a      	beq.n	8000d9c <_Unwind_VRS_Pop+0x17c>
 8000ce6:	2c05      	cmp	r4, #5
 8000ce8:	d15c      	bne.n	8000da4 <_Unwind_VRS_Pop+0x184>
 8000cea:	eb08 0905 	add.w	r9, r8, r5
 8000cee:	f1b9 0f20 	cmp.w	r9, #32
 8000cf2:	d857      	bhi.n	8000da4 <_Unwind_VRS_Pop+0x184>
 8000cf4:	f1b8 0f0f 	cmp.w	r8, #15
 8000cf8:	d977      	bls.n	8000dea <_Unwind_VRS_Pop+0x1ca>
 8000cfa:	46a9      	mov	r9, r5
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	f040 8088 	bne.w	8000e12 <_Unwind_VRS_Pop+0x1f2>
 8000d02:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000d04:	b36d      	cbz	r5, 8000d62 <_Unwind_VRS_Pop+0x142>
 8000d06:	af20      	add	r7, sp, #128	; 0x80
 8000d08:	f04f 0900 	mov.w	r9, #0
 8000d0c:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000d10:	3f04      	subs	r7, #4
 8000d12:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000d16:	f853 1b04 	ldr.w	r1, [r3], #4
 8000d1a:	f847 1f04 	str.w	r1, [r7, #4]!
 8000d1e:	42ab      	cmp	r3, r5
 8000d20:	d1f9      	bne.n	8000d16 <_Unwind_VRS_Pop+0xf6>
 8000d22:	f1b9 0f00 	cmp.w	r9, #0
 8000d26:	d00f      	beq.n	8000d48 <_Unwind_VRS_Pop+0x128>
 8000d28:	466f      	mov	r7, sp
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	2910      	cmp	r1, #16
 8000d2e:	bf38      	it	cc
 8000d30:	2110      	movcc	r1, #16
 8000d32:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000d36:	3984      	subs	r1, #132	; 0x84
 8000d38:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000d3c:	f853 0b04 	ldr.w	r0, [r3], #4
 8000d40:	f841 0f04 	str.w	r0, [r1, #4]!
 8000d44:	42ab      	cmp	r3, r5
 8000d46:	d1f9      	bne.n	8000d3c <_Unwind_VRS_Pop+0x11c>
 8000d48:	2c01      	cmp	r4, #1
 8000d4a:	f000 8084 	beq.w	8000e56 <_Unwind_VRS_Pop+0x236>
 8000d4e:	f1b8 0f0f 	cmp.w	r8, #15
 8000d52:	63b5      	str	r5, [r6, #56]	; 0x38
 8000d54:	d945      	bls.n	8000de2 <_Unwind_VRS_Pop+0x1c2>
 8000d56:	f1b9 0f00 	cmp.w	r9, #0
 8000d5a:	d002      	beq.n	8000d62 <_Unwind_VRS_Pop+0x142>
 8000d5c:	4668      	mov	r0, sp
 8000d5e:	f000 f8b7 	bl	8000ed0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000d62:	2000      	movs	r0, #0
 8000d64:	b043      	add	sp, #268	; 0x10c
 8000d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d6a:	b9dc      	cbnz	r4, 8000da4 <_Unwind_VRS_Pop+0x184>
 8000d6c:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8000d6e:	4623      	mov	r3, r4
 8000d70:	2001      	movs	r0, #1
 8000d72:	b294      	uxth	r4, r2
 8000d74:	f106 0c04 	add.w	ip, r6, #4
 8000d78:	fa00 f203 	lsl.w	r2, r0, r3
 8000d7c:	4222      	tst	r2, r4
 8000d7e:	4639      	mov	r1, r7
 8000d80:	d004      	beq.n	8000d8c <_Unwind_VRS_Pop+0x16c>
 8000d82:	f851 2b04 	ldr.w	r2, [r1], #4
 8000d86:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
 8000d8a:	460f      	mov	r7, r1
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	2b10      	cmp	r3, #16
 8000d90:	d1f2      	bne.n	8000d78 <_Unwind_VRS_Pop+0x158>
 8000d92:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000d96:	d1e4      	bne.n	8000d62 <_Unwind_VRS_Pop+0x142>
 8000d98:	63b7      	str	r7, [r6, #56]	; 0x38
 8000d9a:	e004      	b.n	8000da6 <_Unwind_VRS_Pop+0x186>
 8000d9c:	eb08 0305 	add.w	r3, r8, r5
 8000da0:	2b10      	cmp	r3, #16
 8000da2:	d903      	bls.n	8000dac <_Unwind_VRS_Pop+0x18c>
 8000da4:	2002      	movs	r0, #2
 8000da6:	b043      	add	sp, #268	; 0x10c
 8000da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dac:	f1b8 0f0f 	cmp.w	r8, #15
 8000db0:	d8f8      	bhi.n	8000da4 <_Unwind_VRS_Pop+0x184>
 8000db2:	6833      	ldr	r3, [r6, #0]
 8000db4:	07da      	lsls	r2, r3, #31
 8000db6:	d506      	bpl.n	8000dc6 <_Unwind_VRS_Pop+0x1a6>
 8000db8:	4630      	mov	r0, r6
 8000dba:	f023 0303 	bic.w	r3, r3, #3
 8000dbe:	f840 3b48 	str.w	r3, [r0], #72
 8000dc2:	f000 f879 	bl	8000eb8 <__gnu_Unwind_Save_VFP>
 8000dc6:	af20      	add	r7, sp, #128	; 0x80
 8000dc8:	4638      	mov	r0, r7
 8000dca:	f000 f875 	bl	8000eb8 <__gnu_Unwind_Save_VFP>
 8000dce:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000dd0:	2d00      	cmp	r5, #0
 8000dd2:	d199      	bne.n	8000d08 <_Unwind_VRS_Pop+0xe8>
 8000dd4:	461d      	mov	r5, r3
 8000dd6:	3504      	adds	r5, #4
 8000dd8:	63b5      	str	r5, [r6, #56]	; 0x38
 8000dda:	4638      	mov	r0, r7
 8000ddc:	f000 f868 	bl	8000eb0 <__gnu_Unwind_Restore_VFP>
 8000de0:	e7bf      	b.n	8000d62 <_Unwind_VRS_Pop+0x142>
 8000de2:	a820      	add	r0, sp, #128	; 0x80
 8000de4:	f000 f86c 	bl	8000ec0 <__gnu_Unwind_Restore_VFP_D>
 8000de8:	e7b5      	b.n	8000d56 <_Unwind_VRS_Pop+0x136>
 8000dea:	f1b9 0f10 	cmp.w	r9, #16
 8000dee:	d940      	bls.n	8000e72 <_Unwind_VRS_Pop+0x252>
 8000df0:	f1a9 0910 	sub.w	r9, r9, #16
 8000df4:	6833      	ldr	r3, [r6, #0]
 8000df6:	07d9      	lsls	r1, r3, #31
 8000df8:	d508      	bpl.n	8000e0c <_Unwind_VRS_Pop+0x1ec>
 8000dfa:	f023 0301 	bic.w	r3, r3, #1
 8000dfe:	4630      	mov	r0, r6
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	f840 3b48 	str.w	r3, [r0], #72
 8000e08:	f000 f85e 	bl	8000ec8 <__gnu_Unwind_Save_VFP_D>
 8000e0c:	f1b9 0f00 	cmp.w	r9, #0
 8000e10:	d032      	beq.n	8000e78 <_Unwind_VRS_Pop+0x258>
 8000e12:	6833      	ldr	r3, [r6, #0]
 8000e14:	075a      	lsls	r2, r3, #29
 8000e16:	d420      	bmi.n	8000e5a <_Unwind_VRS_Pop+0x23a>
 8000e18:	f1b8 0f0f 	cmp.w	r8, #15
 8000e1c:	d925      	bls.n	8000e6a <_Unwind_VRS_Pop+0x24a>
 8000e1e:	466f      	mov	r7, sp
 8000e20:	4638      	mov	r0, r7
 8000e22:	f1c8 0510 	rsb	r5, r8, #16
 8000e26:	f000 f857 	bl	8000ed8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e2a:	2d00      	cmp	r5, #0
 8000e2c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000e2e:	f77f af7c 	ble.w	8000d2a <_Unwind_VRS_Pop+0x10a>
 8000e32:	af20      	add	r7, sp, #128	; 0x80
 8000e34:	e76a      	b.n	8000d0c <_Unwind_VRS_Pop+0xec>
 8000e36:	f023 0310 	bic.w	r3, r3, #16
 8000e3a:	6033      	str	r3, [r6, #0]
 8000e3c:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000e40:	f000 f89c 	bl	8000f7c <__gnu_Unwind_Save_WMMXC>
 8000e44:	e704      	b.n	8000c50 <_Unwind_VRS_Pop+0x30>
 8000e46:	f023 0308 	bic.w	r3, r3, #8
 8000e4a:	6003      	str	r3, [r0, #0]
 8000e4c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000e50:	f000 f868 	bl	8000f24 <__gnu_Unwind_Save_WMMXD>
 8000e54:	e727      	b.n	8000ca6 <_Unwind_VRS_Pop+0x86>
 8000e56:	af20      	add	r7, sp, #128	; 0x80
 8000e58:	e7bd      	b.n	8000dd6 <_Unwind_VRS_Pop+0x1b6>
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	f023 0304 	bic.w	r3, r3, #4
 8000e60:	f840 3bd0 	str.w	r3, [r0], #208
 8000e64:	f000 f838 	bl	8000ed8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e68:	e7d6      	b.n	8000e18 <_Unwind_VRS_Pop+0x1f8>
 8000e6a:	a820      	add	r0, sp, #128	; 0x80
 8000e6c:	f000 f82c 	bl	8000ec8 <__gnu_Unwind_Save_VFP_D>
 8000e70:	e7d5      	b.n	8000e1e <_Unwind_VRS_Pop+0x1fe>
 8000e72:	f04f 0900 	mov.w	r9, #0
 8000e76:	e7bd      	b.n	8000df4 <_Unwind_VRS_Pop+0x1d4>
 8000e78:	f1b8 0f0f 	cmp.w	r8, #15
 8000e7c:	f63f af41 	bhi.w	8000d02 <_Unwind_VRS_Pop+0xe2>
 8000e80:	af20      	add	r7, sp, #128	; 0x80
 8000e82:	4638      	mov	r0, r7
 8000e84:	f000 f820 	bl	8000ec8 <__gnu_Unwind_Save_VFP_D>
 8000e88:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	f47f af3c 	bne.w	8000d08 <_Unwind_VRS_Pop+0xe8>
 8000e90:	4638      	mov	r0, r7
 8000e92:	f000 f815 	bl	8000ec0 <__gnu_Unwind_Restore_VFP_D>
 8000e96:	e764      	b.n	8000d62 <_Unwind_VRS_Pop+0x142>

08000e98 <__restore_core_regs>:
 8000e98:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000e9c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000ea0:	469c      	mov	ip, r3
 8000ea2:	46a6      	mov	lr, r4
 8000ea4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000ea8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000eac:	46e5      	mov	sp, ip
 8000eae:	bd00      	pop	{pc}

08000eb0 <__gnu_Unwind_Restore_VFP>:
 8000eb0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__gnu_Unwind_Save_VFP>:
 8000eb8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <__gnu_Unwind_Restore_VFP_D>:
 8000ec0:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <__gnu_Unwind_Save_VFP_D>:
 8000ec8:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000ed0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000ed8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__gnu_Unwind_Restore_WMMXD>:
 8000ee0:	ecf0 0102 	ldfe	f0, [r0], #8
 8000ee4:	ecf0 1102 	ldfe	f1, [r0], #8
 8000ee8:	ecf0 2102 	ldfe	f2, [r0], #8
 8000eec:	ecf0 3102 	ldfe	f3, [r0], #8
 8000ef0:	ecf0 4102 	ldfe	f4, [r0], #8
 8000ef4:	ecf0 5102 	ldfe	f5, [r0], #8
 8000ef8:	ecf0 6102 	ldfe	f6, [r0], #8
 8000efc:	ecf0 7102 	ldfe	f7, [r0], #8
 8000f00:	ecf0 8102 	ldfp	f0, [r0], #8
 8000f04:	ecf0 9102 	ldfp	f1, [r0], #8
 8000f08:	ecf0 a102 	ldfp	f2, [r0], #8
 8000f0c:	ecf0 b102 	ldfp	f3, [r0], #8
 8000f10:	ecf0 c102 	ldfp	f4, [r0], #8
 8000f14:	ecf0 d102 	ldfp	f5, [r0], #8
 8000f18:	ecf0 e102 	ldfp	f6, [r0], #8
 8000f1c:	ecf0 f102 	ldfp	f7, [r0], #8
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <__gnu_Unwind_Save_WMMXD>:
 8000f24:	ece0 0102 	stfe	f0, [r0], #8
 8000f28:	ece0 1102 	stfe	f1, [r0], #8
 8000f2c:	ece0 2102 	stfe	f2, [r0], #8
 8000f30:	ece0 3102 	stfe	f3, [r0], #8
 8000f34:	ece0 4102 	stfe	f4, [r0], #8
 8000f38:	ece0 5102 	stfe	f5, [r0], #8
 8000f3c:	ece0 6102 	stfe	f6, [r0], #8
 8000f40:	ece0 7102 	stfe	f7, [r0], #8
 8000f44:	ece0 8102 	stfp	f0, [r0], #8
 8000f48:	ece0 9102 	stfp	f1, [r0], #8
 8000f4c:	ece0 a102 	stfp	f2, [r0], #8
 8000f50:	ece0 b102 	stfp	f3, [r0], #8
 8000f54:	ece0 c102 	stfp	f4, [r0], #8
 8000f58:	ece0 d102 	stfp	f5, [r0], #8
 8000f5c:	ece0 e102 	stfp	f6, [r0], #8
 8000f60:	ece0 f102 	stfp	f7, [r0], #8
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <__gnu_Unwind_Restore_WMMXC>:
 8000f68:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000f6c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000f70:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000f74:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <__gnu_Unwind_Save_WMMXC>:
 8000f7c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000f80:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000f84:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000f88:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <_Unwind_RaiseException>:
 8000f90:	46ec      	mov	ip, sp
 8000f92:	b500      	push	{lr}
 8000f94:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000f98:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000fa4:	a901      	add	r1, sp, #4
 8000fa6:	f7ff fbf1 	bl	800078c <__gnu_Unwind_RaiseException>
 8000faa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000fae:	b012      	add	sp, #72	; 0x48
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <_Unwind_Resume>:
 8000fb4:	46ec      	mov	ip, sp
 8000fb6:	b500      	push	{lr}
 8000fb8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000fbc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000fc0:	f04f 0300 	mov.w	r3, #0
 8000fc4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000fc8:	a901      	add	r1, sp, #4
 8000fca:	f7ff fc19 	bl	8000800 <__gnu_Unwind_Resume>
 8000fce:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000fd2:	b012      	add	sp, #72	; 0x48
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <_Unwind_Resume_or_Rethrow>:
 8000fd8:	46ec      	mov	ip, sp
 8000fda:	b500      	push	{lr}
 8000fdc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000fe0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000fe4:	f04f 0300 	mov.w	r3, #0
 8000fe8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000fec:	a901      	add	r1, sp, #4
 8000fee:	f7ff fc29 	bl	8000844 <__gnu_Unwind_Resume_or_Rethrow>
 8000ff2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000ff6:	b012      	add	sp, #72	; 0x48
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <_Unwind_ForcedUnwind>:
 8000ffc:	46ec      	mov	ip, sp
 8000ffe:	b500      	push	{lr}
 8001000:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001004:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001010:	ab01      	add	r3, sp, #4
 8001012:	f7ff fbeb 	bl	80007ec <__gnu_Unwind_ForcedUnwind>
 8001016:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800101a:	b012      	add	sp, #72	; 0x48
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <_Unwind_Backtrace>:
 8001020:	46ec      	mov	ip, sp
 8001022:	b500      	push	{lr}
 8001024:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001028:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800102c:	f04f 0300 	mov.w	r3, #0
 8001030:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001034:	aa01      	add	r2, sp, #4
 8001036:	f7ff fc5d 	bl	80008f4 <__gnu_Unwind_Backtrace>
 800103a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800103e:	b012      	add	sp, #72	; 0x48
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <next_unwind_byte>:
 8001044:	7a02      	ldrb	r2, [r0, #8]
 8001046:	b97a      	cbnz	r2, 8001068 <next_unwind_byte+0x24>
 8001048:	7a43      	ldrb	r3, [r0, #9]
 800104a:	b1a3      	cbz	r3, 8001076 <next_unwind_byte+0x32>
 800104c:	6842      	ldr	r2, [r0, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	b410      	push	{r4}
 8001052:	7243      	strb	r3, [r0, #9]
 8001054:	6813      	ldr	r3, [r2, #0]
 8001056:	2103      	movs	r1, #3
 8001058:	1d14      	adds	r4, r2, #4
 800105a:	7201      	strb	r1, [r0, #8]
 800105c:	021a      	lsls	r2, r3, #8
 800105e:	6044      	str	r4, [r0, #4]
 8001060:	6002      	str	r2, [r0, #0]
 8001062:	bc10      	pop	{r4}
 8001064:	0e18      	lsrs	r0, r3, #24
 8001066:	4770      	bx	lr
 8001068:	6803      	ldr	r3, [r0, #0]
 800106a:	3a01      	subs	r2, #1
 800106c:	7202      	strb	r2, [r0, #8]
 800106e:	021a      	lsls	r2, r3, #8
 8001070:	6002      	str	r2, [r0, #0]
 8001072:	0e18      	lsrs	r0, r3, #24
 8001074:	4770      	bx	lr
 8001076:	20b0      	movs	r0, #176	; 0xb0
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <_Unwind_GetGR.constprop.0>:
 800107c:	b500      	push	{lr}
 800107e:	b085      	sub	sp, #20
 8001080:	aa03      	add	r2, sp, #12
 8001082:	2300      	movs	r3, #0
 8001084:	9200      	str	r2, [sp, #0]
 8001086:	4619      	mov	r1, r3
 8001088:	220c      	movs	r2, #12
 800108a:	f7ff fbeb 	bl	8000864 <_Unwind_VRS_Get>
 800108e:	9803      	ldr	r0, [sp, #12]
 8001090:	b005      	add	sp, #20
 8001092:	f85d fb04 	ldr.w	pc, [sp], #4
 8001096:	bf00      	nop

08001098 <unwind_UCB_from_context>:
 8001098:	e7f0      	b.n	800107c <_Unwind_GetGR.constprop.0>
 800109a:	bf00      	nop

0800109c <__gnu_unwind_execute>:
 800109c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010a0:	4605      	mov	r5, r0
 80010a2:	b085      	sub	sp, #20
 80010a4:	460e      	mov	r6, r1
 80010a6:	f04f 0800 	mov.w	r8, #0
 80010aa:	4630      	mov	r0, r6
 80010ac:	f7ff ffca 	bl	8001044 <next_unwind_byte>
 80010b0:	28b0      	cmp	r0, #176	; 0xb0
 80010b2:	4604      	mov	r4, r0
 80010b4:	f000 80b2 	beq.w	800121c <__gnu_unwind_execute+0x180>
 80010b8:	0607      	lsls	r7, r0, #24
 80010ba:	d520      	bpl.n	80010fe <__gnu_unwind_execute+0x62>
 80010bc:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80010c0:	2b80      	cmp	r3, #128	; 0x80
 80010c2:	d04d      	beq.n	8001160 <__gnu_unwind_execute+0xc4>
 80010c4:	2b90      	cmp	r3, #144	; 0x90
 80010c6:	d036      	beq.n	8001136 <__gnu_unwind_execute+0x9a>
 80010c8:	2ba0      	cmp	r3, #160	; 0xa0
 80010ca:	d060      	beq.n	800118e <__gnu_unwind_execute+0xf2>
 80010cc:	2bb0      	cmp	r3, #176	; 0xb0
 80010ce:	d074      	beq.n	80011ba <__gnu_unwind_execute+0x11e>
 80010d0:	2bc0      	cmp	r3, #192	; 0xc0
 80010d2:	f000 808b 	beq.w	80011ec <__gnu_unwind_execute+0x150>
 80010d6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80010da:	2bd0      	cmp	r3, #208	; 0xd0
 80010dc:	d10b      	bne.n	80010f6 <__gnu_unwind_execute+0x5a>
 80010de:	f000 0207 	and.w	r2, r0, #7
 80010e2:	3201      	adds	r2, #1
 80010e4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80010e8:	2305      	movs	r3, #5
 80010ea:	2101      	movs	r1, #1
 80010ec:	4628      	mov	r0, r5
 80010ee:	f7ff fd97 	bl	8000c20 <_Unwind_VRS_Pop>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d0d9      	beq.n	80010aa <__gnu_unwind_execute+0xe>
 80010f6:	2009      	movs	r0, #9
 80010f8:	b005      	add	sp, #20
 80010fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010fe:	f10d 090c 	add.w	r9, sp, #12
 8001102:	2300      	movs	r3, #0
 8001104:	4619      	mov	r1, r3
 8001106:	0087      	lsls	r7, r0, #2
 8001108:	f8cd 9000 	str.w	r9, [sp]
 800110c:	220d      	movs	r2, #13
 800110e:	4628      	mov	r0, r5
 8001110:	f7ff fba8 	bl	8000864 <_Unwind_VRS_Get>
 8001114:	b2ff      	uxtb	r7, r7
 8001116:	9b03      	ldr	r3, [sp, #12]
 8001118:	f8cd 9000 	str.w	r9, [sp]
 800111c:	3704      	adds	r7, #4
 800111e:	0660      	lsls	r0, r4, #25
 8001120:	bf4c      	ite	mi
 8001122:	1bdf      	submi	r7, r3, r7
 8001124:	18ff      	addpl	r7, r7, r3
 8001126:	2300      	movs	r3, #0
 8001128:	4619      	mov	r1, r3
 800112a:	220d      	movs	r2, #13
 800112c:	4628      	mov	r0, r5
 800112e:	9703      	str	r7, [sp, #12]
 8001130:	f7ff fbbc 	bl	80008ac <_Unwind_VRS_Set>
 8001134:	e7b9      	b.n	80010aa <__gnu_unwind_execute+0xe>
 8001136:	f000 030d 	and.w	r3, r0, #13
 800113a:	2b0d      	cmp	r3, #13
 800113c:	d0db      	beq.n	80010f6 <__gnu_unwind_execute+0x5a>
 800113e:	af03      	add	r7, sp, #12
 8001140:	2300      	movs	r3, #0
 8001142:	f000 020f 	and.w	r2, r0, #15
 8001146:	4619      	mov	r1, r3
 8001148:	9700      	str	r7, [sp, #0]
 800114a:	4628      	mov	r0, r5
 800114c:	f7ff fb8a 	bl	8000864 <_Unwind_VRS_Get>
 8001150:	2300      	movs	r3, #0
 8001152:	9700      	str	r7, [sp, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	220d      	movs	r2, #13
 8001158:	4628      	mov	r0, r5
 800115a:	f7ff fba7 	bl	80008ac <_Unwind_VRS_Set>
 800115e:	e7a4      	b.n	80010aa <__gnu_unwind_execute+0xe>
 8001160:	4630      	mov	r0, r6
 8001162:	f7ff ff6f 	bl	8001044 <next_unwind_byte>
 8001166:	0224      	lsls	r4, r4, #8
 8001168:	4320      	orrs	r0, r4
 800116a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800116e:	d0c2      	beq.n	80010f6 <__gnu_unwind_execute+0x5a>
 8001170:	0104      	lsls	r4, r0, #4
 8001172:	2300      	movs	r3, #0
 8001174:	b2a2      	uxth	r2, r4
 8001176:	4619      	mov	r1, r3
 8001178:	4628      	mov	r0, r5
 800117a:	f7ff fd51 	bl	8000c20 <_Unwind_VRS_Pop>
 800117e:	2800      	cmp	r0, #0
 8001180:	d1b9      	bne.n	80010f6 <__gnu_unwind_execute+0x5a>
 8001182:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001186:	bf18      	it	ne
 8001188:	f04f 0801 	movne.w	r8, #1
 800118c:	e78d      	b.n	80010aa <__gnu_unwind_execute+0xe>
 800118e:	43c2      	mvns	r2, r0
 8001190:	f002 0307 	and.w	r3, r2, #7
 8001194:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001198:	411a      	asrs	r2, r3
 800119a:	0701      	lsls	r1, r0, #28
 800119c:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80011a0:	f04f 0300 	mov.w	r3, #0
 80011a4:	bf48      	it	mi
 80011a6:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80011aa:	4619      	mov	r1, r3
 80011ac:	4628      	mov	r0, r5
 80011ae:	f7ff fd37 	bl	8000c20 <_Unwind_VRS_Pop>
 80011b2:	2800      	cmp	r0, #0
 80011b4:	f43f af79 	beq.w	80010aa <__gnu_unwind_execute+0xe>
 80011b8:	e79d      	b.n	80010f6 <__gnu_unwind_execute+0x5a>
 80011ba:	28b1      	cmp	r0, #177	; 0xb1
 80011bc:	d033      	beq.n	8001226 <__gnu_unwind_execute+0x18a>
 80011be:	28b2      	cmp	r0, #178	; 0xb2
 80011c0:	f000 808b 	beq.w	80012da <__gnu_unwind_execute+0x23e>
 80011c4:	28b3      	cmp	r0, #179	; 0xb3
 80011c6:	d039      	beq.n	800123c <__gnu_unwind_execute+0x1a0>
 80011c8:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80011cc:	2bb4      	cmp	r3, #180	; 0xb4
 80011ce:	d092      	beq.n	80010f6 <__gnu_unwind_execute+0x5a>
 80011d0:	f000 0207 	and.w	r2, r0, #7
 80011d4:	3201      	adds	r2, #1
 80011d6:	2301      	movs	r3, #1
 80011d8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011dc:	4619      	mov	r1, r3
 80011de:	4628      	mov	r0, r5
 80011e0:	f7ff fd1e 	bl	8000c20 <_Unwind_VRS_Pop>
 80011e4:	2800      	cmp	r0, #0
 80011e6:	f43f af60 	beq.w	80010aa <__gnu_unwind_execute+0xe>
 80011ea:	e784      	b.n	80010f6 <__gnu_unwind_execute+0x5a>
 80011ec:	28c6      	cmp	r0, #198	; 0xc6
 80011ee:	d042      	beq.n	8001276 <__gnu_unwind_execute+0x1da>
 80011f0:	28c7      	cmp	r0, #199	; 0xc7
 80011f2:	d04c      	beq.n	800128e <__gnu_unwind_execute+0x1f2>
 80011f4:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80011f8:	2bc0      	cmp	r3, #192	; 0xc0
 80011fa:	d05b      	beq.n	80012b4 <__gnu_unwind_execute+0x218>
 80011fc:	28c8      	cmp	r0, #200	; 0xc8
 80011fe:	d060      	beq.n	80012c2 <__gnu_unwind_execute+0x226>
 8001200:	28c9      	cmp	r0, #201	; 0xc9
 8001202:	f47f af78 	bne.w	80010f6 <__gnu_unwind_execute+0x5a>
 8001206:	4630      	mov	r0, r6
 8001208:	f7ff ff1c 	bl	8001044 <next_unwind_byte>
 800120c:	0302      	lsls	r2, r0, #12
 800120e:	f000 000f 	and.w	r0, r0, #15
 8001212:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001216:	3001      	adds	r0, #1
 8001218:	4302      	orrs	r2, r0
 800121a:	e765      	b.n	80010e8 <__gnu_unwind_execute+0x4c>
 800121c:	f1b8 0f00 	cmp.w	r8, #0
 8001220:	d018      	beq.n	8001254 <__gnu_unwind_execute+0x1b8>
 8001222:	2000      	movs	r0, #0
 8001224:	e768      	b.n	80010f8 <__gnu_unwind_execute+0x5c>
 8001226:	4630      	mov	r0, r6
 8001228:	f7ff ff0c 	bl	8001044 <next_unwind_byte>
 800122c:	4602      	mov	r2, r0
 800122e:	2800      	cmp	r0, #0
 8001230:	f43f af61 	beq.w	80010f6 <__gnu_unwind_execute+0x5a>
 8001234:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001238:	d0d0      	beq.n	80011dc <__gnu_unwind_execute+0x140>
 800123a:	e75c      	b.n	80010f6 <__gnu_unwind_execute+0x5a>
 800123c:	4630      	mov	r0, r6
 800123e:	f7ff ff01 	bl	8001044 <next_unwind_byte>
 8001242:	0301      	lsls	r1, r0, #12
 8001244:	f000 000f 	and.w	r0, r0, #15
 8001248:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800124c:	1c42      	adds	r2, r0, #1
 800124e:	2301      	movs	r3, #1
 8001250:	430a      	orrs	r2, r1
 8001252:	e7c3      	b.n	80011dc <__gnu_unwind_execute+0x140>
 8001254:	ac03      	add	r4, sp, #12
 8001256:	4643      	mov	r3, r8
 8001258:	220e      	movs	r2, #14
 800125a:	4641      	mov	r1, r8
 800125c:	9400      	str	r4, [sp, #0]
 800125e:	4628      	mov	r0, r5
 8001260:	f7ff fb00 	bl	8000864 <_Unwind_VRS_Get>
 8001264:	9400      	str	r4, [sp, #0]
 8001266:	4628      	mov	r0, r5
 8001268:	4643      	mov	r3, r8
 800126a:	220f      	movs	r2, #15
 800126c:	4641      	mov	r1, r8
 800126e:	f7ff fb1d 	bl	80008ac <_Unwind_VRS_Set>
 8001272:	4640      	mov	r0, r8
 8001274:	e740      	b.n	80010f8 <__gnu_unwind_execute+0x5c>
 8001276:	4630      	mov	r0, r6
 8001278:	f7ff fee4 	bl	8001044 <next_unwind_byte>
 800127c:	0301      	lsls	r1, r0, #12
 800127e:	f000 000f 	and.w	r0, r0, #15
 8001282:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001286:	1c42      	adds	r2, r0, #1
 8001288:	2303      	movs	r3, #3
 800128a:	430a      	orrs	r2, r1
 800128c:	e7a6      	b.n	80011dc <__gnu_unwind_execute+0x140>
 800128e:	4630      	mov	r0, r6
 8001290:	f7ff fed8 	bl	8001044 <next_unwind_byte>
 8001294:	4602      	mov	r2, r0
 8001296:	2800      	cmp	r0, #0
 8001298:	f43f af2d 	beq.w	80010f6 <__gnu_unwind_execute+0x5a>
 800129c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80012a0:	f47f af29 	bne.w	80010f6 <__gnu_unwind_execute+0x5a>
 80012a4:	2104      	movs	r1, #4
 80012a6:	4628      	mov	r0, r5
 80012a8:	f7ff fcba 	bl	8000c20 <_Unwind_VRS_Pop>
 80012ac:	2800      	cmp	r0, #0
 80012ae:	f43f aefc 	beq.w	80010aa <__gnu_unwind_execute+0xe>
 80012b2:	e720      	b.n	80010f6 <__gnu_unwind_execute+0x5a>
 80012b4:	f000 020f 	and.w	r2, r0, #15
 80012b8:	3201      	adds	r2, #1
 80012ba:	2303      	movs	r3, #3
 80012bc:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80012c0:	e78c      	b.n	80011dc <__gnu_unwind_execute+0x140>
 80012c2:	4630      	mov	r0, r6
 80012c4:	f7ff febe 	bl	8001044 <next_unwind_byte>
 80012c8:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80012cc:	f000 030f 	and.w	r3, r0, #15
 80012d0:	3210      	adds	r2, #16
 80012d2:	3301      	adds	r3, #1
 80012d4:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80012d8:	e706      	b.n	80010e8 <__gnu_unwind_execute+0x4c>
 80012da:	2300      	movs	r3, #0
 80012dc:	f10d 090c 	add.w	r9, sp, #12
 80012e0:	220d      	movs	r2, #13
 80012e2:	4619      	mov	r1, r3
 80012e4:	f8cd 9000 	str.w	r9, [sp]
 80012e8:	4628      	mov	r0, r5
 80012ea:	f7ff fabb 	bl	8000864 <_Unwind_VRS_Get>
 80012ee:	4630      	mov	r0, r6
 80012f0:	f7ff fea8 	bl	8001044 <next_unwind_byte>
 80012f4:	0602      	lsls	r2, r0, #24
 80012f6:	f04f 0702 	mov.w	r7, #2
 80012fa:	d50c      	bpl.n	8001316 <__gnu_unwind_execute+0x27a>
 80012fc:	9b03      	ldr	r3, [sp, #12]
 80012fe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001302:	40b8      	lsls	r0, r7
 8001304:	4403      	add	r3, r0
 8001306:	4630      	mov	r0, r6
 8001308:	9303      	str	r3, [sp, #12]
 800130a:	f7ff fe9b 	bl	8001044 <next_unwind_byte>
 800130e:	0603      	lsls	r3, r0, #24
 8001310:	f107 0707 	add.w	r7, r7, #7
 8001314:	d4f2      	bmi.n	80012fc <__gnu_unwind_execute+0x260>
 8001316:	9b03      	ldr	r3, [sp, #12]
 8001318:	f8cd 9000 	str.w	r9, [sp]
 800131c:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8001320:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8001324:	40bc      	lsls	r4, r7
 8001326:	2300      	movs	r3, #0
 8001328:	4414      	add	r4, r2
 800132a:	4619      	mov	r1, r3
 800132c:	220d      	movs	r2, #13
 800132e:	4628      	mov	r0, r5
 8001330:	9403      	str	r4, [sp, #12]
 8001332:	f7ff fabb 	bl	80008ac <_Unwind_VRS_Set>
 8001336:	e6b8      	b.n	80010aa <__gnu_unwind_execute+0xe>

08001338 <__gnu_unwind_frame>:
 8001338:	b510      	push	{r4, lr}
 800133a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800133c:	b084      	sub	sp, #16
 800133e:	6853      	ldr	r3, [r2, #4]
 8001340:	2403      	movs	r4, #3
 8001342:	f88d 400c 	strb.w	r4, [sp, #12]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	f102 0408 	add.w	r4, r2, #8
 800134c:	4608      	mov	r0, r1
 800134e:	79d2      	ldrb	r2, [r2, #7]
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	a901      	add	r1, sp, #4
 8001354:	9402      	str	r4, [sp, #8]
 8001356:	f88d 200d 	strb.w	r2, [sp, #13]
 800135a:	f7ff fe9f 	bl	800109c <__gnu_unwind_execute>
 800135e:	b004      	add	sp, #16
 8001360:	bd10      	pop	{r4, pc}
 8001362:	bf00      	nop

08001364 <_Unwind_GetRegionStart>:
 8001364:	b508      	push	{r3, lr}
 8001366:	f7ff fe97 	bl	8001098 <unwind_UCB_from_context>
 800136a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800136c:	bd08      	pop	{r3, pc}
 800136e:	bf00      	nop

08001370 <_Unwind_GetLanguageSpecificData>:
 8001370:	b508      	push	{r3, lr}
 8001372:	f7ff fe91 	bl	8001098 <unwind_UCB_from_context>
 8001376:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001378:	79c3      	ldrb	r3, [r0, #7]
 800137a:	3302      	adds	r3, #2
 800137c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001380:	bd08      	pop	{r3, pc}
 8001382:	bf00      	nop

08001384 <__aeabi_idiv0>:
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop

08001388 <_ZN4PageC1Ev>:
	int num 		= -1;
	string title 	= "";
	string text 	= "";
	int nb_sub_page	= 0;
	Sub_Page* sub;
}Page;
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f04f 32ff 	mov.w	r2, #4294967295
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	1d1c      	adds	r4, r3, #4
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 fb5b 	bl	8005a5c <_ZNSaIcEC1Ev>
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	461a      	mov	r2, r3
 80013ac:	491c      	ldr	r1, [pc, #112]	; (8001420 <_ZN4PageC1Ev+0x98>)
 80013ae:	4620      	mov	r0, r4
 80013b0:	f004 fe28 	bl	8006004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	4618      	mov	r0, r3
 80013ba:	f004 fb50 	bl	8005a5e <_ZNSaIcED1Ev>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f103 041c 	add.w	r4, r3, #28
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4618      	mov	r0, r3
 80013ca:	f004 fb47 	bl	8005a5c <_ZNSaIcEC1Ev>
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	461a      	mov	r2, r3
 80013d4:	4912      	ldr	r1, [pc, #72]	; (8001420 <_ZN4PageC1Ev+0x98>)
 80013d6:	4620      	mov	r0, r4
 80013d8:	f004 fe14 	bl	8006004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	4618      	mov	r0, r3
 80013e2:	f004 fb3c 	bl	8005a5e <_ZNSaIcED1Ev>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	635a      	str	r2, [r3, #52]	; 0x34
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	e012      	b.n	8001416 <_ZN4PageC1Ev+0x8e>
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	4618      	mov	r0, r3
 80013f6:	f004 fb32 	bl	8005a5e <_ZNSaIcED1Ev>
 80013fa:	f003 fedd 	bl	80051b8 <__cxa_end_cleanup>
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	4618      	mov	r0, r3
 8001404:	f004 fb2b 	bl	8005a5e <_ZNSaIcED1Ev>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3304      	adds	r3, #4
 800140c:	4618      	mov	r0, r3
 800140e:	f004 fd3c 	bl	8005e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001412:	f003 fed1 	bl	80051b8 <__cxa_end_cleanup>
 8001416:	4618      	mov	r0, r3
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bd90      	pop	{r4, r7, pc}
 800141e:	bf00      	nop
 8001420:	08006a30 	.word	0x08006a30

08001424 <_ZN4PageD1Ev>:
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	331c      	adds	r3, #28
 8001430:	4618      	mov	r0, r3
 8001432:	f004 fd2a 	bl	8005e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3304      	adds	r3, #4
 800143a:	4618      	mov	r0, r3
 800143c:	f004 fd25 	bl	8005e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <_ZN2UIC1E7Display10theEncoder>:

}

// ########### 		CLASS		###############
// ---- CONSTRUCTORS ------
UI::UI(Display display,theEncoder button):display(display),button(button){
 800144a:	b084      	sub	sp, #16
 800144c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800145a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	731a      	strb	r2, [r3, #12]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	735a      	strb	r2, [r3, #13]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	739a      	strb	r2, [r3, #14]
 8001482:	20bc      	movs	r0, #188	; 0xbc
 8001484:	f004 fa50 	bl	8005928 <_Znaj>
 8001488:	4603      	mov	r3, r0
 800148a:	461c      	mov	r4, r3
 800148c:	1d23      	adds	r3, r4, #4
 800148e:	3b04      	subs	r3, #4
 8001490:	223c      	movs	r2, #60	; 0x3c
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	1d23      	adds	r3, r4, #4
 8001496:	2203      	movs	r2, #3
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	f104 0608 	add.w	r6, r4, #8
 800149e:	2502      	movs	r5, #2
 80014a0:	46b0      	mov	r8, r6
 80014a2:	2d00      	cmp	r5, #0
 80014a4:	db06      	blt.n	80014b4 <_ZN2UIC1E7Display10theEncoder+0x6a>
 80014a6:	4640      	mov	r0, r8
 80014a8:	f7ff ff6e 	bl	8001388 <_ZN4PageC1Ev>
 80014ac:	f108 083c 	add.w	r8, r8, #60	; 0x3c
 80014b0:	3d01      	subs	r5, #1
 80014b2:	e7f6      	b.n	80014a2 <_ZN2UIC1E7Display10theEncoder+0x58>
 80014b4:	f104 0208 	add.w	r2, r4, #8
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	611a      	str	r2, [r3, #16]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3314      	adds	r3, #20
 80014c0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80014c4:	2274      	movs	r2, #116	; 0x74
 80014c6:	4618      	mov	r0, r3
 80014c8:	f004 ff74 	bl	80063b4 <memcpy>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f103 0488 	add.w	r4, r3, #136	; 0x88
 80014d2:	f107 0598 	add.w	r5, r7, #152	; 0x98
 80014d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	init_menu();
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f840 	bl	8001568 <_ZN2UI9init_menuEv>
}
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	e016      	b.n	800151a <_ZN2UIC1E7Display10theEncoder+0xd0>
 80014ec:	2e00      	cmp	r6, #0
 80014ee:	d00e      	beq.n	800150e <_ZN2UIC1E7Display10theEncoder+0xc4>
UI::UI(Display display,theEncoder button):display(display),button(button){
 80014f0:	f1c5 0302 	rsb	r3, r5, #2
 80014f4:	461a      	mov	r2, r3
 80014f6:	4613      	mov	r3, r2
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	1a9b      	subs	r3, r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	18f5      	adds	r5, r6, r3
 8001500:	42b5      	cmp	r5, r6
 8001502:	d004      	beq.n	800150e <_ZN2UIC1E7Display10theEncoder+0xc4>
 8001504:	3d3c      	subs	r5, #60	; 0x3c
 8001506:	4628      	mov	r0, r5
 8001508:	f7ff ff8c 	bl	8001424 <_ZN4PageD1Ev>
 800150c:	e7f8      	b.n	8001500 <_ZN2UIC1E7Display10theEncoder+0xb6>
 800150e:	21bc      	movs	r1, #188	; 0xbc
 8001510:	4620      	mov	r0, r4
 8001512:	f003 fe3b 	bl	800518c <_ZdaPvj>
 8001516:	f003 fe4f 	bl	80051b8 <__cxa_end_cleanup>
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001524:	b004      	add	sp, #16
 8001526:	4770      	bx	lr

08001528 <_ZN8Sub_PageC1Ev>:
}Sub_Page;
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	721a      	strb	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	725a      	strb	r2, [r3, #9]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	330c      	adds	r3, #12
 800154e:	4618      	mov	r0, r3
 8001550:	f004 fc94 	bl	8005e7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	625a      	str	r2, [r3, #36]	; 0x24
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <_ZN2UI9init_menuEv>:

/* @brief 	: This function is called at the initialization to construct the different pages of the menu
 * @args  	: NONE
 * @retval	: NONE
 */
void UI::init_menu(){
 8001568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	int c_page = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
	int c_sub_page = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	613b      	str	r3, [r7, #16]
	// PAGE MENU
		menu[c_page].num 			= c_page;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6919      	ldr	r1, [r3, #16]
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	4613      	mov	r3, r2
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	1a9b      	subs	r3, r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	601a      	str	r2, [r3, #0]
		menu[c_page].title 			= "Menu";
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6919      	ldr	r1, [r3, #16]
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	4613      	mov	r3, r2
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	1a9b      	subs	r3, r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	3304      	adds	r3, #4
 800159e:	493a      	ldr	r1, [pc, #232]	; (8001688 <_ZN2UI9init_menuEv+0x120>)
 80015a0:	4618      	mov	r0, r3
 80015a2:	f004 fd06 	bl	8005fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		menu[c_page].text 			= "";
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6919      	ldr	r1, [r3, #16]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	4613      	mov	r3, r2
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	1a9b      	subs	r3, r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	331c      	adds	r3, #28
 80015b8:	4934      	ldr	r1, [pc, #208]	; (800168c <_ZN2UI9init_menuEv+0x124>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f004 fcf9 	bl	8005fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		c_page++;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3301      	adds	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]

	// PAGE VALEURS
		c_sub_page = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
		menu[c_page].num 			= c_page;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6919      	ldr	r1, [r3, #16]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	4613      	mov	r3, r2
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	1a9b      	subs	r3, r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	601a      	str	r2, [r3, #0]
		menu[c_page].title 			= "Valeurs";
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6919      	ldr	r1, [r3, #16]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4613      	mov	r3, r2
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	1a9b      	subs	r3, r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	3304      	adds	r3, #4
 80015f0:	4927      	ldr	r1, [pc, #156]	; (8001690 <_ZN2UI9init_menuEv+0x128>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f004 fcdd 	bl	8005fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		menu[c_page].text 			= "";
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6919      	ldr	r1, [r3, #16]
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	4613      	mov	r3, r2
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	1a9b      	subs	r3, r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	331c      	adds	r3, #28
 800160a:	4920      	ldr	r1, [pc, #128]	; (800168c <_ZN2UI9init_menuEv+0x124>)
 800160c:	4618      	mov	r0, r3
 800160e:	f004 fcd0 	bl	8005fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		menu[c_page].nb_sub_page 	= 6;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6919      	ldr	r1, [r3, #16]
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	4613      	mov	r3, r2
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	1a9b      	subs	r3, r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	2206      	movs	r2, #6
 8001624:	635a      	str	r2, [r3, #52]	; 0x34
		c_page++;
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	3301      	adds	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
		// SUB_PAGE for each possible value
			// SOC
			Sub_Page* p_soc				= new Sub_Page[menu[c_page].nb_sub_page];
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6919      	ldr	r1, [r3, #16]
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	4613      	mov	r3, r2
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	1a9b      	subs	r3, r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163e:	461c      	mov	r4, r3
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <_ZN2UI9init_menuEv+0x12c>)
 8001642:	429c      	cmp	r4, r3
 8001644:	d805      	bhi.n	8001652 <_ZN2UI9init_menuEv+0xea>
 8001646:	4623      	mov	r3, r4
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4423      	add	r3, r4
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	3308      	adds	r3, #8
 8001650:	e001      	b.n	8001656 <_ZN2UI9init_menuEv+0xee>
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	4618      	mov	r0, r3
 8001658:	f004 f966 	bl	8005928 <_Znaj>
 800165c:	4603      	mov	r3, r0
 800165e:	461d      	mov	r5, r3
 8001660:	1d2b      	adds	r3, r5, #4
 8001662:	3b04      	subs	r3, #4
 8001664:	2228      	movs	r2, #40	; 0x28
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	1d2b      	adds	r3, r5, #4
 800166a:	601c      	str	r4, [r3, #0]
 800166c:	f105 0308 	add.w	r3, r5, #8
 8001670:	1e62      	subs	r2, r4, #1
 8001672:	4614      	mov	r4, r2
 8001674:	461e      	mov	r6, r3
 8001676:	2c00      	cmp	r4, #0
 8001678:	db0e      	blt.n	8001698 <_ZN2UI9init_menuEv+0x130>
 800167a:	4630      	mov	r0, r6
 800167c:	f7ff ff54 	bl	8001528 <_ZN8Sub_PageC1Ev>
 8001680:	3628      	adds	r6, #40	; 0x28
 8001682:	3c01      	subs	r4, #1
 8001684:	e7f7      	b.n	8001676 <_ZN2UI9init_menuEv+0x10e>
 8001686:	bf00      	nop
 8001688:	08006a34 	.word	0x08006a34
 800168c:	08006a30 	.word	0x08006a30
 8001690:	08006a3c 	.word	0x08006a3c
 8001694:	03333333 	.word	0x03333333
 8001698:	f105 0308 	add.w	r3, r5, #8
 800169c:	60fb      	str	r3, [r7, #12]
			p_soc[c_sub_page].num		= c_sub_page;
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	461a      	mov	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4413      	add	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	605a      	str	r2, [r3, #4]
			p_soc[c_sub_page].num_page	= c_page;
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	461a      	mov	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4413      	add	r3, r2
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	601a      	str	r2, [r3, #0]
			p_soc[c_sub_page].val_name	= SOC;
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	461a      	mov	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4413      	add	r3, r2
 80016d6:	2201      	movs	r2, #1
 80016d8:	721a      	strb	r2, [r3, #8]
			p_soc[c_sub_page].val_txt	= "SOC";
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	461a      	mov	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4413      	add	r3, r2
 80016ea:	330c      	adds	r3, #12
 80016ec:	49b2      	ldr	r1, [pc, #712]	; (80019b8 <_ZN2UI9init_menuEv+0x450>)
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 fc5f 	bl	8005fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			p_soc[c_sub_page].val		= 0.0;
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	461a      	mov	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
			c_sub_page++;
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	3301      	adds	r3, #1
 800170e:	613b      	str	r3, [r7, #16]
			// CURRENT_BAT
			p_soc[c_sub_page].num		= c_sub_page;
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	605a      	str	r2, [r3, #4]
			p_soc[c_sub_page].num_page	= c_page;
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	601a      	str	r2, [r3, #0]
			p_soc[c_sub_page].val_name	= CURRENT_BAT;
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	2202      	movs	r2, #2
 800174a:	721a      	strb	r2, [r3, #8]
			p_soc[c_sub_page].val_txt	= "I_bat";
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	330c      	adds	r3, #12
 800175e:	4997      	ldr	r1, [pc, #604]	; (80019bc <_ZN2UI9init_menuEv+0x454>)
 8001760:	4618      	mov	r0, r3
 8001762:	f004 fc26 	bl	8005fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			p_soc[c_sub_page].val		= 0.0;
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	461a      	mov	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4413      	add	r3, r2
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	625a      	str	r2, [r3, #36]	; 0x24
			c_sub_page++;
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	3301      	adds	r3, #1
 8001780:	613b      	str	r3, [r7, #16]
			// VOLTAGE_BAT
			p_soc[c_sub_page].num		= c_sub_page;
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	461a      	mov	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4413      	add	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	605a      	str	r2, [r3, #4]
			p_soc[c_sub_page].num_page	= c_page;
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	461a      	mov	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4413      	add	r3, r2
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	601a      	str	r2, [r3, #0]
			p_soc[c_sub_page].val_name	= VOLTAGE_BAT;
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	461a      	mov	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4413      	add	r3, r2
 80017ba:	2203      	movs	r2, #3
 80017bc:	721a      	strb	r2, [r3, #8]
			p_soc[c_sub_page].val_txt	= "V_bat";
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	461a      	mov	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4413      	add	r3, r2
 80017ce:	330c      	adds	r3, #12
 80017d0:	497b      	ldr	r1, [pc, #492]	; (80019c0 <_ZN2UI9init_menuEv+0x458>)
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 fbed 	bl	8005fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			p_soc[c_sub_page].val		= 0.0;
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
			c_sub_page++;
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	3301      	adds	r3, #1
 80017f2:	613b      	str	r3, [r7, #16]
			// CURRENT_PANNEL
			p_soc[c_sub_page].num		= c_sub_page;
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	461a      	mov	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	605a      	str	r2, [r3, #4]
			p_soc[c_sub_page].num_page	= c_page;
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	461a      	mov	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	601a      	str	r2, [r3, #0]
			p_soc[c_sub_page].val_name	= CURRENT_PANNEL;
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	2204      	movs	r2, #4
 800182e:	721a      	strb	r2, [r3, #8]
			p_soc[c_sub_page].val_txt	= "I_panel";
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	461a      	mov	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	330c      	adds	r3, #12
 8001842:	4960      	ldr	r1, [pc, #384]	; (80019c4 <_ZN2UI9init_menuEv+0x45c>)
 8001844:	4618      	mov	r0, r3
 8001846:	f004 fbb4 	bl	8005fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			p_soc[c_sub_page].val		= 0.0;
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	461a      	mov	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4413      	add	r3, r2
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	625a      	str	r2, [r3, #36]	; 0x24
			c_sub_page++;
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	3301      	adds	r3, #1
 8001864:	613b      	str	r3, [r7, #16]
			// POWER
			p_soc[c_sub_page].num		= c_sub_page;
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	461a      	mov	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4413      	add	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	605a      	str	r2, [r3, #4]
			p_soc[c_sub_page].num_page	= c_page;
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	461a      	mov	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4413      	add	r3, r2
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	601a      	str	r2, [r3, #0]
			p_soc[c_sub_page].val_name	= VOLTAGE_PANNEL;
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	461a      	mov	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4413      	add	r3, r2
 800189e:	2205      	movs	r2, #5
 80018a0:	721a      	strb	r2, [r3, #8]
			p_soc[c_sub_page].val_txt	= "V_panel";
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	461a      	mov	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4413      	add	r3, r2
 80018b2:	330c      	adds	r3, #12
 80018b4:	4944      	ldr	r1, [pc, #272]	; (80019c8 <_ZN2UI9init_menuEv+0x460>)
 80018b6:	4618      	mov	r0, r3
 80018b8:	f004 fb7b 	bl	8005fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			p_soc[c_sub_page].val		= 0.0;
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	625a      	str	r2, [r3, #36]	; 0x24
			c_sub_page++;
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	3301      	adds	r3, #1
 80018d6:	613b      	str	r3, [r7, #16]
			// CURRENT_PANNEL
			p_soc[c_sub_page].num		= c_sub_page;
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	461a      	mov	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4413      	add	r3, r2
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	605a      	str	r2, [r3, #4]
			p_soc[c_sub_page].num_page	= c_page;
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	461a      	mov	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4413      	add	r3, r2
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	601a      	str	r2, [r3, #0]
			p_soc[c_sub_page].val_name	= POWER;
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	461a      	mov	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	2206      	movs	r2, #6
 8001912:	721a      	strb	r2, [r3, #8]
			p_soc[c_sub_page].val_txt	= "Power";
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	330c      	adds	r3, #12
 8001926:	4929      	ldr	r1, [pc, #164]	; (80019cc <_ZN2UI9init_menuEv+0x464>)
 8001928:	4618      	mov	r0, r3
 800192a:	f004 fb42 	bl	8005fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			p_soc[c_sub_page].val		= 0.0;
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	461a      	mov	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4413      	add	r3, r2
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	625a      	str	r2, [r3, #36]	; 0x24
		menu[c_page].sub=p_soc;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6919      	ldr	r1, [r3, #16]
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	4613      	mov	r3, r2
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	639a      	str	r2, [r3, #56]	; 0x38
		c_page++;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
 800195c:	617b      	str	r3, [r7, #20]

	// PAGE ERROR
		c_sub_page = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
		menu[c_page].num 			= c_page;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6919      	ldr	r1, [r3, #16]
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4613      	mov	r3, r2
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	601a      	str	r2, [r3, #0]
		menu[c_page].title 			= "Erreurs";
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6919      	ldr	r1, [r3, #16]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4613      	mov	r3, r2
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	3304      	adds	r3, #4
 8001988:	4911      	ldr	r1, [pc, #68]	; (80019d0 <_ZN2UI9init_menuEv+0x468>)
 800198a:	4618      	mov	r0, r3
 800198c:	f004 fb11 	bl	8005fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		menu[c_page].text 			= "";
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6919      	ldr	r1, [r3, #16]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	4613      	mov	r3, r2
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	1a9b      	subs	r3, r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	331c      	adds	r3, #28
 80019a2:	490c      	ldr	r1, [pc, #48]	; (80019d4 <_ZN2UI9init_menuEv+0x46c>)
 80019a4:	4618      	mov	r0, r3
 80019a6:	f004 fb04 	bl	8005fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		// TODO: do the sub pages with the different error
		c_page++;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	3301      	adds	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]


}
 80019b0:	bf00      	nop
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b8:	08006a44 	.word	0x08006a44
 80019bc:	08006a48 	.word	0x08006a48
 80019c0:	08006a50 	.word	0x08006a50
 80019c4:	08006a58 	.word	0x08006a58
 80019c8:	08006a60 	.word	0x08006a60
 80019cc:	08006a68 	.word	0x08006a68
 80019d0:	08006a70 	.word	0x08006a70
 80019d4:	08006a30 	.word	0x08006a30

080019d8 <My_app>:
extern "C" {
#endif

// ########### 	APPLICATION		###############

void My_app(){
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	setup();
 80019dc:	f000 f9f8 	bl	8001dd0 <_Z5setupv>

	while (1)
 80019e0:	e7fe      	b.n	80019e0 <My_app+0x8>
	...

080019e4 <_ZN7DisplayC1E19__SPI_HandleTypeDeftP12GPIO_TypeDeftS2_>:
uint8_t cmd_addr[1]		={0xC5};
uint8_t cmd_data_1[1]	={0x59};

// ########### 		CLASS		###############
// Initialisation procedure
Display::Display(SPI_HandleTypeDef hspi, uint16_t PIN_RS, GPIO_TypeDef * PORT_RS, uint16_t PIN_CS, GPIO_TypeDef * PORT_CS):\
 80019e4:	b084      	sub	sp, #16
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	f107 0014 	add.w	r0, r7, #20
 80019f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		hspi(hspi), PIN_RS(PIN_RS), PORT_RS(PORT_RS), PIN_CS(PIN_CS), PORT_CS(PORT_CS)\
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	2264      	movs	r2, #100	; 0x64
 8001a00:	4619      	mov	r1, r3
 8001a02:	f004 fcd7 	bl	80063b4 <memcpy>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8001a0c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a14:	669a      	str	r2, [r3, #104]	; 0x68
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8001a1c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a26:	671a      	str	r2, [r3, #112]	; 0x70
{
	HAL_GPIO_WritePin(PORT_CS, PIN_CS, GPIO_PIN_RESET);
 8001a28:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001a34:	f000 ff38 	bl	80028a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_RS, PIN_RS, GPIO_PIN_RESET);
 8001a38:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	4619      	mov	r1, r3
 8001a40:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001a42:	f000 ff31 	bl	80028a8 <HAL_GPIO_WritePin>
	write_cmd(cmd_mode);
 8001a46:	4912      	ldr	r1, [pc, #72]	; (8001a90 <_ZN7DisplayC1E19__SPI_HandleTypeDeftP12GPIO_TypeDeftS2_+0xac>)
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f829 	bl	8001aa0 <_ZN7Display9write_cmdEPh>
	HAL_Delay(100);
 8001a4e:	2064      	movs	r0, #100	; 0x64
 8001a50:	f000 fc76 	bl	8002340 <HAL_Delay>
	write_cmd(cmd_display);
 8001a54:	490f      	ldr	r1, [pc, #60]	; (8001a94 <_ZN7DisplayC1E19__SPI_HandleTypeDeftP12GPIO_TypeDeftS2_+0xb0>)
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f822 	bl	8001aa0 <_ZN7Display9write_cmdEPh>
	HAL_Delay(100);
 8001a5c:	2064      	movs	r0, #100	; 0x64
 8001a5e:	f000 fc6f 	bl	8002340 <HAL_Delay>
	write_cmd(cmd_clear);
 8001a62:	490d      	ldr	r1, [pc, #52]	; (8001a98 <_ZN7DisplayC1E19__SPI_HandleTypeDeftP12GPIO_TypeDeftS2_+0xb4>)
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f81b 	bl	8001aa0 <_ZN7Display9write_cmdEPh>
	HAL_Delay(100);
 8001a6a:	2064      	movs	r0, #100	; 0x64
 8001a6c:	f000 fc68 	bl	8002340 <HAL_Delay>
	write_cmd(cmd_set);
 8001a70:	490a      	ldr	r1, [pc, #40]	; (8001a9c <_ZN7DisplayC1E19__SPI_HandleTypeDeftP12GPIO_TypeDeftS2_+0xb8>)
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f814 	bl	8001aa0 <_ZN7Display9write_cmdEPh>
	HAL_Delay(100);
 8001a78:	2064      	movs	r0, #100	; 0x64
 8001a7a:	f000 fc61 	bl	8002340 <HAL_Delay>
}
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a8a:	b004      	add	sp, #16
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000010 	.word	0x20000010
 8001a94:	20000004 	.word	0x20000004
 8001a98:	20000008 	.word	0x20000008
 8001a9c:	2000000c 	.word	0x2000000c

08001aa0 <_ZN7Display9write_cmdEPh>:
	HAL_SPI_Transmit(&hspi,data,1,1000);
	HAL_GPIO_WritePin(PORT_CS, PIN_CS, GPIO_PIN_SET);
}

// Write a command through SPI
void Display::write_cmd(uint8_t* cmd){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(PORT_RS, PIN_RS, GPIO_PIN_RESET);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f000 fef6 	bl	80028a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi,cmd,1,1000);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	6839      	ldr	r1, [r7, #0]
 8001ac6:	f002 fbdc 	bl	8004282 <HAL_SPI_Transmit>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <_ZN10theEncoderC1EP12GPIO_TypeDeftP11TIM_TypeDef>:

// ########### FONCTIONS TEST ################

// ########### 		CLASS		###############

theEncoder::theEncoder(GPIO_TypeDef* GPIOenc, uint16_t ButtonPin, TIM_TypeDef* TIMER):\
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af02      	add	r7, sp, #8
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	80fb      	strh	r3, [r7, #6]
		theEncoder(GPIOenc, ButtonPin, TIMER, 32768){}
 8001ae2:	88fa      	ldrh	r2, [r7, #6]
 8001ae4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 f805 	bl	8001afe <_ZN10theEncoderC1EP12GPIO_TypeDeftP11TIM_TypeDefi>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <_ZN10theEncoderC1EP12GPIO_TypeDeftP11TIM_TypeDefi>:

theEncoder::theEncoder(GPIO_TypeDef* GPIOenc, uint16_t ButtonPin, TIM_TypeDef* TIMER, int theValInit):\
 8001afe:	b480      	push	{r7}
 8001b00:	b085      	sub	sp, #20
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	80fb      	strh	r3, [r7, #6]
		compteurEncoder(theValInit), GPIOEncoder(GPIOenc), EncoderButtonPin(ButtonPin), TIM_ENC(TIMER)\
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	611a      	str	r2, [r3, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	88fa      	ldrh	r2, [r7, #6]
 8001b1e:	829a      	strh	r2, [r3, #20]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	619a      	str	r2, [r3, #24]
{
	TIM_ENC -> CNT = 32768;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b2e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b42:	f000 fb88 	bl	8002256 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b46:	f000 f80b 	bl	8001b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b4a:	f000 f8fb 	bl	8001d44 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b4e:	f000 f84d 	bl	8001bec <MX_I2C1_Init>
  MX_UART4_Init();
 8001b52:	f000 f8c7 	bl	8001ce4 <MX_UART4_Init>
  MX_SPI1_Init();
 8001b56:	f000 f887 	bl	8001c68 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  My_app(); // never return
 8001b5a:	f7ff ff3d 	bl	80019d8 <My_app>
  while (1)
 8001b5e:	e7fe      	b.n	8001b5e <main+0x20>

08001b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b096      	sub	sp, #88	; 0x58
 8001b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b66:	f107 0314 	add.w	r3, r7, #20
 8001b6a:	2244      	movs	r2, #68	; 0x44
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f004 fc48 	bl	8006404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b74:	463b      	mov	r3, r7
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b86:	f000 ffdb 	bl	8002b40 <HAL_PWREx_ControlVoltageScaling>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b90:	f000 f918 	bl	8001dc4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001b94:	2310      	movs	r3, #16
 8001b96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ba0:	2360      	movs	r3, #96	; 0x60
 8001ba2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4618      	mov	r0, r3
 8001bae:	f001 f81d 	bl	8002bec <HAL_RCC_OscConfig>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001bb8:	f000 f904 	bl	8001dc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bbc:	230f      	movs	r3, #15
 8001bbe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f001 fbef 	bl	80033b8 <HAL_RCC_ClockConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001be0:	f000 f8f0 	bl	8001dc4 <Error_Handler>
  }
}
 8001be4:	bf00      	nop
 8001be6:	3758      	adds	r7, #88	; 0x58
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001bf2:	4a1c      	ldr	r2, [pc, #112]	; (8001c64 <MX_I2C1_Init+0x78>)
 8001bf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00008BFF;
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001bf8:	f648 32ff 	movw	r2, #35839	; 0x8bff
 8001bfc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c04:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c1c:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c28:	480d      	ldr	r0, [pc, #52]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001c2a:	f000 fe55 	bl	80028d8 <HAL_I2C_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c34:	f000 f8c6 	bl	8001dc4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4809      	ldr	r0, [pc, #36]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001c3c:	f000 fedb 	bl	80029f6 <HAL_I2CEx_ConfigAnalogFilter>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001c46:	f000 f8bd 	bl	8001dc4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4804      	ldr	r0, [pc, #16]	; (8001c60 <MX_I2C1_Init+0x74>)
 8001c4e:	f000 ff1d 	bl	8002a8c <HAL_I2CEx_ConfigDigitalFilter>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001c58:	f000 f8b4 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	200001f0 	.word	0x200001f0
 8001c64:	40005400 	.word	0x40005400

08001c68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <MX_SPI1_Init+0x74>)
 8001c6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ce0 <MX_SPI1_Init+0x78>)
 8001c70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c72:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <MX_SPI1_Init+0x74>)
 8001c74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c7a:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <MX_SPI1_Init+0x74>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001c80:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <MX_SPI1_Init+0x74>)
 8001c82:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c88:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <MX_SPI1_Init+0x74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <MX_SPI1_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <MX_SPI1_Init+0x74>)
 8001c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <MX_SPI1_Init+0x74>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <MX_SPI1_Init+0x74>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <MX_SPI1_Init+0x74>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <MX_SPI1_Init+0x74>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <MX_SPI1_Init+0x74>)
 8001cb6:	2207      	movs	r2, #7
 8001cb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cba:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <MX_SPI1_Init+0x74>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <MX_SPI1_Init+0x74>)
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cc6:	4805      	ldr	r0, [pc, #20]	; (8001cdc <MX_SPI1_Init+0x74>)
 8001cc8:	f002 fa38 	bl	800413c <HAL_SPI_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001cd2:	f000 f877 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000018c 	.word	0x2000018c
 8001ce0:	40013000 	.word	0x40013000

08001ce4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <MX_UART4_Init+0x58>)
 8001cea:	4a15      	ldr	r2, [pc, #84]	; (8001d40 <MX_UART4_Init+0x5c>)
 8001cec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <MX_UART4_Init+0x58>)
 8001cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cf4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_UART4_Init+0x58>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <MX_UART4_Init+0x58>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <MX_UART4_Init+0x58>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_UART4_Init+0x58>)
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <MX_UART4_Init+0x58>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_UART4_Init+0x58>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <MX_UART4_Init+0x58>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <MX_UART4_Init+0x58>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d26:	4805      	ldr	r0, [pc, #20]	; (8001d3c <MX_UART4_Init+0x58>)
 8001d28:	f002 fd7a 	bl	8004820 <HAL_UART_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d32:	f000 f847 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	2000023c 	.word	0x2000023c
 8001d40:	40004c00 	.word	0x40004c00

08001d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
 8001d58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <MX_GPIO_Init+0x7c>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	4a18      	ldr	r2, [pc, #96]	; (8001dc0 <MX_GPIO_Init+0x7c>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <MX_GPIO_Init+0x7c>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <MX_GPIO_Init+0x7c>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <MX_GPIO_Init+0x7c>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <MX_GPIO_Init+0x7c>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d94:	f000 fd88 	bl	80028a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001d98:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001d9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	f107 030c 	add.w	r3, r7, #12
 8001dae:	4619      	mov	r1, r3
 8001db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db4:	f000 fbce 	bl	8002554 <HAL_GPIO_Init>

}
 8001db8:	bf00      	nop
 8001dba:	3720      	adds	r7, #32
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000

08001dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc8:	b672      	cpsid	i
}
 8001dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <Error_Handler+0x8>
	...

08001dd0 <_Z5setupv>:
 *  Created on: 19 nov. 2021
 *      Author: rapha
 */
#include "master.h"

void setup(){
 8001dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd2:	b0f1      	sub	sp, #452	; 0x1c4
 8001dd4:	af22      	add	r7, sp, #136	; 0x88
	// User interface construction
		// The button
		theEncoder button_main(GPIOEncoder, EncoderButtonPin, TIM_ENC);
 8001dd6:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 8001dda:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <_Z5setupv+0x80>)
 8001ddc:	2202      	movs	r2, #2
 8001dde:	491d      	ldr	r1, [pc, #116]	; (8001e54 <_Z5setupv+0x84>)
 8001de0:	f7ff fe77 	bl	8001ad2 <_ZN10theEncoderC1EP12GPIO_TypeDeftP11TIM_TypeDef>
		//Display
		Display screen(hspi1, PIN_LCD_RS, PORT_LCD_RS, PIN_LCD_CS, PORT_LCD_CS);
 8001de4:	4c1c      	ldr	r4, [pc, #112]	; (8001e58 <_Z5setupv+0x88>)
 8001de6:	f107 05a8 	add.w	r5, r7, #168	; 0xa8
 8001dea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001dee:	9319      	str	r3, [sp, #100]	; 0x64
 8001df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001df4:	9318      	str	r3, [sp, #96]	; 0x60
 8001df6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001dfa:	9317      	str	r3, [sp, #92]	; 0x5c
 8001dfc:	2340      	movs	r3, #64	; 0x40
 8001dfe:	9316      	str	r3, [sp, #88]	; 0x58
 8001e00:	4668      	mov	r0, sp
 8001e02:	f104 030c 	add.w	r3, r4, #12
 8001e06:	2258      	movs	r2, #88	; 0x58
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f004 fad3 	bl	80063b4 <memcpy>
 8001e0e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001e12:	4628      	mov	r0, r5
 8001e14:	f7ff fde6 	bl	80019e4 <_ZN7DisplayC1E19__SPI_HandleTypeDeftP12GPIO_TypeDeftS2_>
		// UI
		UI ui(screen,button_main);
 8001e18:	1d3e      	adds	r6, r7, #4
 8001e1a:	ad1a      	add	r5, sp, #104	; 0x68
 8001e1c:	f507 748e 	add.w	r4, r7, #284	; 0x11c
 8001e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e24:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001e28:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001e2c:	4668      	mov	r0, sp
 8001e2e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e32:	2268      	movs	r2, #104	; 0x68
 8001e34:	4619      	mov	r1, r3
 8001e36:	f004 fabd 	bl	80063b4 <memcpy>
 8001e3a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001e3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e40:	4630      	mov	r0, r6
 8001e42:	f7ff fb02 	bl	800144a <_ZN2UIC1E7Display10theEncoder>
}
 8001e46:	bf00      	nop
 8001e48:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e50:	40000400 	.word	0x40000400
 8001e54:	48000800 	.word	0x48000800
 8001e58:	2000018c 	.word	0x2000018c

08001e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e66:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6593      	str	r3, [r2, #88]	; 0x58
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b0ac      	sub	sp, #176	; 0xb0
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	2288      	movs	r2, #136	; 0x88
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f004 fa9d 	bl	8006404 <memset>
  if(hi2c->Instance==I2C1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a21      	ldr	r2, [pc, #132]	; (8001f54 <HAL_I2C_MspInit+0xb0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d13b      	bne.n	8001f4c <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ed4:	2340      	movs	r3, #64	; 0x40
 8001ed6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f001 fc6f 	bl	80037c4 <HAL_RCCEx_PeriphCLKConfig>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001eec:	f7ff ff6a 	bl	8001dc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_I2C_MspInit+0xb4>)
 8001ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef4:	4a18      	ldr	r2, [pc, #96]	; (8001f58 <HAL_I2C_MspInit+0xb4>)
 8001ef6:	f043 0302 	orr.w	r3, r3, #2
 8001efa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_I2C_MspInit+0xb4>)
 8001efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f10:	2312      	movs	r3, #18
 8001f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f22:	2304      	movs	r3, #4
 8001f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480b      	ldr	r0, [pc, #44]	; (8001f5c <HAL_I2C_MspInit+0xb8>)
 8001f30:	f000 fb10 	bl	8002554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <HAL_I2C_MspInit+0xb4>)
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <HAL_I2C_MspInit+0xb4>)
 8001f3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_I2C_MspInit+0xb4>)
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f4c:	bf00      	nop
 8001f4e:	37b0      	adds	r7, #176	; 0xb0
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40005400 	.word	0x40005400
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	48000400 	.word	0x48000400

08001f60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a17      	ldr	r2, [pc, #92]	; (8001fdc <HAL_SPI_MspInit+0x7c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d128      	bne.n	8001fd4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f82:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <HAL_SPI_MspInit+0x80>)
 8001f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f86:	4a16      	ldr	r2, [pc, #88]	; (8001fe0 <HAL_SPI_MspInit+0x80>)
 8001f88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f8e:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_SPI_MspInit+0x80>)
 8001f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_SPI_MspInit+0x80>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <HAL_SPI_MspInit+0x80>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_SPI_MspInit+0x80>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001fb2:	23a0      	movs	r3, #160	; 0xa0
 8001fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fc2:	2305      	movs	r3, #5
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd0:	f000 fac0 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fd4:	bf00      	nop
 8001fd6:	3728      	adds	r7, #40	; 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40013000 	.word	0x40013000
 8001fe0:	40021000 	.word	0x40021000

08001fe4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b0ac      	sub	sp, #176	; 0xb0
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	2288      	movs	r2, #136	; 0x88
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f004 f9fd 	bl	8006404 <memset>
  if(huart->Instance==UART4)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a21      	ldr	r2, [pc, #132]	; (8002094 <HAL_UART_MspInit+0xb0>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d13b      	bne.n	800208c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002014:	2308      	movs	r3, #8
 8002016:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002018:	2300      	movs	r3, #0
 800201a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	4618      	mov	r0, r3
 8002022:	f001 fbcf 	bl	80037c4 <HAL_RCCEx_PeriphCLKConfig>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800202c:	f7ff feca 	bl	8001dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <HAL_UART_MspInit+0xb4>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	4a18      	ldr	r2, [pc, #96]	; (8002098 <HAL_UART_MspInit+0xb4>)
 8002036:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800203a:	6593      	str	r3, [r2, #88]	; 0x58
 800203c:	4b16      	ldr	r3, [pc, #88]	; (8002098 <HAL_UART_MspInit+0xb4>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002048:	4b13      	ldr	r3, [pc, #76]	; (8002098 <HAL_UART_MspInit+0xb4>)
 800204a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204c:	4a12      	ldr	r2, [pc, #72]	; (8002098 <HAL_UART_MspInit+0xb4>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002054:	4b10      	ldr	r3, [pc, #64]	; (8002098 <HAL_UART_MspInit+0xb4>)
 8002056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002060:	2303      	movs	r3, #3
 8002062:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002078:	2308      	movs	r3, #8
 800207a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002082:	4619      	mov	r1, r3
 8002084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002088:	f000 fa64 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800208c:	bf00      	nop
 800208e:	37b0      	adds	r7, #176	; 0xb0
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40004c00 	.word	0x40004c00
 8002098:	40021000 	.word	0x40021000

0800209c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <NMI_Handler+0x4>

080020a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a6:	e7fe      	b.n	80020a6 <HardFault_Handler+0x4>

080020a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ac:	e7fe      	b.n	80020ac <MemManage_Handler+0x4>

080020ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b2:	e7fe      	b.n	80020b2 <BusFault_Handler+0x4>

080020b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b8:	e7fe      	b.n	80020b8 <UsageFault_Handler+0x4>

080020ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e8:	f000 f90a 	bl	8002300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
	return 1;
 80020f4:	2301      	movs	r3, #1
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <_kill>:

int _kill(int pid, int sig)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800210a:	f004 f917 	bl	800633c <__errno>
 800210e:	4603      	mov	r3, r0
 8002110:	2216      	movs	r2, #22
 8002112:	601a      	str	r2, [r3, #0]
	return -1;
 8002114:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <_exit>:

void _exit (int status)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002128:	f04f 31ff 	mov.w	r1, #4294967295
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff ffe7 	bl	8002100 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002132:	e7fe      	b.n	8002132 <_exit+0x12>

08002134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <_sbrk+0x5c>)
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <_sbrk+0x60>)
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002148:	4b13      	ldr	r3, [pc, #76]	; (8002198 <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <_sbrk+0x64>)
 8002152:	4a12      	ldr	r2, [pc, #72]	; (800219c <_sbrk+0x68>)
 8002154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <_sbrk+0x64>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	429a      	cmp	r2, r3
 8002162:	d207      	bcs.n	8002174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002164:	f004 f8ea 	bl	800633c <__errno>
 8002168:	4603      	mov	r3, r0
 800216a:	220c      	movs	r2, #12
 800216c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
 8002172:	e009      	b.n	8002188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	4a05      	ldr	r2, [pc, #20]	; (8002198 <_sbrk+0x64>)
 8002184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002186:	68fb      	ldr	r3, [r7, #12]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20018000 	.word	0x20018000
 8002194:	00000400 	.word	0x00000400
 8002198:	200000b0 	.word	0x200000b0
 800219c:	200002d8 	.word	0x200002d8

080021a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021a4:	4b15      	ldr	r3, [pc, #84]	; (80021fc <SystemInit+0x5c>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	4a14      	ldr	r2, [pc, #80]	; (80021fc <SystemInit+0x5c>)
 80021ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <SystemInit+0x60>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a11      	ldr	r2, [pc, #68]	; (8002200 <SystemInit+0x60>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <SystemInit+0x60>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <SystemInit+0x60>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a0d      	ldr	r2, [pc, #52]	; (8002200 <SystemInit+0x60>)
 80021cc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80021d0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80021d4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <SystemInit+0x60>)
 80021d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021dc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021de:	4b08      	ldr	r3, [pc, #32]	; (8002200 <SystemInit+0x60>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a07      	ldr	r2, [pc, #28]	; (8002200 <SystemInit+0x60>)
 80021e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <SystemInit+0x60>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000ed00 	.word	0xe000ed00
 8002200:	40021000 	.word	0x40021000

08002204 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800223c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002208:	f7ff ffca 	bl	80021a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800220c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800220e:	e003      	b.n	8002218 <LoopCopyDataInit>

08002210 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002212:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002214:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002216:	3104      	adds	r1, #4

08002218 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002218:	480a      	ldr	r0, [pc, #40]	; (8002244 <LoopForever+0xa>)
	ldr	r3, =_edata
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <LoopForever+0xe>)
	adds	r2, r0, r1
 800221c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800221e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002220:	d3f6      	bcc.n	8002210 <CopyDataInit>
	ldr	r2, =_sbss
 8002222:	4a0a      	ldr	r2, [pc, #40]	; (800224c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002224:	e002      	b.n	800222c <LoopFillZerobss>

08002226 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002226:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002228:	f842 3b04 	str.w	r3, [r2], #4

0800222c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <LoopForever+0x16>)
	cmp	r2, r3
 800222e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002230:	d3f9      	bcc.n	8002226 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002232:	f004 f889 	bl	8006348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002236:	f7ff fc82 	bl	8001b3e <main>

0800223a <LoopForever>:

LoopForever:
    b LoopForever
 800223a:	e7fe      	b.n	800223a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800223c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002240:	08007660 	.word	0x08007660
	ldr	r0, =_sdata
 8002244:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002248:	20000094 	.word	0x20000094
	ldr	r2, =_sbss
 800224c:	20000094 	.word	0x20000094
	ldr	r3, = _ebss
 8002250:	200002d4 	.word	0x200002d4

08002254 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002254:	e7fe      	b.n	8002254 <ADC1_2_IRQHandler>

08002256 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002260:	2003      	movs	r0, #3
 8002262:	f000 f943 	bl	80024ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002266:	200f      	movs	r0, #15
 8002268:	f000 f80e 	bl	8002288 <HAL_InitTick>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	71fb      	strb	r3, [r7, #7]
 8002276:	e001      	b.n	800227c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002278:	f7ff fdf0 	bl	8001e5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800227c:	79fb      	ldrb	r3, [r7, #7]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002294:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <HAL_InitTick+0x6c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d023      	beq.n	80022e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <HAL_InitTick+0x70>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <HAL_InitTick+0x6c>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4619      	mov	r1, r3
 80022a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f941 	bl	800253a <HAL_SYSTICK_Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10f      	bne.n	80022de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b0f      	cmp	r3, #15
 80022c2:	d809      	bhi.n	80022d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c4:	2200      	movs	r2, #0
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295
 80022cc:	f000 f919 	bl	8002502 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022d0:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <HAL_InitTick+0x74>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e007      	b.n	80022e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	e004      	b.n	80022e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
 80022e2:	e001      	b.n	80022e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	2000001c 	.word	0x2000001c
 80022f8:	20000014 	.word	0x20000014
 80022fc:	20000018 	.word	0x20000018

08002300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_IncTick+0x20>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_IncTick+0x24>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4413      	add	r3, r2
 8002310:	4a04      	ldr	r2, [pc, #16]	; (8002324 <HAL_IncTick+0x24>)
 8002312:	6013      	str	r3, [r2, #0]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	2000001c 	.word	0x2000001c
 8002324:	200002c0 	.word	0x200002c0

08002328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return uwTick;
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <HAL_GetTick+0x14>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	200002c0 	.word	0x200002c0

08002340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff ffee 	bl	8002328 <HAL_GetTick>
 800234c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002358:	d005      	beq.n	8002366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <HAL_Delay+0x44>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002366:	bf00      	nop
 8002368:	f7ff ffde 	bl	8002328 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	429a      	cmp	r2, r3
 8002376:	d8f7      	bhi.n	8002368 <HAL_Delay+0x28>
  {
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2000001c 	.word	0x2000001c

08002388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ba:	4a04      	ldr	r2, [pc, #16]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	60d3      	str	r3, [r2, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <__NVIC_GetPriorityGrouping+0x18>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	f003 0307 	and.w	r3, r3, #7
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	db0a      	blt.n	8002416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	490c      	ldr	r1, [pc, #48]	; (8002438 <__NVIC_SetPriority+0x4c>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	0112      	lsls	r2, r2, #4
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	440b      	add	r3, r1
 8002410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002414:	e00a      	b.n	800242c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4908      	ldr	r1, [pc, #32]	; (800243c <__NVIC_SetPriority+0x50>)
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	3b04      	subs	r3, #4
 8002424:	0112      	lsls	r2, r2, #4
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	440b      	add	r3, r1
 800242a:	761a      	strb	r2, [r3, #24]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000e100 	.word	0xe000e100
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f1c3 0307 	rsb	r3, r3, #7
 800245a:	2b04      	cmp	r3, #4
 800245c:	bf28      	it	cs
 800245e:	2304      	movcs	r3, #4
 8002460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3304      	adds	r3, #4
 8002466:	2b06      	cmp	r3, #6
 8002468:	d902      	bls.n	8002470 <NVIC_EncodePriority+0x30>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3b03      	subs	r3, #3
 800246e:	e000      	b.n	8002472 <NVIC_EncodePriority+0x32>
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	f04f 32ff 	mov.w	r2, #4294967295
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	401a      	ands	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002488:	f04f 31ff 	mov.w	r1, #4294967295
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	43d9      	mvns	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	4313      	orrs	r3, r2
         );
}
 800249a:	4618      	mov	r0, r3
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b8:	d301      	bcc.n	80024be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00f      	b.n	80024de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <SysTick_Config+0x40>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c6:	210f      	movs	r1, #15
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295
 80024cc:	f7ff ff8e 	bl	80023ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <SysTick_Config+0x40>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <SysTick_Config+0x40>)
 80024d8:	2207      	movs	r2, #7
 80024da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	e000e010 	.word	0xe000e010

080024ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff47 	bl	8002388 <__NVIC_SetPriorityGrouping>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002514:	f7ff ff5c 	bl	80023d0 <__NVIC_GetPriorityGrouping>
 8002518:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	6978      	ldr	r0, [r7, #20]
 8002520:	f7ff ff8e 	bl	8002440 <NVIC_EncodePriority>
 8002524:	4602      	mov	r2, r0
 8002526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff5d 	bl	80023ec <__NVIC_SetPriority>
}
 8002532:	bf00      	nop
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ffb0 	bl	80024a8 <SysTick_Config>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002562:	e17f      	b.n	8002864 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	2101      	movs	r1, #1
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	4013      	ands	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 8171 	beq.w	800285e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d00b      	beq.n	800259c <HAL_GPIO_Init+0x48>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d007      	beq.n	800259c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002590:	2b11      	cmp	r3, #17
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b12      	cmp	r3, #18
 800259a:	d130      	bne.n	80025fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025d2:	2201      	movs	r2, #1
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	f003 0201 	and.w	r2, r3, #1
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b03      	cmp	r3, #3
 8002608:	d118      	bne.n	800263c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002610:	2201      	movs	r2, #1
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	08db      	lsrs	r3, r3, #3
 8002626:	f003 0201 	and.w	r2, r3, #1
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	2203      	movs	r2, #3
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x128>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b12      	cmp	r3, #18
 800267a:	d123      	bne.n	80026c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	08da      	lsrs	r2, r3, #3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3208      	adds	r2, #8
 8002684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002688:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	220f      	movs	r2, #15
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	08da      	lsrs	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3208      	adds	r2, #8
 80026be:	6939      	ldr	r1, [r7, #16]
 80026c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	2203      	movs	r2, #3
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0203 	and.w	r2, r3, #3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80ac 	beq.w	800285e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002706:	4b5f      	ldr	r3, [pc, #380]	; (8002884 <HAL_GPIO_Init+0x330>)
 8002708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270a:	4a5e      	ldr	r2, [pc, #376]	; (8002884 <HAL_GPIO_Init+0x330>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6613      	str	r3, [r2, #96]	; 0x60
 8002712:	4b5c      	ldr	r3, [pc, #368]	; (8002884 <HAL_GPIO_Init+0x330>)
 8002714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800271e:	4a5a      	ldr	r2, [pc, #360]	; (8002888 <HAL_GPIO_Init+0x334>)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	089b      	lsrs	r3, r3, #2
 8002724:	3302      	adds	r3, #2
 8002726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	220f      	movs	r2, #15
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4013      	ands	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002748:	d025      	beq.n	8002796 <HAL_GPIO_Init+0x242>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4f      	ldr	r2, [pc, #316]	; (800288c <HAL_GPIO_Init+0x338>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01f      	beq.n	8002792 <HAL_GPIO_Init+0x23e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4e      	ldr	r2, [pc, #312]	; (8002890 <HAL_GPIO_Init+0x33c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d019      	beq.n	800278e <HAL_GPIO_Init+0x23a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4d      	ldr	r2, [pc, #308]	; (8002894 <HAL_GPIO_Init+0x340>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_GPIO_Init+0x236>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4c      	ldr	r2, [pc, #304]	; (8002898 <HAL_GPIO_Init+0x344>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00d      	beq.n	8002786 <HAL_GPIO_Init+0x232>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4b      	ldr	r2, [pc, #300]	; (800289c <HAL_GPIO_Init+0x348>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d007      	beq.n	8002782 <HAL_GPIO_Init+0x22e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4a      	ldr	r2, [pc, #296]	; (80028a0 <HAL_GPIO_Init+0x34c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d101      	bne.n	800277e <HAL_GPIO_Init+0x22a>
 800277a:	2306      	movs	r3, #6
 800277c:	e00c      	b.n	8002798 <HAL_GPIO_Init+0x244>
 800277e:	2307      	movs	r3, #7
 8002780:	e00a      	b.n	8002798 <HAL_GPIO_Init+0x244>
 8002782:	2305      	movs	r3, #5
 8002784:	e008      	b.n	8002798 <HAL_GPIO_Init+0x244>
 8002786:	2304      	movs	r3, #4
 8002788:	e006      	b.n	8002798 <HAL_GPIO_Init+0x244>
 800278a:	2303      	movs	r3, #3
 800278c:	e004      	b.n	8002798 <HAL_GPIO_Init+0x244>
 800278e:	2302      	movs	r3, #2
 8002790:	e002      	b.n	8002798 <HAL_GPIO_Init+0x244>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <HAL_GPIO_Init+0x244>
 8002796:	2300      	movs	r3, #0
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	f002 0203 	and.w	r2, r2, #3
 800279e:	0092      	lsls	r2, r2, #2
 80027a0:	4093      	lsls	r3, r2
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027a8:	4937      	ldr	r1, [pc, #220]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	089b      	lsrs	r3, r3, #2
 80027ae:	3302      	adds	r3, #2
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80027b6:	4b3b      	ldr	r3, [pc, #236]	; (80028a4 <HAL_GPIO_Init+0x350>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	43db      	mvns	r3, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027da:	4a32      	ldr	r2, [pc, #200]	; (80028a4 <HAL_GPIO_Init+0x350>)
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80027e0:	4b30      	ldr	r3, [pc, #192]	; (80028a4 <HAL_GPIO_Init+0x350>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002804:	4a27      	ldr	r2, [pc, #156]	; (80028a4 <HAL_GPIO_Init+0x350>)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800280a:	4b26      	ldr	r3, [pc, #152]	; (80028a4 <HAL_GPIO_Init+0x350>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	43db      	mvns	r3, r3
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4013      	ands	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800282e:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <HAL_GPIO_Init+0x350>)
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002834:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <HAL_GPIO_Init+0x350>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	43db      	mvns	r3, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002858:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <HAL_GPIO_Init+0x350>)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	3301      	adds	r3, #1
 8002862:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa22 f303 	lsr.w	r3, r2, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	f47f ae78 	bne.w	8002564 <HAL_GPIO_Init+0x10>
  }
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	371c      	adds	r7, #28
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	40010000 	.word	0x40010000
 800288c:	48000400 	.word	0x48000400
 8002890:	48000800 	.word	0x48000800
 8002894:	48000c00 	.word	0x48000c00
 8002898:	48001000 	.word	0x48001000
 800289c:	48001400 	.word	0x48001400
 80028a0:	48001800 	.word	0x48001800
 80028a4:	40010400 	.word	0x40010400

080028a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	807b      	strh	r3, [r7, #2]
 80028b4:	4613      	mov	r3, r2
 80028b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b8:	787b      	ldrb	r3, [r7, #1]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028c4:	e002      	b.n	80028cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e081      	b.n	80029ee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff fad0 	bl	8001ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2224      	movs	r2, #36	; 0x24
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0201 	bic.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002928:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002938:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d107      	bne.n	8002952 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	e006      	b.n	8002960 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800295e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d104      	bne.n	8002972 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002970:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6812      	ldr	r2, [r2, #0]
 800297c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002984:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002994:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	ea42 0103 	orr.w	r1, r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	021a      	lsls	r2, r3, #8
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69d9      	ldr	r1, [r3, #28]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1a      	ldr	r2, [r3, #32]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d138      	bne.n	8002a7e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e032      	b.n	8002a80 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2224      	movs	r2, #36	; 0x24
 8002a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0201 	bic.w	r2, r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a48:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6819      	ldr	r1, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0201 	orr.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e000      	b.n	8002a80 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a7e:	2302      	movs	r3, #2
  }
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	d139      	bne.n	8002b16 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e033      	b.n	8002b18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2224      	movs	r2, #36	; 0x24
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0201 	bic.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ade:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0201 	orr.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e000      	b.n	8002b18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b16:	2302      	movs	r3, #2
  }
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <HAL_PWREx_GetVoltageRange+0x18>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40007000 	.word	0x40007000

08002b40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b4e:	d130      	bne.n	8002bb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b50:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b5c:	d038      	beq.n	8002bd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b66:	4a1e      	ldr	r2, [pc, #120]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b6e:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2232      	movs	r2, #50	; 0x32
 8002b74:	fb02 f303 	mul.w	r3, r2, r3
 8002b78:	4a1b      	ldr	r2, [pc, #108]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	0c9b      	lsrs	r3, r3, #18
 8002b80:	3301      	adds	r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b84:	e002      	b.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b8c:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b98:	d102      	bne.n	8002ba0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f2      	bne.n	8002b86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bac:	d110      	bne.n	8002bd0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e00f      	b.n	8002bd2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbe:	d007      	beq.n	8002bd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bc0:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bc8:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40007000 	.word	0x40007000
 8002be4:	20000014 	.word	0x20000014
 8002be8:	431bde83 	.word	0x431bde83

08002bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e3d4      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bfe:	4ba1      	ldr	r3, [pc, #644]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c08:	4b9e      	ldr	r3, [pc, #632]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 80e4 	beq.w	8002de8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <HAL_RCC_OscConfig+0x4a>
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	2b0c      	cmp	r3, #12
 8002c2a:	f040 808b 	bne.w	8002d44 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	f040 8087 	bne.w	8002d44 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c36:	4b93      	ldr	r3, [pc, #588]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d005      	beq.n	8002c4e <HAL_RCC_OscConfig+0x62>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e3ac      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1a      	ldr	r2, [r3, #32]
 8002c52:	4b8c      	ldr	r3, [pc, #560]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d004      	beq.n	8002c68 <HAL_RCC_OscConfig+0x7c>
 8002c5e:	4b89      	ldr	r3, [pc, #548]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c66:	e005      	b.n	8002c74 <HAL_RCC_OscConfig+0x88>
 8002c68:	4b86      	ldr	r3, [pc, #536]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d223      	bcs.n	8002cc0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fd41 	bl	8003704 <RCC_SetFlashLatencyFromMSIRange>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e38d      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c8c:	4b7d      	ldr	r3, [pc, #500]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a7c      	ldr	r2, [pc, #496]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002c92:	f043 0308 	orr.w	r3, r3, #8
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	4b7a      	ldr	r3, [pc, #488]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	4977      	ldr	r1, [pc, #476]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002caa:	4b76      	ldr	r3, [pc, #472]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	4972      	ldr	r1, [pc, #456]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
 8002cbe:	e025      	b.n	8002d0c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cc0:	4b70      	ldr	r3, [pc, #448]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a6f      	ldr	r2, [pc, #444]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002cc6:	f043 0308 	orr.w	r3, r3, #8
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	4b6d      	ldr	r3, [pc, #436]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	496a      	ldr	r1, [pc, #424]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cde:	4b69      	ldr	r3, [pc, #420]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	4965      	ldr	r1, [pc, #404]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d109      	bne.n	8002d0c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fd01 	bl	8003704 <RCC_SetFlashLatencyFromMSIRange>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e34d      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d0c:	f000 fc36 	bl	800357c <HAL_RCC_GetSysClockFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b5c      	ldr	r3, [pc, #368]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	495a      	ldr	r1, [pc, #360]	; (8002e88 <HAL_RCC_OscConfig+0x29c>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
 8002d28:	4a58      	ldr	r2, [pc, #352]	; (8002e8c <HAL_RCC_OscConfig+0x2a0>)
 8002d2a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d2c:	4b58      	ldr	r3, [pc, #352]	; (8002e90 <HAL_RCC_OscConfig+0x2a4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff faa9 	bl	8002288 <HAL_InitTick>
 8002d36:	4603      	mov	r3, r0
 8002d38:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d052      	beq.n	8002de6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	e331      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d032      	beq.n	8002db2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d4c:	4b4d      	ldr	r3, [pc, #308]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a4c      	ldr	r2, [pc, #304]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d58:	f7ff fae6 	bl	8002328 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d60:	f7ff fae2 	bl	8002328 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e31a      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d72:	4b44      	ldr	r3, [pc, #272]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d7e:	4b41      	ldr	r3, [pc, #260]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a40      	ldr	r2, [pc, #256]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002d84:	f043 0308 	orr.w	r3, r3, #8
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	4b3e      	ldr	r3, [pc, #248]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	493b      	ldr	r1, [pc, #236]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d9c:	4b39      	ldr	r3, [pc, #228]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	4936      	ldr	r1, [pc, #216]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]
 8002db0:	e01a      	b.n	8002de8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002db2:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a33      	ldr	r2, [pc, #204]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dbe:	f7ff fab3 	bl	8002328 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dc6:	f7ff faaf 	bl	8002328 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e2e7      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dd8:	4b2a      	ldr	r3, [pc, #168]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f0      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x1da>
 8002de4:	e000      	b.n	8002de8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002de6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d074      	beq.n	8002ede <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d005      	beq.n	8002e06 <HAL_RCC_OscConfig+0x21a>
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	2b0c      	cmp	r3, #12
 8002dfe:	d10e      	bne.n	8002e1e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d10b      	bne.n	8002e1e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e06:	4b1f      	ldr	r3, [pc, #124]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d064      	beq.n	8002edc <HAL_RCC_OscConfig+0x2f0>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d160      	bne.n	8002edc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e2c4      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e26:	d106      	bne.n	8002e36 <HAL_RCC_OscConfig+0x24a>
 8002e28:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a15      	ldr	r2, [pc, #84]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	e01d      	b.n	8002e72 <HAL_RCC_OscConfig+0x286>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e3e:	d10c      	bne.n	8002e5a <HAL_RCC_OscConfig+0x26e>
 8002e40:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a0f      	ldr	r2, [pc, #60]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002e46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a0c      	ldr	r2, [pc, #48]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e56:	6013      	str	r3, [r2, #0]
 8002e58:	e00b      	b.n	8002e72 <HAL_RCC_OscConfig+0x286>
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a09      	ldr	r2, [pc, #36]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a06      	ldr	r2, [pc, #24]	; (8002e84 <HAL_RCC_OscConfig+0x298>)
 8002e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d01c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7a:	f7ff fa55 	bl	8002328 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e80:	e011      	b.n	8002ea6 <HAL_RCC_OscConfig+0x2ba>
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	08006ad0 	.word	0x08006ad0
 8002e8c:	20000014 	.word	0x20000014
 8002e90:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e94:	f7ff fa48 	bl	8002328 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	; 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e280      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ea6:	4baf      	ldr	r3, [pc, #700]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0f0      	beq.n	8002e94 <HAL_RCC_OscConfig+0x2a8>
 8002eb2:	e014      	b.n	8002ede <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7ff fa38 	bl	8002328 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ebc:	f7ff fa34 	bl	8002328 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b64      	cmp	r3, #100	; 0x64
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e26c      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ece:	4ba5      	ldr	r3, [pc, #660]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x2d0>
 8002eda:	e000      	b.n	8002ede <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d060      	beq.n	8002fac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_OscConfig+0x310>
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d119      	bne.n	8002f2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d116      	bne.n	8002f2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002efc:	4b99      	ldr	r3, [pc, #612]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_OscConfig+0x328>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e249      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f14:	4b93      	ldr	r3, [pc, #588]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	061b      	lsls	r3, r3, #24
 8002f22:	4990      	ldr	r1, [pc, #576]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f28:	e040      	b.n	8002fac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d023      	beq.n	8002f7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f32:	4b8c      	ldr	r3, [pc, #560]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a8b      	ldr	r2, [pc, #556]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8002f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3e:	f7ff f9f3 	bl	8002328 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f46:	f7ff f9ef 	bl	8002328 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e227      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f58:	4b82      	ldr	r3, [pc, #520]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f64:	4b7f      	ldr	r3, [pc, #508]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	061b      	lsls	r3, r3, #24
 8002f72:	497c      	ldr	r1, [pc, #496]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
 8002f78:	e018      	b.n	8002fac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7a:	4b7a      	ldr	r3, [pc, #488]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a79      	ldr	r2, [pc, #484]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8002f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f86:	f7ff f9cf 	bl	8002328 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8e:	f7ff f9cb 	bl	8002328 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e203      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fa0:	4b70      	ldr	r3, [pc, #448]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f0      	bne.n	8002f8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d03c      	beq.n	8003032 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01c      	beq.n	8002ffa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fc0:	4b68      	ldr	r3, [pc, #416]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8002fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc6:	4a67      	ldr	r2, [pc, #412]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7ff f9aa 	bl	8002328 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd8:	f7ff f9a6 	bl	8002328 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e1de      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fea:	4b5e      	ldr	r3, [pc, #376]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8002fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0ef      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x3ec>
 8002ff8:	e01b      	b.n	8003032 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ffa:	4b5a      	ldr	r3, [pc, #360]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8002ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003000:	4a58      	ldr	r2, [pc, #352]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300a:	f7ff f98d 	bl	8002328 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003012:	f7ff f989 	bl	8002328 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e1c1      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003024:	4b4f      	ldr	r3, [pc, #316]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8003026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1ef      	bne.n	8003012 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80a6 	beq.w	800318c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003040:	2300      	movs	r3, #0
 8003042:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003044:	4b47      	ldr	r3, [pc, #284]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8003046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10d      	bne.n	800306c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003050:	4b44      	ldr	r3, [pc, #272]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8003052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003054:	4a43      	ldr	r2, [pc, #268]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8003056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800305a:	6593      	str	r3, [r2, #88]	; 0x58
 800305c:	4b41      	ldr	r3, [pc, #260]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 800305e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003068:	2301      	movs	r3, #1
 800306a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800306c:	4b3e      	ldr	r3, [pc, #248]	; (8003168 <HAL_RCC_OscConfig+0x57c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003074:	2b00      	cmp	r3, #0
 8003076:	d118      	bne.n	80030aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003078:	4b3b      	ldr	r3, [pc, #236]	; (8003168 <HAL_RCC_OscConfig+0x57c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a3a      	ldr	r2, [pc, #232]	; (8003168 <HAL_RCC_OscConfig+0x57c>)
 800307e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003082:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003084:	f7ff f950 	bl	8002328 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800308c:	f7ff f94c 	bl	8002328 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e184      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800309e:	4b32      	ldr	r3, [pc, #200]	; (8003168 <HAL_RCC_OscConfig+0x57c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d108      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4d8>
 80030b2:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	4a2a      	ldr	r2, [pc, #168]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030c2:	e024      	b.n	800310e <HAL_RCC_OscConfig+0x522>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b05      	cmp	r3, #5
 80030ca:	d110      	bne.n	80030ee <HAL_RCC_OscConfig+0x502>
 80030cc:	4b25      	ldr	r3, [pc, #148]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	4a24      	ldr	r2, [pc, #144]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030dc:	4b21      	ldr	r3, [pc, #132]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e2:	4a20      	ldr	r2, [pc, #128]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030ec:	e00f      	b.n	800310e <HAL_RCC_OscConfig+0x522>
 80030ee:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 80030f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f4:	4a1b      	ldr	r2, [pc, #108]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 80030f6:	f023 0301 	bic.w	r3, r3, #1
 80030fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030fe:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003104:	4a17      	ldr	r2, [pc, #92]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8003106:	f023 0304 	bic.w	r3, r3, #4
 800310a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d016      	beq.n	8003144 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003116:	f7ff f907 	bl	8002328 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800311c:	e00a      	b.n	8003134 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311e:	f7ff f903 	bl	8002328 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f241 3288 	movw	r2, #5000	; 0x1388
 800312c:	4293      	cmp	r3, r2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e139      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_OscConfig+0x578>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0ed      	beq.n	800311e <HAL_RCC_OscConfig+0x532>
 8003142:	e01a      	b.n	800317a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003144:	f7ff f8f0 	bl	8002328 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800314a:	e00f      	b.n	800316c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314c:	f7ff f8ec 	bl	8002328 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d906      	bls.n	800316c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e122      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000
 8003168:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800316c:	4b90      	ldr	r3, [pc, #576]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1e8      	bne.n	800314c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800317a:	7ffb      	ldrb	r3, [r7, #31]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d105      	bne.n	800318c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003180:	4b8b      	ldr	r3, [pc, #556]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 8003182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003184:	4a8a      	ldr	r2, [pc, #552]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 8003186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800318a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 8108 	beq.w	80033a6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	2b02      	cmp	r3, #2
 800319c:	f040 80d0 	bne.w	8003340 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031a0:	4b83      	ldr	r3, [pc, #524]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f003 0203 	and.w	r2, r3, #3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d130      	bne.n	8003216 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	3b01      	subs	r3, #1
 80031c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d127      	bne.n	8003216 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d11f      	bne.n	8003216 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031e0:	2a07      	cmp	r2, #7
 80031e2:	bf14      	ite	ne
 80031e4:	2201      	movne	r2, #1
 80031e6:	2200      	moveq	r2, #0
 80031e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d113      	bne.n	8003216 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f8:	085b      	lsrs	r3, r3, #1
 80031fa:	3b01      	subs	r3, #1
 80031fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d109      	bne.n	8003216 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	085b      	lsrs	r3, r3, #1
 800320e:	3b01      	subs	r3, #1
 8003210:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003212:	429a      	cmp	r2, r3
 8003214:	d06e      	beq.n	80032f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	2b0c      	cmp	r3, #12
 800321a:	d069      	beq.n	80032f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800321c:	4b64      	ldr	r3, [pc, #400]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d105      	bne.n	8003234 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003228:	4b61      	ldr	r3, [pc, #388]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0b7      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003238:	4b5d      	ldr	r3, [pc, #372]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a5c      	ldr	r2, [pc, #368]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 800323e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003242:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003244:	f7ff f870 	bl	8002328 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324c:	f7ff f86c 	bl	8002328 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e0a4      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800325e:	4b54      	ldr	r3, [pc, #336]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800326a:	4b51      	ldr	r3, [pc, #324]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	4b51      	ldr	r3, [pc, #324]	; (80033b4 <HAL_RCC_OscConfig+0x7c8>)
 8003270:	4013      	ands	r3, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800327a:	3a01      	subs	r2, #1
 800327c:	0112      	lsls	r2, r2, #4
 800327e:	4311      	orrs	r1, r2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003284:	0212      	lsls	r2, r2, #8
 8003286:	4311      	orrs	r1, r2
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800328c:	0852      	lsrs	r2, r2, #1
 800328e:	3a01      	subs	r2, #1
 8003290:	0552      	lsls	r2, r2, #21
 8003292:	4311      	orrs	r1, r2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003298:	0852      	lsrs	r2, r2, #1
 800329a:	3a01      	subs	r2, #1
 800329c:	0652      	lsls	r2, r2, #25
 800329e:	4311      	orrs	r1, r2
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032a4:	0912      	lsrs	r2, r2, #4
 80032a6:	0452      	lsls	r2, r2, #17
 80032a8:	430a      	orrs	r2, r1
 80032aa:	4941      	ldr	r1, [pc, #260]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032b0:	4b3f      	ldr	r3, [pc, #252]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a3e      	ldr	r2, [pc, #248]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 80032b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032bc:	4b3c      	ldr	r3, [pc, #240]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4a3b      	ldr	r2, [pc, #236]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 80032c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032c8:	f7ff f82e 	bl	8002328 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d0:	f7ff f82a 	bl	8002328 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e062      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e2:	4b33      	ldr	r3, [pc, #204]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032ee:	e05a      	b.n	80033a6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e059      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032f4:	4b2e      	ldr	r3, [pc, #184]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d152      	bne.n	80033a6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003300:	4b2b      	ldr	r3, [pc, #172]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a2a      	ldr	r2, [pc, #168]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 8003306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800330a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800330c:	4b28      	ldr	r3, [pc, #160]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	4a27      	ldr	r2, [pc, #156]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 8003312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003316:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003318:	f7ff f806 	bl	8002328 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003320:	f7ff f802 	bl	8002328 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e03a      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003332:	4b1f      	ldr	r3, [pc, #124]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0x734>
 800333e:	e032      	b.n	80033a6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2b0c      	cmp	r3, #12
 8003344:	d02d      	beq.n	80033a2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003346:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a19      	ldr	r2, [pc, #100]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 800334c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003350:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003352:	4b17      	ldr	r3, [pc, #92]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800335e:	4b14      	ldr	r3, [pc, #80]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	4a13      	ldr	r2, [pc, #76]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 8003364:	f023 0303 	bic.w	r3, r3, #3
 8003368:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800336a:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	4a10      	ldr	r2, [pc, #64]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 8003370:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003378:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fe ffd5 	bl	8002328 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003382:	f7fe ffd1 	bl	8002328 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e009      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_RCC_OscConfig+0x7c4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x796>
 80033a0:	e001      	b.n	80033a6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3720      	adds	r7, #32
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40021000 	.word	0x40021000
 80033b4:	f99d808c 	.word	0xf99d808c

080033b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0c8      	b.n	800355e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033cc:	4b66      	ldr	r3, [pc, #408]	; (8003568 <HAL_RCC_ClockConfig+0x1b0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d910      	bls.n	80033fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	4b63      	ldr	r3, [pc, #396]	; (8003568 <HAL_RCC_ClockConfig+0x1b0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 0207 	bic.w	r2, r3, #7
 80033e2:	4961      	ldr	r1, [pc, #388]	; (8003568 <HAL_RCC_ClockConfig+0x1b0>)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b5f      	ldr	r3, [pc, #380]	; (8003568 <HAL_RCC_ClockConfig+0x1b0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0b0      	b.n	800355e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d04c      	beq.n	80034a2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b03      	cmp	r3, #3
 800340e:	d107      	bne.n	8003420 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003410:	4b56      	ldr	r3, [pc, #344]	; (800356c <HAL_RCC_ClockConfig+0x1b4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d121      	bne.n	8003460 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e09e      	b.n	800355e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d107      	bne.n	8003438 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003428:	4b50      	ldr	r3, [pc, #320]	; (800356c <HAL_RCC_ClockConfig+0x1b4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d115      	bne.n	8003460 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e092      	b.n	800355e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d107      	bne.n	8003450 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003440:	4b4a      	ldr	r3, [pc, #296]	; (800356c <HAL_RCC_ClockConfig+0x1b4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d109      	bne.n	8003460 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e086      	b.n	800355e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003450:	4b46      	ldr	r3, [pc, #280]	; (800356c <HAL_RCC_ClockConfig+0x1b4>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e07e      	b.n	800355e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003460:	4b42      	ldr	r3, [pc, #264]	; (800356c <HAL_RCC_ClockConfig+0x1b4>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f023 0203 	bic.w	r2, r3, #3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	493f      	ldr	r1, [pc, #252]	; (800356c <HAL_RCC_ClockConfig+0x1b4>)
 800346e:	4313      	orrs	r3, r2
 8003470:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003472:	f7fe ff59 	bl	8002328 <HAL_GetTick>
 8003476:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003478:	e00a      	b.n	8003490 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347a:	f7fe ff55 	bl	8002328 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	f241 3288 	movw	r2, #5000	; 0x1388
 8003488:	4293      	cmp	r3, r2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e066      	b.n	800355e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003490:	4b36      	ldr	r3, [pc, #216]	; (800356c <HAL_RCC_ClockConfig+0x1b4>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 020c 	and.w	r2, r3, #12
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	429a      	cmp	r2, r3
 80034a0:	d1eb      	bne.n	800347a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d008      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ae:	4b2f      	ldr	r3, [pc, #188]	; (800356c <HAL_RCC_ClockConfig+0x1b4>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	492c      	ldr	r1, [pc, #176]	; (800356c <HAL_RCC_ClockConfig+0x1b4>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034c0:	4b29      	ldr	r3, [pc, #164]	; (8003568 <HAL_RCC_ClockConfig+0x1b0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d210      	bcs.n	80034f0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	4b26      	ldr	r3, [pc, #152]	; (8003568 <HAL_RCC_ClockConfig+0x1b0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 0207 	bic.w	r2, r3, #7
 80034d6:	4924      	ldr	r1, [pc, #144]	; (8003568 <HAL_RCC_ClockConfig+0x1b0>)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	4b22      	ldr	r3, [pc, #136]	; (8003568 <HAL_RCC_ClockConfig+0x1b0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e036      	b.n	800355e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034fc:	4b1b      	ldr	r3, [pc, #108]	; (800356c <HAL_RCC_ClockConfig+0x1b4>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4918      	ldr	r1, [pc, #96]	; (800356c <HAL_RCC_ClockConfig+0x1b4>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800351a:	4b14      	ldr	r3, [pc, #80]	; (800356c <HAL_RCC_ClockConfig+0x1b4>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4910      	ldr	r1, [pc, #64]	; (800356c <HAL_RCC_ClockConfig+0x1b4>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800352e:	f000 f825 	bl	800357c <HAL_RCC_GetSysClockFreq>
 8003532:	4602      	mov	r2, r0
 8003534:	4b0d      	ldr	r3, [pc, #52]	; (800356c <HAL_RCC_ClockConfig+0x1b4>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	490c      	ldr	r1, [pc, #48]	; (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 8003540:	5ccb      	ldrb	r3, [r1, r3]
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	fa22 f303 	lsr.w	r3, r2, r3
 800354a:	4a0a      	ldr	r2, [pc, #40]	; (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800354e:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7fe fe98 	bl	8002288 <HAL_InitTick>
 8003558:	4603      	mov	r3, r0
 800355a:	72fb      	strb	r3, [r7, #11]

  return status;
 800355c:	7afb      	ldrb	r3, [r7, #11]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40022000 	.word	0x40022000
 800356c:	40021000 	.word	0x40021000
 8003570:	08006ad0 	.word	0x08006ad0
 8003574:	20000014 	.word	0x20000014
 8003578:	20000018 	.word	0x20000018

0800357c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800357c:	b480      	push	{r7}
 800357e:	b089      	sub	sp, #36	; 0x24
 8003580:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	61fb      	str	r3, [r7, #28]
 8003586:	2300      	movs	r3, #0
 8003588:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800358a:	4b3e      	ldr	r3, [pc, #248]	; (8003684 <HAL_RCC_GetSysClockFreq+0x108>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003594:	4b3b      	ldr	r3, [pc, #236]	; (8003684 <HAL_RCC_GetSysClockFreq+0x108>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0x34>
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	2b0c      	cmp	r3, #12
 80035a8:	d121      	bne.n	80035ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d11e      	bne.n	80035ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035b0:	4b34      	ldr	r3, [pc, #208]	; (8003684 <HAL_RCC_GetSysClockFreq+0x108>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d107      	bne.n	80035cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035bc:	4b31      	ldr	r3, [pc, #196]	; (8003684 <HAL_RCC_GetSysClockFreq+0x108>)
 80035be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c2:	0a1b      	lsrs	r3, r3, #8
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	e005      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035cc:	4b2d      	ldr	r3, [pc, #180]	; (8003684 <HAL_RCC_GetSysClockFreq+0x108>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035d8:	4a2b      	ldr	r2, [pc, #172]	; (8003688 <HAL_RCC_GetSysClockFreq+0x10c>)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10d      	bne.n	8003604 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035ec:	e00a      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d102      	bne.n	80035fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035f4:	4b25      	ldr	r3, [pc, #148]	; (800368c <HAL_RCC_GetSysClockFreq+0x110>)
 80035f6:	61bb      	str	r3, [r7, #24]
 80035f8:	e004      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003600:	4b23      	ldr	r3, [pc, #140]	; (8003690 <HAL_RCC_GetSysClockFreq+0x114>)
 8003602:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	2b0c      	cmp	r3, #12
 8003608:	d134      	bne.n	8003674 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800360a:	4b1e      	ldr	r3, [pc, #120]	; (8003684 <HAL_RCC_GetSysClockFreq+0x108>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d003      	beq.n	8003622 <HAL_RCC_GetSysClockFreq+0xa6>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b03      	cmp	r3, #3
 800361e:	d003      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0xac>
 8003620:	e005      	b.n	800362e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003622:	4b1a      	ldr	r3, [pc, #104]	; (800368c <HAL_RCC_GetSysClockFreq+0x110>)
 8003624:	617b      	str	r3, [r7, #20]
      break;
 8003626:	e005      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003628:	4b19      	ldr	r3, [pc, #100]	; (8003690 <HAL_RCC_GetSysClockFreq+0x114>)
 800362a:	617b      	str	r3, [r7, #20]
      break;
 800362c:	e002      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	617b      	str	r3, [r7, #20]
      break;
 8003632:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003634:	4b13      	ldr	r3, [pc, #76]	; (8003684 <HAL_RCC_GetSysClockFreq+0x108>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	3301      	adds	r3, #1
 8003640:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <HAL_RCC_GetSysClockFreq+0x108>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	0a1b      	lsrs	r3, r3, #8
 8003648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	fb02 f203 	mul.w	r2, r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	fbb2 f3f3 	udiv	r3, r2, r3
 8003658:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800365a:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <HAL_RCC_GetSysClockFreq+0x108>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	0e5b      	lsrs	r3, r3, #25
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	3301      	adds	r3, #1
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003672:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003674:	69bb      	ldr	r3, [r7, #24]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3724      	adds	r7, #36	; 0x24
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40021000 	.word	0x40021000
 8003688:	08006ae8 	.word	0x08006ae8
 800368c:	00f42400 	.word	0x00f42400
 8003690:	007a1200 	.word	0x007a1200

08003694 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003698:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800369a:	681b      	ldr	r3, [r3, #0]
}
 800369c:	4618      	mov	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000014 	.word	0x20000014

080036ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036b0:	f7ff fff0 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	0a1b      	lsrs	r3, r3, #8
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	4904      	ldr	r1, [pc, #16]	; (80036d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036c2:	5ccb      	ldrb	r3, [r1, r3]
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40021000 	.word	0x40021000
 80036d4:	08006ae0 	.word	0x08006ae0

080036d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036dc:	f7ff ffda 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036e0:	4602      	mov	r2, r0
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	0adb      	lsrs	r3, r3, #11
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	4904      	ldr	r1, [pc, #16]	; (8003700 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036ee:	5ccb      	ldrb	r3, [r1, r3]
 80036f0:	f003 031f 	and.w	r3, r3, #31
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40021000 	.word	0x40021000
 8003700:	08006ae0 	.word	0x08006ae0

08003704 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800370c:	2300      	movs	r3, #0
 800370e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003710:	4b2a      	ldr	r3, [pc, #168]	; (80037bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800371c:	f7ff fa02 	bl	8002b24 <HAL_PWREx_GetVoltageRange>
 8003720:	6178      	str	r0, [r7, #20]
 8003722:	e014      	b.n	800374e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003724:	4b25      	ldr	r3, [pc, #148]	; (80037bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003728:	4a24      	ldr	r2, [pc, #144]	; (80037bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800372a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372e:	6593      	str	r3, [r2, #88]	; 0x58
 8003730:	4b22      	ldr	r3, [pc, #136]	; (80037bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800373c:	f7ff f9f2 	bl	8002b24 <HAL_PWREx_GetVoltageRange>
 8003740:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003742:	4b1e      	ldr	r3, [pc, #120]	; (80037bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003746:	4a1d      	ldr	r2, [pc, #116]	; (80037bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003754:	d10b      	bne.n	800376e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b80      	cmp	r3, #128	; 0x80
 800375a:	d919      	bls.n	8003790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2ba0      	cmp	r3, #160	; 0xa0
 8003760:	d902      	bls.n	8003768 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003762:	2302      	movs	r3, #2
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	e013      	b.n	8003790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003768:	2301      	movs	r3, #1
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	e010      	b.n	8003790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b80      	cmp	r3, #128	; 0x80
 8003772:	d902      	bls.n	800377a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003774:	2303      	movs	r3, #3
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	e00a      	b.n	8003790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b80      	cmp	r3, #128	; 0x80
 800377e:	d102      	bne.n	8003786 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003780:	2302      	movs	r3, #2
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	e004      	b.n	8003790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b70      	cmp	r3, #112	; 0x70
 800378a:	d101      	bne.n	8003790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800378c:	2301      	movs	r3, #1
 800378e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f023 0207 	bic.w	r2, r3, #7
 8003798:	4909      	ldr	r1, [pc, #36]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037a0:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d001      	beq.n	80037b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40022000 	.word	0x40022000

080037c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037cc:	2300      	movs	r3, #0
 80037ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037d0:	2300      	movs	r3, #0
 80037d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d041      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037e8:	d02a      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037ee:	d824      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037f4:	d008      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037fa:	d81e      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003800:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003804:	d010      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003806:	e018      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003808:	4b86      	ldr	r3, [pc, #536]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	4a85      	ldr	r2, [pc, #532]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003812:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003814:	e015      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3304      	adds	r3, #4
 800381a:	2100      	movs	r1, #0
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fabb 	bl	8003d98 <RCCEx_PLLSAI1_Config>
 8003822:	4603      	mov	r3, r0
 8003824:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003826:	e00c      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3320      	adds	r3, #32
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fba6 	bl	8003f80 <RCCEx_PLLSAI2_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003838:	e003      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	74fb      	strb	r3, [r7, #19]
      break;
 800383e:	e000      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003840:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003842:	7cfb      	ldrb	r3, [r7, #19]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10b      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003848:	4b76      	ldr	r3, [pc, #472]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003856:	4973      	ldr	r1, [pc, #460]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800385e:	e001      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d041      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003874:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003878:	d02a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800387a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800387e:	d824      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003880:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003884:	d008      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003886:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800388a:	d81e      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003894:	d010      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003896:	e018      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003898:	4b62      	ldr	r3, [pc, #392]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4a61      	ldr	r2, [pc, #388]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800389e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038a4:	e015      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3304      	adds	r3, #4
 80038aa:	2100      	movs	r1, #0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 fa73 	bl	8003d98 <RCCEx_PLLSAI1_Config>
 80038b2:	4603      	mov	r3, r0
 80038b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038b6:	e00c      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3320      	adds	r3, #32
 80038bc:	2100      	movs	r1, #0
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fb5e 	bl	8003f80 <RCCEx_PLLSAI2_Config>
 80038c4:	4603      	mov	r3, r0
 80038c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038c8:	e003      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	74fb      	strb	r3, [r7, #19]
      break;
 80038ce:	e000      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80038d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038d2:	7cfb      	ldrb	r3, [r7, #19]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10b      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038d8:	4b52      	ldr	r3, [pc, #328]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038e6:	494f      	ldr	r1, [pc, #316]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038ee:	e001      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f0:	7cfb      	ldrb	r3, [r7, #19]
 80038f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 80a0 	beq.w	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003902:	2300      	movs	r3, #0
 8003904:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003906:	4b47      	ldr	r3, [pc, #284]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003916:	2300      	movs	r3, #0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00d      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391c:	4b41      	ldr	r3, [pc, #260]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	4a40      	ldr	r2, [pc, #256]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003926:	6593      	str	r3, [r2, #88]	; 0x58
 8003928:	4b3e      	ldr	r3, [pc, #248]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003934:	2301      	movs	r3, #1
 8003936:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003938:	4b3b      	ldr	r3, [pc, #236]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a3a      	ldr	r2, [pc, #232]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800393e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003942:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003944:	f7fe fcf0 	bl	8002328 <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800394a:	e009      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394c:	f7fe fcec 	bl	8002328 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d902      	bls.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	74fb      	strb	r3, [r7, #19]
        break;
 800395e:	e005      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003960:	4b31      	ldr	r3, [pc, #196]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0ef      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800396c:	7cfb      	ldrb	r3, [r7, #19]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d15c      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003972:	4b2c      	ldr	r3, [pc, #176]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003978:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800397c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01f      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	429a      	cmp	r2, r3
 800398e:	d019      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003990:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800399a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800399c:	4b21      	ldr	r3, [pc, #132]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800399e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a2:	4a20      	ldr	r2, [pc, #128]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039ac:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b2:	4a1c      	ldr	r2, [pc, #112]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039bc:	4a19      	ldr	r2, [pc, #100]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d016      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ce:	f7fe fcab 	bl	8002328 <HAL_GetTick>
 80039d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d4:	e00b      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d6:	f7fe fca7 	bl	8002328 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d902      	bls.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	74fb      	strb	r3, [r7, #19]
            break;
 80039ec:	e006      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ee:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0ec      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10c      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a02:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a12:	4904      	ldr	r1, [pc, #16]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a1a:	e009      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a1c:	7cfb      	ldrb	r3, [r7, #19]
 8003a1e:	74bb      	strb	r3, [r7, #18]
 8003a20:	e006      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a22:	bf00      	nop
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2c:	7cfb      	ldrb	r3, [r7, #19]
 8003a2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a30:	7c7b      	ldrb	r3, [r7, #17]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d105      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a36:	4b9e      	ldr	r3, [pc, #632]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3a:	4a9d      	ldr	r2, [pc, #628]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a4e:	4b98      	ldr	r3, [pc, #608]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a54:	f023 0203 	bic.w	r2, r3, #3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	4994      	ldr	r1, [pc, #592]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00a      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a70:	4b8f      	ldr	r3, [pc, #572]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a76:	f023 020c 	bic.w	r2, r3, #12
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7e:	498c      	ldr	r1, [pc, #560]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a92:	4b87      	ldr	r3, [pc, #540]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	4983      	ldr	r1, [pc, #524]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ab4:	4b7e      	ldr	r3, [pc, #504]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	497b      	ldr	r1, [pc, #492]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ad6:	4b76      	ldr	r3, [pc, #472]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003adc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae4:	4972      	ldr	r1, [pc, #456]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0320 	and.w	r3, r3, #32
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003af8:	4b6d      	ldr	r3, [pc, #436]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b06:	496a      	ldr	r1, [pc, #424]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b1a:	4b65      	ldr	r3, [pc, #404]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b28:	4961      	ldr	r1, [pc, #388]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00a      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b3c:	4b5c      	ldr	r3, [pc, #368]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4a:	4959      	ldr	r1, [pc, #356]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b5e:	4b54      	ldr	r3, [pc, #336]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6c:	4950      	ldr	r1, [pc, #320]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00a      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b80:	4b4b      	ldr	r3, [pc, #300]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	4948      	ldr	r1, [pc, #288]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ba2:	4b43      	ldr	r3, [pc, #268]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb0:	493f      	ldr	r1, [pc, #252]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d028      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bc4:	4b3a      	ldr	r3, [pc, #232]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd2:	4937      	ldr	r1, [pc, #220]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003be2:	d106      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003be4:	4b32      	ldr	r3, [pc, #200]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	4a31      	ldr	r2, [pc, #196]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bee:	60d3      	str	r3, [r2, #12]
 8003bf0:	e011      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bfa:	d10c      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	2101      	movs	r1, #1
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 f8c8 	bl	8003d98 <RCCEx_PLLSAI1_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c0c:	7cfb      	ldrb	r3, [r7, #19]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003c12:	7cfb      	ldrb	r3, [r7, #19]
 8003c14:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d028      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c22:	4b23      	ldr	r3, [pc, #140]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c30:	491f      	ldr	r1, [pc, #124]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c40:	d106      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c42:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	4a1a      	ldr	r2, [pc, #104]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c4c:	60d3      	str	r3, [r2, #12]
 8003c4e:	e011      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	2101      	movs	r1, #1
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 f899 	bl	8003d98 <RCCEx_PLLSAI1_Config>
 8003c66:	4603      	mov	r3, r0
 8003c68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c6a:	7cfb      	ldrb	r3, [r7, #19]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003c70:	7cfb      	ldrb	r3, [r7, #19]
 8003c72:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d02b      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8e:	4908      	ldr	r1, [pc, #32]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c9e:	d109      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ca0:	4b03      	ldr	r3, [pc, #12]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	4a02      	ldr	r2, [pc, #8]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003caa:	60d3      	str	r3, [r2, #12]
 8003cac:	e014      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003cae:	bf00      	nop
 8003cb0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 f867 	bl	8003d98 <RCCEx_PLLSAI1_Config>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cce:	7cfb      	ldrb	r3, [r7, #19]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d02f      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ce4:	4b2b      	ldr	r3, [pc, #172]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cf2:	4928      	ldr	r1, [pc, #160]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d02:	d10d      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3304      	adds	r3, #4
 8003d08:	2102      	movs	r1, #2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 f844 	bl	8003d98 <RCCEx_PLLSAI1_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d014      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d1a:	7cfb      	ldrb	r3, [r7, #19]
 8003d1c:	74bb      	strb	r3, [r7, #18]
 8003d1e:	e011      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3320      	adds	r3, #32
 8003d2e:	2102      	movs	r1, #2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 f925 	bl	8003f80 <RCCEx_PLLSAI2_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d3a:	7cfb      	ldrb	r3, [r7, #19]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d40:	7cfb      	ldrb	r3, [r7, #19]
 8003d42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d50:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d56:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d5e:	490d      	ldr	r1, [pc, #52]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00b      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d72:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d82:	4904      	ldr	r1, [pc, #16]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40021000 	.word	0x40021000

08003d98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003da6:	4b75      	ldr	r3, [pc, #468]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d018      	beq.n	8003de4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003db2:	4b72      	ldr	r3, [pc, #456]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f003 0203 	and.w	r2, r3, #3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d10d      	bne.n	8003dde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
       ||
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003dca:	4b6c      	ldr	r3, [pc, #432]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
       ||
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d047      	beq.n	8003e6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
 8003de2:	e044      	b.n	8003e6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d018      	beq.n	8003e1e <RCCEx_PLLSAI1_Config+0x86>
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d825      	bhi.n	8003e3c <RCCEx_PLLSAI1_Config+0xa4>
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d002      	beq.n	8003dfa <RCCEx_PLLSAI1_Config+0x62>
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d009      	beq.n	8003e0c <RCCEx_PLLSAI1_Config+0x74>
 8003df8:	e020      	b.n	8003e3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dfa:	4b60      	ldr	r3, [pc, #384]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d11d      	bne.n	8003e42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e0a:	e01a      	b.n	8003e42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e0c:	4b5b      	ldr	r3, [pc, #364]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d116      	bne.n	8003e46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e1c:	e013      	b.n	8003e46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e1e:	4b57      	ldr	r3, [pc, #348]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10f      	bne.n	8003e4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e2a:	4b54      	ldr	r3, [pc, #336]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e3a:	e006      	b.n	8003e4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e40:	e004      	b.n	8003e4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e42:	bf00      	nop
 8003e44:	e002      	b.n	8003e4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e46:	bf00      	nop
 8003e48:	e000      	b.n	8003e4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10d      	bne.n	8003e6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e52:	4b4a      	ldr	r3, [pc, #296]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6819      	ldr	r1, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	430b      	orrs	r3, r1
 8003e68:	4944      	ldr	r1, [pc, #272]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d17d      	bne.n	8003f70 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e74:	4b41      	ldr	r3, [pc, #260]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a40      	ldr	r2, [pc, #256]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e80:	f7fe fa52 	bl	8002328 <HAL_GetTick>
 8003e84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e86:	e009      	b.n	8003e9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e88:	f7fe fa4e 	bl	8002328 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d902      	bls.n	8003e9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	73fb      	strb	r3, [r7, #15]
        break;
 8003e9a:	e005      	b.n	8003ea8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e9c:	4b37      	ldr	r3, [pc, #220]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1ef      	bne.n	8003e88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d160      	bne.n	8003f70 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d111      	bne.n	8003ed8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eb4:	4b31      	ldr	r3, [pc, #196]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6892      	ldr	r2, [r2, #8]
 8003ec4:	0211      	lsls	r1, r2, #8
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	68d2      	ldr	r2, [r2, #12]
 8003eca:	0912      	lsrs	r2, r2, #4
 8003ecc:	0452      	lsls	r2, r2, #17
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	492a      	ldr	r1, [pc, #168]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	610b      	str	r3, [r1, #16]
 8003ed6:	e027      	b.n	8003f28 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d112      	bne.n	8003f04 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ede:	4b27      	ldr	r3, [pc, #156]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ee6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6892      	ldr	r2, [r2, #8]
 8003eee:	0211      	lsls	r1, r2, #8
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6912      	ldr	r2, [r2, #16]
 8003ef4:	0852      	lsrs	r2, r2, #1
 8003ef6:	3a01      	subs	r2, #1
 8003ef8:	0552      	lsls	r2, r2, #21
 8003efa:	430a      	orrs	r2, r1
 8003efc:	491f      	ldr	r1, [pc, #124]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	610b      	str	r3, [r1, #16]
 8003f02:	e011      	b.n	8003f28 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f04:	4b1d      	ldr	r3, [pc, #116]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6892      	ldr	r2, [r2, #8]
 8003f14:	0211      	lsls	r1, r2, #8
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6952      	ldr	r2, [r2, #20]
 8003f1a:	0852      	lsrs	r2, r2, #1
 8003f1c:	3a01      	subs	r2, #1
 8003f1e:	0652      	lsls	r2, r2, #25
 8003f20:	430a      	orrs	r2, r1
 8003f22:	4916      	ldr	r1, [pc, #88]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f28:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a13      	ldr	r2, [pc, #76]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f34:	f7fe f9f8 	bl	8002328 <HAL_GetTick>
 8003f38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f3a:	e009      	b.n	8003f50 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f3c:	f7fe f9f4 	bl	8002328 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d902      	bls.n	8003f50 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	73fb      	strb	r3, [r7, #15]
          break;
 8003f4e:	e005      	b.n	8003f5c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f50:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0ef      	beq.n	8003f3c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f62:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f64:	691a      	ldr	r2, [r3, #16]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	4904      	ldr	r1, [pc, #16]	; (8003f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40021000 	.word	0x40021000

08003f80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f8e:	4b6a      	ldr	r3, [pc, #424]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d018      	beq.n	8003fcc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f9a:	4b67      	ldr	r3, [pc, #412]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f003 0203 	and.w	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d10d      	bne.n	8003fc6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
       ||
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003fb2:	4b61      	ldr	r3, [pc, #388]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	091b      	lsrs	r3, r3, #4
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
       ||
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d047      	beq.n	8004056 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	73fb      	strb	r3, [r7, #15]
 8003fca:	e044      	b.n	8004056 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	d018      	beq.n	8004006 <RCCEx_PLLSAI2_Config+0x86>
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	d825      	bhi.n	8004024 <RCCEx_PLLSAI2_Config+0xa4>
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d002      	beq.n	8003fe2 <RCCEx_PLLSAI2_Config+0x62>
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d009      	beq.n	8003ff4 <RCCEx_PLLSAI2_Config+0x74>
 8003fe0:	e020      	b.n	8004024 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fe2:	4b55      	ldr	r3, [pc, #340]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d11d      	bne.n	800402a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff2:	e01a      	b.n	800402a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ff4:	4b50      	ldr	r3, [pc, #320]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d116      	bne.n	800402e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004004:	e013      	b.n	800402e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004006:	4b4c      	ldr	r3, [pc, #304]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10f      	bne.n	8004032 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004012:	4b49      	ldr	r3, [pc, #292]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004022:	e006      	b.n	8004032 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
      break;
 8004028:	e004      	b.n	8004034 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800402a:	bf00      	nop
 800402c:	e002      	b.n	8004034 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800402e:	bf00      	nop
 8004030:	e000      	b.n	8004034 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004032:	bf00      	nop
    }

    if(status == HAL_OK)
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10d      	bne.n	8004056 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800403a:	4b3f      	ldr	r3, [pc, #252]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6819      	ldr	r1, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	3b01      	subs	r3, #1
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	430b      	orrs	r3, r1
 8004050:	4939      	ldr	r1, [pc, #228]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004052:	4313      	orrs	r3, r2
 8004054:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d167      	bne.n	800412c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800405c:	4b36      	ldr	r3, [pc, #216]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a35      	ldr	r2, [pc, #212]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004068:	f7fe f95e 	bl	8002328 <HAL_GetTick>
 800406c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800406e:	e009      	b.n	8004084 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004070:	f7fe f95a 	bl	8002328 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d902      	bls.n	8004084 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	73fb      	strb	r3, [r7, #15]
        break;
 8004082:	e005      	b.n	8004090 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004084:	4b2c      	ldr	r3, [pc, #176]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1ef      	bne.n	8004070 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d14a      	bne.n	800412c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d111      	bne.n	80040c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800409c:	4b26      	ldr	r3, [pc, #152]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80040a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6892      	ldr	r2, [r2, #8]
 80040ac:	0211      	lsls	r1, r2, #8
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	68d2      	ldr	r2, [r2, #12]
 80040b2:	0912      	lsrs	r2, r2, #4
 80040b4:	0452      	lsls	r2, r2, #17
 80040b6:	430a      	orrs	r2, r1
 80040b8:	491f      	ldr	r1, [pc, #124]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	614b      	str	r3, [r1, #20]
 80040be:	e011      	b.n	80040e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040c0:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6892      	ldr	r2, [r2, #8]
 80040d0:	0211      	lsls	r1, r2, #8
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6912      	ldr	r2, [r2, #16]
 80040d6:	0852      	lsrs	r2, r2, #1
 80040d8:	3a01      	subs	r2, #1
 80040da:	0652      	lsls	r2, r2, #25
 80040dc:	430a      	orrs	r2, r1
 80040de:	4916      	ldr	r1, [pc, #88]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040e4:	4b14      	ldr	r3, [pc, #80]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a13      	ldr	r2, [pc, #76]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f0:	f7fe f91a 	bl	8002328 <HAL_GetTick>
 80040f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040f6:	e009      	b.n	800410c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040f8:	f7fe f916 	bl	8002328 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d902      	bls.n	800410c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	73fb      	strb	r3, [r7, #15]
          break;
 800410a:	e005      	b.n	8004118 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800410c:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0ef      	beq.n	80040f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004118:	7bfb      	ldrb	r3, [r7, #15]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800411e:	4b06      	ldr	r3, [pc, #24]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	4904      	ldr	r1, [pc, #16]	; (8004138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004128:	4313      	orrs	r3, r2
 800412a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800412c:	7bfb      	ldrb	r3, [r7, #15]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40021000 	.word	0x40021000

0800413c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e095      	b.n	800427a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	2b00      	cmp	r3, #0
 8004154:	d108      	bne.n	8004168 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800415e:	d009      	beq.n	8004174 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	61da      	str	r2, [r3, #28]
 8004166:	e005      	b.n	8004174 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fd fee6 	bl	8001f60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041b4:	d902      	bls.n	80041bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	e002      	b.n	80041c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80041ca:	d007      	beq.n	80041dc <HAL_SPI_Init+0xa0>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041d4:	d002      	beq.n	80041dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421e:	ea42 0103 	orr.w	r1, r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	0c1b      	lsrs	r3, r3, #16
 8004238:	f003 0204 	and.w	r2, r3, #4
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	f003 0310 	and.w	r3, r3, #16
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004258:	ea42 0103 	orr.w	r1, r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b088      	sub	sp, #32
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	603b      	str	r3, [r7, #0]
 800428e:	4613      	mov	r3, r2
 8004290:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_SPI_Transmit+0x22>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e158      	b.n	8004556 <HAL_SPI_Transmit+0x2d4>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042ac:	f7fe f83c 	bl	8002328 <HAL_GetTick>
 80042b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d002      	beq.n	80042c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042c2:	2302      	movs	r3, #2
 80042c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042c6:	e13d      	b.n	8004544 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <HAL_SPI_Transmit+0x52>
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d102      	bne.n	80042da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042d8:	e134      	b.n	8004544 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2203      	movs	r2, #3
 80042de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	88fa      	ldrh	r2, [r7, #6]
 80042f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	88fa      	ldrh	r2, [r7, #6]
 80042f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004324:	d10f      	bne.n	8004346 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004334:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004344:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	d007      	beq.n	8004364 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004362:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800436c:	d94b      	bls.n	8004406 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <HAL_SPI_Transmit+0xfa>
 8004376:	8afb      	ldrh	r3, [r7, #22]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d13e      	bne.n	80043fa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	881a      	ldrh	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438c:	1c9a      	adds	r2, r3, #2
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043a0:	e02b      	b.n	80043fa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d112      	bne.n	80043d6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b4:	881a      	ldrh	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	1c9a      	adds	r2, r3, #2
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043d4:	e011      	b.n	80043fa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043d6:	f7fd ffa7 	bl	8002328 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d803      	bhi.n	80043ee <HAL_SPI_Transmit+0x16c>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ec:	d102      	bne.n	80043f4 <HAL_SPI_Transmit+0x172>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d102      	bne.n	80043fa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043f8:	e0a4      	b.n	8004544 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1ce      	bne.n	80043a2 <HAL_SPI_Transmit+0x120>
 8004404:	e07c      	b.n	8004500 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <HAL_SPI_Transmit+0x192>
 800440e:	8afb      	ldrh	r3, [r7, #22]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d170      	bne.n	80044f6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b01      	cmp	r3, #1
 800441c:	d912      	bls.n	8004444 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004422:	881a      	ldrh	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442e:	1c9a      	adds	r2, r3, #2
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b02      	subs	r3, #2
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004442:	e058      	b.n	80044f6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	330c      	adds	r3, #12
 800444e:	7812      	ldrb	r2, [r2, #0]
 8004450:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800446a:	e044      	b.n	80044f6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b02      	cmp	r3, #2
 8004478:	d12b      	bne.n	80044d2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b01      	cmp	r3, #1
 8004482:	d912      	bls.n	80044aa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004488:	881a      	ldrh	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	1c9a      	adds	r2, r3, #2
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800449e:	b29b      	uxth	r3, r3
 80044a0:	3b02      	subs	r3, #2
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044a8:	e025      	b.n	80044f6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	330c      	adds	r3, #12
 80044b4:	7812      	ldrb	r2, [r2, #0]
 80044b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044d0:	e011      	b.n	80044f6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044d2:	f7fd ff29 	bl	8002328 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d803      	bhi.n	80044ea <HAL_SPI_Transmit+0x268>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e8:	d102      	bne.n	80044f0 <HAL_SPI_Transmit+0x26e>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d102      	bne.n	80044f6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044f4:	e026      	b.n	8004544 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1b5      	bne.n	800446c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	6839      	ldr	r1, [r7, #0]
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 f945 	bl	8004794 <SPI_EndRxTxTransaction>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10a      	bne.n	8004534 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800451e:	2300      	movs	r3, #0
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	77fb      	strb	r3, [r7, #31]
 8004540:	e000      	b.n	8004544 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004542:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004554:	7ffb      	ldrb	r3, [r7, #31]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3720      	adds	r7, #32
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	4613      	mov	r3, r2
 800456e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004570:	f7fd feda 	bl	8002328 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	4413      	add	r3, r2
 800457e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004580:	f7fd fed2 	bl	8002328 <HAL_GetTick>
 8004584:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004586:	4b39      	ldr	r3, [pc, #228]	; (800466c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	015b      	lsls	r3, r3, #5
 800458c:	0d1b      	lsrs	r3, r3, #20
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	fb02 f303 	mul.w	r3, r2, r3
 8004594:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004596:	e054      	b.n	8004642 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459e:	d050      	beq.n	8004642 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045a0:	f7fd fec2 	bl	8002328 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d902      	bls.n	80045b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d13d      	bne.n	8004632 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ce:	d111      	bne.n	80045f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d8:	d004      	beq.n	80045e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e2:	d107      	bne.n	80045f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045fc:	d10f      	bne.n	800461e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800461c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e017      	b.n	8004662 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	3b01      	subs	r3, #1
 8004640:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4013      	ands	r3, r2
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	429a      	cmp	r2, r3
 8004650:	bf0c      	ite	eq
 8004652:	2301      	moveq	r3, #1
 8004654:	2300      	movne	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	461a      	mov	r2, r3
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	429a      	cmp	r2, r3
 800465e:	d19b      	bne.n	8004598 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3720      	adds	r7, #32
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20000014 	.word	0x20000014

08004670 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800467e:	f7fd fe53 	bl	8002328 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	4413      	add	r3, r2
 800468c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800468e:	f7fd fe4b 	bl	8002328 <HAL_GetTick>
 8004692:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004694:	4b3e      	ldr	r3, [pc, #248]	; (8004790 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	4613      	mov	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	00da      	lsls	r2, r3, #3
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	0d1b      	lsrs	r3, r3, #20
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	fb02 f303 	mul.w	r3, r2, r3
 80046aa:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80046ac:	e062      	b.n	8004774 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046b4:	d109      	bne.n	80046ca <SPI_WaitFifoStateUntilTimeout+0x5a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d106      	bne.n	80046ca <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	330c      	adds	r3, #12
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80046c8:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d0:	d050      	beq.n	8004774 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046d2:	f7fd fe29 	bl	8002328 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	69fa      	ldr	r2, [r7, #28]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d902      	bls.n	80046e8 <SPI_WaitFifoStateUntilTimeout+0x78>
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d13d      	bne.n	8004764 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004700:	d111      	bne.n	8004726 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800470a:	d004      	beq.n	8004716 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004714:	d107      	bne.n	8004726 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004724:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800472e:	d10f      	bne.n	8004750 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800474e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e010      	b.n	8004786 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	3b01      	subs	r3, #1
 8004772:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	4013      	ands	r3, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	429a      	cmp	r2, r3
 8004782:	d194      	bne.n	80046ae <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3720      	adds	r7, #32
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	20000014 	.word	0x20000014

08004794 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f7ff ff5f 	bl	8004670 <SPI_WaitFifoStateUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047bc:	f043 0220 	orr.w	r2, r3, #32
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e027      	b.n	8004818 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2200      	movs	r2, #0
 80047d0:	2180      	movs	r1, #128	; 0x80
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f7ff fec4 	bl	8004560 <SPI_WaitFlagStateUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d007      	beq.n	80047ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e2:	f043 0220 	orr.w	r2, r3, #32
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e014      	b.n	8004818 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff ff38 	bl	8004670 <SPI_WaitFifoStateUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d007      	beq.n	8004816 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480a:	f043 0220 	orr.w	r2, r3, #32
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e000      	b.n	8004818 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e040      	b.n	80048b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fd fbce 	bl	8001fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2224      	movs	r2, #36	; 0x24
 800484c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f82c 	bl	80048bc <UART_SetConfig>
 8004864:	4603      	mov	r3, r0
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e022      	b.n	80048b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 faaa 	bl	8004dd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800488a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800489a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 fb31 	bl	8004f14 <UART_CheckIdleState>
 80048b2:	4603      	mov	r3, r0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048bc:	b5b0      	push	{r4, r5, r7, lr}
 80048be:	b088      	sub	sp, #32
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	4313      	orrs	r3, r2
 80048de:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	4bad      	ldr	r3, [pc, #692]	; (8004b9c <UART_SetConfig+0x2e0>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6812      	ldr	r2, [r2, #0]
 80048ee:	69f9      	ldr	r1, [r7, #28]
 80048f0:	430b      	orrs	r3, r1
 80048f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4aa2      	ldr	r2, [pc, #648]	; (8004ba0 <UART_SetConfig+0x2e4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d004      	beq.n	8004924 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	69fa      	ldr	r2, [r7, #28]
 8004920:	4313      	orrs	r3, r2
 8004922:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69fa      	ldr	r2, [r7, #28]
 8004934:	430a      	orrs	r2, r1
 8004936:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a99      	ldr	r2, [pc, #612]	; (8004ba4 <UART_SetConfig+0x2e8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d121      	bne.n	8004986 <UART_SetConfig+0xca>
 8004942:	4b99      	ldr	r3, [pc, #612]	; (8004ba8 <UART_SetConfig+0x2ec>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004948:	f003 0303 	and.w	r3, r3, #3
 800494c:	2b03      	cmp	r3, #3
 800494e:	d817      	bhi.n	8004980 <UART_SetConfig+0xc4>
 8004950:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <UART_SetConfig+0x9c>)
 8004952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004956:	bf00      	nop
 8004958:	08004969 	.word	0x08004969
 800495c:	08004975 	.word	0x08004975
 8004960:	0800496f 	.word	0x0800496f
 8004964:	0800497b 	.word	0x0800497b
 8004968:	2301      	movs	r3, #1
 800496a:	76fb      	strb	r3, [r7, #27]
 800496c:	e0e7      	b.n	8004b3e <UART_SetConfig+0x282>
 800496e:	2302      	movs	r3, #2
 8004970:	76fb      	strb	r3, [r7, #27]
 8004972:	e0e4      	b.n	8004b3e <UART_SetConfig+0x282>
 8004974:	2304      	movs	r3, #4
 8004976:	76fb      	strb	r3, [r7, #27]
 8004978:	e0e1      	b.n	8004b3e <UART_SetConfig+0x282>
 800497a:	2308      	movs	r3, #8
 800497c:	76fb      	strb	r3, [r7, #27]
 800497e:	e0de      	b.n	8004b3e <UART_SetConfig+0x282>
 8004980:	2310      	movs	r3, #16
 8004982:	76fb      	strb	r3, [r7, #27]
 8004984:	e0db      	b.n	8004b3e <UART_SetConfig+0x282>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a88      	ldr	r2, [pc, #544]	; (8004bac <UART_SetConfig+0x2f0>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d132      	bne.n	80049f6 <UART_SetConfig+0x13a>
 8004990:	4b85      	ldr	r3, [pc, #532]	; (8004ba8 <UART_SetConfig+0x2ec>)
 8004992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	2b0c      	cmp	r3, #12
 800499c:	d828      	bhi.n	80049f0 <UART_SetConfig+0x134>
 800499e:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <UART_SetConfig+0xe8>)
 80049a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a4:	080049d9 	.word	0x080049d9
 80049a8:	080049f1 	.word	0x080049f1
 80049ac:	080049f1 	.word	0x080049f1
 80049b0:	080049f1 	.word	0x080049f1
 80049b4:	080049e5 	.word	0x080049e5
 80049b8:	080049f1 	.word	0x080049f1
 80049bc:	080049f1 	.word	0x080049f1
 80049c0:	080049f1 	.word	0x080049f1
 80049c4:	080049df 	.word	0x080049df
 80049c8:	080049f1 	.word	0x080049f1
 80049cc:	080049f1 	.word	0x080049f1
 80049d0:	080049f1 	.word	0x080049f1
 80049d4:	080049eb 	.word	0x080049eb
 80049d8:	2300      	movs	r3, #0
 80049da:	76fb      	strb	r3, [r7, #27]
 80049dc:	e0af      	b.n	8004b3e <UART_SetConfig+0x282>
 80049de:	2302      	movs	r3, #2
 80049e0:	76fb      	strb	r3, [r7, #27]
 80049e2:	e0ac      	b.n	8004b3e <UART_SetConfig+0x282>
 80049e4:	2304      	movs	r3, #4
 80049e6:	76fb      	strb	r3, [r7, #27]
 80049e8:	e0a9      	b.n	8004b3e <UART_SetConfig+0x282>
 80049ea:	2308      	movs	r3, #8
 80049ec:	76fb      	strb	r3, [r7, #27]
 80049ee:	e0a6      	b.n	8004b3e <UART_SetConfig+0x282>
 80049f0:	2310      	movs	r3, #16
 80049f2:	76fb      	strb	r3, [r7, #27]
 80049f4:	e0a3      	b.n	8004b3e <UART_SetConfig+0x282>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a6d      	ldr	r2, [pc, #436]	; (8004bb0 <UART_SetConfig+0x2f4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d120      	bne.n	8004a42 <UART_SetConfig+0x186>
 8004a00:	4b69      	ldr	r3, [pc, #420]	; (8004ba8 <UART_SetConfig+0x2ec>)
 8004a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a0a:	2b30      	cmp	r3, #48	; 0x30
 8004a0c:	d013      	beq.n	8004a36 <UART_SetConfig+0x17a>
 8004a0e:	2b30      	cmp	r3, #48	; 0x30
 8004a10:	d814      	bhi.n	8004a3c <UART_SetConfig+0x180>
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	d009      	beq.n	8004a2a <UART_SetConfig+0x16e>
 8004a16:	2b20      	cmp	r3, #32
 8004a18:	d810      	bhi.n	8004a3c <UART_SetConfig+0x180>
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <UART_SetConfig+0x168>
 8004a1e:	2b10      	cmp	r3, #16
 8004a20:	d006      	beq.n	8004a30 <UART_SetConfig+0x174>
 8004a22:	e00b      	b.n	8004a3c <UART_SetConfig+0x180>
 8004a24:	2300      	movs	r3, #0
 8004a26:	76fb      	strb	r3, [r7, #27]
 8004a28:	e089      	b.n	8004b3e <UART_SetConfig+0x282>
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	76fb      	strb	r3, [r7, #27]
 8004a2e:	e086      	b.n	8004b3e <UART_SetConfig+0x282>
 8004a30:	2304      	movs	r3, #4
 8004a32:	76fb      	strb	r3, [r7, #27]
 8004a34:	e083      	b.n	8004b3e <UART_SetConfig+0x282>
 8004a36:	2308      	movs	r3, #8
 8004a38:	76fb      	strb	r3, [r7, #27]
 8004a3a:	e080      	b.n	8004b3e <UART_SetConfig+0x282>
 8004a3c:	2310      	movs	r3, #16
 8004a3e:	76fb      	strb	r3, [r7, #27]
 8004a40:	e07d      	b.n	8004b3e <UART_SetConfig+0x282>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a5b      	ldr	r2, [pc, #364]	; (8004bb4 <UART_SetConfig+0x2f8>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d120      	bne.n	8004a8e <UART_SetConfig+0x1d2>
 8004a4c:	4b56      	ldr	r3, [pc, #344]	; (8004ba8 <UART_SetConfig+0x2ec>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a56:	2bc0      	cmp	r3, #192	; 0xc0
 8004a58:	d013      	beq.n	8004a82 <UART_SetConfig+0x1c6>
 8004a5a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a5c:	d814      	bhi.n	8004a88 <UART_SetConfig+0x1cc>
 8004a5e:	2b80      	cmp	r3, #128	; 0x80
 8004a60:	d009      	beq.n	8004a76 <UART_SetConfig+0x1ba>
 8004a62:	2b80      	cmp	r3, #128	; 0x80
 8004a64:	d810      	bhi.n	8004a88 <UART_SetConfig+0x1cc>
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <UART_SetConfig+0x1b4>
 8004a6a:	2b40      	cmp	r3, #64	; 0x40
 8004a6c:	d006      	beq.n	8004a7c <UART_SetConfig+0x1c0>
 8004a6e:	e00b      	b.n	8004a88 <UART_SetConfig+0x1cc>
 8004a70:	2300      	movs	r3, #0
 8004a72:	76fb      	strb	r3, [r7, #27]
 8004a74:	e063      	b.n	8004b3e <UART_SetConfig+0x282>
 8004a76:	2302      	movs	r3, #2
 8004a78:	76fb      	strb	r3, [r7, #27]
 8004a7a:	e060      	b.n	8004b3e <UART_SetConfig+0x282>
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	76fb      	strb	r3, [r7, #27]
 8004a80:	e05d      	b.n	8004b3e <UART_SetConfig+0x282>
 8004a82:	2308      	movs	r3, #8
 8004a84:	76fb      	strb	r3, [r7, #27]
 8004a86:	e05a      	b.n	8004b3e <UART_SetConfig+0x282>
 8004a88:	2310      	movs	r3, #16
 8004a8a:	76fb      	strb	r3, [r7, #27]
 8004a8c:	e057      	b.n	8004b3e <UART_SetConfig+0x282>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a49      	ldr	r2, [pc, #292]	; (8004bb8 <UART_SetConfig+0x2fc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d125      	bne.n	8004ae4 <UART_SetConfig+0x228>
 8004a98:	4b43      	ldr	r3, [pc, #268]	; (8004ba8 <UART_SetConfig+0x2ec>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aa6:	d017      	beq.n	8004ad8 <UART_SetConfig+0x21c>
 8004aa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aac:	d817      	bhi.n	8004ade <UART_SetConfig+0x222>
 8004aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab2:	d00b      	beq.n	8004acc <UART_SetConfig+0x210>
 8004ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab8:	d811      	bhi.n	8004ade <UART_SetConfig+0x222>
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <UART_SetConfig+0x20a>
 8004abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac2:	d006      	beq.n	8004ad2 <UART_SetConfig+0x216>
 8004ac4:	e00b      	b.n	8004ade <UART_SetConfig+0x222>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	76fb      	strb	r3, [r7, #27]
 8004aca:	e038      	b.n	8004b3e <UART_SetConfig+0x282>
 8004acc:	2302      	movs	r3, #2
 8004ace:	76fb      	strb	r3, [r7, #27]
 8004ad0:	e035      	b.n	8004b3e <UART_SetConfig+0x282>
 8004ad2:	2304      	movs	r3, #4
 8004ad4:	76fb      	strb	r3, [r7, #27]
 8004ad6:	e032      	b.n	8004b3e <UART_SetConfig+0x282>
 8004ad8:	2308      	movs	r3, #8
 8004ada:	76fb      	strb	r3, [r7, #27]
 8004adc:	e02f      	b.n	8004b3e <UART_SetConfig+0x282>
 8004ade:	2310      	movs	r3, #16
 8004ae0:	76fb      	strb	r3, [r7, #27]
 8004ae2:	e02c      	b.n	8004b3e <UART_SetConfig+0x282>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a2d      	ldr	r2, [pc, #180]	; (8004ba0 <UART_SetConfig+0x2e4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d125      	bne.n	8004b3a <UART_SetConfig+0x27e>
 8004aee:	4b2e      	ldr	r3, [pc, #184]	; (8004ba8 <UART_SetConfig+0x2ec>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004af8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004afc:	d017      	beq.n	8004b2e <UART_SetConfig+0x272>
 8004afe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b02:	d817      	bhi.n	8004b34 <UART_SetConfig+0x278>
 8004b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b08:	d00b      	beq.n	8004b22 <UART_SetConfig+0x266>
 8004b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0e:	d811      	bhi.n	8004b34 <UART_SetConfig+0x278>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <UART_SetConfig+0x260>
 8004b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b18:	d006      	beq.n	8004b28 <UART_SetConfig+0x26c>
 8004b1a:	e00b      	b.n	8004b34 <UART_SetConfig+0x278>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	76fb      	strb	r3, [r7, #27]
 8004b20:	e00d      	b.n	8004b3e <UART_SetConfig+0x282>
 8004b22:	2302      	movs	r3, #2
 8004b24:	76fb      	strb	r3, [r7, #27]
 8004b26:	e00a      	b.n	8004b3e <UART_SetConfig+0x282>
 8004b28:	2304      	movs	r3, #4
 8004b2a:	76fb      	strb	r3, [r7, #27]
 8004b2c:	e007      	b.n	8004b3e <UART_SetConfig+0x282>
 8004b2e:	2308      	movs	r3, #8
 8004b30:	76fb      	strb	r3, [r7, #27]
 8004b32:	e004      	b.n	8004b3e <UART_SetConfig+0x282>
 8004b34:	2310      	movs	r3, #16
 8004b36:	76fb      	strb	r3, [r7, #27]
 8004b38:	e001      	b.n	8004b3e <UART_SetConfig+0x282>
 8004b3a:	2310      	movs	r3, #16
 8004b3c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a17      	ldr	r2, [pc, #92]	; (8004ba0 <UART_SetConfig+0x2e4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	f040 8087 	bne.w	8004c58 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b4a:	7efb      	ldrb	r3, [r7, #27]
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d837      	bhi.n	8004bc0 <UART_SetConfig+0x304>
 8004b50:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <UART_SetConfig+0x29c>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004b7d 	.word	0x08004b7d
 8004b5c:	08004bc1 	.word	0x08004bc1
 8004b60:	08004b85 	.word	0x08004b85
 8004b64:	08004bc1 	.word	0x08004bc1
 8004b68:	08004b8b 	.word	0x08004b8b
 8004b6c:	08004bc1 	.word	0x08004bc1
 8004b70:	08004bc1 	.word	0x08004bc1
 8004b74:	08004bc1 	.word	0x08004bc1
 8004b78:	08004b93 	.word	0x08004b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b7c:	f7fe fd96 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 8004b80:	6178      	str	r0, [r7, #20]
        break;
 8004b82:	e022      	b.n	8004bca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b84:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <UART_SetConfig+0x300>)
 8004b86:	617b      	str	r3, [r7, #20]
        break;
 8004b88:	e01f      	b.n	8004bca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b8a:	f7fe fcf7 	bl	800357c <HAL_RCC_GetSysClockFreq>
 8004b8e:	6178      	str	r0, [r7, #20]
        break;
 8004b90:	e01b      	b.n	8004bca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b96:	617b      	str	r3, [r7, #20]
        break;
 8004b98:	e017      	b.n	8004bca <UART_SetConfig+0x30e>
 8004b9a:	bf00      	nop
 8004b9c:	efff69f3 	.word	0xefff69f3
 8004ba0:	40008000 	.word	0x40008000
 8004ba4:	40013800 	.word	0x40013800
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	40004400 	.word	0x40004400
 8004bb0:	40004800 	.word	0x40004800
 8004bb4:	40004c00 	.word	0x40004c00
 8004bb8:	40005000 	.word	0x40005000
 8004bbc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	76bb      	strb	r3, [r7, #26]
        break;
 8004bc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 80f1 	beq.w	8004db4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	4413      	add	r3, r2
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d305      	bcc.n	8004bee <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d902      	bls.n	8004bf4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	76bb      	strb	r3, [r7, #26]
 8004bf2:	e0df      	b.n	8004db4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f04f 0100 	mov.w	r1, #0
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	020b      	lsls	r3, r1, #8
 8004c06:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c0a:	0202      	lsls	r2, r0, #8
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	6849      	ldr	r1, [r1, #4]
 8004c10:	0849      	lsrs	r1, r1, #1
 8004c12:	4608      	mov	r0, r1
 8004c14:	f04f 0100 	mov.w	r1, #0
 8004c18:	1814      	adds	r4, r2, r0
 8004c1a:	eb43 0501 	adc.w	r5, r3, r1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	461a      	mov	r2, r3
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	4620      	mov	r0, r4
 8004c2a:	4629      	mov	r1, r5
 8004c2c:	f7fb fade 	bl	80001ec <__aeabi_uldivmod>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4613      	mov	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c3e:	d308      	bcc.n	8004c52 <UART_SetConfig+0x396>
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c46:	d204      	bcs.n	8004c52 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	60da      	str	r2, [r3, #12]
 8004c50:	e0b0      	b.n	8004db4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	76bb      	strb	r3, [r7, #26]
 8004c56:	e0ad      	b.n	8004db4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c60:	d15c      	bne.n	8004d1c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004c62:	7efb      	ldrb	r3, [r7, #27]
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d828      	bhi.n	8004cba <UART_SetConfig+0x3fe>
 8004c68:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <UART_SetConfig+0x3b4>)
 8004c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6e:	bf00      	nop
 8004c70:	08004c95 	.word	0x08004c95
 8004c74:	08004c9d 	.word	0x08004c9d
 8004c78:	08004ca5 	.word	0x08004ca5
 8004c7c:	08004cbb 	.word	0x08004cbb
 8004c80:	08004cab 	.word	0x08004cab
 8004c84:	08004cbb 	.word	0x08004cbb
 8004c88:	08004cbb 	.word	0x08004cbb
 8004c8c:	08004cbb 	.word	0x08004cbb
 8004c90:	08004cb3 	.word	0x08004cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c94:	f7fe fd0a 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 8004c98:	6178      	str	r0, [r7, #20]
        break;
 8004c9a:	e013      	b.n	8004cc4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c9c:	f7fe fd1c 	bl	80036d8 <HAL_RCC_GetPCLK2Freq>
 8004ca0:	6178      	str	r0, [r7, #20]
        break;
 8004ca2:	e00f      	b.n	8004cc4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ca4:	4b49      	ldr	r3, [pc, #292]	; (8004dcc <UART_SetConfig+0x510>)
 8004ca6:	617b      	str	r3, [r7, #20]
        break;
 8004ca8:	e00c      	b.n	8004cc4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004caa:	f7fe fc67 	bl	800357c <HAL_RCC_GetSysClockFreq>
 8004cae:	6178      	str	r0, [r7, #20]
        break;
 8004cb0:	e008      	b.n	8004cc4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cb6:	617b      	str	r3, [r7, #20]
        break;
 8004cb8:	e004      	b.n	8004cc4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	76bb      	strb	r3, [r7, #26]
        break;
 8004cc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d074      	beq.n	8004db4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	005a      	lsls	r2, r3, #1
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	085b      	lsrs	r3, r3, #1
 8004cd4:	441a      	add	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b0f      	cmp	r3, #15
 8004ce6:	d916      	bls.n	8004d16 <UART_SetConfig+0x45a>
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cee:	d212      	bcs.n	8004d16 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	f023 030f 	bic.w	r3, r3, #15
 8004cf8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	085b      	lsrs	r3, r3, #1
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	89fb      	ldrh	r3, [r7, #14]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	89fa      	ldrh	r2, [r7, #14]
 8004d12:	60da      	str	r2, [r3, #12]
 8004d14:	e04e      	b.n	8004db4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	76bb      	strb	r3, [r7, #26]
 8004d1a:	e04b      	b.n	8004db4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d1c:	7efb      	ldrb	r3, [r7, #27]
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d827      	bhi.n	8004d72 <UART_SetConfig+0x4b6>
 8004d22:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <UART_SetConfig+0x46c>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004d4d 	.word	0x08004d4d
 8004d2c:	08004d55 	.word	0x08004d55
 8004d30:	08004d5d 	.word	0x08004d5d
 8004d34:	08004d73 	.word	0x08004d73
 8004d38:	08004d63 	.word	0x08004d63
 8004d3c:	08004d73 	.word	0x08004d73
 8004d40:	08004d73 	.word	0x08004d73
 8004d44:	08004d73 	.word	0x08004d73
 8004d48:	08004d6b 	.word	0x08004d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d4c:	f7fe fcae 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 8004d50:	6178      	str	r0, [r7, #20]
        break;
 8004d52:	e013      	b.n	8004d7c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d54:	f7fe fcc0 	bl	80036d8 <HAL_RCC_GetPCLK2Freq>
 8004d58:	6178      	str	r0, [r7, #20]
        break;
 8004d5a:	e00f      	b.n	8004d7c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d5c:	4b1b      	ldr	r3, [pc, #108]	; (8004dcc <UART_SetConfig+0x510>)
 8004d5e:	617b      	str	r3, [r7, #20]
        break;
 8004d60:	e00c      	b.n	8004d7c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d62:	f7fe fc0b 	bl	800357c <HAL_RCC_GetSysClockFreq>
 8004d66:	6178      	str	r0, [r7, #20]
        break;
 8004d68:	e008      	b.n	8004d7c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d6e:	617b      	str	r3, [r7, #20]
        break;
 8004d70:	e004      	b.n	8004d7c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	76bb      	strb	r3, [r7, #26]
        break;
 8004d7a:	bf00      	nop
    }

    if (pclk != 0U)
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d018      	beq.n	8004db4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	085a      	lsrs	r2, r3, #1
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	441a      	add	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	2b0f      	cmp	r3, #15
 8004d9c:	d908      	bls.n	8004db0 <UART_SetConfig+0x4f4>
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da4:	d204      	bcs.n	8004db0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	60da      	str	r2, [r3, #12]
 8004dae:	e001      	b.n	8004db4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004dc0:	7ebb      	ldrb	r3, [r7, #26]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3720      	adds	r7, #32
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	00f42400 	.word	0x00f42400

08004dd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01a      	beq.n	8004ee6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ece:	d10a      	bne.n	8004ee6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	605a      	str	r2, [r3, #4]
  }
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f24:	f7fd fa00 	bl	8002328 <HAL_GetTick>
 8004f28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d10e      	bne.n	8004f56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f82d 	bl	8004fa6 <UART_WaitOnFlagUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e023      	b.n	8004f9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d10e      	bne.n	8004f82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f817 	bl	8004fa6 <UART_WaitOnFlagUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e00d      	b.n	8004f9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2220      	movs	r2, #32
 8004f86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	603b      	str	r3, [r7, #0]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb6:	e05e      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbe:	d05a      	beq.n	8005076 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc0:	f7fd f9b2 	bl	8002328 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d302      	bcc.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d11b      	bne.n	800500e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fe4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0201 	bic.w	r2, r2, #1
 8004ff4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2220      	movs	r2, #32
 8005000:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e043      	b.n	8005096 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b00      	cmp	r3, #0
 800501a:	d02c      	beq.n	8005076 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800502a:	d124      	bne.n	8005076 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005034:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005044:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0201 	bic.w	r2, r2, #1
 8005054:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2220      	movs	r2, #32
 800505a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2220      	movs	r2, #32
 8005066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e00f      	b.n	8005096 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69da      	ldr	r2, [r3, #28]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4013      	ands	r3, r2
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	429a      	cmp	r2, r3
 8005084:	bf0c      	ite	eq
 8005086:	2301      	moveq	r3, #1
 8005088:	2300      	movne	r3, #0
 800508a:	b2db      	uxtb	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	429a      	cmp	r2, r3
 8005092:	d091      	beq.n	8004fb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800509e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80050a0:	2400      	movs	r4, #0
 80050a2:	2310      	movs	r3, #16
 80050a4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80050a8:	6803      	ldr	r3, [r0, #0]
 80050aa:	9400      	str	r4, [sp, #0]
 80050ac:	699e      	ldr	r6, [r3, #24]
 80050ae:	f88d 4004 	strb.w	r4, [sp, #4]
 80050b2:	4615      	mov	r5, r2
 80050b4:	466b      	mov	r3, sp
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	47b0      	blx	r6
 80050ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80050be:	f003 0306 	and.w	r3, r3, #6
 80050c2:	2b06      	cmp	r3, #6
 80050c4:	bf03      	ittte	eq
 80050c6:	9b00      	ldreq	r3, [sp, #0]
 80050c8:	602b      	streq	r3, [r5, #0]
 80050ca:	2001      	moveq	r0, #1
 80050cc:	4620      	movne	r0, r4
 80050ce:	b004      	add	sp, #16
 80050d0:	bd70      	pop	{r4, r5, r6, pc}

080050d2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80050d2:	9800      	ldr	r0, [sp, #0]
 80050d4:	4290      	cmp	r0, r2
 80050d6:	bf14      	ite	ne
 80050d8:	2001      	movne	r0, #1
 80050da:	2006      	moveq	r0, #6
 80050dc:	4770      	bx	lr
	...

080050e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80050e0:	b510      	push	{r4, lr}
 80050e2:	4b03      	ldr	r3, [pc, #12]	; (80050f0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80050e4:	6003      	str	r3, [r0, #0]
 80050e6:	4604      	mov	r4, r0
 80050e8:	f000 fc9f 	bl	8005a2a <_ZNSt9type_infoD1Ev>
 80050ec:	4620      	mov	r0, r4
 80050ee:	bd10      	pop	{r4, pc}
 80050f0:	08006b50 	.word	0x08006b50

080050f4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80050f4:	b510      	push	{r4, lr}
 80050f6:	4604      	mov	r4, r0
 80050f8:	f7ff fff2 	bl	80050e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80050fc:	4620      	mov	r0, r4
 80050fe:	2108      	movs	r1, #8
 8005100:	f000 f842 	bl	8005188 <_ZdlPvj>
 8005104:	4620      	mov	r0, r4
 8005106:	bd10      	pop	{r4, pc}

08005108 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8005108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800510c:	461f      	mov	r7, r3
 800510e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8005112:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005116:	4598      	cmp	r8, r3
 8005118:	4606      	mov	r6, r0
 800511a:	4615      	mov	r5, r2
 800511c:	d107      	bne.n	800512e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800511e:	9907      	ldr	r1, [sp, #28]
 8005120:	f000 fc86 	bl	8005a30 <_ZNKSt9type_infoeqERKS_>
 8005124:	b118      	cbz	r0, 800512e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8005126:	7165      	strb	r5, [r4, #5]
 8005128:	2000      	movs	r0, #0
 800512a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800512e:	4639      	mov	r1, r7
 8005130:	4630      	mov	r0, r6
 8005132:	f000 fc7d 	bl	8005a30 <_ZNKSt9type_infoeqERKS_>
 8005136:	2800      	cmp	r0, #0
 8005138:	d0f6      	beq.n	8005128 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 800513a:	2301      	movs	r3, #1
 800513c:	f8c4 8000 	str.w	r8, [r4]
 8005140:	7125      	strb	r5, [r4, #4]
 8005142:	71a3      	strb	r3, [r4, #6]
 8005144:	e7f0      	b.n	8005128 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08005146 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8005146:	b538      	push	{r3, r4, r5, lr}
 8005148:	4615      	mov	r5, r2
 800514a:	461c      	mov	r4, r3
 800514c:	f000 fc70 	bl	8005a30 <_ZNKSt9type_infoeqERKS_>
 8005150:	b120      	cbz	r0, 800515c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8005152:	2308      	movs	r3, #8
 8005154:	60e3      	str	r3, [r4, #12]
 8005156:	2306      	movs	r3, #6
 8005158:	6025      	str	r5, [r4, #0]
 800515a:	7123      	strb	r3, [r4, #4]
 800515c:	bd38      	pop	{r3, r4, r5, pc}

0800515e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800515e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005160:	4605      	mov	r5, r0
 8005162:	460c      	mov	r4, r1
 8005164:	9201      	str	r2, [sp, #4]
 8005166:	461e      	mov	r6, r3
 8005168:	f000 fc62 	bl	8005a30 <_ZNKSt9type_infoeqERKS_>
 800516c:	b950      	cbnz	r0, 8005184 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800516e:	2e03      	cmp	r6, #3
 8005170:	d808      	bhi.n	8005184 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	9a01      	ldr	r2, [sp, #4]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	4629      	mov	r1, r5
 800517a:	4620      	mov	r0, r4
 800517c:	b002      	add	sp, #8
 800517e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005182:	4718      	bx	r3
 8005184:	b002      	add	sp, #8
 8005186:	bd70      	pop	{r4, r5, r6, pc}

08005188 <_ZdlPvj>:
 8005188:	f000 bfb4 	b.w	80060f4 <_ZdlPv>

0800518c <_ZdaPvj>:
 800518c:	f000 bfb4 	b.w	80060f8 <_ZdaPv>

08005190 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	4c08      	ldr	r4, [pc, #32]	; (80051b4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8005194:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8005198:	4628      	mov	r0, r5
 800519a:	60e5      	str	r5, [r4, #12]
 800519c:	f001 f8fa 	bl	8006394 <malloc>
 80051a0:	60a0      	str	r0, [r4, #8]
 80051a2:	b910      	cbnz	r0, 80051aa <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 80051a4:	60e0      	str	r0, [r4, #12]
 80051a6:	6060      	str	r0, [r4, #4]
 80051a8:	bd38      	pop	{r3, r4, r5, pc}
 80051aa:	2300      	movs	r3, #0
 80051ac:	6060      	str	r0, [r4, #4]
 80051ae:	6005      	str	r5, [r0, #0]
 80051b0:	6043      	str	r3, [r0, #4]
 80051b2:	e7f9      	b.n	80051a8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 80051b4:	200000b4 	.word	0x200000b4

080051b8 <__cxa_end_cleanup>:
 80051b8:	b41e      	push	{r1, r2, r3, r4}
 80051ba:	f000 f89c 	bl	80052f6 <__gnu_end_cleanup>
 80051be:	bc1e      	pop	{r1, r2, r3, r4}
 80051c0:	f7fb fef8 	bl	8000fb4 <_Unwind_Resume>

080051c4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80051c4:	7803      	ldrb	r3, [r0, #0]
 80051c6:	2b47      	cmp	r3, #71	; 0x47
 80051c8:	d117      	bne.n	80051fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80051ca:	7843      	ldrb	r3, [r0, #1]
 80051cc:	2b4e      	cmp	r3, #78	; 0x4e
 80051ce:	d114      	bne.n	80051fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80051d0:	7883      	ldrb	r3, [r0, #2]
 80051d2:	2b55      	cmp	r3, #85	; 0x55
 80051d4:	d111      	bne.n	80051fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80051d6:	78c3      	ldrb	r3, [r0, #3]
 80051d8:	2b43      	cmp	r3, #67	; 0x43
 80051da:	d10e      	bne.n	80051fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80051dc:	7903      	ldrb	r3, [r0, #4]
 80051de:	2b43      	cmp	r3, #67	; 0x43
 80051e0:	d10b      	bne.n	80051fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80051e2:	7943      	ldrb	r3, [r0, #5]
 80051e4:	2b2b      	cmp	r3, #43	; 0x2b
 80051e6:	d108      	bne.n	80051fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80051e8:	7983      	ldrb	r3, [r0, #6]
 80051ea:	2b2b      	cmp	r3, #43	; 0x2b
 80051ec:	d105      	bne.n	80051fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80051ee:	79c0      	ldrb	r0, [r0, #7]
 80051f0:	2801      	cmp	r0, #1
 80051f2:	bf8c      	ite	hi
 80051f4:	2000      	movhi	r0, #0
 80051f6:	2001      	movls	r0, #1
 80051f8:	4770      	bx	lr
 80051fa:	2000      	movs	r0, #0
 80051fc:	4770      	bx	lr
	...

08005200 <__cxa_type_match>:
 8005200:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005204:	461d      	mov	r5, r3
 8005206:	7803      	ldrb	r3, [r0, #0]
 8005208:	2b47      	cmp	r3, #71	; 0x47
 800520a:	460e      	mov	r6, r1
 800520c:	4602      	mov	r2, r0
 800520e:	79c1      	ldrb	r1, [r0, #7]
 8005210:	d113      	bne.n	800523a <__cxa_type_match+0x3a>
 8005212:	7843      	ldrb	r3, [r0, #1]
 8005214:	2b4e      	cmp	r3, #78	; 0x4e
 8005216:	d110      	bne.n	800523a <__cxa_type_match+0x3a>
 8005218:	7883      	ldrb	r3, [r0, #2]
 800521a:	2b55      	cmp	r3, #85	; 0x55
 800521c:	d10d      	bne.n	800523a <__cxa_type_match+0x3a>
 800521e:	78c3      	ldrb	r3, [r0, #3]
 8005220:	2b43      	cmp	r3, #67	; 0x43
 8005222:	d10a      	bne.n	800523a <__cxa_type_match+0x3a>
 8005224:	7903      	ldrb	r3, [r0, #4]
 8005226:	2b46      	cmp	r3, #70	; 0x46
 8005228:	d107      	bne.n	800523a <__cxa_type_match+0x3a>
 800522a:	7943      	ldrb	r3, [r0, #5]
 800522c:	2b4f      	cmp	r3, #79	; 0x4f
 800522e:	d104      	bne.n	800523a <__cxa_type_match+0x3a>
 8005230:	7983      	ldrb	r3, [r0, #6]
 8005232:	2b52      	cmp	r3, #82	; 0x52
 8005234:	d101      	bne.n	800523a <__cxa_type_match+0x3a>
 8005236:	2900      	cmp	r1, #0
 8005238:	d031      	beq.n	800529e <__cxa_type_match+0x9e>
 800523a:	4610      	mov	r0, r2
 800523c:	f7ff ffc2 	bl	80051c4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005240:	f080 0001 	eor.w	r0, r0, #1
 8005244:	b2c0      	uxtb	r0, r0
 8005246:	2300      	movs	r3, #0
 8005248:	2400      	movs	r4, #0
 800524a:	9401      	str	r4, [sp, #4]
 800524c:	bb53      	cbnz	r3, 80052a4 <__cxa_type_match+0xa4>
 800524e:	bb58      	cbnz	r0, 80052a8 <__cxa_type_match+0xa8>
 8005250:	2901      	cmp	r1, #1
 8005252:	bf0a      	itet	eq
 8005254:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8005258:	f1a2 0320 	subne.w	r3, r2, #32
 800525c:	3b78      	subeq	r3, #120	; 0x78
 800525e:	2901      	cmp	r1, #1
 8005260:	bf08      	it	eq
 8005262:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8005266:	681c      	ldr	r4, [r3, #0]
 8005268:	bf18      	it	ne
 800526a:	3258      	addne	r2, #88	; 0x58
 800526c:	9201      	str	r2, [sp, #4]
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	4620      	mov	r0, r4
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	4798      	blx	r3
 8005276:	b1c8      	cbz	r0, 80052ac <__cxa_type_match+0xac>
 8005278:	9b01      	ldr	r3, [sp, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	9301      	str	r3, [sp, #4]
 800527e:	2702      	movs	r7, #2
 8005280:	6833      	ldr	r3, [r6, #0]
 8005282:	aa01      	add	r2, sp, #4
 8005284:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8005288:	4621      	mov	r1, r4
 800528a:	2301      	movs	r3, #1
 800528c:	4630      	mov	r0, r6
 800528e:	47c0      	blx	r8
 8005290:	b170      	cbz	r0, 80052b0 <__cxa_type_match+0xb0>
 8005292:	9b01      	ldr	r3, [sp, #4]
 8005294:	602b      	str	r3, [r5, #0]
 8005296:	4638      	mov	r0, r7
 8005298:	b002      	add	sp, #8
 800529a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800529e:	2301      	movs	r3, #1
 80052a0:	4608      	mov	r0, r1
 80052a2:	e7d1      	b.n	8005248 <__cxa_type_match+0x48>
 80052a4:	4c03      	ldr	r4, [pc, #12]	; (80052b4 <__cxa_type_match+0xb4>)
 80052a6:	e7e2      	b.n	800526e <__cxa_type_match+0x6e>
 80052a8:	4c03      	ldr	r4, [pc, #12]	; (80052b8 <__cxa_type_match+0xb8>)
 80052aa:	e7e0      	b.n	800526e <__cxa_type_match+0x6e>
 80052ac:	2701      	movs	r7, #1
 80052ae:	e7e7      	b.n	8005280 <__cxa_type_match+0x80>
 80052b0:	4607      	mov	r7, r0
 80052b2:	e7f0      	b.n	8005296 <__cxa_type_match+0x96>
 80052b4:	08006b74 	.word	0x08006b74
 80052b8:	08006b7c 	.word	0x08006b7c

080052bc <__cxa_begin_cleanup>:
 80052bc:	b510      	push	{r4, lr}
 80052be:	4604      	mov	r4, r0
 80052c0:	f000 f878 	bl	80053b4 <__cxa_get_globals>
 80052c4:	4602      	mov	r2, r0
 80052c6:	4620      	mov	r0, r4
 80052c8:	f1a4 0120 	sub.w	r1, r4, #32
 80052cc:	f7ff ff7a 	bl	80051c4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80052d0:	b160      	cbz	r0, 80052ec <__cxa_begin_cleanup+0x30>
 80052d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80052d6:	3301      	adds	r3, #1
 80052d8:	2b01      	cmp	r3, #1
 80052da:	f844 3c04 	str.w	r3, [r4, #-4]
 80052de:	d103      	bne.n	80052e8 <__cxa_begin_cleanup+0x2c>
 80052e0:	6893      	ldr	r3, [r2, #8]
 80052e2:	f844 3c08 	str.w	r3, [r4, #-8]
 80052e6:	6091      	str	r1, [r2, #8]
 80052e8:	2001      	movs	r0, #1
 80052ea:	bd10      	pop	{r4, pc}
 80052ec:	6893      	ldr	r3, [r2, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0f9      	beq.n	80052e6 <__cxa_begin_cleanup+0x2a>
 80052f2:	f000 faf1 	bl	80058d8 <_ZSt9terminatev>

080052f6 <__gnu_end_cleanup>:
 80052f6:	b510      	push	{r4, lr}
 80052f8:	f000 f85c 	bl	80053b4 <__cxa_get_globals>
 80052fc:	6882      	ldr	r2, [r0, #8]
 80052fe:	4601      	mov	r1, r0
 8005300:	b90a      	cbnz	r2, 8005306 <__gnu_end_cleanup+0x10>
 8005302:	f000 fae9 	bl	80058d8 <_ZSt9terminatev>
 8005306:	f102 0420 	add.w	r4, r2, #32
 800530a:	4620      	mov	r0, r4
 800530c:	f7ff ff5a 	bl	80051c4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005310:	b140      	cbz	r0, 8005324 <__gnu_end_cleanup+0x2e>
 8005312:	69d3      	ldr	r3, [r2, #28]
 8005314:	3b01      	subs	r3, #1
 8005316:	61d3      	str	r3, [r2, #28]
 8005318:	b913      	cbnz	r3, 8005320 <__gnu_end_cleanup+0x2a>
 800531a:	6990      	ldr	r0, [r2, #24]
 800531c:	6088      	str	r0, [r1, #8]
 800531e:	6193      	str	r3, [r2, #24]
 8005320:	4620      	mov	r0, r4
 8005322:	bd10      	pop	{r4, pc}
 8005324:	6088      	str	r0, [r1, #8]
 8005326:	e7fb      	b.n	8005320 <__gnu_end_cleanup+0x2a>

08005328 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8005328:	7803      	ldrb	r3, [r0, #0]
 800532a:	2b47      	cmp	r3, #71	; 0x47
 800532c:	d117      	bne.n	800535e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800532e:	7843      	ldrb	r3, [r0, #1]
 8005330:	2b4e      	cmp	r3, #78	; 0x4e
 8005332:	d114      	bne.n	800535e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005334:	7883      	ldrb	r3, [r0, #2]
 8005336:	2b55      	cmp	r3, #85	; 0x55
 8005338:	d111      	bne.n	800535e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800533a:	78c3      	ldrb	r3, [r0, #3]
 800533c:	2b43      	cmp	r3, #67	; 0x43
 800533e:	d10e      	bne.n	800535e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005340:	7903      	ldrb	r3, [r0, #4]
 8005342:	2b43      	cmp	r3, #67	; 0x43
 8005344:	d10b      	bne.n	800535e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005346:	7943      	ldrb	r3, [r0, #5]
 8005348:	2b2b      	cmp	r3, #43	; 0x2b
 800534a:	d108      	bne.n	800535e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800534c:	7983      	ldrb	r3, [r0, #6]
 800534e:	2b2b      	cmp	r3, #43	; 0x2b
 8005350:	d105      	bne.n	800535e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005352:	79c0      	ldrb	r0, [r0, #7]
 8005354:	2801      	cmp	r0, #1
 8005356:	bf8c      	ite	hi
 8005358:	2000      	movhi	r0, #0
 800535a:	2001      	movls	r0, #1
 800535c:	4770      	bx	lr
 800535e:	2000      	movs	r0, #0
 8005360:	4770      	bx	lr

08005362 <__cxa_begin_catch>:
 8005362:	b538      	push	{r3, r4, r5, lr}
 8005364:	4604      	mov	r4, r0
 8005366:	f000 f825 	bl	80053b4 <__cxa_get_globals>
 800536a:	6805      	ldr	r5, [r0, #0]
 800536c:	4602      	mov	r2, r0
 800536e:	4620      	mov	r0, r4
 8005370:	f1a4 0120 	sub.w	r1, r4, #32
 8005374:	f7ff ffd8 	bl	8005328 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005378:	b928      	cbnz	r0, 8005386 <__cxa_begin_catch+0x24>
 800537a:	b10d      	cbz	r5, 8005380 <__cxa_begin_catch+0x1e>
 800537c:	f000 faac 	bl	80058d8 <_ZSt9terminatev>
 8005380:	6011      	str	r1, [r2, #0]
 8005382:	4628      	mov	r0, r5
 8005384:	bd38      	pop	{r3, r4, r5, pc}
 8005386:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800538a:	2b00      	cmp	r3, #0
 800538c:	bfb4      	ite	lt
 800538e:	f1c3 0301 	rsblt	r3, r3, #1
 8005392:	3301      	addge	r3, #1
 8005394:	f844 3c0c 	str.w	r3, [r4, #-12]
 8005398:	6853      	ldr	r3, [r2, #4]
 800539a:	428d      	cmp	r5, r1
 800539c:	f103 33ff 	add.w	r3, r3, #4294967295
 80053a0:	6053      	str	r3, [r2, #4]
 80053a2:	4620      	mov	r0, r4
 80053a4:	bf1c      	itt	ne
 80053a6:	f844 5c10 	strne.w	r5, [r4, #-16]
 80053aa:	6011      	strne	r1, [r2, #0]
 80053ac:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80053ae:	f7fb fa51 	bl	8000854 <_Unwind_Complete>
 80053b2:	e7e6      	b.n	8005382 <__cxa_begin_catch+0x20>

080053b4 <__cxa_get_globals>:
 80053b4:	4800      	ldr	r0, [pc, #0]	; (80053b8 <__cxa_get_globals+0x4>)
 80053b6:	4770      	bx	lr
 80053b8:	200000c4 	.word	0x200000c4

080053bc <_ZL12read_uleb128PKhPm>:
 80053bc:	b530      	push	{r4, r5, lr}
 80053be:	2300      	movs	r3, #0
 80053c0:	461a      	mov	r2, r3
 80053c2:	f810 5b01 	ldrb.w	r5, [r0], #1
 80053c6:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 80053ca:	4094      	lsls	r4, r2
 80053cc:	4323      	orrs	r3, r4
 80053ce:	062c      	lsls	r4, r5, #24
 80053d0:	f102 0207 	add.w	r2, r2, #7
 80053d4:	d4f5      	bmi.n	80053c2 <_ZL12read_uleb128PKhPm+0x6>
 80053d6:	600b      	str	r3, [r1, #0]
 80053d8:	bd30      	pop	{r4, r5, pc}

080053da <_ZL12read_sleb128PKhPl>:
 80053da:	b530      	push	{r4, r5, lr}
 80053dc:	2300      	movs	r3, #0
 80053de:	461a      	mov	r2, r3
 80053e0:	f810 4b01 	ldrb.w	r4, [r0], #1
 80053e4:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 80053e8:	4095      	lsls	r5, r2
 80053ea:	432b      	orrs	r3, r5
 80053ec:	0625      	lsls	r5, r4, #24
 80053ee:	f102 0207 	add.w	r2, r2, #7
 80053f2:	d4f5      	bmi.n	80053e0 <_ZL12read_sleb128PKhPl+0x6>
 80053f4:	2a1f      	cmp	r2, #31
 80053f6:	d806      	bhi.n	8005406 <_ZL12read_sleb128PKhPl+0x2c>
 80053f8:	0664      	lsls	r4, r4, #25
 80053fa:	bf42      	ittt	mi
 80053fc:	f04f 34ff 	movmi.w	r4, #4294967295
 8005400:	fa04 f202 	lslmi.w	r2, r4, r2
 8005404:	4313      	orrmi	r3, r2
 8005406:	600b      	str	r3, [r1, #0]
 8005408:	bd30      	pop	{r4, r5, pc}

0800540a <_ZL28read_encoded_value_with_basehjPKhPj>:
 800540a:	2850      	cmp	r0, #80	; 0x50
 800540c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005410:	4606      	mov	r6, r0
 8005412:	4688      	mov	r8, r1
 8005414:	4615      	mov	r5, r2
 8005416:	461f      	mov	r7, r3
 8005418:	d108      	bne.n	800542c <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 800541a:	3203      	adds	r2, #3
 800541c:	f022 0003 	bic.w	r0, r2, #3
 8005420:	f850 4b04 	ldr.w	r4, [r0], #4
 8005424:	603c      	str	r4, [r7, #0]
 8005426:	b002      	add	sp, #8
 8005428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800542c:	f000 030f 	and.w	r3, r0, #15
 8005430:	2b0c      	cmp	r3, #12
 8005432:	d82e      	bhi.n	8005492 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 8005434:	e8df f003 	tbb	[pc, r3]
 8005438:	251d0725 	.word	0x251d0725
 800543c:	2d2d2d29 	.word	0x2d2d2d29
 8005440:	2521182d 	.word	0x2521182d
 8005444:	29          	.byte	0x29
 8005445:	00          	.byte	0x00
 8005446:	a901      	add	r1, sp, #4
 8005448:	4628      	mov	r0, r5
 800544a:	f7ff ffb7 	bl	80053bc <_ZL12read_uleb128PKhPm>
 800544e:	9c01      	ldr	r4, [sp, #4]
 8005450:	2c00      	cmp	r4, #0
 8005452:	d0e7      	beq.n	8005424 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8005454:	f006 0370 	and.w	r3, r6, #112	; 0x70
 8005458:	2b10      	cmp	r3, #16
 800545a:	bf08      	it	eq
 800545c:	46a8      	moveq	r8, r5
 800545e:	4444      	add	r4, r8
 8005460:	0633      	lsls	r3, r6, #24
 8005462:	bf48      	it	mi
 8005464:	6824      	ldrmi	r4, [r4, #0]
 8005466:	e7dd      	b.n	8005424 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8005468:	a901      	add	r1, sp, #4
 800546a:	4628      	mov	r0, r5
 800546c:	f7ff ffb5 	bl	80053da <_ZL12read_sleb128PKhPl>
 8005470:	e7ed      	b.n	800544e <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 8005472:	4628      	mov	r0, r5
 8005474:	f830 4b02 	ldrh.w	r4, [r0], #2
 8005478:	e7ea      	b.n	8005450 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800547a:	4628      	mov	r0, r5
 800547c:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8005480:	e7e6      	b.n	8005450 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8005482:	4628      	mov	r0, r5
 8005484:	f850 4b04 	ldr.w	r4, [r0], #4
 8005488:	e7e2      	b.n	8005450 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800548a:	4628      	mov	r0, r5
 800548c:	f850 4b08 	ldr.w	r4, [r0], #8
 8005490:	e7de      	b.n	8005450 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8005492:	f000 ff3e 	bl	8006312 <abort>

08005496 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8005496:	b508      	push	{r3, lr}
 8005498:	4603      	mov	r3, r0
 800549a:	2bff      	cmp	r3, #255	; 0xff
 800549c:	4608      	mov	r0, r1
 800549e:	d010      	beq.n	80054c2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 80054a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80054a4:	2a30      	cmp	r2, #48	; 0x30
 80054a6:	d012      	beq.n	80054ce <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 80054a8:	d807      	bhi.n	80054ba <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 80054aa:	2a20      	cmp	r2, #32
 80054ac:	d00b      	beq.n	80054c6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 80054ae:	d802      	bhi.n	80054b6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 80054b0:	f013 0f60 	tst.w	r3, #96	; 0x60
 80054b4:	d005      	beq.n	80054c2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 80054b6:	f000 ff2c 	bl	8006312 <abort>
 80054ba:	2a40      	cmp	r2, #64	; 0x40
 80054bc:	d00b      	beq.n	80054d6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 80054be:	2a50      	cmp	r2, #80	; 0x50
 80054c0:	d1f9      	bne.n	80054b6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 80054c2:	2000      	movs	r0, #0
 80054c4:	bd08      	pop	{r3, pc}
 80054c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80054ca:	f001 baa2 	b.w	8006a12 <_Unwind_GetTextRelBase>
 80054ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80054d2:	f001 ba9b 	b.w	8006a0c <_Unwind_GetDataRelBase>
 80054d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80054da:	f7fb bf43 	b.w	8001364 <_Unwind_GetRegionStart>

080054de <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 80054de:	b513      	push	{r0, r1, r4, lr}
 80054e0:	460c      	mov	r4, r1
 80054e2:	4601      	mov	r1, r0
 80054e4:	4620      	mov	r0, r4
 80054e6:	e9cd 3200 	strd	r3, r2, [sp]
 80054ea:	f7ff ffd4 	bl	8005496 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80054ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80054f2:	4601      	mov	r1, r0
 80054f4:	4620      	mov	r0, r4
 80054f6:	b002      	add	sp, #8
 80054f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054fc:	f7ff bf85 	b.w	800540a <_ZL28read_encoded_value_with_basehjPKhPj>

08005500 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8005500:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005502:	460c      	mov	r4, r1
 8005504:	4615      	mov	r5, r2
 8005506:	4606      	mov	r6, r0
 8005508:	b328      	cbz	r0, 8005556 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 800550a:	f7fb ff2b 	bl	8001364 <_Unwind_GetRegionStart>
 800550e:	4603      	mov	r3, r0
 8005510:	4620      	mov	r0, r4
 8005512:	602b      	str	r3, [r5, #0]
 8005514:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005518:	29ff      	cmp	r1, #255	; 0xff
 800551a:	d01e      	beq.n	800555a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 800551c:	4602      	mov	r2, r0
 800551e:	1d2b      	adds	r3, r5, #4
 8005520:	4630      	mov	r0, r6
 8005522:	f7ff ffdc 	bl	80054de <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8005526:	f810 3b01 	ldrb.w	r3, [r0], #1
 800552a:	752b      	strb	r3, [r5, #20]
 800552c:	2bff      	cmp	r3, #255	; 0xff
 800552e:	d016      	beq.n	800555e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 8005530:	2310      	movs	r3, #16
 8005532:	752b      	strb	r3, [r5, #20]
 8005534:	a901      	add	r1, sp, #4
 8005536:	f7ff ff41 	bl	80053bc <_ZL12read_uleb128PKhPm>
 800553a:	9b01      	ldr	r3, [sp, #4]
 800553c:	4403      	add	r3, r0
 800553e:	60eb      	str	r3, [r5, #12]
 8005540:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005544:	756b      	strb	r3, [r5, #21]
 8005546:	a901      	add	r1, sp, #4
 8005548:	f7ff ff38 	bl	80053bc <_ZL12read_uleb128PKhPm>
 800554c:	9b01      	ldr	r3, [sp, #4]
 800554e:	4403      	add	r3, r0
 8005550:	612b      	str	r3, [r5, #16]
 8005552:	b002      	add	sp, #8
 8005554:	bd70      	pop	{r4, r5, r6, pc}
 8005556:	4603      	mov	r3, r0
 8005558:	e7da      	b.n	8005510 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 800555a:	606b      	str	r3, [r5, #4]
 800555c:	e7e3      	b.n	8005526 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 800555e:	2300      	movs	r3, #0
 8005560:	e7ed      	b.n	800553e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

08005562 <_Unwind_GetGR>:
 8005562:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005564:	ab03      	add	r3, sp, #12
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	2300      	movs	r3, #0
 800556a:	460a      	mov	r2, r1
 800556c:	4619      	mov	r1, r3
 800556e:	f7fb f979 	bl	8000864 <_Unwind_VRS_Get>
 8005572:	9803      	ldr	r0, [sp, #12]
 8005574:	b005      	add	sp, #20
 8005576:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800557c <__gxx_personality_v0>:
 800557c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005580:	b091      	sub	sp, #68	; 0x44
 8005582:	2300      	movs	r3, #0
 8005584:	9305      	str	r3, [sp, #20]
 8005586:	f000 0303 	and.w	r3, r0, #3
 800558a:	2b01      	cmp	r3, #1
 800558c:	4606      	mov	r6, r0
 800558e:	460c      	mov	r4, r1
 8005590:	4617      	mov	r7, r2
 8005592:	d00e      	beq.n	80055b2 <__gxx_personality_v0+0x36>
 8005594:	2b02      	cmp	r3, #2
 8005596:	d003      	beq.n	80055a0 <__gxx_personality_v0+0x24>
 8005598:	2b00      	cmp	r3, #0
 800559a:	d13b      	bne.n	8005614 <__gxx_personality_v0+0x98>
 800559c:	0701      	lsls	r1, r0, #28
 800559e:	d53b      	bpl.n	8005618 <__gxx_personality_v0+0x9c>
 80055a0:	4639      	mov	r1, r7
 80055a2:	4620      	mov	r0, r4
 80055a4:	f7fb fec8 	bl	8001338 <__gnu_unwind_frame>
 80055a8:	b390      	cbz	r0, 8005610 <__gxx_personality_v0+0x94>
 80055aa:	2009      	movs	r0, #9
 80055ac:	b011      	add	sp, #68	; 0x44
 80055ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b2:	0702      	lsls	r2, r0, #28
 80055b4:	d406      	bmi.n	80055c4 <__gxx_personality_v0+0x48>
 80055b6:	6a0d      	ldr	r5, [r1, #32]
 80055b8:	4638      	mov	r0, r7
 80055ba:	210d      	movs	r1, #13
 80055bc:	f7ff ffd1 	bl	8005562 <_Unwind_GetGR>
 80055c0:	4285      	cmp	r5, r0
 80055c2:	d02b      	beq.n	800561c <__gxx_personality_v0+0xa0>
 80055c4:	2002      	movs	r0, #2
 80055c6:	2300      	movs	r3, #0
 80055c8:	f006 0608 	and.w	r6, r6, #8
 80055cc:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 80055d0:	4306      	orrs	r6, r0
 80055d2:	f8cd a000 	str.w	sl, [sp]
 80055d6:	220c      	movs	r2, #12
 80055d8:	4619      	mov	r1, r3
 80055da:	4638      	mov	r0, r7
 80055dc:	940a      	str	r4, [sp, #40]	; 0x28
 80055de:	f7fb f965 	bl	80008ac <_Unwind_VRS_Set>
 80055e2:	2e06      	cmp	r6, #6
 80055e4:	d11c      	bne.n	8005620 <__gxx_personality_v0+0xa4>
 80055e6:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 80055ea:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 80055ee:	f1b8 0f00 	cmp.w	r8, #0
 80055f2:	bf0c      	ite	eq
 80055f4:	f04f 0b01 	moveq.w	fp, #1
 80055f8:	f04f 0b03 	movne.w	fp, #3
 80055fc:	f016 0608 	ands.w	r6, r6, #8
 8005600:	f000 810c 	beq.w	800581c <__gxx_personality_v0+0x2a0>
 8005604:	f1bb 0f01 	cmp.w	fp, #1
 8005608:	f040 8104 	bne.w	8005814 <__gxx_personality_v0+0x298>
 800560c:	f000 f964 	bl	80058d8 <_ZSt9terminatev>
 8005610:	2008      	movs	r0, #8
 8005612:	e7cb      	b.n	80055ac <__gxx_personality_v0+0x30>
 8005614:	f000 fe7d 	bl	8006312 <abort>
 8005618:	2001      	movs	r0, #1
 800561a:	e7d4      	b.n	80055c6 <__gxx_personality_v0+0x4a>
 800561c:	2006      	movs	r0, #6
 800561e:	e7d2      	b.n	80055c6 <__gxx_personality_v0+0x4a>
 8005620:	4638      	mov	r0, r7
 8005622:	f7fb fea5 	bl	8001370 <_Unwind_GetLanguageSpecificData>
 8005626:	4681      	mov	r9, r0
 8005628:	2800      	cmp	r0, #0
 800562a:	d0b9      	beq.n	80055a0 <__gxx_personality_v0+0x24>
 800562c:	4652      	mov	r2, sl
 800562e:	4601      	mov	r1, r0
 8005630:	4638      	mov	r0, r7
 8005632:	f7ff ff65 	bl	8005500 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8005636:	4639      	mov	r1, r7
 8005638:	4605      	mov	r5, r0
 800563a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800563e:	f7ff ff2a 	bl	8005496 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8005642:	210f      	movs	r1, #15
 8005644:	900c      	str	r0, [sp, #48]	; 0x30
 8005646:	4638      	mov	r0, r7
 8005648:	f7ff ff8b 	bl	8005562 <_Unwind_GetGR>
 800564c:	f020 0801 	bic.w	r8, r0, #1
 8005650:	f108 38ff 	add.w	r8, r8, #4294967295
 8005654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005656:	42ab      	cmp	r3, r5
 8005658:	f240 80c4 	bls.w	80057e4 <__gxx_personality_v0+0x268>
 800565c:	462a      	mov	r2, r5
 800565e:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8005662:	ab06      	add	r3, sp, #24
 8005664:	2000      	movs	r0, #0
 8005666:	f7ff ff3a 	bl	80054de <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800566a:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800566e:	4602      	mov	r2, r0
 8005670:	ab07      	add	r3, sp, #28
 8005672:	2000      	movs	r0, #0
 8005674:	f7ff ff33 	bl	80054de <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8005678:	ab08      	add	r3, sp, #32
 800567a:	4602      	mov	r2, r0
 800567c:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8005680:	2000      	movs	r0, #0
 8005682:	f7ff ff2c 	bl	80054de <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8005686:	a909      	add	r1, sp, #36	; 0x24
 8005688:	f7ff fe98 	bl	80053bc <_ZL12read_uleb128PKhPm>
 800568c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800568e:	9a06      	ldr	r2, [sp, #24]
 8005690:	4413      	add	r3, r2
 8005692:	4543      	cmp	r3, r8
 8005694:	4605      	mov	r5, r0
 8005696:	d901      	bls.n	800569c <__gxx_personality_v0+0x120>
 8005698:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800569a:	e7db      	b.n	8005654 <__gxx_personality_v0+0xd8>
 800569c:	9a07      	ldr	r2, [sp, #28]
 800569e:	4413      	add	r3, r2
 80056a0:	4543      	cmp	r3, r8
 80056a2:	d9d7      	bls.n	8005654 <__gxx_personality_v0+0xd8>
 80056a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056a8:	f1b8 0f00 	cmp.w	r8, #0
 80056ac:	d001      	beq.n	80056b2 <__gxx_personality_v0+0x136>
 80056ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056b0:	4498      	add	r8, r3
 80056b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80056b4:	b115      	cbz	r5, 80056bc <__gxx_personality_v0+0x140>
 80056b6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80056b8:	3d01      	subs	r5, #1
 80056ba:	4405      	add	r5, r0
 80056bc:	f1b8 0f00 	cmp.w	r8, #0
 80056c0:	f43f af6e 	beq.w	80055a0 <__gxx_personality_v0+0x24>
 80056c4:	2d00      	cmp	r5, #0
 80056c6:	f000 80f7 	beq.w	80058b8 <__gxx_personality_v0+0x33c>
 80056ca:	f016 0308 	ands.w	r3, r6, #8
 80056ce:	9302      	str	r3, [sp, #8]
 80056d0:	d034      	beq.n	800573c <__gxx_personality_v0+0x1c0>
 80056d2:	2347      	movs	r3, #71	; 0x47
 80056d4:	7023      	strb	r3, [r4, #0]
 80056d6:	234e      	movs	r3, #78	; 0x4e
 80056d8:	7063      	strb	r3, [r4, #1]
 80056da:	2355      	movs	r3, #85	; 0x55
 80056dc:	70a3      	strb	r3, [r4, #2]
 80056de:	2343      	movs	r3, #67	; 0x43
 80056e0:	70e3      	strb	r3, [r4, #3]
 80056e2:	2346      	movs	r3, #70	; 0x46
 80056e4:	7123      	strb	r3, [r4, #4]
 80056e6:	234f      	movs	r3, #79	; 0x4f
 80056e8:	7163      	strb	r3, [r4, #5]
 80056ea:	2352      	movs	r3, #82	; 0x52
 80056ec:	71a3      	strb	r3, [r4, #6]
 80056ee:	2300      	movs	r3, #0
 80056f0:	71e3      	strb	r3, [r4, #7]
 80056f2:	f04f 0b00 	mov.w	fp, #0
 80056f6:	a907      	add	r1, sp, #28
 80056f8:	4628      	mov	r0, r5
 80056fa:	f7ff fe6e 	bl	80053da <_ZL12read_sleb128PKhPl>
 80056fe:	a908      	add	r1, sp, #32
 8005700:	9003      	str	r0, [sp, #12]
 8005702:	f7ff fe6a 	bl	80053da <_ZL12read_sleb128PKhPl>
 8005706:	9907      	ldr	r1, [sp, #28]
 8005708:	2900      	cmp	r1, #0
 800570a:	d068      	beq.n	80057de <__gxx_personality_v0+0x262>
 800570c:	dd3a      	ble.n	8005784 <__gxx_personality_v0+0x208>
 800570e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8005712:	28ff      	cmp	r0, #255	; 0xff
 8005714:	d032      	beq.n	800577c <__gxx_personality_v0+0x200>
 8005716:	f000 0307 	and.w	r3, r0, #7
 800571a:	2b04      	cmp	r3, #4
 800571c:	f63f af7a 	bhi.w	8005614 <__gxx_personality_v0+0x98>
 8005720:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <__gxx_personality_v0+0x1ac>)
 8005722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005726:	bf00      	nop
 8005728:	08005781 	.word	0x08005781
 800572c:	08005615 	.word	0x08005615
 8005730:	0800574f 	.word	0x0800574f
 8005734:	08005781 	.word	0x08005781
 8005738:	08005779 	.word	0x08005779
 800573c:	79e3      	ldrb	r3, [r4, #7]
 800573e:	2b01      	cmp	r3, #1
 8005740:	bf0c      	ite	eq
 8005742:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8005746:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 800574a:	9305      	str	r3, [sp, #20]
 800574c:	e7d1      	b.n	80056f2 <__gxx_personality_v0+0x176>
 800574e:	2502      	movs	r5, #2
 8005750:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005752:	ab09      	add	r3, sp, #36	; 0x24
 8005754:	fb05 2211 	mls	r2, r5, r1, r2
 8005758:	990c      	ldr	r1, [sp, #48]	; 0x30
 800575a:	f7ff fe56 	bl	800540a <_ZL28read_encoded_value_with_basehjPKhPj>
 800575e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005760:	b131      	cbz	r1, 8005770 <__gxx_personality_v0+0x1f4>
 8005762:	b37c      	cbz	r4, 80057c4 <__gxx_personality_v0+0x248>
 8005764:	ab05      	add	r3, sp, #20
 8005766:	2200      	movs	r2, #0
 8005768:	4620      	mov	r0, r4
 800576a:	f7ff fd49 	bl	8005200 <__cxa_type_match>
 800576e:	b348      	cbz	r0, 80057c4 <__gxx_personality_v0+0x248>
 8005770:	9d07      	ldr	r5, [sp, #28]
 8005772:	f04f 0b03 	mov.w	fp, #3
 8005776:	e039      	b.n	80057ec <__gxx_personality_v0+0x270>
 8005778:	2508      	movs	r5, #8
 800577a:	e7e9      	b.n	8005750 <__gxx_personality_v0+0x1d4>
 800577c:	2500      	movs	r5, #0
 800577e:	e7e7      	b.n	8005750 <__gxx_personality_v0+0x1d4>
 8005780:	2504      	movs	r5, #4
 8005782:	e7e5      	b.n	8005750 <__gxx_personality_v0+0x1d4>
 8005784:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 8005788:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 800578c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800578e:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 8005792:	313f      	adds	r1, #63	; 0x3f
 8005794:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8005798:	b1dc      	cbz	r4, 80057d2 <__gxx_personality_v0+0x256>
 800579a:	9a02      	ldr	r2, [sp, #8]
 800579c:	b9ca      	cbnz	r2, 80057d2 <__gxx_personality_v0+0x256>
 800579e:	9b05      	ldr	r3, [sp, #20]
 80057a0:	9309      	str	r3, [sp, #36]	; 0x24
 80057a2:	3d04      	subs	r5, #4
 80057a4:	f855 1f04 	ldr.w	r1, [r5, #4]!
 80057a8:	b141      	cbz	r1, 80057bc <__gxx_personality_v0+0x240>
 80057aa:	ab09      	add	r3, sp, #36	; 0x24
 80057ac:	2200      	movs	r2, #0
 80057ae:	4429      	add	r1, r5
 80057b0:	4620      	mov	r0, r4
 80057b2:	f7ff fd25 	bl	8005200 <__cxa_type_match>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d0f4      	beq.n	80057a4 <__gxx_personality_v0+0x228>
 80057ba:	2101      	movs	r1, #1
 80057bc:	f081 0101 	eor.w	r1, r1, #1
 80057c0:	2900      	cmp	r1, #0
 80057c2:	d1d5      	bne.n	8005770 <__gxx_personality_v0+0x1f4>
 80057c4:	9d08      	ldr	r5, [sp, #32]
 80057c6:	2d00      	cmp	r5, #0
 80057c8:	d072      	beq.n	80058b0 <__gxx_personality_v0+0x334>
 80057ca:	9b03      	ldr	r3, [sp, #12]
 80057cc:	442b      	add	r3, r5
 80057ce:	461d      	mov	r5, r3
 80057d0:	e791      	b.n	80056f6 <__gxx_personality_v0+0x17a>
 80057d2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80057d6:	fab1 f181 	clz	r1, r1
 80057da:	0949      	lsrs	r1, r1, #5
 80057dc:	e7f0      	b.n	80057c0 <__gxx_personality_v0+0x244>
 80057de:	f04f 0b01 	mov.w	fp, #1
 80057e2:	e7ef      	b.n	80057c4 <__gxx_personality_v0+0x248>
 80057e4:	2500      	movs	r5, #0
 80057e6:	46a8      	mov	r8, r5
 80057e8:	f04f 0b01 	mov.w	fp, #1
 80057ec:	07f3      	lsls	r3, r6, #31
 80057ee:	f57f af05 	bpl.w	80055fc <__gxx_personality_v0+0x80>
 80057f2:	f1bb 0f02 	cmp.w	fp, #2
 80057f6:	f43f aed3 	beq.w	80055a0 <__gxx_personality_v0+0x24>
 80057fa:	210d      	movs	r1, #13
 80057fc:	4638      	mov	r0, r7
 80057fe:	9e05      	ldr	r6, [sp, #20]
 8005800:	f7ff feaf 	bl	8005562 <_Unwind_GetGR>
 8005804:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 8005808:	e9c4 0608 	strd	r0, r6, [r4, #32]
 800580c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8005810:	2006      	movs	r0, #6
 8005812:	e6cb      	b.n	80055ac <__gxx_personality_v0+0x30>
 8005814:	2d00      	cmp	r5, #0
 8005816:	da22      	bge.n	800585e <__gxx_personality_v0+0x2e2>
 8005818:	f000 f870 	bl	80058fc <_ZSt10unexpectedv>
 800581c:	f1bb 0f01 	cmp.w	fp, #1
 8005820:	d102      	bne.n	8005828 <__gxx_personality_v0+0x2ac>
 8005822:	4620      	mov	r0, r4
 8005824:	f000 fc87 	bl	8006136 <__cxa_call_terminate>
 8005828:	2d00      	cmp	r5, #0
 800582a:	da18      	bge.n	800585e <__gxx_personality_v0+0x2e2>
 800582c:	4652      	mov	r2, sl
 800582e:	4649      	mov	r1, r9
 8005830:	4638      	mov	r0, r7
 8005832:	f7ff fe65 	bl	8005500 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8005836:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800583a:	4639      	mov	r1, r7
 800583c:	f7ff fe2b 	bl	8005496 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8005840:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005842:	900c      	str	r0, [sp, #48]	; 0x30
 8005844:	43eb      	mvns	r3, r5
 8005846:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800584a:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 800584e:	b10a      	cbz	r2, 8005854 <__gxx_personality_v0+0x2d8>
 8005850:	3601      	adds	r6, #1
 8005852:	e7fa      	b.n	800584a <__gxx_personality_v0+0x2ce>
 8005854:	2204      	movs	r2, #4
 8005856:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 800585a:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 800585e:	2300      	movs	r3, #0
 8005860:	ae09      	add	r6, sp, #36	; 0x24
 8005862:	461a      	mov	r2, r3
 8005864:	4619      	mov	r1, r3
 8005866:	9600      	str	r6, [sp, #0]
 8005868:	4638      	mov	r0, r7
 800586a:	9409      	str	r4, [sp, #36]	; 0x24
 800586c:	f7fb f81e 	bl	80008ac <_Unwind_VRS_Set>
 8005870:	2300      	movs	r3, #0
 8005872:	4619      	mov	r1, r3
 8005874:	2201      	movs	r2, #1
 8005876:	9600      	str	r6, [sp, #0]
 8005878:	4638      	mov	r0, r7
 800587a:	9509      	str	r5, [sp, #36]	; 0x24
 800587c:	f7fb f816 	bl	80008ac <_Unwind_VRS_Set>
 8005880:	210f      	movs	r1, #15
 8005882:	4638      	mov	r0, r7
 8005884:	f7ff fe6d 	bl	8005562 <_Unwind_GetGR>
 8005888:	f000 0001 	and.w	r0, r0, #1
 800588c:	ea40 0008 	orr.w	r0, r0, r8
 8005890:	2300      	movs	r3, #0
 8005892:	9009      	str	r0, [sp, #36]	; 0x24
 8005894:	9600      	str	r6, [sp, #0]
 8005896:	220f      	movs	r2, #15
 8005898:	4619      	mov	r1, r3
 800589a:	4638      	mov	r0, r7
 800589c:	f7fb f806 	bl	80008ac <_Unwind_VRS_Set>
 80058a0:	f1bb 0f02 	cmp.w	fp, #2
 80058a4:	d102      	bne.n	80058ac <__gxx_personality_v0+0x330>
 80058a6:	4620      	mov	r0, r4
 80058a8:	f7ff fd08 	bl	80052bc <__cxa_begin_cleanup>
 80058ac:	2007      	movs	r0, #7
 80058ae:	e67d      	b.n	80055ac <__gxx_personality_v0+0x30>
 80058b0:	f1bb 0f00 	cmp.w	fp, #0
 80058b4:	f43f ae74 	beq.w	80055a0 <__gxx_personality_v0+0x24>
 80058b8:	f04f 0b02 	mov.w	fp, #2
 80058bc:	e796      	b.n	80057ec <__gxx_personality_v0+0x270>
 80058be:	bf00      	nop

080058c0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80058c0:	b508      	push	{r3, lr}
 80058c2:	4780      	blx	r0
 80058c4:	f000 fd25 	bl	8006312 <abort>

080058c8 <_ZSt13get_terminatev>:
 80058c8:	4b02      	ldr	r3, [pc, #8]	; (80058d4 <_ZSt13get_terminatev+0xc>)
 80058ca:	6818      	ldr	r0, [r3, #0]
 80058cc:	f3bf 8f5b 	dmb	ish
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	20000024 	.word	0x20000024

080058d8 <_ZSt9terminatev>:
 80058d8:	b508      	push	{r3, lr}
 80058da:	f7ff fff5 	bl	80058c8 <_ZSt13get_terminatev>
 80058de:	f7ff ffef 	bl	80058c0 <_ZN10__cxxabiv111__terminateEPFvvE>

080058e2 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 80058e2:	b508      	push	{r3, lr}
 80058e4:	4780      	blx	r0
 80058e6:	f7ff fff7 	bl	80058d8 <_ZSt9terminatev>
	...

080058ec <_ZSt14get_unexpectedv>:
 80058ec:	4b02      	ldr	r3, [pc, #8]	; (80058f8 <_ZSt14get_unexpectedv+0xc>)
 80058ee:	6818      	ldr	r0, [r3, #0]
 80058f0:	f3bf 8f5b 	dmb	ish
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	20000020 	.word	0x20000020

080058fc <_ZSt10unexpectedv>:
 80058fc:	b508      	push	{r3, lr}
 80058fe:	f7ff fff5 	bl	80058ec <_ZSt14get_unexpectedv>
 8005902:	f7ff ffee 	bl	80058e2 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08005906 <_Znwj>:
 8005906:	2801      	cmp	r0, #1
 8005908:	bf38      	it	cc
 800590a:	2001      	movcc	r0, #1
 800590c:	b510      	push	{r4, lr}
 800590e:	4604      	mov	r4, r0
 8005910:	4620      	mov	r0, r4
 8005912:	f000 fd3f 	bl	8006394 <malloc>
 8005916:	b930      	cbnz	r0, 8005926 <_Znwj+0x20>
 8005918:	f000 fc30 	bl	800617c <_ZSt15get_new_handlerv>
 800591c:	b908      	cbnz	r0, 8005922 <_Znwj+0x1c>
 800591e:	f000 fcf8 	bl	8006312 <abort>
 8005922:	4780      	blx	r0
 8005924:	e7f4      	b.n	8005910 <_Znwj+0xa>
 8005926:	bd10      	pop	{r4, pc}

08005928 <_Znaj>:
 8005928:	f7ff bfed 	b.w	8005906 <_Znwj>

0800592c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800592c:	b510      	push	{r4, lr}
 800592e:	4b03      	ldr	r3, [pc, #12]	; (800593c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8005930:	6003      	str	r3, [r0, #0]
 8005932:	4604      	mov	r4, r0
 8005934:	f7ff fbd4 	bl	80050e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005938:	4620      	mov	r0, r4
 800593a:	bd10      	pop	{r4, pc}
 800593c:	08006c04 	.word	0x08006c04

08005940 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8005940:	b510      	push	{r4, lr}
 8005942:	4604      	mov	r4, r0
 8005944:	f7ff fff2 	bl	800592c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8005948:	4620      	mov	r0, r4
 800594a:	210c      	movs	r1, #12
 800594c:	f7ff fc1c 	bl	8005188 <_ZdlPvj>
 8005950:	4620      	mov	r0, r4
 8005952:	bd10      	pop	{r4, pc}

08005954 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8005954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005956:	9f08      	ldr	r7, [sp, #32]
 8005958:	4297      	cmp	r7, r2
 800595a:	4605      	mov	r5, r0
 800595c:	460e      	mov	r6, r1
 800595e:	4614      	mov	r4, r2
 8005960:	d00a      	beq.n	8005978 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8005962:	68a8      	ldr	r0, [r5, #8]
 8005964:	6802      	ldr	r2, [r0, #0]
 8005966:	9708      	str	r7, [sp, #32]
 8005968:	6a15      	ldr	r5, [r2, #32]
 800596a:	4631      	mov	r1, r6
 800596c:	4622      	mov	r2, r4
 800596e:	46ac      	mov	ip, r5
 8005970:	b003      	add	sp, #12
 8005972:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005976:	4760      	bx	ip
 8005978:	4619      	mov	r1, r3
 800597a:	9301      	str	r3, [sp, #4]
 800597c:	f000 f858 	bl	8005a30 <_ZNKSt9type_infoeqERKS_>
 8005980:	9b01      	ldr	r3, [sp, #4]
 8005982:	2800      	cmp	r0, #0
 8005984:	d0ed      	beq.n	8005962 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8005986:	2006      	movs	r0, #6
 8005988:	b003      	add	sp, #12
 800598a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800598c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800598c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005990:	460d      	mov	r5, r1
 8005992:	4619      	mov	r1, r3
 8005994:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8005998:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 800599c:	4681      	mov	r9, r0
 800599e:	4617      	mov	r7, r2
 80059a0:	4698      	mov	r8, r3
 80059a2:	f000 f845 	bl	8005a30 <_ZNKSt9type_infoeqERKS_>
 80059a6:	b190      	cbz	r0, 80059ce <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80059a8:	2d00      	cmp	r5, #0
 80059aa:	6034      	str	r4, [r6, #0]
 80059ac:	7137      	strb	r7, [r6, #4]
 80059ae:	db09      	blt.n	80059c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80059b0:	1961      	adds	r1, r4, r5
 80059b2:	458a      	cmp	sl, r1
 80059b4:	bf0c      	ite	eq
 80059b6:	2106      	moveq	r1, #6
 80059b8:	2101      	movne	r1, #1
 80059ba:	71b1      	strb	r1, [r6, #6]
 80059bc:	2000      	movs	r0, #0
 80059be:	b001      	add	sp, #4
 80059c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c4:	3502      	adds	r5, #2
 80059c6:	d1f9      	bne.n	80059bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80059c8:	2301      	movs	r3, #1
 80059ca:	71b3      	strb	r3, [r6, #6]
 80059cc:	e7f6      	b.n	80059bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80059ce:	4554      	cmp	r4, sl
 80059d0:	d106      	bne.n	80059e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80059d2:	4659      	mov	r1, fp
 80059d4:	4648      	mov	r0, r9
 80059d6:	f000 f82b 	bl	8005a30 <_ZNKSt9type_infoeqERKS_>
 80059da:	b108      	cbz	r0, 80059e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80059dc:	7177      	strb	r7, [r6, #5]
 80059de:	e7ed      	b.n	80059bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80059e0:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80059e4:	6803      	ldr	r3, [r0, #0]
 80059e6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80059ea:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80059ee:	69dc      	ldr	r4, [r3, #28]
 80059f0:	463a      	mov	r2, r7
 80059f2:	4643      	mov	r3, r8
 80059f4:	4629      	mov	r1, r5
 80059f6:	46a4      	mov	ip, r4
 80059f8:	b001      	add	sp, #4
 80059fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059fe:	4760      	bx	ip

08005a00 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8005a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a04:	4607      	mov	r7, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	4615      	mov	r5, r2
 8005a0a:	461e      	mov	r6, r3
 8005a0c:	f7ff fb9b 	bl	8005146 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8005a10:	b948      	cbnz	r0, 8005a26 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8005a12:	68b8      	ldr	r0, [r7, #8]
 8005a14:	6803      	ldr	r3, [r0, #0]
 8005a16:	699f      	ldr	r7, [r3, #24]
 8005a18:	462a      	mov	r2, r5
 8005a1a:	4633      	mov	r3, r6
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	46bc      	mov	ip, r7
 8005a20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a24:	4760      	bx	ip
 8005a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005a2a <_ZNSt9type_infoD1Ev>:
 8005a2a:	4770      	bx	lr

08005a2c <_ZNKSt9type_info14__is_pointer_pEv>:
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	4770      	bx	lr

08005a30 <_ZNKSt9type_infoeqERKS_>:
 8005a30:	4281      	cmp	r1, r0
 8005a32:	b508      	push	{r3, lr}
 8005a34:	d00e      	beq.n	8005a54 <_ZNKSt9type_infoeqERKS_+0x24>
 8005a36:	6840      	ldr	r0, [r0, #4]
 8005a38:	7803      	ldrb	r3, [r0, #0]
 8005a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a3c:	d00c      	beq.n	8005a58 <_ZNKSt9type_infoeqERKS_+0x28>
 8005a3e:	6849      	ldr	r1, [r1, #4]
 8005a40:	780b      	ldrb	r3, [r1, #0]
 8005a42:	2b2a      	cmp	r3, #42	; 0x2a
 8005a44:	bf08      	it	eq
 8005a46:	3101      	addeq	r1, #1
 8005a48:	f7fa fbbe 	bl	80001c8 <strcmp>
 8005a4c:	fab0 f080 	clz	r0, r0
 8005a50:	0940      	lsrs	r0, r0, #5
 8005a52:	bd08      	pop	{r3, pc}
 8005a54:	2001      	movs	r0, #1
 8005a56:	e7fc      	b.n	8005a52 <_ZNKSt9type_infoeqERKS_+0x22>
 8005a58:	2000      	movs	r0, #0
 8005a5a:	e7fa      	b.n	8005a52 <_ZNKSt9type_infoeqERKS_+0x22>

08005a5c <_ZNSaIcEC1Ev>:
 8005a5c:	4770      	bx	lr

08005a5e <_ZNSaIcED1Ev>:
 8005a5e:	4770      	bx	lr

08005a60 <_ZNSs7_M_copyEPcPKcj>:
 8005a60:	2a01      	cmp	r2, #1
 8005a62:	b430      	push	{r4, r5}
 8005a64:	d103      	bne.n	8005a6e <_ZNSs7_M_copyEPcPKcj+0xe>
 8005a66:	780b      	ldrb	r3, [r1, #0]
 8005a68:	7003      	strb	r3, [r0, #0]
 8005a6a:	bc30      	pop	{r4, r5}
 8005a6c:	4770      	bx	lr
 8005a6e:	2a00      	cmp	r2, #0
 8005a70:	d0fb      	beq.n	8005a6a <_ZNSs7_M_copyEPcPKcj+0xa>
 8005a72:	bc30      	pop	{r4, r5}
 8005a74:	f000 bc9e 	b.w	80063b4 <memcpy>

08005a78 <_ZNSs13_S_copy_charsEPcPKcS1_>:
 8005a78:	b508      	push	{r3, lr}
 8005a7a:	1a52      	subs	r2, r2, r1
 8005a7c:	f7ff fff0 	bl	8005a60 <_ZNSs7_M_copyEPcPKcj>
 8005a80:	bd08      	pop	{r3, pc}
	...

08005a84 <_ZNSs4_Rep26_M_set_length_and_sharableEj>:
 8005a84:	4b04      	ldr	r3, [pc, #16]	; (8005a98 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x14>)
 8005a86:	4298      	cmp	r0, r3
 8005a88:	d004      	beq.n	8005a94 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x10>
 8005a8a:	6001      	str	r1, [r0, #0]
 8005a8c:	4401      	add	r1, r0
 8005a8e:	2300      	movs	r3, #0
 8005a90:	6083      	str	r3, [r0, #8]
 8005a92:	730b      	strb	r3, [r1, #12]
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	200000d0 	.word	0x200000d0

08005a9c <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 8005a9c:	4b15      	ldr	r3, [pc, #84]	; (8005af4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8005a9e:	4298      	cmp	r0, r3
 8005aa0:	b510      	push	{r4, lr}
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	d902      	bls.n	8005aac <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x10>
 8005aa6:	4814      	ldr	r0, [pc, #80]	; (8005af8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x5c>)
 8005aa8:	f000 f8e6 	bl	8005c78 <_ZSt20__throw_length_errorPKc>
 8005aac:	4288      	cmp	r0, r1
 8005aae:	d903      	bls.n	8005ab8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x1c>
 8005ab0:	004b      	lsls	r3, r1, #1
 8005ab2:	4298      	cmp	r0, r3
 8005ab4:	bf38      	it	cc
 8005ab6:	461c      	movcc	r4, r3
 8005ab8:	f104 031d 	add.w	r3, r4, #29
 8005abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac0:	f104 000d 	add.w	r0, r4, #13
 8005ac4:	d90c      	bls.n	8005ae0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8005ac6:	428c      	cmp	r4, r1
 8005ac8:	d90a      	bls.n	8005ae0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8005aca:	480a      	ldr	r0, [pc, #40]	; (8005af4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8005acc:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8005ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ad4:	1ae4      	subs	r4, r4, r3
 8005ad6:	4284      	cmp	r4, r0
 8005ad8:	bf28      	it	cs
 8005ada:	4604      	movcs	r4, r0
 8005adc:	f104 000d 	add.w	r0, r4, #13
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	da01      	bge.n	8005ae8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x4c>
 8005ae4:	f000 f8c2 	bl	8005c6c <_ZSt17__throw_bad_allocv>
 8005ae8:	f7ff ff0d 	bl	8005906 <_Znwj>
 8005aec:	2200      	movs	r2, #0
 8005aee:	6044      	str	r4, [r0, #4]
 8005af0:	6082      	str	r2, [r0, #8]
 8005af2:	bd10      	pop	{r4, pc}
 8005af4:	3ffffffc 	.word	0x3ffffffc
 8005af8:	08006c3d 	.word	0x08006c3d

08005afc <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
 8005afc:	4288      	cmp	r0, r1
 8005afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b02:	4604      	mov	r4, r0
 8005b04:	460d      	mov	r5, r1
 8005b06:	d018      	beq.n	8005b3a <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x3e>
 8005b08:	b1a0      	cbz	r0, 8005b34 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x38>
 8005b0a:	eba1 0800 	sub.w	r8, r1, r0
 8005b0e:	4640      	mov	r0, r8
 8005b10:	2100      	movs	r1, #0
 8005b12:	f7ff ffc3 	bl	8005a9c <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 8005b16:	f100 070c 	add.w	r7, r0, #12
 8005b1a:	4606      	mov	r6, r0
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	4638      	mov	r0, r7
 8005b20:	462a      	mov	r2, r5
 8005b22:	f7ff ffa9 	bl	8005a78 <_ZNSs13_S_copy_charsEPcPKcS1_>
 8005b26:	4641      	mov	r1, r8
 8005b28:	4630      	mov	r0, r6
 8005b2a:	f7ff ffab 	bl	8005a84 <_ZNSs4_Rep26_M_set_length_and_sharableEj>
 8005b2e:	4638      	mov	r0, r7
 8005b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b34:	4802      	ldr	r0, [pc, #8]	; (8005b40 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x44>)
 8005b36:	f000 f89c 	bl	8005c72 <_ZSt19__throw_logic_errorPKc>
 8005b3a:	4f02      	ldr	r7, [pc, #8]	; (8005b44 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x48>)
 8005b3c:	e7f7      	b.n	8005b2e <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x32>
 8005b3e:	bf00      	nop
 8005b40:	08006c55 	.word	0x08006c55
 8005b44:	200000dc 	.word	0x200000dc

08005b48 <_ZNSsC1EPKcjRKSaIcE>:
 8005b48:	b510      	push	{r4, lr}
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	4608      	mov	r0, r1
 8005b4e:	4611      	mov	r1, r2
 8005b50:	4401      	add	r1, r0
 8005b52:	461a      	mov	r2, r3
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	f7ff ffd0 	bl	8005afc <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 8005b5c:	6020      	str	r0, [r4, #0]
 8005b5e:	4620      	mov	r0, r4
 8005b60:	bd10      	pop	{r4, pc}
	...

08005b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8005b64:	4b18      	ldr	r3, [pc, #96]	; (8005bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	07d1      	lsls	r1, r2, #31
 8005b6a:	bf5c      	itt	pl
 8005b6c:	2201      	movpl	r2, #1
 8005b6e:	601a      	strpl	r2, [r3, #0]
 8005b70:	4b16      	ldr	r3, [pc, #88]	; (8005bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	07d2      	lsls	r2, r2, #31
 8005b76:	bf5c      	itt	pl
 8005b78:	2201      	movpl	r2, #1
 8005b7a:	601a      	strpl	r2, [r3, #0]
 8005b7c:	4b14      	ldr	r3, [pc, #80]	; (8005bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	07d0      	lsls	r0, r2, #31
 8005b82:	bf5c      	itt	pl
 8005b84:	2201      	movpl	r2, #1
 8005b86:	601a      	strpl	r2, [r3, #0]
 8005b88:	4b12      	ldr	r3, [pc, #72]	; (8005bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	07d1      	lsls	r1, r2, #31
 8005b8e:	bf5c      	itt	pl
 8005b90:	2201      	movpl	r2, #1
 8005b92:	601a      	strpl	r2, [r3, #0]
 8005b94:	4b10      	ldr	r3, [pc, #64]	; (8005bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	07d2      	lsls	r2, r2, #31
 8005b9a:	bf5c      	itt	pl
 8005b9c:	2201      	movpl	r2, #1
 8005b9e:	601a      	strpl	r2, [r3, #0]
 8005ba0:	4b0e      	ldr	r3, [pc, #56]	; (8005bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	07d0      	lsls	r0, r2, #31
 8005ba6:	bf5c      	itt	pl
 8005ba8:	2201      	movpl	r2, #1
 8005baa:	601a      	strpl	r2, [r3, #0]
 8005bac:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	07d1      	lsls	r1, r2, #31
 8005bb2:	bf5c      	itt	pl
 8005bb4:	2201      	movpl	r2, #1
 8005bb6:	601a      	strpl	r2, [r3, #0]
 8005bb8:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	07d2      	lsls	r2, r2, #31
 8005bbe:	bf5c      	itt	pl
 8005bc0:	2201      	movpl	r2, #1
 8005bc2:	601a      	strpl	r2, [r3, #0]
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	200000fc 	.word	0x200000fc
 8005bcc:	200000f8 	.word	0x200000f8
 8005bd0:	200000f4 	.word	0x200000f4
 8005bd4:	200000f0 	.word	0x200000f0
 8005bd8:	200000ec 	.word	0x200000ec
 8005bdc:	200000e8 	.word	0x200000e8
 8005be0:	200000e4 	.word	0x200000e4
 8005be4:	200000e0 	.word	0x200000e0

08005be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8005be8:	4b18      	ldr	r3, [pc, #96]	; (8005c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	07d1      	lsls	r1, r2, #31
 8005bee:	bf5c      	itt	pl
 8005bf0:	2201      	movpl	r2, #1
 8005bf2:	601a      	strpl	r2, [r3, #0]
 8005bf4:	4b16      	ldr	r3, [pc, #88]	; (8005c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	07d2      	lsls	r2, r2, #31
 8005bfa:	bf5c      	itt	pl
 8005bfc:	2201      	movpl	r2, #1
 8005bfe:	601a      	strpl	r2, [r3, #0]
 8005c00:	4b14      	ldr	r3, [pc, #80]	; (8005c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	07d0      	lsls	r0, r2, #31
 8005c06:	bf5c      	itt	pl
 8005c08:	2201      	movpl	r2, #1
 8005c0a:	601a      	strpl	r2, [r3, #0]
 8005c0c:	4b12      	ldr	r3, [pc, #72]	; (8005c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	07d1      	lsls	r1, r2, #31
 8005c12:	bf5c      	itt	pl
 8005c14:	2201      	movpl	r2, #1
 8005c16:	601a      	strpl	r2, [r3, #0]
 8005c18:	4b10      	ldr	r3, [pc, #64]	; (8005c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	07d2      	lsls	r2, r2, #31
 8005c1e:	bf5c      	itt	pl
 8005c20:	2201      	movpl	r2, #1
 8005c22:	601a      	strpl	r2, [r3, #0]
 8005c24:	4b0e      	ldr	r3, [pc, #56]	; (8005c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	07d0      	lsls	r0, r2, #31
 8005c2a:	bf5c      	itt	pl
 8005c2c:	2201      	movpl	r2, #1
 8005c2e:	601a      	strpl	r2, [r3, #0]
 8005c30:	4b0c      	ldr	r3, [pc, #48]	; (8005c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	07d1      	lsls	r1, r2, #31
 8005c36:	bf5c      	itt	pl
 8005c38:	2201      	movpl	r2, #1
 8005c3a:	601a      	strpl	r2, [r3, #0]
 8005c3c:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	07d2      	lsls	r2, r2, #31
 8005c42:	bf5c      	itt	pl
 8005c44:	2201      	movpl	r2, #1
 8005c46:	601a      	strpl	r2, [r3, #0]
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	2000011c 	.word	0x2000011c
 8005c50:	20000118 	.word	0x20000118
 8005c54:	20000114 	.word	0x20000114
 8005c58:	20000110 	.word	0x20000110
 8005c5c:	2000010c 	.word	0x2000010c
 8005c60:	20000108 	.word	0x20000108
 8005c64:	20000104 	.word	0x20000104
 8005c68:	20000100 	.word	0x20000100

08005c6c <_ZSt17__throw_bad_allocv>:
 8005c6c:	b508      	push	{r3, lr}
 8005c6e:	f000 fb50 	bl	8006312 <abort>

08005c72 <_ZSt19__throw_logic_errorPKc>:
 8005c72:	b508      	push	{r3, lr}
 8005c74:	f000 fb4d 	bl	8006312 <abort>

08005c78 <_ZSt20__throw_length_errorPKc>:
 8005c78:	b508      	push	{r3, lr}
 8005c7a:	f000 fb4a 	bl	8006312 <abort>

08005c7e <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8005c7e:	b10a      	cbz	r2, 8005c84 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8005c80:	f000 bb98 	b.w	80063b4 <memcpy>
 8005c84:	4770      	bx	lr
	...

08005c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8005c88:	4b24      	ldr	r3, [pc, #144]	; (8005d1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	07d0      	lsls	r0, r2, #31
 8005c8e:	bf5c      	itt	pl
 8005c90:	2201      	movpl	r2, #1
 8005c92:	601a      	strpl	r2, [r3, #0]
 8005c94:	4b22      	ldr	r3, [pc, #136]	; (8005d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	07d1      	lsls	r1, r2, #31
 8005c9a:	bf5c      	itt	pl
 8005c9c:	2201      	movpl	r2, #1
 8005c9e:	601a      	strpl	r2, [r3, #0]
 8005ca0:	4b20      	ldr	r3, [pc, #128]	; (8005d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	07d2      	lsls	r2, r2, #31
 8005ca6:	bf5c      	itt	pl
 8005ca8:	2201      	movpl	r2, #1
 8005caa:	601a      	strpl	r2, [r3, #0]
 8005cac:	4b1e      	ldr	r3, [pc, #120]	; (8005d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	07d0      	lsls	r0, r2, #31
 8005cb2:	bf5c      	itt	pl
 8005cb4:	2201      	movpl	r2, #1
 8005cb6:	601a      	strpl	r2, [r3, #0]
 8005cb8:	4b1c      	ldr	r3, [pc, #112]	; (8005d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	07d1      	lsls	r1, r2, #31
 8005cbe:	bf5c      	itt	pl
 8005cc0:	2201      	movpl	r2, #1
 8005cc2:	601a      	strpl	r2, [r3, #0]
 8005cc4:	4b1a      	ldr	r3, [pc, #104]	; (8005d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	07d2      	lsls	r2, r2, #31
 8005cca:	bf5c      	itt	pl
 8005ccc:	2201      	movpl	r2, #1
 8005cce:	601a      	strpl	r2, [r3, #0]
 8005cd0:	4b18      	ldr	r3, [pc, #96]	; (8005d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	07d0      	lsls	r0, r2, #31
 8005cd6:	bf5c      	itt	pl
 8005cd8:	2201      	movpl	r2, #1
 8005cda:	601a      	strpl	r2, [r3, #0]
 8005cdc:	4b16      	ldr	r3, [pc, #88]	; (8005d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	07d1      	lsls	r1, r2, #31
 8005ce2:	bf5c      	itt	pl
 8005ce4:	2201      	movpl	r2, #1
 8005ce6:	601a      	strpl	r2, [r3, #0]
 8005ce8:	4b14      	ldr	r3, [pc, #80]	; (8005d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	07d2      	lsls	r2, r2, #31
 8005cee:	bf5c      	itt	pl
 8005cf0:	2201      	movpl	r2, #1
 8005cf2:	601a      	strpl	r2, [r3, #0]
 8005cf4:	4b12      	ldr	r3, [pc, #72]	; (8005d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	07d0      	lsls	r0, r2, #31
 8005cfa:	bf5c      	itt	pl
 8005cfc:	2201      	movpl	r2, #1
 8005cfe:	601a      	strpl	r2, [r3, #0]
 8005d00:	4b10      	ldr	r3, [pc, #64]	; (8005d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	07d1      	lsls	r1, r2, #31
 8005d06:	bf5c      	itt	pl
 8005d08:	2201      	movpl	r2, #1
 8005d0a:	601a      	strpl	r2, [r3, #0]
 8005d0c:	4b0e      	ldr	r3, [pc, #56]	; (8005d48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	07d2      	lsls	r2, r2, #31
 8005d12:	bf5c      	itt	pl
 8005d14:	2201      	movpl	r2, #1
 8005d16:	601a      	strpl	r2, [r3, #0]
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	2000014c 	.word	0x2000014c
 8005d20:	20000148 	.word	0x20000148
 8005d24:	20000144 	.word	0x20000144
 8005d28:	20000140 	.word	0x20000140
 8005d2c:	2000013c 	.word	0x2000013c
 8005d30:	20000138 	.word	0x20000138
 8005d34:	20000134 	.word	0x20000134
 8005d38:	20000130 	.word	0x20000130
 8005d3c:	2000012c 	.word	0x2000012c
 8005d40:	20000128 	.word	0x20000128
 8005d44:	20000124 	.word	0x20000124
 8005d48:	20000120 	.word	0x20000120

08005d4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8005d4c:	b508      	push	{r3, lr}
 8005d4e:	680b      	ldr	r3, [r1, #0]
 8005d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d54:	d302      	bcc.n	8005d5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8005d56:	480d      	ldr	r0, [pc, #52]	; (8005d8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8005d58:	f7ff ff8e 	bl	8005c78 <_ZSt20__throw_length_errorPKc>
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d90b      	bls.n	8005d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8005d60:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8005d64:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8005d68:	d206      	bcs.n	8005d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8005d6a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005d6e:	bf2a      	itet	cs
 8005d70:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8005d74:	6008      	strcc	r0, [r1, #0]
 8005d76:	600b      	strcs	r3, [r1, #0]
 8005d78:	6808      	ldr	r0, [r1, #0]
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	d501      	bpl.n	8005d82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8005d7e:	f7ff ff75 	bl	8005c6c <_ZSt17__throw_bad_allocv>
 8005d82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005d86:	f7ff bdbe 	b.w	8005906 <_Znwj>
 8005d8a:	bf00      	nop
 8005d8c:	08006c7f 	.word	0x08006c7f

08005d90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8005d90:	f850 3b08 	ldr.w	r3, [r0], #8
 8005d94:	4283      	cmp	r3, r0
 8005d96:	d002      	beq.n	8005d9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 b9ab 	b.w	80060f4 <_ZdlPv>
 8005d9e:	4770      	bx	lr

08005da0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8005da0:	6840      	ldr	r0, [r0, #4]
 8005da2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005da6:	3901      	subs	r1, #1
 8005da8:	1a09      	subs	r1, r1, r0
 8005daa:	4291      	cmp	r1, r2
 8005dac:	b508      	push	{r3, lr}
 8005dae:	d202      	bcs.n	8005db6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7ff ff61 	bl	8005c78 <_ZSt20__throw_length_errorPKc>
 8005db6:	bd08      	pop	{r3, pc}

08005db8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8005db8:	6803      	ldr	r3, [r0, #0]
 8005dba:	428b      	cmp	r3, r1
 8005dbc:	d806      	bhi.n	8005dcc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8005dbe:	6840      	ldr	r0, [r0, #4]
 8005dc0:	4418      	add	r0, r3
 8005dc2:	4281      	cmp	r1, r0
 8005dc4:	bf94      	ite	ls
 8005dc6:	2000      	movls	r0, #0
 8005dc8:	2001      	movhi	r0, #1
 8005dca:	4770      	bx	lr
 8005dcc:	2001      	movs	r0, #1
 8005dce:	4770      	bx	lr

08005dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8005dd0:	2a01      	cmp	r2, #1
 8005dd2:	b510      	push	{r4, lr}
 8005dd4:	d102      	bne.n	8005ddc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8005dd6:	780a      	ldrb	r2, [r1, #0]
 8005dd8:	7002      	strb	r2, [r0, #0]
 8005dda:	bd10      	pop	{r4, pc}
 8005ddc:	f7ff ff4f 	bl	8005c7e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8005de0:	e7fb      	b.n	8005dda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08005de2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8005de2:	2a01      	cmp	r2, #1
 8005de4:	b430      	push	{r4, r5}
 8005de6:	d103      	bne.n	8005df0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8005de8:	780b      	ldrb	r3, [r1, #0]
 8005dea:	7003      	strb	r3, [r0, #0]
 8005dec:	bc30      	pop	{r4, r5}
 8005dee:	4770      	bx	lr
 8005df0:	2a00      	cmp	r2, #0
 8005df2:	d0fb      	beq.n	8005dec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8005df4:	bc30      	pop	{r4, r5}
 8005df6:	f000 baeb 	b.w	80063d0 <memmove>

08005dfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8005dfa:	b508      	push	{r3, lr}
 8005dfc:	1a52      	subs	r2, r2, r1
 8005dfe:	f7ff ffe7 	bl	8005dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005e02:	bd08      	pop	{r3, pc}

08005e04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8005e04:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e08:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005e0a:	461f      	mov	r7, r3
 8005e0c:	6843      	ldr	r3, [r0, #4]
 8005e0e:	eb01 0802 	add.w	r8, r1, r2
 8005e12:	1ab2      	subs	r2, r6, r2
 8005e14:	441a      	add	r2, r3
 8005e16:	eba3 0908 	sub.w	r9, r3, r8
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	9201      	str	r2, [sp, #4]
 8005e1e:	f853 2b08 	ldr.w	r2, [r3], #8
 8005e22:	429a      	cmp	r2, r3
 8005e24:	bf18      	it	ne
 8005e26:	6882      	ldrne	r2, [r0, #8]
 8005e28:	460d      	mov	r5, r1
 8005e2a:	bf08      	it	eq
 8005e2c:	220f      	moveq	r2, #15
 8005e2e:	a901      	add	r1, sp, #4
 8005e30:	4604      	mov	r4, r0
 8005e32:	f7ff ff8b 	bl	8005d4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8005e36:	4682      	mov	sl, r0
 8005e38:	b11d      	cbz	r5, 8005e42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8005e3a:	6821      	ldr	r1, [r4, #0]
 8005e3c:	462a      	mov	r2, r5
 8005e3e:	f7ff ffc7 	bl	8005dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005e42:	b137      	cbz	r7, 8005e52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8005e44:	b12e      	cbz	r6, 8005e52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8005e46:	4632      	mov	r2, r6
 8005e48:	4639      	mov	r1, r7
 8005e4a:	eb0a 0005 	add.w	r0, sl, r5
 8005e4e:	f7ff ffbf 	bl	8005dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005e52:	f1b9 0f00 	cmp.w	r9, #0
 8005e56:	d007      	beq.n	8005e68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8005e58:	6821      	ldr	r1, [r4, #0]
 8005e5a:	4435      	add	r5, r6
 8005e5c:	464a      	mov	r2, r9
 8005e5e:	4441      	add	r1, r8
 8005e60:	eb0a 0005 	add.w	r0, sl, r5
 8005e64:	f7ff ffb4 	bl	8005dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f7ff ff91 	bl	8005d90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005e6e:	9b01      	ldr	r3, [sp, #4]
 8005e70:	f8c4 a000 	str.w	sl, [r4]
 8005e74:	60a3      	str	r3, [r4, #8]
 8005e76:	b002      	add	sp, #8
 8005e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005e7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8005e7c:	f100 0208 	add.w	r2, r0, #8
 8005e80:	6002      	str	r2, [r0, #0]
 8005e82:	2200      	movs	r2, #0
 8005e84:	6042      	str	r2, [r0, #4]
 8005e86:	7202      	strb	r2, [r0, #8]
 8005e88:	4770      	bx	lr

08005e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8005e8a:	b510      	push	{r4, lr}
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	f7ff ff7f 	bl	8005d90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005e92:	4620      	mov	r0, r4
 8005e94:	bd10      	pop	{r4, pc}
	...

08005e98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8005e98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e9e:	4614      	mov	r4, r2
 8005ea0:	4680      	mov	r8, r0
 8005ea2:	462a      	mov	r2, r5
 8005ea4:	4689      	mov	r9, r1
 8005ea6:	461f      	mov	r7, r3
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	4b39      	ldr	r3, [pc, #228]	; (8005f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 8005eac:	f7ff ff78 	bl	8005da0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8005eb0:	4642      	mov	r2, r8
 8005eb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005eb6:	f852 6b08 	ldr.w	r6, [r2], #8
 8005eba:	4296      	cmp	r6, r2
 8005ebc:	bf18      	it	ne
 8005ebe:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 8005ec2:	eba5 0b04 	sub.w	fp, r5, r4
 8005ec6:	eb03 0a0b 	add.w	sl, r3, fp
 8005eca:	bf08      	it	eq
 8005ecc:	220f      	moveq	r2, #15
 8005ece:	4552      	cmp	r2, sl
 8005ed0:	d351      	bcc.n	8005f76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 8005ed2:	444e      	add	r6, r9
 8005ed4:	4639      	mov	r1, r7
 8005ed6:	44a1      	add	r9, r4
 8005ed8:	4640      	mov	r0, r8
 8005eda:	eba3 0909 	sub.w	r9, r3, r9
 8005ede:	f7ff ff6b 	bl	8005db8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8005ee2:	b180      	cbz	r0, 8005f06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 8005ee4:	f1b9 0f00 	cmp.w	r9, #0
 8005ee8:	d006      	beq.n	8005ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8005eea:	42ac      	cmp	r4, r5
 8005eec:	d004      	beq.n	8005ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8005eee:	464a      	mov	r2, r9
 8005ef0:	1931      	adds	r1, r6, r4
 8005ef2:	1970      	adds	r0, r6, r5
 8005ef4:	f7ff ff75 	bl	8005de2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005ef8:	b315      	cbz	r5, 8005f40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8005efa:	462a      	mov	r2, r5
 8005efc:	4639      	mov	r1, r7
 8005efe:	4630      	mov	r0, r6
 8005f00:	f7ff ff66 	bl	8005dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005f04:	e01c      	b.n	8005f40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8005f06:	b135      	cbz	r5, 8005f16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8005f08:	42ac      	cmp	r4, r5
 8005f0a:	d33c      	bcc.n	8005f86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 8005f0c:	462a      	mov	r2, r5
 8005f0e:	4639      	mov	r1, r7
 8005f10:	4630      	mov	r0, r6
 8005f12:	f7ff ff66 	bl	8005de2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005f16:	f1b9 0f00 	cmp.w	r9, #0
 8005f1a:	d011      	beq.n	8005f40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8005f1c:	42ac      	cmp	r4, r5
 8005f1e:	d00f      	beq.n	8005f40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8005f20:	464a      	mov	r2, r9
 8005f22:	1931      	adds	r1, r6, r4
 8005f24:	1970      	adds	r0, r6, r5
 8005f26:	f7ff ff5c 	bl	8005de2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005f2a:	42ac      	cmp	r4, r5
 8005f2c:	d208      	bcs.n	8005f40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8005f2e:	4434      	add	r4, r6
 8005f30:	197b      	adds	r3, r7, r5
 8005f32:	429c      	cmp	r4, r3
 8005f34:	d30f      	bcc.n	8005f56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 8005f36:	462a      	mov	r2, r5
 8005f38:	4639      	mov	r1, r7
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	f7ff ff51 	bl	8005de2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005f40:	f8d8 3000 	ldr.w	r3, [r8]
 8005f44:	f8c8 a004 	str.w	sl, [r8, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	4640      	mov	r0, r8
 8005f4c:	f803 200a 	strb.w	r2, [r3, sl]
 8005f50:	b003      	add	sp, #12
 8005f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f56:	42bc      	cmp	r4, r7
 8005f58:	d803      	bhi.n	8005f62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 8005f5a:	462a      	mov	r2, r5
 8005f5c:	eb07 010b 	add.w	r1, r7, fp
 8005f60:	e7cd      	b.n	8005efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8005f62:	1be4      	subs	r4, r4, r7
 8005f64:	4622      	mov	r2, r4
 8005f66:	4639      	mov	r1, r7
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f7ff ff3a 	bl	8005de2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005f6e:	1b2a      	subs	r2, r5, r4
 8005f70:	1971      	adds	r1, r6, r5
 8005f72:	1930      	adds	r0, r6, r4
 8005f74:	e7c4      	b.n	8005f00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8005f76:	9500      	str	r5, [sp, #0]
 8005f78:	463b      	mov	r3, r7
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	4640      	mov	r0, r8
 8005f80:	f7ff ff40 	bl	8005e04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8005f84:	e7dc      	b.n	8005f40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8005f86:	f1b9 0f00 	cmp.w	r9, #0
 8005f8a:	d0d0      	beq.n	8005f2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 8005f8c:	e7c8      	b.n	8005f20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 8005f8e:	bf00      	nop
 8005f90:	08006c97 	.word	0x08006c97

08005f94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8005f94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f96:	4604      	mov	r4, r0
 8005f98:	4608      	mov	r0, r1
 8005f9a:	9103      	str	r1, [sp, #12]
 8005f9c:	f7fa f91e 	bl	80001dc <strlen>
 8005fa0:	9b03      	ldr	r3, [sp, #12]
 8005fa2:	9000      	str	r0, [sp, #0]
 8005fa4:	6862      	ldr	r2, [r4, #4]
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f7ff ff75 	bl	8005e98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8005fae:	b004      	add	sp, #16
 8005fb0:	bd10      	pop	{r4, pc}

08005fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8005fb2:	b508      	push	{r3, lr}
 8005fb4:	f7ff ffee 	bl	8005f94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8005fb8:	bd08      	pop	{r3, pc}
	...

08005fbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8005fbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	4616      	mov	r6, r2
 8005fc2:	460d      	mov	r5, r1
 8005fc4:	b919      	cbnz	r1, 8005fce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8005fc6:	b112      	cbz	r2, 8005fce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8005fc8:	480d      	ldr	r0, [pc, #52]	; (8006000 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8005fca:	f7ff fe52 	bl	8005c72 <_ZSt19__throw_logic_errorPKc>
 8005fce:	1b73      	subs	r3, r6, r5
 8005fd0:	2b0f      	cmp	r3, #15
 8005fd2:	9301      	str	r3, [sp, #4]
 8005fd4:	d907      	bls.n	8005fe6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	a901      	add	r1, sp, #4
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f7ff feb6 	bl	8005d4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8005fe0:	9b01      	ldr	r3, [sp, #4]
 8005fe2:	6020      	str	r0, [r4, #0]
 8005fe4:	60a3      	str	r3, [r4, #8]
 8005fe6:	4632      	mov	r2, r6
 8005fe8:	4629      	mov	r1, r5
 8005fea:	6820      	ldr	r0, [r4, #0]
 8005fec:	f7ff ff05 	bl	8005dfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8005ff0:	9b01      	ldr	r3, [sp, #4]
 8005ff2:	6822      	ldr	r2, [r4, #0]
 8005ff4:	6063      	str	r3, [r4, #4]
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	54d1      	strb	r1, [r2, r3]
 8005ffa:	b002      	add	sp, #8
 8005ffc:	bd70      	pop	{r4, r5, r6, pc}
 8005ffe:	bf00      	nop
 8006000:	08006cb0 	.word	0x08006cb0

08006004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8006004:	b538      	push	{r3, r4, r5, lr}
 8006006:	f100 0308 	add.w	r3, r0, #8
 800600a:	4604      	mov	r4, r0
 800600c:	6003      	str	r3, [r0, #0]
 800600e:	460d      	mov	r5, r1
 8006010:	b159      	cbz	r1, 800602a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8006012:	4608      	mov	r0, r1
 8006014:	f7fa f8e2 	bl	80001dc <strlen>
 8006018:	182a      	adds	r2, r5, r0
 800601a:	4620      	mov	r0, r4
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	4629      	mov	r1, r5
 8006022:	f7ff ffcb 	bl	8005fbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8006026:	4620      	mov	r0, r4
 8006028:	bd38      	pop	{r3, r4, r5, pc}
 800602a:	f04f 32ff 	mov.w	r2, #4294967295
 800602e:	e7f4      	b.n	800601a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08006030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8006030:	4b24      	ldr	r3, [pc, #144]	; (80060c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	07d0      	lsls	r0, r2, #31
 8006036:	bf5c      	itt	pl
 8006038:	2201      	movpl	r2, #1
 800603a:	601a      	strpl	r2, [r3, #0]
 800603c:	4b22      	ldr	r3, [pc, #136]	; (80060c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	07d1      	lsls	r1, r2, #31
 8006042:	bf5c      	itt	pl
 8006044:	2201      	movpl	r2, #1
 8006046:	601a      	strpl	r2, [r3, #0]
 8006048:	4b20      	ldr	r3, [pc, #128]	; (80060cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	07d2      	lsls	r2, r2, #31
 800604e:	bf5c      	itt	pl
 8006050:	2201      	movpl	r2, #1
 8006052:	601a      	strpl	r2, [r3, #0]
 8006054:	4b1e      	ldr	r3, [pc, #120]	; (80060d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	07d0      	lsls	r0, r2, #31
 800605a:	bf5c      	itt	pl
 800605c:	2201      	movpl	r2, #1
 800605e:	601a      	strpl	r2, [r3, #0]
 8006060:	4b1c      	ldr	r3, [pc, #112]	; (80060d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	07d1      	lsls	r1, r2, #31
 8006066:	bf5c      	itt	pl
 8006068:	2201      	movpl	r2, #1
 800606a:	601a      	strpl	r2, [r3, #0]
 800606c:	4b1a      	ldr	r3, [pc, #104]	; (80060d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	07d2      	lsls	r2, r2, #31
 8006072:	bf5c      	itt	pl
 8006074:	2201      	movpl	r2, #1
 8006076:	601a      	strpl	r2, [r3, #0]
 8006078:	4b18      	ldr	r3, [pc, #96]	; (80060dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	07d0      	lsls	r0, r2, #31
 800607e:	bf5c      	itt	pl
 8006080:	2201      	movpl	r2, #1
 8006082:	601a      	strpl	r2, [r3, #0]
 8006084:	4b16      	ldr	r3, [pc, #88]	; (80060e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	07d1      	lsls	r1, r2, #31
 800608a:	bf5c      	itt	pl
 800608c:	2201      	movpl	r2, #1
 800608e:	601a      	strpl	r2, [r3, #0]
 8006090:	4b14      	ldr	r3, [pc, #80]	; (80060e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	07d2      	lsls	r2, r2, #31
 8006096:	bf5c      	itt	pl
 8006098:	2201      	movpl	r2, #1
 800609a:	601a      	strpl	r2, [r3, #0]
 800609c:	4b12      	ldr	r3, [pc, #72]	; (80060e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	07d0      	lsls	r0, r2, #31
 80060a2:	bf5c      	itt	pl
 80060a4:	2201      	movpl	r2, #1
 80060a6:	601a      	strpl	r2, [r3, #0]
 80060a8:	4b10      	ldr	r3, [pc, #64]	; (80060ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	07d1      	lsls	r1, r2, #31
 80060ae:	bf5c      	itt	pl
 80060b0:	2201      	movpl	r2, #1
 80060b2:	601a      	strpl	r2, [r3, #0]
 80060b4:	4b0e      	ldr	r3, [pc, #56]	; (80060f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	07d2      	lsls	r2, r2, #31
 80060ba:	bf5c      	itt	pl
 80060bc:	2201      	movpl	r2, #1
 80060be:	601a      	strpl	r2, [r3, #0]
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	2000017c 	.word	0x2000017c
 80060c8:	20000178 	.word	0x20000178
 80060cc:	20000174 	.word	0x20000174
 80060d0:	20000170 	.word	0x20000170
 80060d4:	2000016c 	.word	0x2000016c
 80060d8:	20000168 	.word	0x20000168
 80060dc:	20000164 	.word	0x20000164
 80060e0:	20000160 	.word	0x20000160
 80060e4:	2000015c 	.word	0x2000015c
 80060e8:	20000158 	.word	0x20000158
 80060ec:	20000154 	.word	0x20000154
 80060f0:	20000150 	.word	0x20000150

080060f4 <_ZdlPv>:
 80060f4:	f000 b956 	b.w	80063a4 <free>

080060f8 <_ZdaPv>:
 80060f8:	f7ff bffc 	b.w	80060f4 <_ZdlPv>

080060fc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80060fc:	7803      	ldrb	r3, [r0, #0]
 80060fe:	2b47      	cmp	r3, #71	; 0x47
 8006100:	d117      	bne.n	8006132 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006102:	7843      	ldrb	r3, [r0, #1]
 8006104:	2b4e      	cmp	r3, #78	; 0x4e
 8006106:	d114      	bne.n	8006132 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006108:	7883      	ldrb	r3, [r0, #2]
 800610a:	2b55      	cmp	r3, #85	; 0x55
 800610c:	d111      	bne.n	8006132 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800610e:	78c3      	ldrb	r3, [r0, #3]
 8006110:	2b43      	cmp	r3, #67	; 0x43
 8006112:	d10e      	bne.n	8006132 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006114:	7903      	ldrb	r3, [r0, #4]
 8006116:	2b43      	cmp	r3, #67	; 0x43
 8006118:	d10b      	bne.n	8006132 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800611a:	7943      	ldrb	r3, [r0, #5]
 800611c:	2b2b      	cmp	r3, #43	; 0x2b
 800611e:	d108      	bne.n	8006132 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006120:	7983      	ldrb	r3, [r0, #6]
 8006122:	2b2b      	cmp	r3, #43	; 0x2b
 8006124:	d105      	bne.n	8006132 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006126:	79c0      	ldrb	r0, [r0, #7]
 8006128:	2801      	cmp	r0, #1
 800612a:	bf8c      	ite	hi
 800612c:	2000      	movhi	r0, #0
 800612e:	2001      	movls	r0, #1
 8006130:	4770      	bx	lr
 8006132:	2000      	movs	r0, #0
 8006134:	4770      	bx	lr

08006136 <__cxa_call_terminate>:
 8006136:	b510      	push	{r4, lr}
 8006138:	4604      	mov	r4, r0
 800613a:	b148      	cbz	r0, 8006150 <__cxa_call_terminate+0x1a>
 800613c:	f7ff f911 	bl	8005362 <__cxa_begin_catch>
 8006140:	4620      	mov	r0, r4
 8006142:	f7ff ffdb 	bl	80060fc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006146:	b118      	cbz	r0, 8006150 <__cxa_call_terminate+0x1a>
 8006148:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800614c:	f7ff fbb8 	bl	80058c0 <_ZN10__cxxabiv111__terminateEPFvvE>
 8006150:	f7ff fbc2 	bl	80058d8 <_ZSt9terminatev>

08006154 <__cxa_call_unexpected>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	4602      	mov	r2, r0
 8006158:	f7ff ffd0 	bl	80060fc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800615c:	b140      	cbz	r0, 8006170 <__cxa_call_unexpected+0x1c>
 800615e:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8006162:	2500      	movs	r5, #0
 8006164:	4610      	mov	r0, r2
 8006166:	f7ff f8fc 	bl	8005362 <__cxa_begin_catch>
 800616a:	b125      	cbz	r5, 8006176 <__cxa_call_unexpected+0x22>
 800616c:	f7ff fbc6 	bl	80058fc <_ZSt10unexpectedv>
 8006170:	4604      	mov	r4, r0
 8006172:	2501      	movs	r5, #1
 8006174:	e7f6      	b.n	8006164 <__cxa_call_unexpected+0x10>
 8006176:	4620      	mov	r0, r4
 8006178:	f7ff fbb3 	bl	80058e2 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0800617c <_ZSt15get_new_handlerv>:
 800617c:	4b02      	ldr	r3, [pc, #8]	; (8006188 <_ZSt15get_new_handlerv+0xc>)
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	f3bf 8f5b 	dmb	ish
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	20000180 	.word	0x20000180

0800618c <_ZNK12_GLOBAL__N_122generic_error_category4nameEv>:
 800618c:	4800      	ldr	r0, [pc, #0]	; (8006190 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv+0x4>)
 800618e:	4770      	bx	lr
 8006190:	08006cda 	.word	0x08006cda

08006194 <_ZNK12_GLOBAL__N_121system_error_category4nameEv>:
 8006194:	4800      	ldr	r0, [pc, #0]	; (8006198 <_ZNK12_GLOBAL__N_121system_error_category4nameEv+0x4>)
 8006196:	4770      	bx	lr
 8006198:	080070f3 	.word	0x080070f3

0800619c <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi>:
 800619c:	2a74      	cmp	r2, #116	; 0x74
 800619e:	dc22      	bgt.n	80061e6 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x4a>
 80061a0:	2a57      	cmp	r2, #87	; 0x57
 80061a2:	dc0b      	bgt.n	80061bc <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x20>
 80061a4:	2a4d      	cmp	r2, #77	; 0x4d
 80061a6:	dc28      	bgt.n	80061fa <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 80061a8:	2a3b      	cmp	r2, #59	; 0x3b
 80061aa:	dc0d      	bgt.n	80061c8 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x2c>
 80061ac:	2a24      	cmp	r2, #36	; 0x24
 80061ae:	dc16      	bgt.n	80061de <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x42>
 80061b0:	2a0f      	cmp	r2, #15
 80061b2:	dc10      	bgt.n	80061d6 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3a>
 80061b4:	1e53      	subs	r3, r2, #1
 80061b6:	2b0d      	cmp	r3, #13
 80061b8:	d81f      	bhi.n	80061fa <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 80061ba:	e00c      	b.n	80061d6 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3a>
 80061bc:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 80061c0:	2101      	movs	r1, #1
 80061c2:	4099      	lsls	r1, r3
 80061c4:	4b0e      	ldr	r3, [pc, #56]	; (8006200 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x64>)
 80061c6:	e015      	b.n	80061f4 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x58>
 80061c8:	f1a2 013c 	sub.w	r1, r2, #60	; 0x3c
 80061cc:	2301      	movs	r3, #1
 80061ce:	408b      	lsls	r3, r1
 80061d0:	490c      	ldr	r1, [pc, #48]	; (8006204 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x68>)
 80061d2:	420b      	tst	r3, r1
 80061d4:	d011      	beq.n	80061fa <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 80061d6:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x6c>)
 80061d8:	6002      	str	r2, [r0, #0]
 80061da:	6043      	str	r3, [r0, #4]
 80061dc:	4770      	bx	lr
 80061de:	f1a2 032d 	sub.w	r3, r2, #45	; 0x2d
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	e7e8      	b.n	80061b8 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x1c>
 80061e6:	f1a2 0376 	sub.w	r3, r2, #118	; 0x76
 80061ea:	2b18      	cmp	r3, #24
 80061ec:	d805      	bhi.n	80061fa <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5e>
 80061ee:	2101      	movs	r1, #1
 80061f0:	4099      	lsls	r1, r3
 80061f2:	4b06      	ldr	r3, [pc, #24]	; (800620c <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x70>)
 80061f4:	400b      	ands	r3, r1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1ed      	bne.n	80061d6 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3a>
 80061fa:	4b05      	ldr	r3, [pc, #20]	; (8006210 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x74>)
 80061fc:	6002      	str	r2, [r0, #0]
 80061fe:	e7ec      	b.n	80061da <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3e>
 8006200:	1fbf009d 	.word	0x1fbf009d
 8006204:	0002088f 	.word	0x0002088f
 8006208:	2000002c 	.word	0x2000002c
 800620c:	01f107bf 	.word	0x01f107bf
 8006210:	20000028 	.word	0x20000028

08006214 <_ZNKSt3_V214error_category23default_error_conditionEi>:
 8006214:	e9c0 2100 	strd	r2, r1, [r0]
 8006218:	4770      	bx	lr

0800621a <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition>:
 800621a:	b513      	push	{r0, r1, r4, lr}
 800621c:	6803      	ldr	r3, [r0, #0]
 800621e:	4614      	mov	r4, r2
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	460a      	mov	r2, r1
 8006224:	4601      	mov	r1, r0
 8006226:	4668      	mov	r0, sp
 8006228:	4798      	blx	r3
 800622a:	6863      	ldr	r3, [r4, #4]
 800622c:	9a01      	ldr	r2, [sp, #4]
 800622e:	429a      	cmp	r2, r3
 8006230:	d106      	bne.n	8006240 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x26>
 8006232:	9800      	ldr	r0, [sp, #0]
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	1ac3      	subs	r3, r0, r3
 8006238:	4258      	negs	r0, r3
 800623a:	4158      	adcs	r0, r3
 800623c:	b002      	add	sp, #8
 800623e:	bd10      	pop	{r4, pc}
 8006240:	2000      	movs	r0, #0
 8006242:	e7fb      	b.n	800623c <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x22>

08006244 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei>:
 8006244:	684b      	ldr	r3, [r1, #4]
 8006246:	4283      	cmp	r3, r0
 8006248:	d104      	bne.n	8006254 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei+0x10>
 800624a:	6808      	ldr	r0, [r1, #0]
 800624c:	1a83      	subs	r3, r0, r2
 800624e:	4258      	negs	r0, r3
 8006250:	4158      	adcs	r0, r3
 8006252:	4770      	bx	lr
 8006254:	2000      	movs	r0, #0
 8006256:	4770      	bx	lr

08006258 <_ZN12_GLOBAL__N_121system_error_categoryD1Ev>:
 8006258:	4770      	bx	lr

0800625a <_ZN12_GLOBAL__N_122generic_error_categoryD1Ev>:
 800625a:	4770      	bx	lr

0800625c <_ZN12_GLOBAL__N_121system_error_categoryD0Ev>:
 800625c:	b510      	push	{r4, lr}
 800625e:	4604      	mov	r4, r0
 8006260:	f7ff ff48 	bl	80060f4 <_ZdlPv>
 8006264:	4620      	mov	r0, r4
 8006266:	bd10      	pop	{r4, pc}

08006268 <_ZN12_GLOBAL__N_122generic_error_categoryD0Ev>:
 8006268:	b510      	push	{r4, lr}
 800626a:	4604      	mov	r4, r0
 800626c:	f7ff ff42 	bl	80060f4 <_ZdlPv>
 8006270:	4620      	mov	r0, r4
 8006272:	bd10      	pop	{r4, pc}

08006274 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei>:
 8006274:	b510      	push	{r4, lr}
 8006276:	680b      	ldr	r3, [r1, #0]
 8006278:	b086      	sub	sp, #24
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	4604      	mov	r4, r0
 800627e:	4668      	mov	r0, sp
 8006280:	4798      	blx	r3
 8006282:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006286:	4620      	mov	r0, r4
 8006288:	f000 f83b 	bl	8006302 <_ZNSt12__cow_stringC1EPKcj>
 800628c:	4668      	mov	r0, sp
 800628e:	f7ff fd7f 	bl	8005d90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006292:	4620      	mov	r0, r4
 8006294:	b006      	add	sp, #24
 8006296:	bd10      	pop	{r4, pc}

08006298 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei>:
 8006298:	b538      	push	{r3, r4, r5, lr}
 800629a:	4604      	mov	r4, r0
 800629c:	4610      	mov	r0, r2
 800629e:	f000 fb9d 	bl	80069dc <strerror>
 80062a2:	f104 0308 	add.w	r3, r4, #8
 80062a6:	6023      	str	r3, [r4, #0]
 80062a8:	4605      	mov	r5, r0
 80062aa:	b150      	cbz	r0, 80062c2 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x2a>
 80062ac:	f7f9 ff96 	bl	80001dc <strlen>
 80062b0:	182a      	adds	r2, r5, r0
 80062b2:	4620      	mov	r0, r4
 80062b4:	f04f 0300 	mov.w	r3, #0
 80062b8:	4629      	mov	r1, r5
 80062ba:	f7ff fe7f 	bl	8005fbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80062be:	4620      	mov	r0, r4
 80062c0:	bd38      	pop	{r3, r4, r5, pc}
 80062c2:	f04f 32ff 	mov.w	r2, #4294967295
 80062c6:	e7f4      	b.n	80062b2 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x1a>

080062c8 <_GLOBAL__sub_I__ZSt20__throw_system_errori>:
 80062c8:	b508      	push	{r3, lr}
 80062ca:	4a06      	ldr	r2, [pc, #24]	; (80062e4 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x1c>)
 80062cc:	4906      	ldr	r1, [pc, #24]	; (80062e8 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x20>)
 80062ce:	4807      	ldr	r0, [pc, #28]	; (80062ec <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x24>)
 80062d0:	f000 f812 	bl	80062f8 <__aeabi_atexit>
 80062d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80062d8:	4a02      	ldr	r2, [pc, #8]	; (80062e4 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x1c>)
 80062da:	4905      	ldr	r1, [pc, #20]	; (80062f0 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x28>)
 80062dc:	4805      	ldr	r0, [pc, #20]	; (80062f4 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x2c>)
 80062de:	f000 b80b 	b.w	80062f8 <__aeabi_atexit>
 80062e2:	bf00      	nop
 80062e4:	20000000 	.word	0x20000000
 80062e8:	0800625b 	.word	0x0800625b
 80062ec:	2000002c 	.word	0x2000002c
 80062f0:	08006259 	.word	0x08006259
 80062f4:	20000028 	.word	0x20000028

080062f8 <__aeabi_atexit>:
 80062f8:	460b      	mov	r3, r1
 80062fa:	4601      	mov	r1, r0
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 b80f 	b.w	8006320 <__cxa_atexit>

08006302 <_ZNSt12__cow_stringC1EPKcj>:
 8006302:	b513      	push	{r0, r1, r4, lr}
 8006304:	ab01      	add	r3, sp, #4
 8006306:	4604      	mov	r4, r0
 8006308:	f7ff fc1e 	bl	8005b48 <_ZNSsC1EPKcjRKSaIcE>
 800630c:	4620      	mov	r0, r4
 800630e:	b002      	add	sp, #8
 8006310:	bd10      	pop	{r4, pc}

08006312 <abort>:
 8006312:	b508      	push	{r3, lr}
 8006314:	2006      	movs	r0, #6
 8006316:	f000 f95f 	bl	80065d8 <raise>
 800631a:	2001      	movs	r0, #1
 800631c:	f7fb ff00 	bl	8002120 <_exit>

08006320 <__cxa_atexit>:
 8006320:	b510      	push	{r4, lr}
 8006322:	4c05      	ldr	r4, [pc, #20]	; (8006338 <__cxa_atexit+0x18>)
 8006324:	4613      	mov	r3, r2
 8006326:	b12c      	cbz	r4, 8006334 <__cxa_atexit+0x14>
 8006328:	460a      	mov	r2, r1
 800632a:	4601      	mov	r1, r0
 800632c:	2002      	movs	r0, #2
 800632e:	f3af 8000 	nop.w
 8006332:	bd10      	pop	{r4, pc}
 8006334:	4620      	mov	r0, r4
 8006336:	e7fc      	b.n	8006332 <__cxa_atexit+0x12>
 8006338:	00000000 	.word	0x00000000

0800633c <__errno>:
 800633c:	4b01      	ldr	r3, [pc, #4]	; (8006344 <__errno+0x8>)
 800633e:	6818      	ldr	r0, [r3, #0]
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	20000030 	.word	0x20000030

08006348 <__libc_init_array>:
 8006348:	b570      	push	{r4, r5, r6, lr}
 800634a:	4d0d      	ldr	r5, [pc, #52]	; (8006380 <__libc_init_array+0x38>)
 800634c:	4c0d      	ldr	r4, [pc, #52]	; (8006384 <__libc_init_array+0x3c>)
 800634e:	1b64      	subs	r4, r4, r5
 8006350:	10a4      	asrs	r4, r4, #2
 8006352:	2600      	movs	r6, #0
 8006354:	42a6      	cmp	r6, r4
 8006356:	d109      	bne.n	800636c <__libc_init_array+0x24>
 8006358:	4d0b      	ldr	r5, [pc, #44]	; (8006388 <__libc_init_array+0x40>)
 800635a:	4c0c      	ldr	r4, [pc, #48]	; (800638c <__libc_init_array+0x44>)
 800635c:	f000 fb5c 	bl	8006a18 <_init>
 8006360:	1b64      	subs	r4, r4, r5
 8006362:	10a4      	asrs	r4, r4, #2
 8006364:	2600      	movs	r6, #0
 8006366:	42a6      	cmp	r6, r4
 8006368:	d105      	bne.n	8006376 <__libc_init_array+0x2e>
 800636a:	bd70      	pop	{r4, r5, r6, pc}
 800636c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006370:	4798      	blx	r3
 8006372:	3601      	adds	r6, #1
 8006374:	e7ee      	b.n	8006354 <__libc_init_array+0xc>
 8006376:	f855 3b04 	ldr.w	r3, [r5], #4
 800637a:	4798      	blx	r3
 800637c:	3601      	adds	r6, #1
 800637e:	e7f2      	b.n	8006366 <__libc_init_array+0x1e>
 8006380:	08007640 	.word	0x08007640
 8006384:	08007640 	.word	0x08007640
 8006388:	08007640 	.word	0x08007640
 800638c:	0800765c 	.word	0x0800765c

08006390 <__retarget_lock_acquire_recursive>:
 8006390:	4770      	bx	lr

08006392 <__retarget_lock_release_recursive>:
 8006392:	4770      	bx	lr

08006394 <malloc>:
 8006394:	4b02      	ldr	r3, [pc, #8]	; (80063a0 <malloc+0xc>)
 8006396:	4601      	mov	r1, r0
 8006398:	6818      	ldr	r0, [r3, #0]
 800639a:	f000 b88b 	b.w	80064b4 <_malloc_r>
 800639e:	bf00      	nop
 80063a0:	20000030 	.word	0x20000030

080063a4 <free>:
 80063a4:	4b02      	ldr	r3, [pc, #8]	; (80063b0 <free+0xc>)
 80063a6:	4601      	mov	r1, r0
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	f000 b833 	b.w	8006414 <_free_r>
 80063ae:	bf00      	nop
 80063b0:	20000030 	.word	0x20000030

080063b4 <memcpy>:
 80063b4:	440a      	add	r2, r1
 80063b6:	4291      	cmp	r1, r2
 80063b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063bc:	d100      	bne.n	80063c0 <memcpy+0xc>
 80063be:	4770      	bx	lr
 80063c0:	b510      	push	{r4, lr}
 80063c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ca:	4291      	cmp	r1, r2
 80063cc:	d1f9      	bne.n	80063c2 <memcpy+0xe>
 80063ce:	bd10      	pop	{r4, pc}

080063d0 <memmove>:
 80063d0:	4288      	cmp	r0, r1
 80063d2:	b510      	push	{r4, lr}
 80063d4:	eb01 0402 	add.w	r4, r1, r2
 80063d8:	d902      	bls.n	80063e0 <memmove+0x10>
 80063da:	4284      	cmp	r4, r0
 80063dc:	4623      	mov	r3, r4
 80063de:	d807      	bhi.n	80063f0 <memmove+0x20>
 80063e0:	1e43      	subs	r3, r0, #1
 80063e2:	42a1      	cmp	r1, r4
 80063e4:	d008      	beq.n	80063f8 <memmove+0x28>
 80063e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063ee:	e7f8      	b.n	80063e2 <memmove+0x12>
 80063f0:	4402      	add	r2, r0
 80063f2:	4601      	mov	r1, r0
 80063f4:	428a      	cmp	r2, r1
 80063f6:	d100      	bne.n	80063fa <memmove+0x2a>
 80063f8:	bd10      	pop	{r4, pc}
 80063fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006402:	e7f7      	b.n	80063f4 <memmove+0x24>

08006404 <memset>:
 8006404:	4402      	add	r2, r0
 8006406:	4603      	mov	r3, r0
 8006408:	4293      	cmp	r3, r2
 800640a:	d100      	bne.n	800640e <memset+0xa>
 800640c:	4770      	bx	lr
 800640e:	f803 1b01 	strb.w	r1, [r3], #1
 8006412:	e7f9      	b.n	8006408 <memset+0x4>

08006414 <_free_r>:
 8006414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006416:	2900      	cmp	r1, #0
 8006418:	d048      	beq.n	80064ac <_free_r+0x98>
 800641a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800641e:	9001      	str	r0, [sp, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	f1a1 0404 	sub.w	r4, r1, #4
 8006426:	bfb8      	it	lt
 8006428:	18e4      	addlt	r4, r4, r3
 800642a:	f000 fae3 	bl	80069f4 <__malloc_lock>
 800642e:	4a20      	ldr	r2, [pc, #128]	; (80064b0 <_free_r+0x9c>)
 8006430:	9801      	ldr	r0, [sp, #4]
 8006432:	6813      	ldr	r3, [r2, #0]
 8006434:	4615      	mov	r5, r2
 8006436:	b933      	cbnz	r3, 8006446 <_free_r+0x32>
 8006438:	6063      	str	r3, [r4, #4]
 800643a:	6014      	str	r4, [r2, #0]
 800643c:	b003      	add	sp, #12
 800643e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006442:	f000 badd 	b.w	8006a00 <__malloc_unlock>
 8006446:	42a3      	cmp	r3, r4
 8006448:	d90b      	bls.n	8006462 <_free_r+0x4e>
 800644a:	6821      	ldr	r1, [r4, #0]
 800644c:	1862      	adds	r2, r4, r1
 800644e:	4293      	cmp	r3, r2
 8006450:	bf04      	itt	eq
 8006452:	681a      	ldreq	r2, [r3, #0]
 8006454:	685b      	ldreq	r3, [r3, #4]
 8006456:	6063      	str	r3, [r4, #4]
 8006458:	bf04      	itt	eq
 800645a:	1852      	addeq	r2, r2, r1
 800645c:	6022      	streq	r2, [r4, #0]
 800645e:	602c      	str	r4, [r5, #0]
 8006460:	e7ec      	b.n	800643c <_free_r+0x28>
 8006462:	461a      	mov	r2, r3
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	b10b      	cbz	r3, 800646c <_free_r+0x58>
 8006468:	42a3      	cmp	r3, r4
 800646a:	d9fa      	bls.n	8006462 <_free_r+0x4e>
 800646c:	6811      	ldr	r1, [r2, #0]
 800646e:	1855      	adds	r5, r2, r1
 8006470:	42a5      	cmp	r5, r4
 8006472:	d10b      	bne.n	800648c <_free_r+0x78>
 8006474:	6824      	ldr	r4, [r4, #0]
 8006476:	4421      	add	r1, r4
 8006478:	1854      	adds	r4, r2, r1
 800647a:	42a3      	cmp	r3, r4
 800647c:	6011      	str	r1, [r2, #0]
 800647e:	d1dd      	bne.n	800643c <_free_r+0x28>
 8006480:	681c      	ldr	r4, [r3, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	6053      	str	r3, [r2, #4]
 8006486:	4421      	add	r1, r4
 8006488:	6011      	str	r1, [r2, #0]
 800648a:	e7d7      	b.n	800643c <_free_r+0x28>
 800648c:	d902      	bls.n	8006494 <_free_r+0x80>
 800648e:	230c      	movs	r3, #12
 8006490:	6003      	str	r3, [r0, #0]
 8006492:	e7d3      	b.n	800643c <_free_r+0x28>
 8006494:	6825      	ldr	r5, [r4, #0]
 8006496:	1961      	adds	r1, r4, r5
 8006498:	428b      	cmp	r3, r1
 800649a:	bf04      	itt	eq
 800649c:	6819      	ldreq	r1, [r3, #0]
 800649e:	685b      	ldreq	r3, [r3, #4]
 80064a0:	6063      	str	r3, [r4, #4]
 80064a2:	bf04      	itt	eq
 80064a4:	1949      	addeq	r1, r1, r5
 80064a6:	6021      	streq	r1, [r4, #0]
 80064a8:	6054      	str	r4, [r2, #4]
 80064aa:	e7c7      	b.n	800643c <_free_r+0x28>
 80064ac:	b003      	add	sp, #12
 80064ae:	bd30      	pop	{r4, r5, pc}
 80064b0:	20000184 	.word	0x20000184

080064b4 <_malloc_r>:
 80064b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b6:	1ccd      	adds	r5, r1, #3
 80064b8:	f025 0503 	bic.w	r5, r5, #3
 80064bc:	3508      	adds	r5, #8
 80064be:	2d0c      	cmp	r5, #12
 80064c0:	bf38      	it	cc
 80064c2:	250c      	movcc	r5, #12
 80064c4:	2d00      	cmp	r5, #0
 80064c6:	4606      	mov	r6, r0
 80064c8:	db01      	blt.n	80064ce <_malloc_r+0x1a>
 80064ca:	42a9      	cmp	r1, r5
 80064cc:	d903      	bls.n	80064d6 <_malloc_r+0x22>
 80064ce:	230c      	movs	r3, #12
 80064d0:	6033      	str	r3, [r6, #0]
 80064d2:	2000      	movs	r0, #0
 80064d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064d6:	f000 fa8d 	bl	80069f4 <__malloc_lock>
 80064da:	4921      	ldr	r1, [pc, #132]	; (8006560 <_malloc_r+0xac>)
 80064dc:	680a      	ldr	r2, [r1, #0]
 80064de:	4614      	mov	r4, r2
 80064e0:	b99c      	cbnz	r4, 800650a <_malloc_r+0x56>
 80064e2:	4f20      	ldr	r7, [pc, #128]	; (8006564 <_malloc_r+0xb0>)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	b923      	cbnz	r3, 80064f2 <_malloc_r+0x3e>
 80064e8:	4621      	mov	r1, r4
 80064ea:	4630      	mov	r0, r6
 80064ec:	f000 f83c 	bl	8006568 <_sbrk_r>
 80064f0:	6038      	str	r0, [r7, #0]
 80064f2:	4629      	mov	r1, r5
 80064f4:	4630      	mov	r0, r6
 80064f6:	f000 f837 	bl	8006568 <_sbrk_r>
 80064fa:	1c43      	adds	r3, r0, #1
 80064fc:	d123      	bne.n	8006546 <_malloc_r+0x92>
 80064fe:	230c      	movs	r3, #12
 8006500:	6033      	str	r3, [r6, #0]
 8006502:	4630      	mov	r0, r6
 8006504:	f000 fa7c 	bl	8006a00 <__malloc_unlock>
 8006508:	e7e3      	b.n	80064d2 <_malloc_r+0x1e>
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	1b5b      	subs	r3, r3, r5
 800650e:	d417      	bmi.n	8006540 <_malloc_r+0x8c>
 8006510:	2b0b      	cmp	r3, #11
 8006512:	d903      	bls.n	800651c <_malloc_r+0x68>
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	441c      	add	r4, r3
 8006518:	6025      	str	r5, [r4, #0]
 800651a:	e004      	b.n	8006526 <_malloc_r+0x72>
 800651c:	6863      	ldr	r3, [r4, #4]
 800651e:	42a2      	cmp	r2, r4
 8006520:	bf0c      	ite	eq
 8006522:	600b      	streq	r3, [r1, #0]
 8006524:	6053      	strne	r3, [r2, #4]
 8006526:	4630      	mov	r0, r6
 8006528:	f000 fa6a 	bl	8006a00 <__malloc_unlock>
 800652c:	f104 000b 	add.w	r0, r4, #11
 8006530:	1d23      	adds	r3, r4, #4
 8006532:	f020 0007 	bic.w	r0, r0, #7
 8006536:	1ac2      	subs	r2, r0, r3
 8006538:	d0cc      	beq.n	80064d4 <_malloc_r+0x20>
 800653a:	1a1b      	subs	r3, r3, r0
 800653c:	50a3      	str	r3, [r4, r2]
 800653e:	e7c9      	b.n	80064d4 <_malloc_r+0x20>
 8006540:	4622      	mov	r2, r4
 8006542:	6864      	ldr	r4, [r4, #4]
 8006544:	e7cc      	b.n	80064e0 <_malloc_r+0x2c>
 8006546:	1cc4      	adds	r4, r0, #3
 8006548:	f024 0403 	bic.w	r4, r4, #3
 800654c:	42a0      	cmp	r0, r4
 800654e:	d0e3      	beq.n	8006518 <_malloc_r+0x64>
 8006550:	1a21      	subs	r1, r4, r0
 8006552:	4630      	mov	r0, r6
 8006554:	f000 f808 	bl	8006568 <_sbrk_r>
 8006558:	3001      	adds	r0, #1
 800655a:	d1dd      	bne.n	8006518 <_malloc_r+0x64>
 800655c:	e7cf      	b.n	80064fe <_malloc_r+0x4a>
 800655e:	bf00      	nop
 8006560:	20000184 	.word	0x20000184
 8006564:	20000188 	.word	0x20000188

08006568 <_sbrk_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4d06      	ldr	r5, [pc, #24]	; (8006584 <_sbrk_r+0x1c>)
 800656c:	2300      	movs	r3, #0
 800656e:	4604      	mov	r4, r0
 8006570:	4608      	mov	r0, r1
 8006572:	602b      	str	r3, [r5, #0]
 8006574:	f7fb fdde 	bl	8002134 <_sbrk>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d102      	bne.n	8006582 <_sbrk_r+0x1a>
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	b103      	cbz	r3, 8006582 <_sbrk_r+0x1a>
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	200002d0 	.word	0x200002d0

08006588 <_raise_r>:
 8006588:	291f      	cmp	r1, #31
 800658a:	b538      	push	{r3, r4, r5, lr}
 800658c:	4604      	mov	r4, r0
 800658e:	460d      	mov	r5, r1
 8006590:	d904      	bls.n	800659c <_raise_r+0x14>
 8006592:	2316      	movs	r3, #22
 8006594:	6003      	str	r3, [r0, #0]
 8006596:	f04f 30ff 	mov.w	r0, #4294967295
 800659a:	bd38      	pop	{r3, r4, r5, pc}
 800659c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800659e:	b112      	cbz	r2, 80065a6 <_raise_r+0x1e>
 80065a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065a4:	b94b      	cbnz	r3, 80065ba <_raise_r+0x32>
 80065a6:	4620      	mov	r0, r4
 80065a8:	f000 f830 	bl	800660c <_getpid_r>
 80065ac:	462a      	mov	r2, r5
 80065ae:	4601      	mov	r1, r0
 80065b0:	4620      	mov	r0, r4
 80065b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065b6:	f000 b817 	b.w	80065e8 <_kill_r>
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d00a      	beq.n	80065d4 <_raise_r+0x4c>
 80065be:	1c59      	adds	r1, r3, #1
 80065c0:	d103      	bne.n	80065ca <_raise_r+0x42>
 80065c2:	2316      	movs	r3, #22
 80065c4:	6003      	str	r3, [r0, #0]
 80065c6:	2001      	movs	r0, #1
 80065c8:	e7e7      	b.n	800659a <_raise_r+0x12>
 80065ca:	2400      	movs	r4, #0
 80065cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80065d0:	4628      	mov	r0, r5
 80065d2:	4798      	blx	r3
 80065d4:	2000      	movs	r0, #0
 80065d6:	e7e0      	b.n	800659a <_raise_r+0x12>

080065d8 <raise>:
 80065d8:	4b02      	ldr	r3, [pc, #8]	; (80065e4 <raise+0xc>)
 80065da:	4601      	mov	r1, r0
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	f7ff bfd3 	b.w	8006588 <_raise_r>
 80065e2:	bf00      	nop
 80065e4:	20000030 	.word	0x20000030

080065e8 <_kill_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4d07      	ldr	r5, [pc, #28]	; (8006608 <_kill_r+0x20>)
 80065ec:	2300      	movs	r3, #0
 80065ee:	4604      	mov	r4, r0
 80065f0:	4608      	mov	r0, r1
 80065f2:	4611      	mov	r1, r2
 80065f4:	602b      	str	r3, [r5, #0]
 80065f6:	f7fb fd83 	bl	8002100 <_kill>
 80065fa:	1c43      	adds	r3, r0, #1
 80065fc:	d102      	bne.n	8006604 <_kill_r+0x1c>
 80065fe:	682b      	ldr	r3, [r5, #0]
 8006600:	b103      	cbz	r3, 8006604 <_kill_r+0x1c>
 8006602:	6023      	str	r3, [r4, #0]
 8006604:	bd38      	pop	{r3, r4, r5, pc}
 8006606:	bf00      	nop
 8006608:	200002d0 	.word	0x200002d0

0800660c <_getpid_r>:
 800660c:	f7fb bd70 	b.w	80020f0 <_getpid>

08006610 <_strerror_r>:
 8006610:	b510      	push	{r4, lr}
 8006612:	4604      	mov	r4, r0
 8006614:	4608      	mov	r0, r1
 8006616:	4611      	mov	r1, r2
 8006618:	288e      	cmp	r0, #142	; 0x8e
 800661a:	f200 812f 	bhi.w	800687c <_strerror_r+0x26c>
 800661e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8006622:	0138      	.short	0x0138
 8006624:	0091008f 	.word	0x0091008f
 8006628:	00950093 	.word	0x00950093
 800662c:	00990097 	.word	0x00990097
 8006630:	009d009b 	.word	0x009d009b
 8006634:	00a300a1 	.word	0x00a300a1
 8006638:	00a900a7 	.word	0x00a900a7
 800663c:	00ad00ab 	.word	0x00ad00ab
 8006640:	00af012d 	.word	0x00af012d
 8006644:	00b300b1 	.word	0x00b300b1
 8006648:	00b700b5 	.word	0x00b700b5
 800664c:	00bf00bd 	.word	0x00bf00bd
 8006650:	00c700c5 	.word	0x00c700c5
 8006654:	00cb00c9 	.word	0x00cb00c9
 8006658:	00d100cd 	.word	0x00d100cd
 800665c:	00d700d5 	.word	0x00d700d5
 8006660:	00db00d9 	.word	0x00db00d9
 8006664:	00df00dd 	.word	0x00df00dd
 8006668:	00e300e1 	.word	0x00e300e1
 800666c:	012d012d 	.word	0x012d012d
 8006670:	012d012d 	.word	0x012d012d
 8006674:	012d012d 	.word	0x012d012d
 8006678:	012d012d 	.word	0x012d012d
 800667c:	00eb00e7 	.word	0x00eb00e7
 8006680:	012d012d 	.word	0x012d012d
 8006684:	012d012d 	.word	0x012d012d
 8006688:	012d012d 	.word	0x012d012d
 800668c:	012d012d 	.word	0x012d012d
 8006690:	012d012d 	.word	0x012d012d
 8006694:	012d012d 	.word	0x012d012d
 8006698:	00ed012d 	.word	0x00ed012d
 800669c:	00ef0107 	.word	0x00ef0107
 80066a0:	012d00f1 	.word	0x012d00f1
 80066a4:	012d012d 	.word	0x012d012d
 80066a8:	012d00f3 	.word	0x012d00f3
 80066ac:	012d012d 	.word	0x012d012d
 80066b0:	012d00f5 	.word	0x012d00f5
 80066b4:	00f9012d 	.word	0x00f9012d
 80066b8:	012d012d 	.word	0x012d012d
 80066bc:	012d00fb 	.word	0x012d00fb
 80066c0:	012d012d 	.word	0x012d012d
 80066c4:	012d012d 	.word	0x012d012d
 80066c8:	012d012d 	.word	0x012d012d
 80066cc:	012d012d 	.word	0x012d012d
 80066d0:	00fd012d 	.word	0x00fd012d
 80066d4:	00ff012d 	.word	0x00ff012d
 80066d8:	01030101 	.word	0x01030101
 80066dc:	012d012d 	.word	0x012d012d
 80066e0:	012d0125 	.word	0x012d0125
 80066e4:	012d012d 	.word	0x012d012d
 80066e8:	012d012d 	.word	0x012d012d
 80066ec:	012d012d 	.word	0x012d012d
 80066f0:	0113012d 	.word	0x0113012d
 80066f4:	01090105 	.word	0x01090105
 80066f8:	010d010b 	.word	0x010d010b
 80066fc:	012d010f 	.word	0x012d010f
 8006700:	01150111 	.word	0x01150111
 8006704:	00e90119 	.word	0x00e90119
 8006708:	012b00c1 	.word	0x012b00c1
 800670c:	00cf00b9 	.word	0x00cf00b9
 8006710:	009f00bb 	.word	0x009f00bb
 8006714:	012900a5 	.word	0x012900a5
 8006718:	012d00f7 	.word	0x012d00f7
 800671c:	00c30117 	.word	0x00c30117
 8006720:	011b011d 	.word	0x011b011d
 8006724:	012d012d 	.word	0x012d012d
 8006728:	012d012d 	.word	0x012d012d
 800672c:	00d3012d 	.word	0x00d3012d
 8006730:	012d012d 	.word	0x012d012d
 8006734:	00e5012d 	.word	0x00e5012d
 8006738:	011f0127 	.word	0x011f0127
 800673c:	01230121 	.word	0x01230121
 8006740:	4855      	ldr	r0, [pc, #340]	; (8006898 <_strerror_r+0x288>)
 8006742:	bd10      	pop	{r4, pc}
 8006744:	4855      	ldr	r0, [pc, #340]	; (800689c <_strerror_r+0x28c>)
 8006746:	e7fc      	b.n	8006742 <_strerror_r+0x132>
 8006748:	4855      	ldr	r0, [pc, #340]	; (80068a0 <_strerror_r+0x290>)
 800674a:	e7fa      	b.n	8006742 <_strerror_r+0x132>
 800674c:	4855      	ldr	r0, [pc, #340]	; (80068a4 <_strerror_r+0x294>)
 800674e:	e7f8      	b.n	8006742 <_strerror_r+0x132>
 8006750:	4855      	ldr	r0, [pc, #340]	; (80068a8 <_strerror_r+0x298>)
 8006752:	e7f6      	b.n	8006742 <_strerror_r+0x132>
 8006754:	4855      	ldr	r0, [pc, #340]	; (80068ac <_strerror_r+0x29c>)
 8006756:	e7f4      	b.n	8006742 <_strerror_r+0x132>
 8006758:	4855      	ldr	r0, [pc, #340]	; (80068b0 <_strerror_r+0x2a0>)
 800675a:	e7f2      	b.n	8006742 <_strerror_r+0x132>
 800675c:	4855      	ldr	r0, [pc, #340]	; (80068b4 <_strerror_r+0x2a4>)
 800675e:	e7f0      	b.n	8006742 <_strerror_r+0x132>
 8006760:	4855      	ldr	r0, [pc, #340]	; (80068b8 <_strerror_r+0x2a8>)
 8006762:	e7ee      	b.n	8006742 <_strerror_r+0x132>
 8006764:	4855      	ldr	r0, [pc, #340]	; (80068bc <_strerror_r+0x2ac>)
 8006766:	e7ec      	b.n	8006742 <_strerror_r+0x132>
 8006768:	4855      	ldr	r0, [pc, #340]	; (80068c0 <_strerror_r+0x2b0>)
 800676a:	e7ea      	b.n	8006742 <_strerror_r+0x132>
 800676c:	4855      	ldr	r0, [pc, #340]	; (80068c4 <_strerror_r+0x2b4>)
 800676e:	e7e8      	b.n	8006742 <_strerror_r+0x132>
 8006770:	4855      	ldr	r0, [pc, #340]	; (80068c8 <_strerror_r+0x2b8>)
 8006772:	e7e6      	b.n	8006742 <_strerror_r+0x132>
 8006774:	4855      	ldr	r0, [pc, #340]	; (80068cc <_strerror_r+0x2bc>)
 8006776:	e7e4      	b.n	8006742 <_strerror_r+0x132>
 8006778:	4855      	ldr	r0, [pc, #340]	; (80068d0 <_strerror_r+0x2c0>)
 800677a:	e7e2      	b.n	8006742 <_strerror_r+0x132>
 800677c:	4855      	ldr	r0, [pc, #340]	; (80068d4 <_strerror_r+0x2c4>)
 800677e:	e7e0      	b.n	8006742 <_strerror_r+0x132>
 8006780:	4855      	ldr	r0, [pc, #340]	; (80068d8 <_strerror_r+0x2c8>)
 8006782:	e7de      	b.n	8006742 <_strerror_r+0x132>
 8006784:	4855      	ldr	r0, [pc, #340]	; (80068dc <_strerror_r+0x2cc>)
 8006786:	e7dc      	b.n	8006742 <_strerror_r+0x132>
 8006788:	4855      	ldr	r0, [pc, #340]	; (80068e0 <_strerror_r+0x2d0>)
 800678a:	e7da      	b.n	8006742 <_strerror_r+0x132>
 800678c:	4855      	ldr	r0, [pc, #340]	; (80068e4 <_strerror_r+0x2d4>)
 800678e:	e7d8      	b.n	8006742 <_strerror_r+0x132>
 8006790:	4855      	ldr	r0, [pc, #340]	; (80068e8 <_strerror_r+0x2d8>)
 8006792:	e7d6      	b.n	8006742 <_strerror_r+0x132>
 8006794:	4855      	ldr	r0, [pc, #340]	; (80068ec <_strerror_r+0x2dc>)
 8006796:	e7d4      	b.n	8006742 <_strerror_r+0x132>
 8006798:	4855      	ldr	r0, [pc, #340]	; (80068f0 <_strerror_r+0x2e0>)
 800679a:	e7d2      	b.n	8006742 <_strerror_r+0x132>
 800679c:	4855      	ldr	r0, [pc, #340]	; (80068f4 <_strerror_r+0x2e4>)
 800679e:	e7d0      	b.n	8006742 <_strerror_r+0x132>
 80067a0:	4855      	ldr	r0, [pc, #340]	; (80068f8 <_strerror_r+0x2e8>)
 80067a2:	e7ce      	b.n	8006742 <_strerror_r+0x132>
 80067a4:	4855      	ldr	r0, [pc, #340]	; (80068fc <_strerror_r+0x2ec>)
 80067a6:	e7cc      	b.n	8006742 <_strerror_r+0x132>
 80067a8:	4855      	ldr	r0, [pc, #340]	; (8006900 <_strerror_r+0x2f0>)
 80067aa:	e7ca      	b.n	8006742 <_strerror_r+0x132>
 80067ac:	4855      	ldr	r0, [pc, #340]	; (8006904 <_strerror_r+0x2f4>)
 80067ae:	e7c8      	b.n	8006742 <_strerror_r+0x132>
 80067b0:	4855      	ldr	r0, [pc, #340]	; (8006908 <_strerror_r+0x2f8>)
 80067b2:	e7c6      	b.n	8006742 <_strerror_r+0x132>
 80067b4:	4855      	ldr	r0, [pc, #340]	; (800690c <_strerror_r+0x2fc>)
 80067b6:	e7c4      	b.n	8006742 <_strerror_r+0x132>
 80067b8:	4855      	ldr	r0, [pc, #340]	; (8006910 <_strerror_r+0x300>)
 80067ba:	e7c2      	b.n	8006742 <_strerror_r+0x132>
 80067bc:	4855      	ldr	r0, [pc, #340]	; (8006914 <_strerror_r+0x304>)
 80067be:	e7c0      	b.n	8006742 <_strerror_r+0x132>
 80067c0:	4855      	ldr	r0, [pc, #340]	; (8006918 <_strerror_r+0x308>)
 80067c2:	e7be      	b.n	8006742 <_strerror_r+0x132>
 80067c4:	4855      	ldr	r0, [pc, #340]	; (800691c <_strerror_r+0x30c>)
 80067c6:	e7bc      	b.n	8006742 <_strerror_r+0x132>
 80067c8:	4855      	ldr	r0, [pc, #340]	; (8006920 <_strerror_r+0x310>)
 80067ca:	e7ba      	b.n	8006742 <_strerror_r+0x132>
 80067cc:	4855      	ldr	r0, [pc, #340]	; (8006924 <_strerror_r+0x314>)
 80067ce:	e7b8      	b.n	8006742 <_strerror_r+0x132>
 80067d0:	4855      	ldr	r0, [pc, #340]	; (8006928 <_strerror_r+0x318>)
 80067d2:	e7b6      	b.n	8006742 <_strerror_r+0x132>
 80067d4:	4855      	ldr	r0, [pc, #340]	; (800692c <_strerror_r+0x31c>)
 80067d6:	e7b4      	b.n	8006742 <_strerror_r+0x132>
 80067d8:	4855      	ldr	r0, [pc, #340]	; (8006930 <_strerror_r+0x320>)
 80067da:	e7b2      	b.n	8006742 <_strerror_r+0x132>
 80067dc:	4855      	ldr	r0, [pc, #340]	; (8006934 <_strerror_r+0x324>)
 80067de:	e7b0      	b.n	8006742 <_strerror_r+0x132>
 80067e0:	4855      	ldr	r0, [pc, #340]	; (8006938 <_strerror_r+0x328>)
 80067e2:	e7ae      	b.n	8006742 <_strerror_r+0x132>
 80067e4:	4855      	ldr	r0, [pc, #340]	; (800693c <_strerror_r+0x32c>)
 80067e6:	e7ac      	b.n	8006742 <_strerror_r+0x132>
 80067e8:	4855      	ldr	r0, [pc, #340]	; (8006940 <_strerror_r+0x330>)
 80067ea:	e7aa      	b.n	8006742 <_strerror_r+0x132>
 80067ec:	4855      	ldr	r0, [pc, #340]	; (8006944 <_strerror_r+0x334>)
 80067ee:	e7a8      	b.n	8006742 <_strerror_r+0x132>
 80067f0:	4855      	ldr	r0, [pc, #340]	; (8006948 <_strerror_r+0x338>)
 80067f2:	e7a6      	b.n	8006742 <_strerror_r+0x132>
 80067f4:	4855      	ldr	r0, [pc, #340]	; (800694c <_strerror_r+0x33c>)
 80067f6:	e7a4      	b.n	8006742 <_strerror_r+0x132>
 80067f8:	4855      	ldr	r0, [pc, #340]	; (8006950 <_strerror_r+0x340>)
 80067fa:	e7a2      	b.n	8006742 <_strerror_r+0x132>
 80067fc:	4855      	ldr	r0, [pc, #340]	; (8006954 <_strerror_r+0x344>)
 80067fe:	e7a0      	b.n	8006742 <_strerror_r+0x132>
 8006800:	4855      	ldr	r0, [pc, #340]	; (8006958 <_strerror_r+0x348>)
 8006802:	e79e      	b.n	8006742 <_strerror_r+0x132>
 8006804:	4855      	ldr	r0, [pc, #340]	; (800695c <_strerror_r+0x34c>)
 8006806:	e79c      	b.n	8006742 <_strerror_r+0x132>
 8006808:	4855      	ldr	r0, [pc, #340]	; (8006960 <_strerror_r+0x350>)
 800680a:	e79a      	b.n	8006742 <_strerror_r+0x132>
 800680c:	4855      	ldr	r0, [pc, #340]	; (8006964 <_strerror_r+0x354>)
 800680e:	e798      	b.n	8006742 <_strerror_r+0x132>
 8006810:	4855      	ldr	r0, [pc, #340]	; (8006968 <_strerror_r+0x358>)
 8006812:	e796      	b.n	8006742 <_strerror_r+0x132>
 8006814:	4855      	ldr	r0, [pc, #340]	; (800696c <_strerror_r+0x35c>)
 8006816:	e794      	b.n	8006742 <_strerror_r+0x132>
 8006818:	4855      	ldr	r0, [pc, #340]	; (8006970 <_strerror_r+0x360>)
 800681a:	e792      	b.n	8006742 <_strerror_r+0x132>
 800681c:	4855      	ldr	r0, [pc, #340]	; (8006974 <_strerror_r+0x364>)
 800681e:	e790      	b.n	8006742 <_strerror_r+0x132>
 8006820:	4855      	ldr	r0, [pc, #340]	; (8006978 <_strerror_r+0x368>)
 8006822:	e78e      	b.n	8006742 <_strerror_r+0x132>
 8006824:	4855      	ldr	r0, [pc, #340]	; (800697c <_strerror_r+0x36c>)
 8006826:	e78c      	b.n	8006742 <_strerror_r+0x132>
 8006828:	4855      	ldr	r0, [pc, #340]	; (8006980 <_strerror_r+0x370>)
 800682a:	e78a      	b.n	8006742 <_strerror_r+0x132>
 800682c:	4855      	ldr	r0, [pc, #340]	; (8006984 <_strerror_r+0x374>)
 800682e:	e788      	b.n	8006742 <_strerror_r+0x132>
 8006830:	4855      	ldr	r0, [pc, #340]	; (8006988 <_strerror_r+0x378>)
 8006832:	e786      	b.n	8006742 <_strerror_r+0x132>
 8006834:	4855      	ldr	r0, [pc, #340]	; (800698c <_strerror_r+0x37c>)
 8006836:	e784      	b.n	8006742 <_strerror_r+0x132>
 8006838:	4855      	ldr	r0, [pc, #340]	; (8006990 <_strerror_r+0x380>)
 800683a:	e782      	b.n	8006742 <_strerror_r+0x132>
 800683c:	4855      	ldr	r0, [pc, #340]	; (8006994 <_strerror_r+0x384>)
 800683e:	e780      	b.n	8006742 <_strerror_r+0x132>
 8006840:	4855      	ldr	r0, [pc, #340]	; (8006998 <_strerror_r+0x388>)
 8006842:	e77e      	b.n	8006742 <_strerror_r+0x132>
 8006844:	4855      	ldr	r0, [pc, #340]	; (800699c <_strerror_r+0x38c>)
 8006846:	e77c      	b.n	8006742 <_strerror_r+0x132>
 8006848:	4855      	ldr	r0, [pc, #340]	; (80069a0 <_strerror_r+0x390>)
 800684a:	e77a      	b.n	8006742 <_strerror_r+0x132>
 800684c:	4855      	ldr	r0, [pc, #340]	; (80069a4 <_strerror_r+0x394>)
 800684e:	e778      	b.n	8006742 <_strerror_r+0x132>
 8006850:	4855      	ldr	r0, [pc, #340]	; (80069a8 <_strerror_r+0x398>)
 8006852:	e776      	b.n	8006742 <_strerror_r+0x132>
 8006854:	4855      	ldr	r0, [pc, #340]	; (80069ac <_strerror_r+0x39c>)
 8006856:	e774      	b.n	8006742 <_strerror_r+0x132>
 8006858:	4855      	ldr	r0, [pc, #340]	; (80069b0 <_strerror_r+0x3a0>)
 800685a:	e772      	b.n	8006742 <_strerror_r+0x132>
 800685c:	4855      	ldr	r0, [pc, #340]	; (80069b4 <_strerror_r+0x3a4>)
 800685e:	e770      	b.n	8006742 <_strerror_r+0x132>
 8006860:	4855      	ldr	r0, [pc, #340]	; (80069b8 <_strerror_r+0x3a8>)
 8006862:	e76e      	b.n	8006742 <_strerror_r+0x132>
 8006864:	4855      	ldr	r0, [pc, #340]	; (80069bc <_strerror_r+0x3ac>)
 8006866:	e76c      	b.n	8006742 <_strerror_r+0x132>
 8006868:	4855      	ldr	r0, [pc, #340]	; (80069c0 <_strerror_r+0x3b0>)
 800686a:	e76a      	b.n	8006742 <_strerror_r+0x132>
 800686c:	4855      	ldr	r0, [pc, #340]	; (80069c4 <_strerror_r+0x3b4>)
 800686e:	e768      	b.n	8006742 <_strerror_r+0x132>
 8006870:	4855      	ldr	r0, [pc, #340]	; (80069c8 <_strerror_r+0x3b8>)
 8006872:	e766      	b.n	8006742 <_strerror_r+0x132>
 8006874:	4855      	ldr	r0, [pc, #340]	; (80069cc <_strerror_r+0x3bc>)
 8006876:	e764      	b.n	8006742 <_strerror_r+0x132>
 8006878:	4855      	ldr	r0, [pc, #340]	; (80069d0 <_strerror_r+0x3c0>)
 800687a:	e762      	b.n	8006742 <_strerror_r+0x132>
 800687c:	2b00      	cmp	r3, #0
 800687e:	bf14      	ite	ne
 8006880:	461a      	movne	r2, r3
 8006882:	4622      	moveq	r2, r4
 8006884:	f000 f8b4 	bl	80069f0 <_user_strerror>
 8006888:	4b52      	ldr	r3, [pc, #328]	; (80069d4 <_strerror_r+0x3c4>)
 800688a:	2800      	cmp	r0, #0
 800688c:	bf08      	it	eq
 800688e:	4618      	moveq	r0, r3
 8006890:	e757      	b.n	8006742 <_strerror_r+0x132>
 8006892:	4851      	ldr	r0, [pc, #324]	; (80069d8 <_strerror_r+0x3c8>)
 8006894:	e755      	b.n	8006742 <_strerror_r+0x132>
 8006896:	bf00      	nop
 8006898:	08006e20 	.word	0x08006e20
 800689c:	08006e2a 	.word	0x08006e2a
 80068a0:	08006e44 	.word	0x08006e44
 80068a4:	08006e54 	.word	0x08006e54
 80068a8:	08006e6c 	.word	0x08006e6c
 80068ac:	08006e76 	.word	0x08006e76
 80068b0:	08006e90 	.word	0x08006e90
 80068b4:	08006ea2 	.word	0x08006ea2
 80068b8:	08006eb4 	.word	0x08006eb4
 80068bc:	08006ecd 	.word	0x08006ecd
 80068c0:	08006edd 	.word	0x08006edd
 80068c4:	08006ee9 	.word	0x08006ee9
 80068c8:	08006f06 	.word	0x08006f06
 80068cc:	08006f18 	.word	0x08006f18
 80068d0:	08006f29 	.word	0x08006f29
 80068d4:	08006f3b 	.word	0x08006f3b
 80068d8:	08006f47 	.word	0x08006f47
 80068dc:	08006f5f 	.word	0x08006f5f
 80068e0:	08006f6b 	.word	0x08006f6b
 80068e4:	08006f7d 	.word	0x08006f7d
 80068e8:	08006f8c 	.word	0x08006f8c
 80068ec:	08006f9c 	.word	0x08006f9c
 80068f0:	08006fa9 	.word	0x08006fa9
 80068f4:	08006fc8 	.word	0x08006fc8
 80068f8:	08006fd7 	.word	0x08006fd7
 80068fc:	08006fe8 	.word	0x08006fe8
 8006900:	0800700c 	.word	0x0800700c
 8006904:	0800702a 	.word	0x0800702a
 8006908:	08007048 	.word	0x08007048
 800690c:	08007068 	.word	0x08007068
 8006910:	0800707f 	.word	0x0800707f
 8006914:	0800708e 	.word	0x0800708e
 8006918:	0800709d 	.word	0x0800709d
 800691c:	080070b1 	.word	0x080070b1
 8006920:	080070c9 	.word	0x080070c9
 8006924:	080070d7 	.word	0x080070d7
 8006928:	080070e4 	.word	0x080070e4
 800692c:	080070fa 	.word	0x080070fa
 8006930:	08007109 	.word	0x08007109
 8006934:	08007115 	.word	0x08007115
 8006938:	08007144 	.word	0x08007144
 800693c:	08007155 	.word	0x08007155
 8006940:	08007170 	.word	0x08007170
 8006944:	08007183 	.word	0x08007183
 8006948:	08007199 	.word	0x08007199
 800694c:	080071a2 	.word	0x080071a2
 8006950:	080071b9 	.word	0x080071b9
 8006954:	080071c1 	.word	0x080071c1
 8006958:	080071ce 	.word	0x080071ce
 800695c:	080071e3 	.word	0x080071e3
 8006960:	080071f7 	.word	0x080071f7
 8006964:	0800720f 	.word	0x0800720f
 8006968:	0800721e 	.word	0x0800721e
 800696c:	0800722f 	.word	0x0800722f
 8006970:	08007242 	.word	0x08007242
 8006974:	0800724e 	.word	0x0800724e
 8006978:	08007267 	.word	0x08007267
 800697c:	0800727b 	.word	0x0800727b
 8006980:	08007296 	.word	0x08007296
 8006984:	080072ae 	.word	0x080072ae
 8006988:	080072c8 	.word	0x080072c8
 800698c:	080072d0 	.word	0x080072d0
 8006990:	08007300 	.word	0x08007300
 8006994:	0800731f 	.word	0x0800731f
 8006998:	0800733e 	.word	0x0800733e
 800699c:	08007355 	.word	0x08007355
 80069a0:	08007368 	.word	0x08007368
 80069a4:	08007381 	.word	0x08007381
 80069a8:	08007398 	.word	0x08007398
 80069ac:	080073ae 	.word	0x080073ae
 80069b0:	080073cf 	.word	0x080073cf
 80069b4:	080073e7 	.word	0x080073e7
 80069b8:	08007403 	.word	0x08007403
 80069bc:	08007416 	.word	0x08007416
 80069c0:	0800742c 	.word	0x0800742c
 80069c4:	08007440 	.word	0x08007440
 80069c8:	08007462 	.word	0x08007462
 80069cc:	08007488 	.word	0x08007488
 80069d0:	08007499 	.word	0x08007499
 80069d4:	080072cf 	.word	0x080072cf
 80069d8:	080074ae 	.word	0x080074ae

080069dc <strerror>:
 80069dc:	4601      	mov	r1, r0
 80069de:	4803      	ldr	r0, [pc, #12]	; (80069ec <strerror+0x10>)
 80069e0:	2300      	movs	r3, #0
 80069e2:	6800      	ldr	r0, [r0, #0]
 80069e4:	461a      	mov	r2, r3
 80069e6:	f7ff be13 	b.w	8006610 <_strerror_r>
 80069ea:	bf00      	nop
 80069ec:	20000030 	.word	0x20000030

080069f0 <_user_strerror>:
 80069f0:	2000      	movs	r0, #0
 80069f2:	4770      	bx	lr

080069f4 <__malloc_lock>:
 80069f4:	4801      	ldr	r0, [pc, #4]	; (80069fc <__malloc_lock+0x8>)
 80069f6:	f7ff bccb 	b.w	8006390 <__retarget_lock_acquire_recursive>
 80069fa:	bf00      	nop
 80069fc:	200002c4 	.word	0x200002c4

08006a00 <__malloc_unlock>:
 8006a00:	4801      	ldr	r0, [pc, #4]	; (8006a08 <__malloc_unlock+0x8>)
 8006a02:	f7ff bcc6 	b.w	8006392 <__retarget_lock_release_recursive>
 8006a06:	bf00      	nop
 8006a08:	200002c4 	.word	0x200002c4

08006a0c <_Unwind_GetDataRelBase>:
 8006a0c:	b508      	push	{r3, lr}
 8006a0e:	f7ff fc80 	bl	8006312 <abort>

08006a12 <_Unwind_GetTextRelBase>:
 8006a12:	b508      	push	{r3, lr}
 8006a14:	f7ff fffa 	bl	8006a0c <_Unwind_GetDataRelBase>

08006a18 <_init>:
 8006a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1a:	bf00      	nop
 8006a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1e:	bc08      	pop	{r3}
 8006a20:	469e      	mov	lr, r3
 8006a22:	4770      	bx	lr

08006a24 <_fini>:
 8006a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a26:	bf00      	nop
 8006a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2a:	bc08      	pop	{r3}
 8006a2c:	469e      	mov	lr, r3
 8006a2e:	4770      	bx	lr
